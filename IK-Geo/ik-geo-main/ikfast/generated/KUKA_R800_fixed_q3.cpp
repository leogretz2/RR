/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-03-04 23:25:34.779302
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
eerot[0]=((((((((((((-0.433012600946063)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.18749981760045)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((-0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((-0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324760019937513)*(IKsin(j[0]))))+(((0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.249999825156209)*(((((-0.062500007555663)*(IKsin(j[0]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.108253239032932)*(IKsin(j[0]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.249999825156209)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.433012600946063)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468750165943756)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0811897836960832)*(IKsin(j[0]))))+(((1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.433012600946063)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-5.85938188054678e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468749216169336)*(IKsin(j[0]))))+(((0.433012600946063)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.750000174843791)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.243569578216881)*(IKsin(j[0]))))+(((-3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.750000174843791)*(((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.081189948201915)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.140624895983516)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.140625180916438)*(IKsin(j[0]))))+(((-0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.249999825156209)*(((((-0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.324760019937513)*(IKsin(j[0]))))+(((-0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.10825301969162)*(IKsin(j[0]))))+(((1.35316659786458e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0625000075555165)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.243569578216881)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((0.750000174843791)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.243569578216881)*(IKsin(j[0]))))+(((-3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-5.27345352747834e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071734837)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.421875081349062)*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.081189948201915)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.081189948201915)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468750165943756)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0811897836960832)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.140624895983516)*(IKsin(j[0]))))+(((0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.243569578216881)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324759361912964)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.108253239032932)*(IKsin(j[0]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.062500007555663)*(IKsin(j[0]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((((((-0.324759361912964)*(IKsin(j[0]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324760019937513)*(IKsin(j[0]))))+(((0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((-0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324759361912964)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.108253239032932)*(IKsin(j[0]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.062500007555663)*(IKsin(j[0]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.249999825156209)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0270632359955366)*(IKsin(j[0]))))+(((0.249999825156209)*(((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0156249909611409)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-3.38291412873368e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.249999825156209)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.249999825156209)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((5.85938188054677e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468749216169336)*(IKsin(j[0]))))+(((0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.249999825156209)*(((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-5.85938188054677e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468749216169336)*(IKsin(j[0]))))+(((0.249999825156209)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((0.0468750165944855)*(IKsin(j[0]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0811897836960832)*(IKsin(j[0]))))+(((-0.0468750165943756)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.243569578216881)*(IKsin(j[0]))))+(((-3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140624895983516)*(IKsin(j[0]))))+(((0.081189948201915)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.433012600946063)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.249999825156209)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.140624895983516)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((-0.249999825156209)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((5.85938188054677e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468749216169336)*(IKsin(j[0]))))+(((-0.249999825156209)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.249999825156209)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811897836960832)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.750000174843791)*(((((-0.062500007555663)*(IKsin(j[0]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324760019936752)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.562499977332579)*(IKsin(j[0]))))+(((-7.03126973080598e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.108253239032932)*(IKsin(j[0]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.324760019937513)*(IKsin(j[0]))))+(((-0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((((((0.433012600946063)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468750165943756)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0811897836960832)*(IKsin(j[0]))))+(((1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.433012600946063)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-5.85938188054678e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468749216169336)*(IKsin(j[0]))))+(((0.433012600946063)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5])))));
eerot[1]=((((((((((((-0.10825301969162)*(IKsin(j[0]))))+(((-1.35316659786458e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.324760019937513)*(IKsin(j[0]))))+(((-0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0625000075555165)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.249999825156209)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.18749981760045)*(IKsin(j[0]))))+(((0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.249999825156209)*(((((-0.062500007555663)*(IKsin(j[0]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.108253239032932)*(IKsin(j[0]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-1.0)*(((((-5.27345352747834e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071734837)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.421875081349062)*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.243569578216881)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.750000174843791)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.243569578216881)*(IKsin(j[0]))))+(((-3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.081189948201915)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.433012600946063)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.108253239032932)*(IKsin(j[0]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.062500007555663)*(IKsin(j[0]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324759361912964)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((-1.0)*(((((0.433012600946063)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-5.85938188054678e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468749216169336)*(IKsin(j[0]))))+(((0.433012600946063)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.433012600946063)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.433012600946063)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.433012600946063)*(((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468750165943756)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0811897836960832)*(IKsin(j[0]))))+(((1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-1.0)*(((((0.140625180916438)*(IKsin(j[0]))))+(((-0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.750000174843791)*(((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.081189948201915)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.140624895983516)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.750000174843791)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.243569578216881)*(IKsin(j[0]))))+(((-3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((-0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324760019937513)*(IKsin(j[0]))))+(((0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.243569578216881)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.140624895983516)*(IKsin(j[0]))))+(((0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.081189948201915)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468750165943756)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0811897836960832)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((((((-0.324759361912964)*(IKsin(j[0]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324760019937513)*(IKsin(j[0]))))+(((0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((-0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324759361912964)*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.108253239032932)*(IKsin(j[0]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.062500007555663)*(IKsin(j[0]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.249999825156209)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0270632359955366)*(IKsin(j[0]))))+(((0.249999825156209)*(((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0156249909611409)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-3.38291412873368e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.249999825156209)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.249999825156209)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((5.85938188054677e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468749216169336)*(IKsin(j[0]))))+(((0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.249999825156209)*(((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-5.85938188054677e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468749216169336)*(IKsin(j[0]))))+(((0.249999825156209)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((0.0468750165944855)*(IKsin(j[0]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0811897836960832)*(IKsin(j[0]))))+(((-0.0468750165943756)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.140625180916108)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.243569578216881)*(IKsin(j[0]))))+(((-3.04462839408962e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140624895983516)*(IKsin(j[0]))))+(((0.081189948201915)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.433012600946063)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.249999825156209)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.140624895983516)*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((-0.249999825156209)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((5.85938188054677e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468749216169336)*(IKsin(j[0]))))+(((-0.249999825156209)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((((((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.249999825156209)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811897836960832)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.750000174843791)*(((((-0.062500007555663)*(IKsin(j[0]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.324760019936752)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.562499977332579)*(IKsin(j[0]))))+(((-7.03126973080598e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.108253239032932)*(IKsin(j[0]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.324760019937513)*(IKsin(j[0]))))+(((-0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((((((0.433012600946063)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0811899482019151)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140624895983516)*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468750165943757)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811897836960832)*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0468750165943756)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0811897836960832)*(IKsin(j[0]))))+(((1.01487518499121e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.433012600946063)*(((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-5.85938188054678e-8)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0270632908307628)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468749216169336)*(IKsin(j[0]))))+(((0.433012600946063)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))))*(IKcos(j[5])))));
eerot[2]=((((((((0.499999825156179)*(((((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324759361912964)*(IKsin(j[0]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.324759361912964)*(IKsin(j[0]))))+(((((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((-0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.062500007555663)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((-0.108253239032932)*(IKsin(j[0]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((-0.324760019936752)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.562499977332579)*(IKsin(j[0]))))+(((-7.03126973080598e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.866025504730542)*(((((-0.108253239032932)*(IKsin(j[0]))))+(((0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((-0.324759361912964)*(IKsin(j[0]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((-1.0)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.18749981760045)*(IKsin(j[0]))))+(((-1.0)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((0.108253239032932)*(IKsin(j[0]))))+(((-0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((-1.0)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324759361912964)*(IKsin(j[0]))))+(((-1.0)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.062500007555663)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((-1.0)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.324760019936752)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.562499977332579)*(IKsin(j[0]))))+(((7.03126973080598e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.866025504730542)*(((((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324759361912964)*(IKsin(j[0]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.10825301969162)*(IKsin(j[0]))))+(((-0.0625000075555165)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.35316659786458e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((-0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((-0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.18749981760045)*(IKsin(j[0]))))+(((((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((-0.108253239032932)*(IKsin(j[0]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.324760019937513)*(IKsin(j[0]))))+(((-0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((0.499999825156179)*(((((-0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((-0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.18749981760045)*(IKsin(j[0]))))+(((((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((-0.108253239032932)*(IKsin(j[0]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.10825301969162)*(IKsin(j[0]))))+(((-0.0625000075555165)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.35316659786458e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324759361912964)*(IKsin(j[0]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.324760019937513)*(IKsin(j[0]))))+(((-0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4])))));
eetrans[0]=((((((((0.0499998410131532)*(IKsin(j[0]))))+(((-0.173204595624651)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0866017549117824)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0629999779696785)*(((((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((-0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.062500007555663)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((-0.108253239032932)*(IKsin(j[0]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.324759361912964)*(IKsin(j[0]))))+(((((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324759361912964)*(IKsin(j[0]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((-0.324760019936752)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.562499977332579)*(IKsin(j[0]))))+(((-7.03126973080598e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((-0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((0.4)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.149999575492106)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0999992402725848)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0866023053834818)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.109119213596048)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.18749981760045)*(IKsin(j[0]))))+(((((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.324760019937513)*(IKsin(j[0]))))+(((-0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((-0.108253239032932)*(IKsin(j[0]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.10825301969162)*(IKsin(j[0]))))+(((-0.0625000075555165)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.35316659786458e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((-0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((-0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324759361912964)*(IKsin(j[0]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.149999438330145)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.300000757332954)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0866027261942833)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.109119213596048)*(((((-1.0)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.324759361912964)*(IKsin(j[0]))))+(((-1.0)*(((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((-1.0)*(((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.324760019936752)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.562499977332579)*(IKsin(j[0]))))+(((7.03126973080598e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((-0.108253239032932)*(IKsin(j[0]))))+(((0.187500088233013)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.124999462917352)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((-0.324759361912964)*(IKsin(j[0]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(((((-0.281249119394985)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.243570071735408)*(IKsin(j[0]))))+(((0.42187569027304)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.487140100882872)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((0.108252550941036)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.21650645913791)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.062500007555663)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((-1.0)*(((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(((((0.0811899482021053)*(IKsin(j[0]))))+(((-0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.18749981760045)*(IKsin(j[0]))))+(((-1.0)*(((((0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((0.108253239032932)*(IKsin(j[0]))))+(((-0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((0.0629999779696785)*(((((-0.324757955659902)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.187500197510923)*(IKsin(j[0]))))+(((-0.649519983091115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((((((0.0811899482021053)*(IKsin(j[0]))))+(((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.10825301969162)*(IKsin(j[0]))))+(((-0.0625000075555165)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.0468750165944855)*(IKsin(j[0]))))+(((-0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.35316659786458e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((-0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))+(((-0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((0.562500789231026)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.324760019937513)*(IKsin(j[0]))))+(((-0.374998738438378)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.324759361912964)*(IKsin(j[0]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.187500197510484)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((((((0.0312498438739579)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0468749892750272)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0270632908308262)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811899008833934)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0468750165944855)*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0937500249929289)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKsin(j[0]))))+(((0.0468747186420242)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.18749981760045)*(IKsin(j[0]))))+(((((((0.0270631188079727)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0156249909611775)*(IKsin(j[0]))))+(((0.0541265769296675)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((((((0.0937496190433936)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625098957986)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0811899482021053)*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.108253239032678)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.0468750165944855)*(IKsin(j[0]))))+(((0.162379882208243)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((2.34375439138232e-7)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.18749981760045)*(IKsin(j[0]))))+(((((((0.14062428705822)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.0811899482021053)*(IKsin(j[0]))))+(((0.281250337244726)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.24356992977914)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.162379179082694)*(IKcos(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((-0.108253239032932)*(IKsin(j[0]))))+(((0.187499005700245)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.375000362237655)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((0.324759830662533)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.187500197510923)*(IKsin(j[0]))))+(((-0.216505521637398)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((0.150000391780174)*(IKsin(j[0]))))+(((-0.259808269433982)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.173204687244602)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2])))));
eerot[3]=((((((((((((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.081189948201915)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140624895983516)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))+(((3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.243569578216881)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0811897836960832)*(IKcos(j[0]))))+(((0.0468750165943756)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0811897836960832)*(IKcos(j[0]))))+(((0.0468750165943756)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468749216169336)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-5.85938188054678e-8)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((0.249999825156209)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.249999825156209)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.18749981760045)*(IKcos(j[0]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324759361912964)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.243569578216881)*(IKcos(j[0]))))+(((0.750000174843791)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((((((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.243569578216881)*(IKcos(j[0]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.750000174843791)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.421875081349062)*(IKcos(j[0]))))+(((-5.27345352747834e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.243570071734837)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.750000174843791)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.750000174843791)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((-0.081189948201915)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((((((0.750000174843791)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((0.750000174843791)*(((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.243569578216881)*(IKcos(j[0]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.750000174843791)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.081189948201915)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140624895983516)*(IKcos(j[0]))))+(((0.750000174843791)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.140625180916438)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((-0.433012600946063)*(((((-0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.108253239032932)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.18749981760045)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))+(((-0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.324760019937513)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((((((0.249999825156209)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.10825301969162)*(IKcos(j[0]))))+(((1.35316659786458e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324760019937513)*(IKcos(j[0]))))+(((0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.0625000075555165)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((((((((((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0156249909611775)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.249999825156209)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811897836960832)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((-0.249999825156209)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((5.85938188054677e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0468749216169336)*(IKcos(j[0]))))+(((-0.249999825156209)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.249999825156209)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.140624895983516)*(IKcos(j[0]))))+(((-0.249999825156209)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.249999825156209)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.38291412873368e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0156249909611409)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632359955366)*(IKcos(j[0]))))+(((0.249999825156209)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.249999825156209)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((5.85938188054677e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0468749216169336)*(IKcos(j[0]))))+(((0.249999825156209)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0468749216169336)*(IKcos(j[0]))))+(((0.249999825156209)*(((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.85938188054677e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.249999825156209)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.249999825156209)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((0.249999825156209)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.249999825156209)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.433012600946063)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((-0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324760019937513)*(IKcos(j[0]))))+(((0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.18749981760045)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0811897836960832)*(IKcos(j[0]))))+(((0.0468750165943756)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468749216169336)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-5.85938188054678e-8)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324759361912964)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.750000174843791)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.324760019936752)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.562499977332579)*(IKcos(j[0]))))+(((0.750000174843791)*(((((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-7.03126973080598e-7)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.324760019937513)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.108253239032932)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))+(((-0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.433012600946063)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.081189948201915)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140624895983516)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0811897836960832)*(IKcos(j[0]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0468750165943756)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.243569578216881)*(IKcos(j[0]))))+(((0.433012600946063)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5])))));
eerot[4]=((((((((((((-1.0)*(((((-0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140624895983516)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))+(((3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.243569578216881)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.0811897836960832)*(IKcos(j[0]))))+(((0.0468750165943756)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.081189948201915)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.433012600946063)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((0.433012600946063)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.18749981760045)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.324760019937513)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))+(((-0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.108253239032932)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.18749981760045)*(IKcos(j[0]))))+(((0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.249999825156209)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-1.0)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0811897836960832)*(IKcos(j[0]))))+(((0.0468750165943756)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.0468749216169336)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-5.85938188054678e-8)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((0.10825301969162)*(IKcos(j[0]))))+(((-0.249999825156209)*(((((-0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324760019937513)*(IKcos(j[0]))))+(((0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.0625000075555165)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.35316659786458e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-1.0)*(((((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.140625180916438)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.243569578216881)*(IKcos(j[0]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.750000174843791)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.081189948201915)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140624895983516)*(IKcos(j[0]))))+(((0.750000174843791)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.750000174843791)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((0.750000174843791)*(((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-1.0)*(((((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.750000174843791)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.421875081349062)*(IKcos(j[0]))))+(((-5.27345352747834e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.243570071734837)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.750000174843791)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.750000174843791)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((-0.081189948201915)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-1.0)*(((((3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.243569578216881)*(IKcos(j[0]))))+(((0.750000174843791)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.243569578216881)*(IKcos(j[0]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((((((((((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0156249909611775)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.249999825156209)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811897836960832)*(IKcos(j[0]))))))*(IKcos(j[3]))))+(((((((-0.249999825156209)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((5.85938188054677e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0468749216169336)*(IKcos(j[0]))))+(((-0.249999825156209)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.249999825156209)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.140624895983516)*(IKcos(j[0]))))+(((-0.249999825156209)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468750165944855)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((((((0.249999825156209)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.38291412873368e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0156249909611409)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632359955366)*(IKcos(j[0]))))+(((0.249999825156209)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.249999825156209)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((5.85938188054677e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0468749216169336)*(IKcos(j[0]))))+(((0.249999825156209)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0468749216169336)*(IKcos(j[0]))))+(((0.249999825156209)*(((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-5.85938188054677e-8)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.249999825156209)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.249999825156209)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((0.249999825156209)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.249999825156209)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.433012600946063)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((-0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324760019937513)*(IKcos(j[0]))))+(((0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.18749981760045)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0811897836960832)*(IKcos(j[0]))))+(((0.0468750165943756)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468749216169336)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0270632908307628)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-5.85938188054678e-8)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468750165943757)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0811897836960832)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.433012600946063)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.324759361912964)*(IKcos(j[0]))))+(((-0.433012600946063)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.750000174843791)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.324760019936752)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108253239032932)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.562499977332579)*(IKcos(j[0]))))+(((0.750000174843791)*(((((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-7.03126973080598e-7)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))))+(((((((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.750000174843791)*(((((0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.324760019937513)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.108253239032932)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.187500197510923)*(IKcos(j[0]))))+(((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))+(((-0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.433012600946063)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.081189948201915)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140624895983516)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0811899482019151)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.140624895983516)*(IKcos(j[0]))))+(((0.433012600946063)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0811897836960832)*(IKcos(j[0]))))+(((0.433012600946063)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.0468750165943756)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-3.04462839408962e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916108)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.433012600946063)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.243569578216881)*(IKcos(j[0]))))+(((0.433012600946063)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))))*(IKcos(j[5])))));
eerot[5]=((((((((0.499999825156179)*(((((-0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))+(((-0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((-0.18749981760045)*(IKcos(j[0]))))+(((((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((0.18749981760045)*(IKcos(j[0]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((0.10825301969162)*(IKcos(j[0]))))+(((-1.35316659786458e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0625000075555165)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((0.108253239032932)*(IKcos(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((-0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324760019937513)*(IKcos(j[0]))))+(((0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187500197510923)*(IKcos(j[0]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKsin(j[4]))))+(((((((0.499999825156179)*(((((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.18749981760045)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((-0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.062500007555663)*(IKcos(j[0]))))+(((-0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324760019936752)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.562499977332579)*(IKcos(j[0]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-7.03126973080598e-7)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((0.108253239032932)*(IKcos(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((-0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((-0.324759361912964)*(IKcos(j[0]))))+(((((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-0.866025504730542)*(((((0.18749981760045)*(IKcos(j[0]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((0.10825301969162)*(IKcos(j[0]))))+(((-1.35316659786458e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0625000075555165)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187500197510923)*(IKcos(j[0]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((0.108253239032932)*(IKcos(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((-0.18749981760045)*(IKcos(j[0]))))+(((((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((-0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324760019937513)*(IKcos(j[0]))))+(((0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((-0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))+(((-0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[4]))))+(((((((-0.866025504730542)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((-0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((-1.0)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.562499977332579)*(IKcos(j[0]))))+(((-1.0)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324760019936752)*(IKcos(j[1]))*(IKsin(j[0]))))+(((7.03126973080598e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.108253239032932)*(IKcos(j[0]))))+(((-0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((-1.0)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324759361912964)*(IKcos(j[0]))))+(((4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187500197510923)*(IKcos(j[0]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((-0.18749981760045)*(IKcos(j[0]))))+(((-1.0)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((-1.0)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))))*(IKsin(j[4])))));
eetrans[1]=((((((((-0.0866017549117824)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0499998410131532)*(IKcos(j[0]))))+(((-0.173204595624651)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0629999779696785)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((-0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((0.108253239032932)*(IKcos(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((-0.324759361912964)*(IKcos(j[0]))))+(((((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.18749981760045)*(IKcos(j[0]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((-0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.062500007555663)*(IKcos(j[0]))))+(((-0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((-0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.324760019936752)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.562499977332579)*(IKcos(j[0]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-7.03126973080598e-7)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.0866023053834818)*(IKcos(j[0]))))+(((0.0999992402725848)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.149999575492106)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0866027261942833)*(IKcos(j[0]))))+(((0.149999438330145)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.300000757332954)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.150000391780174)*(IKcos(j[0]))))+(((-0.259808269433982)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.173204687244602)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.109119213596048)*(((((0.108252550941036)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.062500007555663)*(IKcos(j[0]))))+(((0.21650645913791)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((0.187500088233013)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.108253239032932)*(IKcos(j[0]))))+(((-0.124999462917352)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((-0.108253239032932)*(IKcos(j[0]))))+(((-0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((-1.0)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.140625180916438)*(IKcos(j[0]))))+(((0.487140100882872)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.243568523526839)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.140625180916438)*(IKcos(j[0]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.243570071735408)*(IKcos(j[0]))))+(((-0.281249119394985)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.42187569027304)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((-0.18749981760045)*(IKcos(j[0]))))+(((-1.0)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.140625180916438)*(IKcos(j[0]))))+(((0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((-0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((-1.0)*(((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.324759361912964)*(IKcos(j[0]))))+(((4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187500197510923)*(IKcos(j[0]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((-1.0)*(((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.562499977332579)*(IKcos(j[0]))))+(((-1.0)*(((((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.324760019936752)*(IKcos(j[1]))*(IKsin(j[0]))))+(((7.03126973080598e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(((((0.0811899482021053)*(IKcos(j[0]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((0.0629999779696785)*(((((-0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324760019937513)*(IKcos(j[0]))))+(((0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((0.10825301969162)*(IKcos(j[0]))))+(((-1.35316659786458e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0625000075555165)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187500197510923)*(IKcos(j[0]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((0.18749981760045)*(IKcos(j[0]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((0.108253239032932)*(IKcos(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((-0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))+(((-0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((-0.18749981760045)*(IKcos(j[0]))))+(((((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.109119213596048)*(((((-0.187500197510484)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324759361912964)*(IKcos(j[0]))))+(((((((-0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0811899482021053)*(IKcos(j[0]))))+(((0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((0.108253239032932)*(IKcos(j[0]))))+(((0.375000362237655)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187499005700245)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((-0.374998738438378)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.324760019937513)*(IKcos(j[0]))))+(((0.562500789231026)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((0.10825301969162)*(IKcos(j[0]))))+(((-1.35316659786458e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0811899482021053)*(IKcos(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468750165944855)*(IKcos(j[0]))))+(((-0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKcos(j[2]))))+(((-0.0625000075555165)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((-0.18749981760045)*(IKcos(j[0]))))+(((((((-0.0811899482021053)*(IKcos(j[0]))))+(((-0.140625098957986)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0937496190433936)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.140625180916438)*(IKcos(j[0]))))+(((0.24356992977914)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.162379179082694)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.0811894321330635)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((0.162379882208243)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((0.0811899482021053)*(IKcos(j[0]))))+(((0.281250337244726)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.14062428705822)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((-0.216505521637398)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.187500197510923)*(IKcos(j[0]))))+(((0.324759830662533)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((-0.649519983091115)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.187500197510923)*(IKcos(j[0]))))+(((-0.324757955659902)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((0.18749981760045)*(IKcos(j[0]))))+(((((((0.0811899008833934)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0468750165944855)*(IKcos(j[0]))))+(((-0.0541263425547033)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-2.34375439138232e-7)*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((0.0156249909611775)*(IKcos(j[0]))))+(((0.0270631188079727)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0541265769296675)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((-0.0468749892750272)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0312498438739579)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0270632908308262)*(IKcos(j[0]))))))*(IKsin(j[2]))))+(((((((0.0270632908308262)*(IKcos(j[0]))))+(((0.0937500249929289)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.0468747186420242)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.4)*(IKsin(j[0]))*(IKsin(j[1])))));
eerot[6]=((((((((((((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((1.75781620332764e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0811899482019151)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.433012600946063)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.081189948201915)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.140625098957986)*(IKsin(j[1]))))+(((-0.0937496190433936)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((3.04462839408962e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.140625180916108)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.433012600946063)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0468750165943756)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.433012600946063)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.187500197510484)*(IKsin(j[1]))))+(((4.05950357908083e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.750000174843791)*(((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKsin(j[1]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.487140100882872)*(IKcos(j[1]))))+(((0.243568523526839)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((1.75781620332764e-7)*(IKcos(j[1]))))+(((-0.081189948201915)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.14062428705822)*(IKsin(j[1]))))+(((0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0468750165943757)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.750000174843791)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.140625180916108)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.04462839408962e-7)*(IKcos(j[1]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((0.108253239032678)*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((0.249999825156209)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.750000174843791)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.081189948201915)*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.750000174843791)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.140625180916108)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.04462839408962e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.243570071734837)*(IKsin(j[1]))))+(((-5.27345352747834e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.14062428705822)*(IKsin(j[1]))))+(((0.281250337244726)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.140625098957986)*(IKsin(j[1]))))+(((0.0937496190433936)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.750000174843791)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((3.04462839408962e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.140625180916108)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0468750165943757)*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKsin(j[1]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.140625098957986)*(IKsin(j[1]))))+(((-0.0937496190433936)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0270632908307628)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-5.85938188054678e-8)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0468750165943756)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((0.249999825156209)*(((((-0.374998738438378)*(IKcos(j[1]))))+(((-0.562500789231026)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.324757955659902)*(IKsin(j[1]))))+(((0.649519983091115)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.324759830662533)*(IKsin(j[1]))))+(((0.216505521637398)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0625000075555165)*(IKsin(j[1]))))+(((1.35316659786458e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((2.34375439138232e-7)*(IKcos(j[1]))))+(((-0.108253239032678)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((0.187499005700245)*(IKsin(j[1]))))+(((-0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.324757955659902)*(IKsin(j[1]))))+(((-0.649519983091115)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.374998738438378)*(IKcos(j[1]))))+(((0.562500789231026)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((((((((((-0.0541263425547033)*(IKcos(j[1]))))+(((-0.0811899008833934)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.249999825156209)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.249999825156209)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0468750165943757)*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((5.85938188054677e-8)*(IKcos(j[1]))))+(((0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0270632908307628)*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.249999825156209)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-5.85938188054677e-8)*(IKcos(j[1]))))+(((0.249999825156209)*(((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0270632908307628)*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-3.38291412873368e-8)*(IKcos(j[1]))))+(((0.0156249909611409)*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.187500197510484)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.187499005700245)*(IKsin(j[1]))))+(((-0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.374998738438378)*(IKcos(j[1]))))+(((0.562500789231026)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.324757955659902)*(IKsin(j[1]))))+(((-0.649519983091115)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.433012600946063)*(((((-0.374998738438378)*(IKcos(j[1]))))+(((-0.562500789231026)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.324759830662533)*(IKsin(j[1]))))+(((0.216505521637398)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.108253239032678)*(IKsin(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((-0.324757955659902)*(IKsin(j[1]))))+(((0.649519983091115)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.324760019936752)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-7.03126973080598e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.433012600946063)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.187500197510484)*(IKsin(j[1]))))+(((4.05950357908083e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.140625098957986)*(IKsin(j[1]))))+(((0.0937496190433936)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((1.75781620332764e-7)*(IKcos(j[1]))))+(((-0.081189948201915)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKsin(j[1]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468747186420242)*(IKsin(j[1]))))+(((-0.0937500249929289)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.0468750165943756)*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.140625180916108)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.04462839408962e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0468750165943757)*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKsin(j[1]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.140625098957986)*(IKsin(j[1]))))+(((-0.0937496190433936)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0270632908307628)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-5.85938188054678e-8)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0468750165943756)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((((((1.75781620332764e-7)*(IKcos(j[1]))))+(((-0.0811899482019151)*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0541265769296675)*(IKcos(j[1]))))+(((-0.0270631188079727)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[1]))))+(((-0.0811899008833934)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((5.85938188054677e-8)*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0270632908307628)*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((1.01487518499121e-7)*(IKcos(j[1]))))+(((-0.249999825156209)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0468750165943757)*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0468749892750272)*(IKsin(j[1]))))+(((-0.0312498438739579)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0468750165943757)*(IKsin(j[1]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[5])))));
eerot[7]=((((((((((((((((-0.0541263425547033)*(IKcos(j[1]))))+(((-0.0811899008833934)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.249999825156209)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.249999825156209)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0468750165943757)*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((5.85938188054677e-8)*(IKcos(j[1]))))+(((0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.0270632908307628)*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.249999825156209)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-5.85938188054677e-8)*(IKcos(j[1]))))+(((0.249999825156209)*(((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0270632908307628)*(IKsin(j[1]))))+(((0.249999825156209)*(((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-3.38291412873368e-8)*(IKcos(j[1]))))+(((0.0156249909611409)*(IKsin(j[1]))))+(((0.249999825156209)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.249999825156209)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.187500197510484)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.187499005700245)*(IKsin(j[1]))))+(((-0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.374998738438378)*(IKcos(j[1]))))+(((0.562500789231026)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.324757955659902)*(IKsin(j[1]))))+(((-0.649519983091115)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((-0.433012600946063)*(((((-0.374998738438378)*(IKcos(j[1]))))+(((-0.562500789231026)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.324759830662533)*(IKsin(j[1]))))+(((0.216505521637398)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.108253239032678)*(IKsin(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((-0.324757955659902)*(IKsin(j[1]))))+(((0.649519983091115)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((0.324760019936752)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-7.03126973080598e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((((((-0.433012600946063)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.187500197510484)*(IKsin(j[1]))))+(((4.05950357908083e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.140625098957986)*(IKsin(j[1]))))+(((0.0937496190433936)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((1.75781620332764e-7)*(IKcos(j[1]))))+(((-0.081189948201915)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKsin(j[1]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.0468747186420242)*(IKsin(j[1]))))+(((-0.0937500249929289)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.0468750165943756)*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.140625180916108)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-3.04462839408962e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0468750165943757)*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKsin(j[1]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-0.140625098957986)*(IKsin(j[1]))))+(((-0.0937496190433936)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0270632908307628)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-5.85938188054678e-8)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0468750165943756)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((((((1.75781620332764e-7)*(IKcos(j[1]))))+(((-0.0811899482019151)*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((0.0541265769296675)*(IKcos(j[1]))))+(((-0.0270631188079727)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0541263425547033)*(IKcos(j[1]))))+(((-0.0811899008833934)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((5.85938188054677e-8)*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0270632908307628)*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((1.01487518499121e-7)*(IKcos(j[1]))))+(((-0.249999825156209)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0468750165943757)*(IKsin(j[1]))))+(((-0.249999825156209)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-0.0468749892750272)*(IKsin(j[1]))))+(((-0.0312498438739579)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0468750165943757)*(IKsin(j[1]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((-0.249999825156209)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((((((0.433012600946063)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.187500197510484)*(IKsin(j[1]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-1.0)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.14062428705822)*(IKsin(j[1]))))+(((0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.487140100882872)*(IKcos(j[1]))))+(((0.243568523526839)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.750000174843791)*(((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKsin(j[1]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.750000174843791)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.140625180916108)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.04462839408962e-7)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((1.75781620332764e-7)*(IKcos(j[1]))))+(((-0.081189948201915)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.0468750165943757)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-1.35316659786458e-7)*(IKcos(j[1]))))+(((-0.249999825156209)*(((((-0.324757955659902)*(IKsin(j[1]))))+(((0.649519983091115)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0625000075555165)*(IKsin(j[1]))))+(((-0.249999825156209)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.249999825156209)*(((((0.324759830662533)*(IKsin(j[1]))))+(((0.216505521637398)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.374998738438378)*(IKcos(j[1]))))+(((-0.562500789231026)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((((((-1.0)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.433012600946063)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.081189948201915)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.140625098957986)*(IKsin(j[1]))))+(((-0.0937496190433936)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((3.04462839408962e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.140625180916108)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.433012600946063)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0468750165943756)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((1.75781620332764e-7)*(IKcos(j[1]))))+(((-0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.0811899482019151)*(IKsin(j[1]))))+(((-0.433012600946063)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.433012600946063)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.249999825156209)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.249999825156209)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKsin(j[1]))))+(((2.34375439138232e-7)*(IKcos(j[1]))))+(((-0.249999825156209)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((((((-1.0)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.750000174843791)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((3.04462839408962e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.140625180916108)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.750000174843791)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.243570071734837)*(IKsin(j[1]))))+(((-5.27345352747834e-7)*(IKcos(j[1]))))+(((0.750000174843791)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((-0.14062428705822)*(IKsin(j[1]))))+(((0.281250337244726)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.140625098957986)*(IKsin(j[1]))))+(((0.0937496190433936)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.750000174843791)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.140625180916108)*(IKsin(j[1]))))+(((0.750000174843791)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-3.04462839408962e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((0.750000174843791)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.750000174843791)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.081189948201915)*(IKsin(j[1]))))+(((0.750000174843791)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.750000174843791)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-1.0)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0811899482019151)*(IKsin(j[1]))))+(((-1.75781620332764e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.433012600946063)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.0468750165943756)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((1.01487518499121e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((-1.0)*(((((-0.140625098957986)*(IKsin(j[1]))))+(((-0.0937496190433936)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0270632908307628)*(IKsin(j[1]))))+(((0.433012600946063)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.433012600946063)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-5.85938188054678e-8)*(IKcos(j[1]))))+(((0.433012600946063)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-1.0)*(((((0.0468750165943757)*(IKsin(j[1]))))+(((0.433012600946063)*(((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.01487518499121e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((0.433012600946063)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.324757955659902)*(IKsin(j[1]))))+(((-0.649519983091115)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.433012600946063)*(((((0.374998738438378)*(IKcos(j[1]))))+(((0.562500789231026)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.108253239032678)*(IKsin(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((0.433012600946063)*(((((0.187499005700245)*(IKsin(j[1]))))+(((-0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[5])))));
eerot[8]=((((((((0.499999825156179)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((0.187500197510484)*(IKsin(j[1]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((0.108252550941036)*(IKsin(j[1]))))+(((-0.21650645913791)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((0.216505521637398)*(IKcos(j[1]))))+(((0.324759830662533)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((0.108253239032678)*(IKsin(j[1]))))+(((((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.187500197510484)*(IKsin(j[1]))))+(((((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((0.324760019936752)*(IKsin(j[1]))))+(((-7.03126973080598e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.866025504730542)*(((((-1.0)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.108253239032678)*(IKsin(j[1]))))+(((2.34375439138232e-7)*(IKcos(j[1]))))+(((-1.0)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((0.187500197510484)*(IKsin(j[1]))))+(((-1.0)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((-1.0)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((-0.187500088233013)*(IKsin(j[1]))))+(((-0.124999462917352)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((-0.324760019936752)*(IKsin(j[1]))))+(((7.03126973080598e-7)*(IKcos(j[1]))))+(((-1.0)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((-1.0)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.187500197510484)*(IKsin(j[1]))))+(((-1.0)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[1]))))+(((-1.0)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((0.187499005700245)*(IKsin(j[1]))))+(((-0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((-0.866025504730542)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((0.0625000075555165)*(IKsin(j[1]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.35316659786458e-7)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKsin(j[1]))))+(((2.34375439138232e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((0.108253239032678)*(IKsin(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.866025504730542)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.866025504730542)*(((((0.324757955659902)*(IKsin(j[1]))))+(((-0.649519983091115)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.866025504730542)*(((((0.187500197510484)*(IKsin(j[1]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.866025504730542)*(((((-0.374998738438378)*(IKcos(j[1]))))+(((-0.562500789231026)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((((((0.499999825156179)*(((((0.187500197510484)*(IKsin(j[1]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((0.324757955659902)*(IKsin(j[1]))))+(((-0.649519983091115)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.499999825156179)*(((((0.108253239032678)*(IKsin(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.499999825156179)*(((((0.0625000075555165)*(IKsin(j[1]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.35316659786458e-7)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.499999825156179)*(((((-0.374998738438378)*(IKcos(j[1]))))+(((-0.562500789231026)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.499999825156179)*(((((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKsin(j[1]))))+(((2.34375439138232e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4])))));
eetrans[2]=((0.34)+(((((((0.149999575492106)*(IKsin(j[1]))))+(((0.0999992402725848)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0629999779696785)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((0.108252550941036)*(IKsin(j[1]))))+(((-0.21650645913791)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((0.324760019936752)*(IKsin(j[1]))))+(((-7.03126973080598e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.187500197510484)*(IKsin(j[1]))))+(((((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[1]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((0.124999462917352)*(IKcos(j[1]))))+(((0.187500088233013)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((0.187500197510484)*(IKsin(j[1]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((0.216505521637398)*(IKcos(j[1]))))+(((0.324759830662533)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((0.108253239032678)*(IKsin(j[1]))))+(((((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((-0.173204595624651)*(IKcos(j[1]))))+(((0.0866017549117824)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.109119213596048)*(((((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKsin(j[1]))))+(((2.34375439138232e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((0.0625000075555165)*(IKsin(j[1]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.35316659786458e-7)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((0.324757955659902)*(IKsin(j[1]))))+(((-0.649519983091115)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((-0.374998738438378)*(IKcos(j[1]))))+(((-0.562500789231026)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((0.108253239032678)*(IKsin(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((0.187500197510484)*(IKsin(j[1]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))))*(IKcos(j[4]))))+(((((((0.0629999779696785)*(((((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.108253239032678)*(IKsin(j[1]))))+(((2.34375439138232e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((0.0625000075555165)*(IKsin(j[1]))))+(((((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0937500249929289)*(IKcos(j[1]))))+(((0.0468747186420242)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.35316659786458e-7)*(IKcos(j[1]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((0.324757955659902)*(IKsin(j[1]))))+(((-0.649519983091115)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((-0.187499005700245)*(IKsin(j[1]))))+(((0.375000362237655)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((0.0629999779696785)*(((((0.187500197510484)*(IKsin(j[1]))))+(((((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.0629999779696785)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.0629999779696785)*(((((0.108253239032678)*(IKsin(j[1]))))+(((-2.34375439138232e-7)*(IKcos(j[1]))))+(((((((0.0937500249929289)*(IKcos(j[1]))))+(((-0.0468747186420242)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((0.0312498438739579)*(IKcos(j[1]))))+(((0.0468749892750272)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.0270631188079727)*(IKsin(j[1]))))+(((0.0541265769296675)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((((((-0.0811899008833934)*(IKsin(j[1]))))+(((-0.0541263425547033)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((0.0629999779696785)*(((((-0.374998738438378)*(IKcos(j[1]))))+(((-0.562500789231026)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((0.173204687244602)*(IKcos(j[1]))))+(((0.259808269433982)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((((((-0.109119213596048)*(((((-0.324760019936752)*(IKsin(j[1]))))+(((7.03126973080598e-7)*(IKcos(j[1]))))+(((-1.0)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.162379179082694)*(IKcos(j[1]))))+(((-0.24356992977914)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.0937496190433936)*(IKcos(j[1]))))+(((0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((-1.0)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-0.187500197510484)*(IKsin(j[1]))))+(((-1.0)*(((((0.0811899008833934)*(IKsin(j[1]))))+(((0.0541263425547033)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.0811894321330635)*(IKsin(j[1]))))+(((0.162379882208243)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((4.05950357908083e-7)*(IKcos(j[1]))))+(((-1.0)*(((((-0.0468747186420242)*(IKsin(j[1]))))+(((0.0937500249929289)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))+(((-0.109119213596048)*(((((0.21650645913791)*(IKcos(j[1]))))+(((-0.108252550941036)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((-0.216505521637398)*(IKcos(j[1]))))+(((-0.324759830662533)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-0.109119213596048)*(((((-1.0)*(((((0.14062428705822)*(IKsin(j[1]))))+(((-0.281250337244726)*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((-0.108253239032678)*(IKsin(j[1]))))+(((2.34375439138232e-7)*(IKcos(j[1]))))+(((-1.0)*(((((0.24356992977914)*(IKsin(j[1]))))+(((0.162379179082694)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((-0.0937496190433936)*(IKcos(j[1]))))+(((-0.140625098957986)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((-0.162379882208243)*(IKcos(j[1]))))+(((0.0811894321330635)*(IKsin(j[1]))))))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((-0.109119213596048)*(((((-0.187500088233013)*(IKsin(j[1]))))+(((-0.124999462917352)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((0.187499005700245)*(IKsin(j[1]))))+(((-0.375000362237655)*(IKcos(j[1]))))))*(IKcos(j[2]))))+(((-0.109119213596048)*(((((0.187500197510484)*(IKsin(j[1]))))+(((-1.0)*(((((0.487140100882872)*(IKcos(j[1]))))+(((-0.243568523526839)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-1.0)*(((((0.281250337244726)*(IKcos(j[1]))))+(((-0.14062428705822)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((-1.0)*(((((0.162379179082694)*(IKcos(j[1]))))+(((0.24356992977914)*(IKsin(j[1]))))))*(IKsin(j[2]))))+(((-4.05950357908083e-7)*(IKcos(j[1]))))+(((-1.0)*(((((-0.42187569027304)*(IKsin(j[1]))))+(((-0.281249119394985)*(IKcos(j[1]))))))*(IKcos(j[2]))))))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((0.300000757332954)*(IKcos(j[1]))))+(((-0.149999438330145)*(IKsin(j[1]))))))*(IKcos(j[2]))))+(((0.4)*(IKcos(j[1])))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.126)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.126)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.34)+(((-0.126)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x0=((1.0)*px);
IkReal x1=((1.0)*pz);
IkReal x2=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x2))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x1)));
rxp0_2=((((-1.0)*r10*x0))+((py*r00)));
rxp1_0=((((-1.0)*r21*x2))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x1)));
rxp1_2=((((-1.0)*r11*x0))+((py*r01)));
rxp2_0=((((-1.0)*r22*x2))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x1)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x0)));
{
IkReal verifyeval[1];
verifyeval[0]=((1.0)+(((-6.25000007481928)*pp)));
if( IKabs(verifyeval[0]) < 0.0000010000000000  )
{
{
IkReal j3array[4], cj3array[4], sj3array[4];
bool j3valid[4]={false};
_nj3 = 4;
if((((-0.159999998083918)+pp)) < -0.00001)
continue;
IkReal x3=IKsqrt(((-0.159999998083918)+pp));
cj3array[0]=((1188183.81846599)*x3);
cj3array[2]=((-1188183.81846599)*x3);
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
if( cj3array[2] >= -1-IKFAST_SINCOS_THRESH && cj3array[2] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[2] = j3valid[3] = true;
    j3array[2] = IKacos(cj3array[2]);
    sj3array[2] = IKsin(j3array[2]);
    cj3array[3] = cj3array[2];
    j3array[3] = -j3array[2];
    sj3array[3] = -sj3array[2];
}
else if( isnan(cj3array[2]) )
{
    // probably any value will work
    j3valid[2] = true;
    cj3array[2] = 1; sj3array[2] = 0; j3array[2] = 0;
}
for(int ij3 = 0; ij3 < 4; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 4; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j5eval[1];
j5eval[0]=((npx*npx)+(npy*npy));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x5 = IKatan2WithCheck(IkReal(((((0.866025504730542)*npy))+(((-0.499999825156179)*npx)))),IkReal(((((0.499999825156179)*npy))+(((0.866025504730542)*npx)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5.valid){
continue;
}
IkReal x4=x5.value;
j5array[0]=((-1.0)*x4);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x4)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
IkReal x6=cj3*cj3;
IkReal x7=(cj3*cj5);
IkReal x8=(npx*sj5);
IkReal x9=(npy*sj5);
j4eval[0]=((-225884923129.22)+(((-1.0)*x6)));
j4eval[1]=IKsign(((-0.159999998083918)+(((-7.0832526521652e-13)*x6))));
j4eval[2]=((IKabs(((((-4.20810162018285e-7)*cj3*x8))+(((-7.2886492079031e-7)*npx*x7))+(((7.2886492079031e-7)*cj3*x9))+(((-0.399999997604898)*npz))+(((-4.20810162018285e-7)*npy*x7)))))+(IKabs(((((0.199999928864921)*x8))+(((-0.346410199817997)*x9))+(((0.346410199817997)*cj5*npx))+(((-8.41620618340901e-7)*cj3*npz))+(((0.199999928864921)*cj5*npy))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10=(cj5*npy);
IkReal x11=(cj5*npx);
IkReal x12=((1.89808299435661e+15)*cj3);
IkReal x13=(npy*sj5);
IkReal x14=((1.73205161513813)*cj3);
IkReal x15=((1.09585821679179e+15)*cj3);
IkReal x16=(npx*sj5);
IkReal x17=(cj3*npz);
j4eval[0]=((((1.15470040378446)*x17))+((x11*x14))+(((274399.169393501)*x10))+(((274399.169393501)*x16))+((cj3*x16))+((cj3*x10))+(((-1.0)*x13*x14))+(((-475273.524540575)*x13))+(((-950547.381475822)*npz))+(((475273.524540575)*x11)));
j4eval[1]=IKsign(((((3.0070258446071e+20)*x10))+(((3.0070258446071e+20)*x16))+(((5.20832397091383e+20)*x11))+(((-5.20832397091383e+20)*x13))+((x11*x12))+(((-1.0416651584402e+21)*npz))+((x10*x15))+((x15*x16))+(((-1.0)*x12*x13))+(((1.26538792542e+15)*x17))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x18=(npy*sj5);
IkReal x19=(cj3*npz);
IkReal x20=(cj5*npx);
IkReal x21=((1.09585821679179e+15)*cj3);
IkReal x22=(npx*sj5);
IkReal x23=((632693741464740.0)*cj3);
IkReal x24=(cj5*npy);
IkReal x25=((1.73205161513813)*cj3);
j4eval[0]=((((-823198.275812895)*x24))+(((-823198.275812895)*x22))+(((-1.0)*x18*x25))+(((1425821.90320065)*x18))+(((-3.46410444163078)*x19))+((cj3*x24))+((cj3*x22))+((x20*x25))+(((-1425821.90320065)*x20))+(((-950547.381475822)*npz)));
j4eval[1]=IKsign((((x22*x23))+(((-6.01405379225449e+20)*npz))+(((-5.20832397091383e+20)*x22))+(((-5.20832397091383e+20)*x24))+((x23*x24))+(((-1.0)*x18*x21))+(((-9.02108594598394e+20)*x20))+(((9.02108594598394e+20)*x18))+(((-2.1917172e+15)*x19))+((x20*x21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x26=cj5*cj5;
IkReal x27=npx*npx;
IkReal x28=npy*npy;
IkReal x29=(cj5*npx);
IkReal x30=(npy*sj5);
IkReal x31=(cj5*npy);
IkReal x32=((7.51756465653109e+20)*npz);
IkReal x33=(npx*sj5);
IkReal x34=((1.09585821679179e+15)*cj3);
IkReal x35=((2.2552715e+21)*npz);
IkReal x36=(npx*npy);
IkReal x37=((632693741464740.0)*cj3);
IkReal x38=((1.302081000525e+21)*npz);
IkReal x39=((1.30208054520336e+21)*cj5*sj5);
IkReal x40=((7.51757254293132e+20)*x26);
CheckValue<IkReal> x41=IKPowWithIntegerCheck(IKsign((((x29*x34))+(((-1.0)*x30*x34))+(((-6.01405379225449e+20)*npz))+(((-9.02108594598394e+20)*x29))+(((-2.1917172e+15)*cj3*npz))+(((-5.20832397091383e+20)*x31))+(((-5.20832397091383e+20)*x33))+((x31*x37))+(((9.02108594598394e+20)*x30))+((x33*x37)))),-1);
if(!x41.valid){
continue;
}
CheckValue<IkReal> x42 = IKatan2WithCheck(IkReal(((4.16666060881185e+20)+((x29*x38))+(((-1.0)*x30*x38))+(((-506155167137267.0)*cj3))+(((-2.60416291169359e+21)*(npz*npz)))+((x32*x33))+((x31*x32)))),IkReal(((-2.40562150249752e+20)+(((3.75878101386581e+20)*x27))+((x27*x39))+(((-1.0)*x29*x35))+((x27*x40))+(((-1.0)*x28*x40))+(((-1.0)*x28*x39))+(((-1.0)*x31*x38))+(((2.60416109040673e+21)*x26*x36))+(((1.12763535567971e+21)*x28))+(((-1.0)*x33*x38))+(((-1.30208054520336e+21)*x36))+((x30*x35))+(((-1.50351450858626e+21)*x29*x30))+(((-876686874750613.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x42.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x41.value)))+(x42.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x43=IKsin(j4);
IkReal x44=IKcos(j4);
IkReal x45=(cj5*npx);
IkReal x46=((4.20810162018285e-7)*cj3);
IkReal x47=(npy*sj5);
IkReal x48=(cj5*npy);
IkReal x49=(npx*sj5);
IkReal x50=((7.2886492079031e-7)*cj3);
IkReal x51=((0.499999825156179)*npz);
IkReal x52=((0.433012600946063)*x49);
IkReal x53=((0.433012600946063)*x48);
IkReal x54=((0.433012600946063)*x47);
IkReal x55=((0.433012600946063)*x45);
IkReal x56=((0.433012600946063)*x44);
IkReal x57=((0.750000174843791)*x44);
IkReal x58=((0.866025504730542)*x43);
IkReal x59=((0.499999825156179)*x43);
IkReal x60=((0.249999825156209)*x44);
IkReal x61=(x53+x52);
evalcond[0]=((((0.750000174843791)*x45))+(((-0.750000174843791)*x47))+(((-1.0)*x43*x46))+(((0.346410199817997)*x43))+x51+x61+(((-0.199999928864921)*x44))+(((-1.0)*x44*x50)));
evalcond[1]=((((-0.866025504730542)*npz))+(((0.249999825156209)*x48))+(((0.249999825156209)*x49))+(((-1.0)*x44*x46))+(((0.346410199817997)*x44))+x55+((x43*x50))+(((-1.0)*x54))+(((0.199999928864921)*x43)));
evalcond[2]=((-0.399999997604898)+(((-1.0)*x45*x58))+((npz*x44))+(((-1.0)*x48*x59))+(((-1.0)*x49*x59))+((x47*x58)));
evalcond[3]=((((-4.20810162018285e-7)*sj3))+(((0.249999825156209)*x45))+((x44*x53))+((x44*x52))+((npz*x58))+((x45*x57))+(((-1.0)*x47*x57))+(((-0.249999825156209)*x47))+(((-1.0)*x61))+(((-1.0)*x50)));
evalcond[4]=((((7.2886492079031e-7)*sj3))+(((-1.0)*x46))+(((0.750000174843791)*x48))+(((0.750000174843791)*x49))+((x44*x55))+x54+((x43*x51))+((x48*x60))+((x49*x60))+(((-1.0)*x55))+(((-1.0)*x44*x54)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4469=npx*npx;
IkReal x4470=cj5*cj5;
IkReal x4471=npy*npy;
IkReal x4472=(npx*npy);
IkReal x4473=(npx*sj5);
IkReal x4474=(npy*npz);
IkReal x4475=(npy*sj5);
IkReal x4476=(cj5*sj5);
IkReal x4477=(cj5*npx);
IkReal x4478=(cj5*npy);
IkReal x4479=((1.89808299435661e+15)*cj3);
IkReal x4480=((1.09585821679179e+15)*cj3);
IkReal x4481=(npz*x4477);
IkReal x4482=((1.30208236649023e+21)*x4470);
CheckValue<IkReal> x4483 = IKatan2WithCheck(IkReal(((-2.40562150249752e+20)+(((1.50351345706629e+21)*(npz*npz)))+(((-2.2552715e+21)*sj5*x4474))+(((1.302081000525e+21)*cj5*x4474))+(((2.2552715e+21)*x4481))+(((-876686874750613.0)*cj3))+(((1.302081000525e+21)*npz*x4473)))),IkReal(((-4.16666060881185e+20)+(((-2.25527071135943e+21)*x4472))+(((506155167137267.0)*cj3))+(((-2.60416473298045e+21)*x4472*x4476))+(((6.51040272601682e+20)*x4469))+(((4.51054142271885e+21)*x4470*x4472))+(((2.25527071135943e+21)*x4469*x4476))+(((-1.0)*x4471*x4482))+(((-1.302081000525e+21)*sj5*x4474))+(((7.51756465653109e+20)*npz*x4473))+(((1.95312263909191e+21)*x4471))+((x4469*x4482))+(((1.302081000525e+21)*x4481))+(((7.51756465653109e+20)*cj5*x4474))+(((-2.25527071135943e+21)*x4471*x4476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4483.valid){
continue;
}
CheckValue<IkReal> x4484=IKPowWithIntegerCheck(IKsign((((x4477*x4479))+(((-1.0)*x4475*x4479))+((x4478*x4480))+(((5.20832397091383e+20)*x4477))+(((3.0070258446071e+20)*x4478))+(((3.0070258446071e+20)*x4473))+(((-1.0416651584402e+21)*npz))+((x4473*x4480))+(((1.26538792542e+15)*cj3*npz))+(((-5.20832397091383e+20)*x4475)))),-1);
if(!x4484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4483.value)+(((1.5707963267949)*(x4484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4485=IKsin(j4);
IkReal x4486=IKcos(j4);
IkReal x4487=(cj5*npx);
IkReal x4488=((4.20810162018285e-7)*cj3);
IkReal x4489=(npy*sj5);
IkReal x4490=(cj5*npy);
IkReal x4491=(npx*sj5);
IkReal x4492=((7.2886492079031e-7)*cj3);
IkReal x4493=((0.499999825156179)*npz);
IkReal x4494=((0.433012600946063)*x4491);
IkReal x4495=((0.433012600946063)*x4490);
IkReal x4496=((0.433012600946063)*x4489);
IkReal x4497=((0.433012600946063)*x4487);
IkReal x4498=((0.433012600946063)*x4486);
IkReal x4499=((0.750000174843791)*x4486);
IkReal x4500=((0.866025504730542)*x4485);
IkReal x4501=((0.499999825156179)*x4485);
IkReal x4502=((0.249999825156209)*x4486);
IkReal x4503=(x4495+x4494);
evalcond[0]=(x4493+x4503+(((-1.0)*x4485*x4488))+(((0.750000174843791)*x4487))+(((-0.750000174843791)*x4489))+(((-0.199999928864921)*x4486))+(((-1.0)*x4486*x4492))+(((0.346410199817997)*x4485)));
evalcond[1]=((((-1.0)*x4486*x4488))+x4497+(((-0.866025504730542)*npz))+((x4485*x4492))+(((0.249999825156209)*x4490))+(((0.249999825156209)*x4491))+(((0.199999928864921)*x4485))+(((0.346410199817997)*x4486))+(((-1.0)*x4496)));
evalcond[2]=((-0.399999997604898)+(((-1.0)*x4487*x4500))+(((-1.0)*x4490*x4501))+((npz*x4486))+((x4489*x4500))+(((-1.0)*x4491*x4501)));
evalcond[3]=((((-1.0)*x4489*x4499))+(((-4.20810162018285e-7)*sj3))+(((-1.0)*x4503))+(((0.249999825156209)*x4487))+((x4487*x4499))+((npz*x4500))+(((-0.249999825156209)*x4489))+((x4486*x4494))+((x4486*x4495))+(((-1.0)*x4492)));
evalcond[4]=(x4496+(((7.2886492079031e-7)*sj3))+((x4490*x4502))+((x4485*x4493))+((x4491*x4502))+((x4486*x4497))+(((0.750000174843791)*x4491))+(((0.750000174843791)*x4490))+(((-1.0)*x4486*x4496))+(((-1.0)*x4497))+(((-1.0)*x4488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4504=(cj3*cj5);
IkReal x4505=(npx*sj5);
IkReal x4506=(npy*sj5);
CheckValue<IkReal> x4507 = IKatan2WithCheck(IkReal(((((0.199999928864921)*x4505))+(((0.346410199817997)*cj5*npx))+(((-8.41620618340901e-7)*cj3*npz))+(((-0.346410199817997)*x4506))+(((0.199999928864921)*cj5*npy)))),IkReal(((((-4.20810162018285e-7)*cj3*x4505))+(((-4.20810162018285e-7)*npy*x4504))+(((-7.2886492079031e-7)*npx*x4504))+(((-0.399999997604898)*npz))+(((7.2886492079031e-7)*cj3*x4506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4507.valid){
continue;
}
CheckValue<IkReal> x4508=IKPowWithIntegerCheck(IKsign(((-0.159999998083918)+(((-7.0832526521652e-13)*(cj3*cj3))))),-1);
if(!x4508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4507.value)+(((1.5707963267949)*(x4508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4509=IKsin(j4);
IkReal x4510=IKcos(j4);
IkReal x4511=(cj5*npx);
IkReal x4512=((4.20810162018285e-7)*cj3);
IkReal x4513=(npy*sj5);
IkReal x4514=(cj5*npy);
IkReal x4515=(npx*sj5);
IkReal x4516=((7.2886492079031e-7)*cj3);
IkReal x4517=((0.499999825156179)*npz);
IkReal x4518=((0.433012600946063)*x4515);
IkReal x4519=((0.433012600946063)*x4514);
IkReal x4520=((0.433012600946063)*x4513);
IkReal x4521=((0.433012600946063)*x4511);
IkReal x4522=((0.433012600946063)*x4510);
IkReal x4523=((0.750000174843791)*x4510);
IkReal x4524=((0.866025504730542)*x4509);
IkReal x4525=((0.499999825156179)*x4509);
IkReal x4526=((0.249999825156209)*x4510);
IkReal x4527=(x4518+x4519);
evalcond[0]=((((0.346410199817997)*x4509))+x4517+x4527+(((-0.750000174843791)*x4513))+(((-1.0)*x4510*x4516))+(((0.750000174843791)*x4511))+(((-0.199999928864921)*x4510))+(((-1.0)*x4509*x4512)));
evalcond[1]=((((0.199999928864921)*x4509))+(((-1.0)*x4520))+(((0.346410199817997)*x4510))+(((-0.866025504730542)*npz))+x4521+(((-1.0)*x4510*x4512))+(((0.249999825156209)*x4514))+(((0.249999825156209)*x4515))+((x4509*x4516)));
evalcond[2]=((-0.399999997604898)+(((-1.0)*x4511*x4524))+(((-1.0)*x4514*x4525))+((npz*x4510))+((x4513*x4524))+(((-1.0)*x4515*x4525)));
evalcond[3]=((((-4.20810162018285e-7)*sj3))+(((-1.0)*x4527))+((x4510*x4518))+((x4510*x4519))+((npz*x4524))+(((-0.249999825156209)*x4513))+(((-1.0)*x4513*x4523))+(((-1.0)*x4516))+((x4511*x4523))+(((0.249999825156209)*x4511)));
evalcond[4]=((((-1.0)*x4510*x4520))+(((-1.0)*x4521))+(((7.2886492079031e-7)*sj3))+x4520+((x4515*x4526))+((x4514*x4526))+((x4510*x4521))+(((-1.0)*x4512))+(((0.750000174843791)*x4514))+(((0.750000174843791)*x4515))+((x4509*x4517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

} else
{
continue; // verifyAllEquations

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x62=((1.0)*sj5);
IkReal x63=((0.499999825156179)*sj4);
IkReal x64=((0.249999825156209)*sj4);
IkReal x65=((0.750000174843791)*cj4);
IkReal x66=((0.750000174843791)*sj4);
IkReal x67=((0.433012600946063)*sj4);
IkReal x68=((0.866025504730542)*cj4);
IkReal x69=((-0.249999825156209)+(((0.750000174843791)*cj3)));
IkReal x70=((0.433012600946063)+(((0.433012600946063)*cj3)));
IkReal x71=((-0.750000174843791)+(((0.249999825156209)*cj3)));
IkReal x72=((1.0)*sj3*sj4);
IkReal x73=((-1.0)*sj5);
IkReal x74=((((0.499999825156179)*cj3))+(((-1.0)*sj3*x68)));
IkReal x75=(sj4*x69);
IkReal x76=(cj4*x70);
IkReal x77=(cj4*x69);
IkReal x78=(cj4*x71);
IkReal x79=((0.433012600946063)*x76);
IkReal x80=(x67*x70);
IkReal x81=((((-0.499999825156179)*cj4*sj3))+(((-0.866025504730542)*cj3)));
IkReal x82=(cj5*x81);
IkReal x83=(((cj5*x74))+((sj5*x81)));
IkReal x84=((((-1.0)*x62*x74))+x82);
IkReal x85=((((0.866025504730542)*x75))+(((0.499999825156179)*x77))+((x63*x70))+(((-1.0)*x68*x70)));
IkReal x86=((((0.866025504730542)*sj4*x70))+(((0.499999825156179)*x76))+((x63*x71))+(((-1.0)*x68*x71)));
IkReal x87=((((0.433012600946063)*x77))+x80+(((-1.0)*x64*x69))+(((-0.750000174843791)*sj3))+(((0.249999825156209)*x76)));
IkReal x88=((((0.433012600946062)*sj3))+(((-1.0)*x67*x69))+x79+((x66*x70))+((x65*x69)));
IkReal x89=(cj5*x87);
IkReal x90=(sj5*x88);
IkReal x91=((((0.433012600946063)*x78))+(((-1.38777829549236e-17)*cj3))+(((-1.0)*x80))+(((0.249999825156209)*sj3))+((x66*x71))+((x65*x70)));
IkReal x92=(((x67*x71))+x79+(((2.40370363816118e-17)*cj3))+(((-0.433012600946063)*sj3))+(((-1.0)*x64*x70))+(((0.249999825156209)*x78)));
IkReal x93=(cj5*x92);
IkReal x94=(((cj5*x88))+((sj5*x87)));
IkReal x95=(((x73*x88))+x89);
IkReal x96=(((cj5*x91))+((sj5*x92)));
IkReal x97=(x93+(((-1.0)*x62*x91)));
new_r00=(((r01*x95))+((r00*x94))+((r02*x85)));
new_r01=(((r12*x85))+((r11*x95))+((r10*x94)));
new_r02=(((r21*((x89+(((-1.0)*x62*x88))))))+((r20*x94))+((r22*x85)));
new_r10=(((r01*x97))+((r00*x96))+((r02*x86)));
new_r11=(((r12*x86))+((r11*x97))+((r10*x96)));
new_r12=(((r21*((((x73*x91))+x93))))+((r20*x96))+((r22*x86)));
new_r20=(((r00*x83))+((r01*((x82+((x73*x74))))))+(((-1.0)*r02*x72)));
new_r21=(((r10*x83))+((r11*x84))+(((-1.0)*r12*x72)));
new_r22=((((-1.0)*r22*x72))+((r21*x84))+((r20*x83)));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
if( (((1.99999766009394)*new_r22)) < -1-IKFAST_SINCOS_THRESH || (((1.99999766009394)*new_r22)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x98=IKasin(((1.99999766009394)*new_r22));
j1array[0]=((2.16506629484884e-6)+(((-1.0)*x98)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159481865609)+x98);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[3];
IkReal x99=cj1*cj1;
IkReal x100=((5.77348850949141e+22)*sj1);
IkReal x101=(cj1*sj1);
IkReal x102=((2.66665668539516e+28)*cj1);
j0eval[0]=((692817.270199286)+(((230939.810566763)*x99))+x101);
j0eval[1]=((IKabs(((((4.61877766044193e+28)*new_r20))+((new_r21*x100))+((new_r21*x102)))))+(IKabs(((((-4.61877766044193e+28)*new_r21))+((new_r20*x100))+((new_r20*x102))))));
j0eval[2]=IKsign(((3.99997722844887e+28)+(((1.33332990262156e+28)*x99))+(((5.77349526419614e+22)*x101))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x103=cj1*cj1;
IkReal x104=(cj1*new_r12);
IkReal x105=(cj1*new_r02);
IkReal x106=(new_r12*sj1);
IkReal x107=(new_r02*sj1);
j2eval[0]=((((1.15470223870694)*x104))+x107+(((-2.00001253786471)*x105))+(((1.73206161520519)*x106)));
j2eval[1]=((IKabs(((-0.324758259901852)+(((-1.0)*new_r02*new_r12))+(((0.757769923342867)*x103)))))+(IKabs(((-0.187498098826801)+(new_r12*new_r12)+(((-0.562503699813062)*x103))))));
j2eval[2]=IKsign(((((0.433010506600939)*x107))+(((0.75000087746404)*x106))+(((0.49999820135573)*x104))+(((-0.866026442229025)*x105))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x108=new_r12*new_r12;
IkReal x109=cj1*cj1;
IkReal x110=new_r02*new_r02;
IkReal x111=sj1*sj1;
IkReal x112=((1.33333437329057)*x109);
IkReal x113=(x110+x108);
j2eval[0]=x113;
j2eval[1]=(((x110*x112))+((x110*x111))+((x108*x111))+((x108*x112)));
j2eval[2]=IKsign(x113);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r12*new_r12)+(new_r02*new_r02));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
new_r12=0;
new_r02=0;
IkReal x114=cj1*cj1;
IkReal x115=((5.77348850949141e+22)*sj1);
IkReal x116=(cj1*sj1);
IkReal x117=((2.66665668539516e+28)*cj1);
j0eval[0]=((692817.270199286)+x116+(((230939.810566763)*x114)));
j0eval[1]=((IKabs(((((4.61877766044193e+28)*new_r20))+((new_r21*x117))+((new_r21*x115)))))+(IKabs(((((-4.61877766044193e+28)*new_r21))+((new_r20*x115))+((new_r20*x117))))));
j0eval[2]=IKsign(((3.99997722844887e+28)+(((1.33332990262156e+28)*x114))+(((5.77349526419614e+22)*x116))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x118=((5.77348850949141e+22)*sj1);
IkReal x119=((2.66665668539516e+28)*cj1);
CheckValue<IkReal> x120=IKPowWithIntegerCheck(IKsign(((3.99997722844887e+28)+(((1.33332990262156e+28)*(cj1*cj1)))+(((5.77349526419614e+22)*cj1*sj1)))),-1);
if(!x120.valid){
continue;
}
CheckValue<IkReal> x121 = IKatan2WithCheck(IkReal(((((4.61877766044193e+28)*new_r20))+((new_r21*x119))+((new_r21*x118)))),IkReal(((((-4.61877766044193e+28)*new_r21))+((new_r20*x118))+((new_r20*x119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x120.value)))+(x121.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x122=IKcos(j0);
IkReal x123=IKsin(j0);
IkReal x124=((0.500000584976027)*cj1);
IkReal x125=((1.08253441393799e-6)*sj1);
evalcond[0]=(new_r20+(((-0.866025066047432)*x123))+(((-1.0)*x122*x125))+(((-1.0)*x122*x124)));
evalcond[1]=((((-1.0)*x123*x124))+(((-1.0)*x123*x125))+(((0.866025066047432)*x122))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[1];
new_r12=0;
new_r02=0;
j2eval[0]=((IKabs((sj0+(((-1.73204060566914)*cj0*cj1))+(((-3.99999671893731)*new_r10))+(((-3.46410292742905)*cj0*sj1)))))+(((3.46411133595038e-19)*(IKabs(((2.30939270191783e+19)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
{
IkReal j2eval[1];
new_r12=0;
new_r02=0;
j2eval[0]=((IKabs(((((-3.46410292742905)*sj0*sj1))+(((-3.99999671893731)*new_r11))+(((-1.73204060566914)*cj1*sj0))+(((-1.0)*cj0)))))+(((3.46411133595038e-19)*(IKabs(((2.30939270191783e+19)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
{
IkReal j2eval[1];
new_r12=0;
new_r02=0;
j2eval[0]=((((2.00000467981095e-19)*(IKabs(((2.30939270191783e+19)*new_r10)))))+(IKabs((sj0+(((-1.73205060567263)*cj0*cj1))+(((-2.30939810567846)*new_r00))+(((1.15469489905356)*cj0*sj1))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x126=((2.30939810567846)*new_r00);
IkReal x127=((1.15469489905356)*cj0*sj1);
IkReal x128=((1.73205060567263)*cj0*cj1);
IkReal x129=(sj0+x127);
op[0]=((((-1.0)*x128))+(((-1.0)*x126))+x129);
op[1]=((-4.61879621135691)*new_r10);
op[2]=((((-1.0)*x128))+x126+x129);
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x130=((3.99999671893731)*new_r11);
IkReal x131=((1.0)*cj0);
IkReal x132=((3.46410292742905)*sj0*sj1);
IkReal x133=((1.73204060566914)*cj1*sj0);
IkReal x134=(x131+x133+x132);
op[0]=((((-1.0)*x134))+(((-1.0)*x130)));
op[1]=((7.99999343787462)*new_r01);
op[2]=(x130+(((-1.0)*x134)));
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x135=((3.99999671893731)*new_r10);
IkReal x136=((1.73204060566914)*cj0*cj1);
IkReal x137=((3.46410292742905)*cj0*sj1);
IkReal x138=(x137+x136);
op[0]=(sj0+(((-1.0)*x135))+(((-1.0)*x138)));
op[1]=((7.99999343787462)*new_r00);
op[2]=(sj0+x135+(((-1.0)*x138)));
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((6.14158329400386)+(IKabs(cj1))+(IKabs(((-1.0)+(IKsign(sj1)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.15470098869363)*new_r20))+(((1.44338034437518e-6)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.15470098869363)*new_r21))+(((1.44338034437518e-6)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.15470098869363)*new_r20))+(((1.44338034437518e-6)*new_r21))))+IKsqr(((((-1.15470098869363)*new_r21))+(((1.44338034437518e-6)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.15470098869363)*new_r20))+(((1.44338034437518e-6)*new_r21))), ((((-1.15470098869363)*new_r21))+(((1.44338034437518e-6)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x139=IKcos(j0);
IkReal x140=IKsin(j0);
evalcond[0]=((((-1.08253441393799e-6)*x139))+(((-0.866025066047432)*x140))+new_r20);
evalcond[1]=((((0.866025066047432)*x139))+(((-1.08253441393799e-6)*x140))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
IkReal x141=new_r02*new_r02;
j2eval[0]=((((1.73206161520519)*new_r02))+(((-1.0)*new_r12)));
j2eval[1]=((1.0)+(((7.1111887620993)*x141*(new_r12*new_r12)))+(((-4.61883457642595)*new_r02*new_r12))+(((7.1111887620993)*(x141*x141)))+(((-2.66666874658427)*x141)));
j2eval[2]=IKsign(((((749998245075000.0)*new_r02))+(((-433008986799901.0)*new_r12))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
IkReal x142=new_r12*new_r12;
j2eval[0]=((((1.73206161520519)*new_r12))+new_r02);
j2eval[1]=((1.0)+(((-2.66666874658427)*x142))+(((4.61883457642595)*new_r02*new_r12))+(((7.1111887620993)*(x142*x142)))+(((7.1111887620993)*x142*(new_r02*new_r02))));
j2eval[2]=IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
IkReal x143=new_r02*new_r02;
j2eval[0]=((((1.73206161520519)*new_r12))+new_r02);
j2eval[1]=((1.0)+(((1.5395923119446)*new_r02*new_r12))+(((2.37036667275206)*(x143*x143)))+(((-2.66666874658427)*x143))+(((2.37036667275206)*x143*(new_r12*new_r12))));
j2eval[2]=IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[4];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=(new_r10+(((-1.73206161520519)*new_r00)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=(new_r11+(((-1.73206161520519)*new_r01)));
j2eval[1]=5624995940.50689;
j2eval[2]=sj0;
j2eval[3]=IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((((-1.0)*new_r00))+(((-1.73206161520519)*new_r10)));
j2eval[1]=IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10))));
j2eval[2]=5624995940.50689;
j2eval[3]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x144=(new_r01*new_r10);
IkReal x145=(new_r00*new_r11);
j2eval[0]=(x145+(((-1.0)*x144)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x145))+(((-5.33330713107669e+28)*x144))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x146=(new_r00*new_r01);
IkReal x147=(new_r10*new_r11);
j2eval[0]=(x146+x147);
j2eval[1]=((IKabs(((((-1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))))+(IKabs(((((-1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x147))+(((5.33330713107669e+28)*x146))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x148=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x148.valid){
continue;
}
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r00))+(((2.30939270191783e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r10))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x148.value)))+(x149.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x150=IKsin(j2);
IkReal x151=IKcos(j2);
IkReal x152=((0.75000087746404)*x150);
IkReal x153=(new_r01*x151);
IkReal x154=(new_r11*x150);
IkReal x155=(new_r01*x150);
IkReal x156=((0.433010506600939)*x150);
IkReal x157=((0.433010506600939)*x151);
IkReal x158=(new_r10*x151);
IkReal x159=(new_r00*x150);
IkReal x160=((0.49999820135573)*x151);
IkReal x161=(new_r10*x150);
IkReal x162=(new_r11*x151);
IkReal x163=((0.75000087746404)*x151);
IkReal x164=(new_r00*x151);
evalcond[0]=((0.250000205066586)+x159+x158);
evalcond[1]=((-0.866026442229025)+x162+x155);
evalcond[2]=((0.433013258970445)+x164+(((-1.0)*x161)));
evalcond[3]=((0.49999820135573)+x153+(((-1.0)*x154)));
evalcond[4]=(x163+x156);
evalcond[5]=((((-1.0)*x152))+x157);
evalcond[6]=((((0.250000205066586)*x150))+new_r00+(((0.433013258970445)*x151)));
evalcond[7]=((((-0.866026442229025)*x150))+x160+new_r01);
evalcond[8]=((((0.250000205066586)*x151))+new_r10+(((-0.433013258970445)*x150)));
evalcond[9]=((((-0.866026442229025)*x151))+new_r11+(((-0.49999820135573)*x150)));
evalcond[10]=((((0.250000205066586)*x155))+(((0.433013258970445)*x153))+(((-0.433013258970445)*x154))+(((0.250000205066586)*x162)));
evalcond[11]=(((new_r00*x163))+((new_r00*x156))+((new_r10*x157))+(((-1.0)*new_r10*x152)));
evalcond[12]=((((0.75000087746404)*x153))+((new_r11*x157))+(((-1.0)*new_r11*x152))+(((0.433010506600939)*x155)));
evalcond[13]=((((-1.0)*new_r00*x160))+(((0.866026442229025)*x158))+(((0.866026442229025)*x159))+(((0.49999820135573)*x161)));
evalcond[14]=((1.0)+(((0.250000205066586)*x159))+(((0.250000205066586)*x158))+(((-0.433013258970445)*x161))+(((0.433013258970445)*x164)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x154))+(((0.866026442229025)*x162))+(((0.866026442229025)*x155))+(((-0.49999820135573)*x153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x165 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x165.valid){
continue;
}
CheckValue<IkReal> x166=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x166.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x165.value)+(((1.5707963267949)*(x166.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x167=IKsin(j2);
IkReal x168=IKcos(j2);
IkReal x169=((0.75000087746404)*x167);
IkReal x170=(new_r01*x168);
IkReal x171=(new_r11*x167);
IkReal x172=(new_r01*x167);
IkReal x173=((0.433010506600939)*x167);
IkReal x174=((0.433010506600939)*x168);
IkReal x175=(new_r10*x168);
IkReal x176=(new_r00*x167);
IkReal x177=((0.49999820135573)*x168);
IkReal x178=(new_r10*x167);
IkReal x179=(new_r11*x168);
IkReal x180=((0.75000087746404)*x168);
IkReal x181=(new_r00*x168);
evalcond[0]=((0.250000205066586)+x175+x176);
evalcond[1]=((-0.866026442229025)+x179+x172);
evalcond[2]=((0.433013258970445)+(((-1.0)*x178))+x181);
evalcond[3]=((0.49999820135573)+(((-1.0)*x171))+x170);
evalcond[4]=(x173+x180);
evalcond[5]=((((-1.0)*x169))+x174);
evalcond[6]=((((0.250000205066586)*x167))+(((0.433013258970445)*x168))+new_r00);
evalcond[7]=(x177+new_r01+(((-0.866026442229025)*x167)));
evalcond[8]=((((0.250000205066586)*x168))+new_r10+(((-0.433013258970445)*x167)));
evalcond[9]=((((-0.49999820135573)*x167))+new_r11+(((-0.866026442229025)*x168)));
evalcond[10]=((((-0.433013258970445)*x171))+(((0.433013258970445)*x170))+(((0.250000205066586)*x179))+(((0.250000205066586)*x172)));
evalcond[11]=(((new_r00*x173))+((new_r10*x174))+((new_r00*x180))+(((-1.0)*new_r10*x169)));
evalcond[12]=(((new_r11*x174))+(((0.75000087746404)*x170))+(((-1.0)*new_r11*x169))+(((0.433010506600939)*x172)));
evalcond[13]=((((0.866026442229025)*x176))+(((0.866026442229025)*x175))+(((0.49999820135573)*x178))+(((-1.0)*new_r00*x177)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x178))+(((0.433013258970445)*x181))+(((0.250000205066586)*x176))+(((0.250000205066586)*x175)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x170))+(((0.866026442229025)*x172))+(((0.866026442229025)*x179))+(((0.49999820135573)*x171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x182 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x182.valid){
continue;
}
CheckValue<IkReal> x183=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x183.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x182.value)+(((1.5707963267949)*(x183.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x184=IKsin(j2);
IkReal x185=IKcos(j2);
IkReal x186=((0.75000087746404)*x184);
IkReal x187=(new_r01*x185);
IkReal x188=(new_r11*x184);
IkReal x189=(new_r01*x184);
IkReal x190=((0.433010506600939)*x184);
IkReal x191=((0.433010506600939)*x185);
IkReal x192=(new_r10*x185);
IkReal x193=(new_r00*x184);
IkReal x194=((0.49999820135573)*x185);
IkReal x195=(new_r10*x184);
IkReal x196=(new_r11*x185);
IkReal x197=((0.75000087746404)*x185);
IkReal x198=(new_r00*x185);
evalcond[0]=((0.250000205066586)+x193+x192);
evalcond[1]=((-0.866026442229025)+x196+x189);
evalcond[2]=((0.433013258970445)+(((-1.0)*x195))+x198);
evalcond[3]=((0.49999820135573)+(((-1.0)*x188))+x187);
evalcond[4]=(x190+x197);
evalcond[5]=((((-1.0)*x186))+x191);
evalcond[6]=((((0.250000205066586)*x184))+(((0.433013258970445)*x185))+new_r00);
evalcond[7]=(x194+new_r01+(((-0.866026442229025)*x184)));
evalcond[8]=((((0.250000205066586)*x185))+(((-0.433013258970445)*x184))+new_r10);
evalcond[9]=((((-0.49999820135573)*x184))+new_r11+(((-0.866026442229025)*x185)));
evalcond[10]=((((0.250000205066586)*x189))+(((0.250000205066586)*x196))+(((-0.433013258970445)*x188))+(((0.433013258970445)*x187)));
evalcond[11]=(((new_r10*x191))+((new_r00*x190))+((new_r00*x197))+(((-1.0)*new_r10*x186)));
evalcond[12]=((((0.75000087746404)*x187))+((new_r11*x191))+(((-1.0)*new_r11*x186))+(((0.433010506600939)*x189)));
evalcond[13]=((((0.866026442229025)*x193))+(((0.866026442229025)*x192))+(((0.49999820135573)*x195))+(((-1.0)*new_r00*x194)));
evalcond[14]=((1.0)+(((0.250000205066586)*x193))+(((0.250000205066586)*x192))+(((-0.433013258970445)*x195))+(((0.433013258970445)*x198)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x187))+(((0.866026442229025)*x196))+(((0.866026442229025)*x189))+(((0.49999820135573)*x188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x199=(new_r01*new_r10);
IkReal x200=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x199))+x200);
j2eval[1]=IKsign(((((5.33330713107669e+28)*x200))+(((-5.33330713107669e+28)*x199))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))))+(IKabs(((((4.61878500004103e+28)*new_r10))+(((1.33332787645226e+28)*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x201=(new_r00*new_r01);
IkReal x202=(new_r10*new_r11);
j2eval[0]=(x202+x201);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r11))+(((2.66664397281603e+28)*new_r00)))))+(IKabs(((((1.33332787645226e+28)*new_r01))+(((-2.66664397281603e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x201))+(((5.33330713107669e+28)*x202))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x203=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x203.valid){
continue;
}
CheckValue<IkReal> x204 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r00))+(((-2.30939270191783e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r10))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x203.value)))+(x204.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x205=IKsin(j2);
IkReal x206=IKcos(j2);
IkReal x207=((0.75000087746404)*x205);
IkReal x208=(new_r01*x206);
IkReal x209=(new_r11*x205);
IkReal x210=(new_r01*x205);
IkReal x211=((0.433010506600939)*x205);
IkReal x212=((0.433010506600939)*x206);
IkReal x213=(new_r10*x206);
IkReal x214=(new_r00*x205);
IkReal x215=((0.49999820135573)*x206);
IkReal x216=(new_r10*x205);
IkReal x217=(new_r11*x206);
IkReal x218=((0.75000087746404)*x206);
IkReal x219=(new_r00*x206);
evalcond[0]=((-0.250000205066586)+x213+x214);
evalcond[1]=((0.866026442229025)+x210+x217);
evalcond[2]=((-0.433013258970445)+x219+(((-1.0)*x216)));
evalcond[3]=((-0.49999820135573)+x208+(((-1.0)*x209)));
evalcond[4]=(x211+x218);
evalcond[5]=((((-1.0)*x207))+x212);
evalcond[6]=((((-0.433013258970445)*x206))+new_r00+(((-0.250000205066586)*x205)));
evalcond[7]=((((0.866026442229025)*x205))+new_r01+(((-1.0)*x215)));
evalcond[8]=((((0.433013258970445)*x205))+new_r10+(((-0.250000205066586)*x206)));
evalcond[9]=((((0.49999820135573)*x205))+(((0.866026442229025)*x206))+new_r11);
evalcond[10]=((((0.250000205066586)*x210))+(((0.250000205066586)*x217))+(((0.433013258970445)*x208))+(((-0.433013258970445)*x209)));
evalcond[11]=(((new_r00*x211))+((new_r00*x218))+((new_r10*x212))+(((-1.0)*new_r10*x207)));
evalcond[12]=((((0.433010506600939)*x210))+(((0.75000087746404)*x208))+((new_r11*x212))+(((-1.0)*new_r11*x207)));
evalcond[13]=((((0.866026442229025)*x214))+(((0.866026442229025)*x213))+(((0.49999820135573)*x216))+(((-1.0)*new_r00*x215)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x213))+(((0.250000205066586)*x214))+(((-0.433013258970445)*x216))+(((0.433013258970445)*x219)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x208))+(((0.49999820135573)*x209))+(((0.866026442229025)*x210))+(((0.866026442229025)*x217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x220=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x220.valid){
continue;
}
CheckValue<IkReal> x221 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((-2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x221.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x220.value)))+(x221.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x222=IKsin(j2);
IkReal x223=IKcos(j2);
IkReal x224=((0.75000087746404)*x222);
IkReal x225=(new_r01*x223);
IkReal x226=(new_r11*x222);
IkReal x227=(new_r01*x222);
IkReal x228=((0.433010506600939)*x222);
IkReal x229=((0.433010506600939)*x223);
IkReal x230=(new_r10*x223);
IkReal x231=(new_r00*x222);
IkReal x232=((0.49999820135573)*x223);
IkReal x233=(new_r10*x222);
IkReal x234=(new_r11*x223);
IkReal x235=((0.75000087746404)*x223);
IkReal x236=(new_r00*x223);
evalcond[0]=((-0.250000205066586)+x230+x231);
evalcond[1]=((0.866026442229025)+x227+x234);
evalcond[2]=((-0.433013258970445)+x236+(((-1.0)*x233)));
evalcond[3]=((-0.49999820135573)+x225+(((-1.0)*x226)));
evalcond[4]=(x228+x235);
evalcond[5]=(x229+(((-1.0)*x224)));
evalcond[6]=((((-0.433013258970445)*x223))+new_r00+(((-0.250000205066586)*x222)));
evalcond[7]=((((-1.0)*x232))+(((0.866026442229025)*x222))+new_r01);
evalcond[8]=((((0.433013258970445)*x222))+new_r10+(((-0.250000205066586)*x223)));
evalcond[9]=((((0.866026442229025)*x223))+new_r11+(((0.49999820135573)*x222)));
evalcond[10]=((((0.433013258970445)*x225))+(((0.250000205066586)*x227))+(((-0.433013258970445)*x226))+(((0.250000205066586)*x234)));
evalcond[11]=(((new_r00*x228))+(((-1.0)*new_r10*x224))+((new_r00*x235))+((new_r10*x229)));
evalcond[12]=((((0.433010506600939)*x227))+(((-1.0)*new_r11*x224))+(((0.75000087746404)*x225))+((new_r11*x229)));
evalcond[13]=((((0.866026442229025)*x230))+(((0.866026442229025)*x231))+(((0.49999820135573)*x233))+(((-1.0)*new_r00*x232)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x236))+(((0.250000205066586)*x230))+(((0.250000205066586)*x231))+(((-0.433013258970445)*x233)));
evalcond[15]=((1.0)+(((0.866026442229025)*x234))+(((0.49999820135573)*x226))+(((-0.49999820135573)*x225))+(((0.866026442229025)*x227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x237=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x237.valid){
continue;
}
CheckValue<IkReal> x238 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*new_r10))+(((1.33332787645226e+28)*new_r11)))),IkReal(((((-1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x238.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x237.value)))+(x238.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x239=IKsin(j2);
IkReal x240=IKcos(j2);
IkReal x241=((0.75000087746404)*x239);
IkReal x242=(new_r01*x240);
IkReal x243=(new_r11*x239);
IkReal x244=(new_r01*x239);
IkReal x245=((0.433010506600939)*x239);
IkReal x246=((0.433010506600939)*x240);
IkReal x247=(new_r10*x240);
IkReal x248=(new_r00*x239);
IkReal x249=((0.49999820135573)*x240);
IkReal x250=(new_r10*x239);
IkReal x251=(new_r11*x240);
IkReal x252=((0.75000087746404)*x240);
IkReal x253=(new_r00*x240);
evalcond[0]=((-0.250000205066586)+x247+x248);
evalcond[1]=((0.866026442229025)+x251+x244);
evalcond[2]=((-0.433013258970445)+x253+(((-1.0)*x250)));
evalcond[3]=((-0.49999820135573)+(((-1.0)*x243))+x242);
evalcond[4]=(x252+x245);
evalcond[5]=(x246+(((-1.0)*x241)));
evalcond[6]=(new_r00+(((-0.250000205066586)*x239))+(((-0.433013258970445)*x240)));
evalcond[7]=((((0.866026442229025)*x239))+(((-1.0)*x249))+new_r01);
evalcond[8]=((((0.433013258970445)*x239))+(((-0.250000205066586)*x240))+new_r10);
evalcond[9]=((((0.49999820135573)*x239))+(((0.866026442229025)*x240))+new_r11);
evalcond[10]=((((0.433013258970445)*x242))+(((0.250000205066586)*x244))+(((-0.433013258970445)*x243))+(((0.250000205066586)*x251)));
evalcond[11]=(((new_r00*x252))+((new_r00*x245))+(((-1.0)*new_r10*x241))+((new_r10*x246)));
evalcond[12]=((((0.75000087746404)*x242))+(((-1.0)*new_r11*x241))+(((0.433010506600939)*x244))+((new_r11*x246)));
evalcond[13]=((((-1.0)*new_r00*x249))+(((0.866026442229025)*x248))+(((0.866026442229025)*x247))+(((0.49999820135573)*x250)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x247))+(((0.250000205066586)*x248))+(((0.433013258970445)*x253))+(((-0.433013258970445)*x250)));
evalcond[15]=((1.0)+(((0.866026442229025)*x244))+(((-0.49999820135573)*x242))+(((0.49999820135573)*x243))+(((0.866026442229025)*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x254=(new_r01*new_r10);
IkReal x255=(new_r00*new_r11);
j2eval[0]=(x255+(((-1.0)*x254)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x254))+(((5.33330713107669e+28)*x255))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r10))+(((4.61878500004103e+28)*new_r11)))))+(IKabs(((((1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x256=(new_r00*new_r01);
IkReal x257=(new_r10*new_r11);
j2eval[0]=(x256+x257);
j2eval[1]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((2.30939270191783e+28)*new_r00)))))+(IKabs(((((-2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x256))+(((5.33330713107669e+28)*x257))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x258=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x258.valid){
continue;
}
CheckValue<IkReal> x259 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x259.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x258.value)))+(x259.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x260=IKsin(j2);
IkReal x261=IKcos(j2);
IkReal x262=((0.75000087746404)*x260);
IkReal x263=(new_r01*x261);
IkReal x264=(new_r11*x260);
IkReal x265=(new_r01*x260);
IkReal x266=((0.433010506600939)*x260);
IkReal x267=((0.433010506600939)*x261);
IkReal x268=(new_r10*x261);
IkReal x269=(new_r00*x260);
IkReal x270=((0.49999820135573)*x261);
IkReal x271=(new_r10*x260);
IkReal x272=(new_r11*x261);
IkReal x273=((0.75000087746404)*x261);
IkReal x274=(new_r00*x261);
evalcond[0]=((-0.866026442229025)+x269+x268);
evalcond[1]=((-0.250000205066586)+x265+x272);
evalcond[2]=((0.49999820135573)+(((-1.0)*x271))+x274);
evalcond[3]=((-0.433013258970445)+(((-1.0)*x264))+x263);
evalcond[4]=(x266+x273);
evalcond[5]=(x267+(((-1.0)*x262)));
evalcond[6]=(x270+(((-0.866026442229025)*x260))+new_r00);
evalcond[7]=((((-0.250000205066586)*x260))+new_r01+(((-0.433013258970445)*x261)));
evalcond[8]=((((-0.49999820135573)*x260))+(((-0.866026442229025)*x261))+new_r10);
evalcond[9]=((((0.433013258970445)*x260))+(((-0.250000205066586)*x261))+new_r11);
evalcond[10]=((((0.433013258970445)*x274))+(((0.250000205066586)*x269))+(((0.250000205066586)*x268))+(((-0.433013258970445)*x271)));
evalcond[11]=((((-1.0)*new_r10*x262))+((new_r00*x273))+((new_r00*x266))+((new_r10*x267)));
evalcond[12]=((((0.75000087746404)*x263))+(((0.433010506600939)*x265))+(((-1.0)*new_r11*x262))+((new_r11*x267)));
evalcond[13]=((((0.866026442229025)*x265))+(((0.866026442229025)*x272))+(((-0.49999820135573)*x263))+(((0.49999820135573)*x264)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x263))+(((0.250000205066586)*x272))+(((0.250000205066586)*x265))+(((-0.433013258970445)*x264)));
evalcond[15]=((-1.0)+(((0.866026442229025)*x268))+(((0.866026442229025)*x269))+(((-1.0)*new_r00*x270))+(((0.49999820135573)*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x275=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x275.valid){
continue;
}
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(((((-2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x275.value)))+(x276.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x277=IKsin(j2);
IkReal x278=IKcos(j2);
IkReal x279=((0.75000087746404)*x277);
IkReal x280=(new_r01*x278);
IkReal x281=(new_r11*x277);
IkReal x282=(new_r01*x277);
IkReal x283=((0.433010506600939)*x277);
IkReal x284=((0.433010506600939)*x278);
IkReal x285=(new_r10*x278);
IkReal x286=(new_r00*x277);
IkReal x287=((0.49999820135573)*x278);
IkReal x288=(new_r10*x277);
IkReal x289=(new_r11*x278);
IkReal x290=((0.75000087746404)*x278);
IkReal x291=(new_r00*x278);
evalcond[0]=((-0.866026442229025)+x286+x285);
evalcond[1]=((-0.250000205066586)+x289+x282);
evalcond[2]=((0.49999820135573)+x291+(((-1.0)*x288)));
evalcond[3]=((-0.433013258970445)+x280+(((-1.0)*x281)));
evalcond[4]=(x290+x283);
evalcond[5]=(x284+(((-1.0)*x279)));
evalcond[6]=(x287+(((-0.866026442229025)*x277))+new_r00);
evalcond[7]=((((-0.433013258970445)*x278))+(((-0.250000205066586)*x277))+new_r01);
evalcond[8]=((((-0.49999820135573)*x277))+(((-0.866026442229025)*x278))+new_r10);
evalcond[9]=((((0.433013258970445)*x277))+(((-0.250000205066586)*x278))+new_r11);
evalcond[10]=((((0.433013258970445)*x291))+(((0.250000205066586)*x286))+(((0.250000205066586)*x285))+(((-0.433013258970445)*x288)));
evalcond[11]=(((new_r00*x290))+(((-1.0)*new_r10*x279))+((new_r00*x283))+((new_r10*x284)));
evalcond[12]=((((0.75000087746404)*x280))+(((-1.0)*new_r11*x279))+((new_r11*x284))+(((0.433010506600939)*x282)));
evalcond[13]=((((-0.49999820135573)*x280))+(((0.49999820135573)*x281))+(((0.866026442229025)*x289))+(((0.866026442229025)*x282)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x289))+(((0.250000205066586)*x282))+(((-0.433013258970445)*x281))+(((0.433013258970445)*x280)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x287))+(((0.49999820135573)*x288))+(((0.866026442229025)*x285))+(((0.866026442229025)*x286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x292 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r10))+(((4.61878500004103e+28)*new_r11)))),IkReal(((((1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x293.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x292.value)+(((1.5707963267949)*(x293.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x294=IKsin(j2);
IkReal x295=IKcos(j2);
IkReal x296=((0.75000087746404)*x294);
IkReal x297=(new_r01*x295);
IkReal x298=(new_r11*x294);
IkReal x299=(new_r01*x294);
IkReal x300=((0.433010506600939)*x294);
IkReal x301=((0.433010506600939)*x295);
IkReal x302=(new_r10*x295);
IkReal x303=(new_r00*x294);
IkReal x304=((0.49999820135573)*x295);
IkReal x305=(new_r10*x294);
IkReal x306=(new_r11*x295);
IkReal x307=((0.75000087746404)*x295);
IkReal x308=(new_r00*x295);
evalcond[0]=((-0.866026442229025)+x302+x303);
evalcond[1]=((-0.250000205066586)+x306+x299);
evalcond[2]=((0.49999820135573)+(((-1.0)*x305))+x308);
evalcond[3]=((-0.433013258970445)+(((-1.0)*x298))+x297);
evalcond[4]=(x307+x300);
evalcond[5]=((((-1.0)*x296))+x301);
evalcond[6]=((((-0.866026442229025)*x294))+x304+new_r00);
evalcond[7]=((((-0.433013258970445)*x295))+(((-0.250000205066586)*x294))+new_r01);
evalcond[8]=((((-0.49999820135573)*x294))+(((-0.866026442229025)*x295))+new_r10);
evalcond[9]=((((0.433013258970445)*x294))+(((-0.250000205066586)*x295))+new_r11);
evalcond[10]=((((-0.433013258970445)*x305))+(((0.433013258970445)*x308))+(((0.250000205066586)*x302))+(((0.250000205066586)*x303)));
evalcond[11]=(((new_r00*x300))+((new_r00*x307))+(((-1.0)*new_r10*x296))+((new_r10*x301)));
evalcond[12]=((((-1.0)*new_r11*x296))+((new_r11*x301))+(((0.433010506600939)*x299))+(((0.75000087746404)*x297)));
evalcond[13]=((((-0.49999820135573)*x297))+(((0.49999820135573)*x298))+(((0.866026442229025)*x299))+(((0.866026442229025)*x306)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x297))+(((0.250000205066586)*x306))+(((0.250000205066586)*x299))+(((-0.433013258970445)*x298)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x305))+(((0.866026442229025)*x303))+(((0.866026442229025)*x302))+(((-1.0)*new_r00*x304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x309=(new_r01*new_r10);
IkReal x310=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x309))+x310);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))))+(IKabs(((((-1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((-5.33330713107669e+28)*x309))+(((5.33330713107669e+28)*x310))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x311=(new_r00*new_r01);
IkReal x312=(new_r10*new_r11);
j2eval[0]=(x311+x312);
j2eval[1]=((IKabs(((((2.30939270191783e+28)*new_r10))+(((-4.61878500004103e+28)*new_r01)))))+(IKabs(((((-4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x312))+(((5.33330713107669e+28)*x311))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=-1.0;
j2eval[1]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x313 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x313.valid){
continue;
}
CheckValue<IkReal> x314=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*(new_r10*new_r10)))+(((-5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x314.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x313.value)+(((1.5707963267949)*(x314.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x315=IKsin(j2);
IkReal x316=IKcos(j2);
IkReal x317=((0.75000087746404)*x315);
IkReal x318=(new_r01*x316);
IkReal x319=(new_r11*x315);
IkReal x320=(new_r01*x315);
IkReal x321=((0.433010506600939)*x315);
IkReal x322=((0.433010506600939)*x316);
IkReal x323=(new_r10*x316);
IkReal x324=(new_r00*x315);
IkReal x325=((0.49999820135573)*x316);
IkReal x326=(new_r10*x315);
IkReal x327=(new_r11*x316);
IkReal x328=((0.75000087746404)*x316);
IkReal x329=(new_r00*x316);
evalcond[0]=((0.866026442229025)+x324+x323);
evalcond[1]=((0.250000205066586)+x327+x320);
evalcond[2]=((-0.49999820135573)+(((-1.0)*x326))+x329);
evalcond[3]=((0.433013258970445)+x318+(((-1.0)*x319)));
evalcond[4]=(x321+x328);
evalcond[5]=(x322+(((-1.0)*x317)));
evalcond[6]=((((0.866026442229025)*x315))+(((-1.0)*x325))+new_r00);
evalcond[7]=((((0.433013258970445)*x316))+new_r01+(((0.250000205066586)*x315)));
evalcond[8]=((((0.866026442229025)*x316))+(((0.49999820135573)*x315))+new_r10);
evalcond[9]=((((-0.433013258970445)*x315))+new_r11+(((0.250000205066586)*x316)));
evalcond[10]=((((0.250000205066586)*x324))+(((0.250000205066586)*x323))+(((-0.433013258970445)*x326))+(((0.433013258970445)*x329)));
evalcond[11]=(((new_r00*x328))+((new_r00*x321))+(((-1.0)*new_r10*x317))+((new_r10*x322)));
evalcond[12]=((((0.75000087746404)*x318))+(((-1.0)*new_r11*x317))+(((0.433010506600939)*x320))+((new_r11*x322)));
evalcond[13]=((((0.49999820135573)*x319))+(((0.866026442229025)*x320))+(((0.866026442229025)*x327))+(((-0.49999820135573)*x318)));
evalcond[14]=((1.0)+(((0.250000205066586)*x327))+(((0.250000205066586)*x320))+(((0.433013258970445)*x318))+(((-0.433013258970445)*x319)));
evalcond[15]=((1.0)+(((0.866026442229025)*x324))+(((0.866026442229025)*x323))+(((-1.0)*new_r00*x325))+(((0.49999820135573)*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x330=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x330.valid){
continue;
}
CheckValue<IkReal> x331 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((-4.61878500004103e+28)*new_r01)))),IkReal(((((-4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x331.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x330.value)))+(x331.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x332=IKsin(j2);
IkReal x333=IKcos(j2);
IkReal x334=((0.75000087746404)*x332);
IkReal x335=(new_r01*x333);
IkReal x336=(new_r11*x332);
IkReal x337=(new_r01*x332);
IkReal x338=((0.433010506600939)*x332);
IkReal x339=((0.433010506600939)*x333);
IkReal x340=(new_r10*x333);
IkReal x341=(new_r00*x332);
IkReal x342=((0.49999820135573)*x333);
IkReal x343=(new_r10*x332);
IkReal x344=(new_r11*x333);
IkReal x345=((0.75000087746404)*x333);
IkReal x346=(new_r00*x333);
evalcond[0]=((0.866026442229025)+x340+x341);
evalcond[1]=((0.250000205066586)+x337+x344);
evalcond[2]=((-0.49999820135573)+x346+(((-1.0)*x343)));
evalcond[3]=((0.433013258970445)+x335+(((-1.0)*x336)));
evalcond[4]=(x338+x345);
evalcond[5]=(x339+(((-1.0)*x334)));
evalcond[6]=((((0.866026442229025)*x332))+new_r00+(((-1.0)*x342)));
evalcond[7]=((((0.433013258970445)*x333))+new_r01+(((0.250000205066586)*x332)));
evalcond[8]=((((0.49999820135573)*x332))+(((0.866026442229025)*x333))+new_r10);
evalcond[9]=((((-0.433013258970445)*x332))+new_r11+(((0.250000205066586)*x333)));
evalcond[10]=((((-0.433013258970445)*x343))+(((0.433013258970445)*x346))+(((0.250000205066586)*x340))+(((0.250000205066586)*x341)));
evalcond[11]=((((-1.0)*new_r10*x334))+((new_r00*x338))+((new_r00*x345))+((new_r10*x339)));
evalcond[12]=((((-1.0)*new_r11*x334))+(((0.75000087746404)*x335))+((new_r11*x339))+(((0.433010506600939)*x337)));
evalcond[13]=((((0.49999820135573)*x336))+(((0.866026442229025)*x337))+(((0.866026442229025)*x344))+(((-0.49999820135573)*x335)));
evalcond[14]=((1.0)+(((0.433013258970445)*x335))+(((-0.433013258970445)*x336))+(((0.250000205066586)*x337))+(((0.250000205066586)*x344)));
evalcond[15]=((1.0)+(((0.49999820135573)*x343))+(((0.866026442229025)*x340))+(((0.866026442229025)*x341))+(((-1.0)*new_r00*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x347 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))),IkReal(((((-1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x347.valid){
continue;
}
CheckValue<IkReal> x348=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x348.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x347.value)+(((1.5707963267949)*(x348.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x349=IKsin(j2);
IkReal x350=IKcos(j2);
IkReal x351=((0.75000087746404)*x349);
IkReal x352=(new_r01*x350);
IkReal x353=(new_r11*x349);
IkReal x354=(new_r01*x349);
IkReal x355=((0.433010506600939)*x349);
IkReal x356=((0.433010506600939)*x350);
IkReal x357=(new_r10*x350);
IkReal x358=(new_r00*x349);
IkReal x359=((0.49999820135573)*x350);
IkReal x360=(new_r10*x349);
IkReal x361=(new_r11*x350);
IkReal x362=((0.75000087746404)*x350);
IkReal x363=(new_r00*x350);
evalcond[0]=((0.866026442229025)+x357+x358);
evalcond[1]=((0.250000205066586)+x354+x361);
evalcond[2]=((-0.49999820135573)+(((-1.0)*x360))+x363);
evalcond[3]=((0.433013258970445)+(((-1.0)*x353))+x352);
evalcond[4]=(x355+x362);
evalcond[5]=((((-1.0)*x351))+x356);
evalcond[6]=((((0.866026442229025)*x349))+(((-1.0)*x359))+new_r00);
evalcond[7]=((((0.433013258970445)*x350))+(((0.250000205066586)*x349))+new_r01);
evalcond[8]=((((0.49999820135573)*x349))+(((0.866026442229025)*x350))+new_r10);
evalcond[9]=((((0.250000205066586)*x350))+new_r11+(((-0.433013258970445)*x349)));
evalcond[10]=((((0.433013258970445)*x363))+(((0.250000205066586)*x357))+(((0.250000205066586)*x358))+(((-0.433013258970445)*x360)));
evalcond[11]=(((new_r00*x362))+(((-1.0)*new_r10*x351))+((new_r10*x356))+((new_r00*x355)));
evalcond[12]=((((-1.0)*new_r11*x351))+(((0.433010506600939)*x354))+(((0.75000087746404)*x352))+((new_r11*x356)));
evalcond[13]=((((0.49999820135573)*x353))+(((-0.49999820135573)*x352))+(((0.866026442229025)*x354))+(((0.866026442229025)*x361)));
evalcond[14]=((1.0)+(((0.250000205066586)*x361))+(((0.250000205066586)*x354))+(((-0.433013258970445)*x353))+(((0.433013258970445)*x352)));
evalcond[15]=((1.0)+(((0.866026442229025)*x357))+(((0.866026442229025)*x358))+(((0.49999820135573)*x360))+(((-1.0)*new_r00*x359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10)))),-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365 = IKatan2WithCheck(IkReal(((((-37499.810974959)*cj0))+(((10825.2588795883)*sj0)))),IkReal(((((18750.015379994)*sj0))+(((-64951.9831671769)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x365.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x364.value)))+(x365.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x366=IKcos(j2);
IkReal x367=IKsin(j2);
IkReal x368=((1.0)*cj0);
IkReal x369=((0.866026442229025)*cj0);
IkReal x370=((0.49999820135573)*cj0);
IkReal x371=((0.433013258970445)*sj0);
IkReal x372=((0.866026442229025)*sj0);
IkReal x373=((0.49999820135573)*sj0);
IkReal x374=((0.75000087746404)*x367);
IkReal x375=(sj0*x367);
IkReal x376=(new_r01*x366);
IkReal x377=(new_r11*x367);
IkReal x378=((0.866026442229025)*x367);
IkReal x379=((0.250000205066586)*x366);
IkReal x380=((0.433010506600939)*x367);
IkReal x381=((0.433010506600939)*x366);
IkReal x382=((0.75000087746404)*x366);
IkReal x383=(new_r10*x366);
IkReal x384=(new_r10*x367);
IkReal x385=(new_r00*x367);
IkReal x386=(new_r01*x367);
IkReal x387=(cj0*x367);
IkReal x388=((0.433013258970445)*x366);
IkReal x389=(new_r00*x366);
IkReal x390=(new_r11*x366);
evalcond[0]=(x382+x380);
evalcond[1]=((((-1.0)*x374))+x381);
evalcond[2]=((((-1.0)*x369))+(((0.250000205066586)*sj0))+x385+x383);
evalcond[3]=((((-0.250000205066586)*cj0))+(((-1.0)*x372))+x386+x390);
evalcond[4]=(x389+x371+x370+(((-1.0)*x384)));
evalcond[5]=((((-1.0)*x377))+x376+x373+(((-0.433013258970445)*cj0)));
evalcond[6]=(((new_r00*x382))+((new_r00*x380))+((new_r10*x381))+(((-1.0)*new_r10*x374)));
evalcond[7]=(((new_r01*x380))+((new_r11*x381))+(((-1.0)*new_r11*x374))+(((0.75000087746404)*x376)));
evalcond[8]=(sj0+((new_r00*x388))+(((0.250000205066586)*x385))+((new_r10*x379))+(((-0.433013258970445)*x384)));
evalcond[9]=((((0.250000205066586)*x375))+(((-1.0)*x367*x369))+((x366*x371))+((x366*x370))+new_r00);
evalcond[10]=((((-0.250000205066586)*x387))+((x366*x373))+(((-1.0)*x367*x372))+(((-1.0)*cj0*x388))+new_r01);
evalcond[11]=(((sj0*x379))+(((-1.0)*x367*x370))+(((-1.0)*x367*x371))+(((-1.0)*x366*x369))+new_r10);
evalcond[12]=((((0.433013258970445)*x387))+(((-1.0)*x366*x372))+(((-1.0)*x367*x373))+new_r11+(((-1.0)*cj0*x379)));
evalcond[13]=((((0.433013258970445)*x376))+(((-1.0)*x368))+(((-0.433013258970445)*x377))+(((0.250000205066586)*x386))+((new_r11*x379)));
evalcond[14]=((((0.866026442229025)*x383))+(((-1.0)*x368))+((new_r00*x378))+(((-0.49999820135573)*x389))+(((0.49999820135573)*x384)));
evalcond[15]=((((-1.0)*sj0))+(((-0.49999820135573)*x376))+((new_r01*x378))+(((0.49999820135573)*x377))+(((0.866026442229025)*x390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x391=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01)))),-1);
if(!x391.valid){
continue;
}
CheckValue<IkReal> x392 = IKatan2WithCheck(IkReal(((((-18750.015379994)*cj0))+(((-64951.9831671769)*sj0)))),IkReal(((((37499.810974959)*sj0))+(((10825.2588795883)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x392.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x391.value)))+(x392.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x393=IKcos(j2);
IkReal x394=IKsin(j2);
IkReal x395=((1.0)*cj0);
IkReal x396=((0.866026442229025)*cj0);
IkReal x397=((0.49999820135573)*cj0);
IkReal x398=((0.433013258970445)*sj0);
IkReal x399=((0.866026442229025)*sj0);
IkReal x400=((0.49999820135573)*sj0);
IkReal x401=((0.75000087746404)*x394);
IkReal x402=(sj0*x394);
IkReal x403=(new_r01*x393);
IkReal x404=(new_r11*x394);
IkReal x405=((0.866026442229025)*x394);
IkReal x406=((0.250000205066586)*x393);
IkReal x407=((0.433010506600939)*x394);
IkReal x408=((0.433010506600939)*x393);
IkReal x409=((0.75000087746404)*x393);
IkReal x410=(new_r10*x393);
IkReal x411=(new_r10*x394);
IkReal x412=(new_r00*x394);
IkReal x413=(new_r01*x394);
IkReal x414=(cj0*x394);
IkReal x415=((0.433013258970445)*x393);
IkReal x416=(new_r00*x393);
IkReal x417=(new_r11*x393);
evalcond[0]=(x407+x409);
evalcond[1]=(x408+(((-1.0)*x401)));
evalcond[2]=((((-1.0)*x396))+(((0.250000205066586)*sj0))+x412+x410);
evalcond[3]=((((-0.250000205066586)*cj0))+(((-1.0)*x399))+x413+x417);
evalcond[4]=(x397+x398+x416+(((-1.0)*x411)));
evalcond[5]=(x400+x403+(((-0.433013258970445)*cj0))+(((-1.0)*x404)));
evalcond[6]=(((new_r10*x408))+(((-1.0)*new_r10*x401))+((new_r00*x407))+((new_r00*x409)));
evalcond[7]=((((0.75000087746404)*x403))+((new_r11*x408))+((new_r01*x407))+(((-1.0)*new_r11*x401)));
evalcond[8]=(sj0+(((-0.433013258970445)*x411))+(((0.250000205066586)*x412))+((new_r10*x406))+((new_r00*x415)));
evalcond[9]=((((-1.0)*x394*x396))+(((0.250000205066586)*x402))+new_r00+((x393*x398))+((x393*x397)));
evalcond[10]=((((-1.0)*x394*x399))+((x393*x400))+(((-0.250000205066586)*x414))+(((-1.0)*cj0*x415))+new_r01);
evalcond[11]=((((-1.0)*x394*x397))+(((-1.0)*x394*x398))+((sj0*x406))+new_r10+(((-1.0)*x393*x396)));
evalcond[12]=((((0.433013258970445)*x414))+(((-1.0)*x394*x400))+(((-1.0)*cj0*x406))+new_r11+(((-1.0)*x393*x399)));
evalcond[13]=((((-1.0)*x395))+(((0.433013258970445)*x403))+(((-0.433013258970445)*x404))+(((0.250000205066586)*x413))+((new_r11*x406)));
evalcond[14]=((((0.49999820135573)*x411))+(((-1.0)*x395))+(((-0.49999820135573)*x416))+(((0.866026442229025)*x410))+((new_r00*x405)));
evalcond[15]=((((0.49999820135573)*x404))+(((-1.0)*sj0))+(((-0.49999820135573)*x403))+(((0.866026442229025)*x417))+((new_r01*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x418=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00)))),-1);
if(!x418.valid){
continue;
}
CheckValue<IkReal> x419 = IKatan2WithCheck(IkReal(((((18750.015379994)*sj0))+(((-64951.9831671769)*cj0)))),IkReal(((((-10825.2588795883)*sj0))+(((37499.810974959)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x419.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x418.value)))+(x419.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x420=IKcos(j2);
IkReal x421=IKsin(j2);
IkReal x422=((1.0)*cj0);
IkReal x423=((0.866026442229025)*cj0);
IkReal x424=((0.49999820135573)*cj0);
IkReal x425=((0.433013258970445)*sj0);
IkReal x426=((0.866026442229025)*sj0);
IkReal x427=((0.49999820135573)*sj0);
IkReal x428=((0.75000087746404)*x421);
IkReal x429=(sj0*x421);
IkReal x430=(new_r01*x420);
IkReal x431=(new_r11*x421);
IkReal x432=((0.866026442229025)*x421);
IkReal x433=((0.250000205066586)*x420);
IkReal x434=((0.433010506600939)*x421);
IkReal x435=((0.433010506600939)*x420);
IkReal x436=((0.75000087746404)*x420);
IkReal x437=(new_r10*x420);
IkReal x438=(new_r10*x421);
IkReal x439=(new_r00*x421);
IkReal x440=(new_r01*x421);
IkReal x441=(cj0*x421);
IkReal x442=((0.433013258970445)*x420);
IkReal x443=(new_r00*x420);
IkReal x444=(new_r11*x420);
evalcond[0]=(x434+x436);
evalcond[1]=((((-1.0)*x428))+x435);
evalcond[2]=((((-1.0)*x423))+(((0.250000205066586)*sj0))+x439+x437);
evalcond[3]=((((-0.250000205066586)*cj0))+(((-1.0)*x426))+x444+x440);
evalcond[4]=((((-1.0)*x438))+x425+x424+x443);
evalcond[5]=((((-1.0)*x431))+x427+x430+(((-0.433013258970445)*cj0)));
evalcond[6]=(((new_r00*x436))+((new_r00*x434))+((new_r10*x435))+(((-1.0)*new_r10*x428)));
evalcond[7]=(((new_r01*x434))+(((0.75000087746404)*x430))+((new_r11*x435))+(((-1.0)*new_r11*x428)));
evalcond[8]=(((new_r00*x442))+sj0+(((-0.433013258970445)*x438))+((new_r10*x433))+(((0.250000205066586)*x439)));
evalcond[9]=(((x420*x424))+((x420*x425))+(((-1.0)*x421*x423))+(((0.250000205066586)*x429))+new_r00);
evalcond[10]=((((-0.250000205066586)*x441))+((x420*x427))+(((-1.0)*x421*x426))+new_r01+(((-1.0)*cj0*x442)));
evalcond[11]=(((sj0*x433))+(((-1.0)*x421*x424))+(((-1.0)*x421*x425))+(((-1.0)*x420*x423))+new_r10);
evalcond[12]=((((-1.0)*x421*x427))+(((-1.0)*x420*x426))+new_r11+(((0.433013258970445)*x441))+(((-1.0)*cj0*x433)));
evalcond[13]=((((-1.0)*x422))+(((-0.433013258970445)*x431))+((new_r11*x433))+(((0.250000205066586)*x440))+(((0.433013258970445)*x430)));
evalcond[14]=(((new_r00*x432))+(((0.49999820135573)*x438))+(((-1.0)*x422))+(((-0.49999820135573)*x443))+(((0.866026442229025)*x437)));
evalcond[15]=((((0.866026442229025)*x444))+((new_r01*x432))+(((-1.0)*sj0))+(((0.49999820135573)*x431))+(((-0.49999820135573)*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x445=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02)))),-1);
if(!x445.valid){
continue;
}
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal(((562499341902740.0)+(((-999996490152053.0)*(new_r02*new_r02))))),IkReal(((-324757120049741.0)+(((-999996490152053.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x445.value)))+(x446.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x447=IKcos(j2);
IkReal x448=IKsin(j2);
IkReal x449=((1.0)*cj0);
IkReal x450=((0.866026442229025)*cj0);
IkReal x451=((0.49999820135573)*cj0);
IkReal x452=((0.866026442229025)*sj0);
IkReal x453=((0.49999820135573)*sj0);
IkReal x454=((0.75000087746404)*x448);
IkReal x455=(sj0*x448);
IkReal x456=((0.433013258970445)*x447);
IkReal x457=((1.0)*x448);
IkReal x458=((0.866026442229025)*x448);
IkReal x459=((0.433010506600939)*x448);
IkReal x460=((0.250000205066586)*x447);
IkReal x461=(new_r02*x447);
IkReal x462=(new_r01*x447);
IkReal x463=(new_r12*x447);
IkReal x464=(new_r00*x448);
IkReal x465=(new_r10*x447);
IkReal x466=(new_r01*x448);
IkReal x467=((0.433010506600939)*x447);
IkReal x468=(cj0*x448);
IkReal x469=((0.433013258970445)*x448);
IkReal x470=((0.75000087746404)*x447);
IkReal x471=((0.49999820135573)*x448);
IkReal x472=(new_r00*x447);
IkReal x473=(new_r02*x448);
IkReal x474=(new_r11*x447);
evalcond[0]=((0.433010506600939)+x463+x473);
evalcond[1]=((0.75000087746404)+x461+(((-1.0)*new_r12*x457)));
evalcond[2]=(x459+x470+new_r02);
evalcond[3]=((((-1.0)*x454))+x467+new_r12);
evalcond[4]=((((0.250000205066586)*sj0))+(((-1.0)*x450))+x465+x464);
evalcond[5]=((((-0.250000205066586)*cj0))+(((-1.0)*x452))+x466+x474);
evalcond[6]=((((-1.0)*new_r10*x457))+(((0.433013258970445)*sj0))+x451+x472);
evalcond[7]=((((-1.0)*new_r11*x457))+x453+x462+(((-0.433013258970445)*cj0)));
evalcond[8]=(((x447*x451))+((sj0*x456))+new_r00+(((-1.0)*x448*x450))+(((0.250000205066586)*x455)));
evalcond[9]=((((-1.0)*cj0*x456))+((x447*x453))+new_r01+(((-0.250000205066586)*x468))+(((-1.0)*x448*x452)));
evalcond[10]=((((-1.0)*x447*x450))+((sj0*x460))+(((-0.433013258970445)*x455))+new_r10+(((-1.0)*x448*x451)));
evalcond[11]=((((-1.0)*cj0*x460))+(((-1.0)*x447*x452))+(((0.433013258970445)*x468))+new_r11+(((-1.0)*x448*x453)));
evalcond[12]=((0.749999415023631)+(((0.433010506600939)*x463))+(((0.75000087746404)*x461))+((new_r02*x459))+(((-1.0)*new_r12*x454)));
evalcond[13]=((0.433013039627618)+(((-1.0)*new_r12*x469))+(((0.250000205066586)*x473))+((new_r12*x460))+((new_r02*x456)));
evalcond[14]=((-5.41267840225675e-7)+(((0.866026442229025)*x463))+((new_r12*x471))+((new_r02*x458))+(((-0.49999820135573)*x461)));
evalcond[15]=((((0.500000584976027)*new_r20))+(((-1.0)*new_r10*x454))+((new_r00*x459))+(((0.433010506600939)*x465))+((new_r00*x470)));
evalcond[16]=(((new_r11*x467))+(((0.500000584976027)*new_r21))+((new_r01*x459))+(((-1.0)*new_r11*x454))+(((0.75000087746404)*x462)));
evalcond[17]=(sj0+((new_r10*x460))+((new_r00*x456))+(((-1.0)*new_r10*x469))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x464)));
evalcond[18]=((((-1.0)*x449))+((new_r11*x460))+((new_r01*x456))+(((-1.0)*new_r11*x469))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x466)));
evalcond[19]=((((-1.0)*x449))+(((0.866026442229025)*x465))+(((1.08253441393799e-6)*new_r20))+((new_r00*x458))+((new_r10*x471))+(((-0.49999820135573)*x472)));
evalcond[20]=((((-1.0)*sj0))+(((1.08253441393799e-6)*new_r21))+((new_r01*x458))+(((0.866026442229025)*x474))+((new_r11*x471))+(((-0.49999820135573)*x462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x475 = IKatan2WithCheck(IkReal(((-187497440736984.0)+(((999996490152053.0)*(new_r12*new_r12))))),IkReal(((-324757120049741.0)+(((-999996490152053.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x475.valid){
continue;
}
CheckValue<IkReal> x476=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02)))),-1);
if(!x476.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x475.value)+(((1.5707963267949)*(x476.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x477=IKcos(j2);
IkReal x478=IKsin(j2);
IkReal x479=((1.0)*cj0);
IkReal x480=((0.866026442229025)*cj0);
IkReal x481=((0.49999820135573)*cj0);
IkReal x482=((0.866026442229025)*sj0);
IkReal x483=((0.49999820135573)*sj0);
IkReal x484=((0.75000087746404)*x478);
IkReal x485=(sj0*x478);
IkReal x486=((0.433013258970445)*x477);
IkReal x487=((1.0)*x478);
IkReal x488=((0.866026442229025)*x478);
IkReal x489=((0.433010506600939)*x478);
IkReal x490=((0.250000205066586)*x477);
IkReal x491=(new_r02*x477);
IkReal x492=(new_r01*x477);
IkReal x493=(new_r12*x477);
IkReal x494=(new_r00*x478);
IkReal x495=(new_r10*x477);
IkReal x496=(new_r01*x478);
IkReal x497=((0.433010506600939)*x477);
IkReal x498=(cj0*x478);
IkReal x499=((0.433013258970445)*x478);
IkReal x500=((0.75000087746404)*x477);
IkReal x501=((0.49999820135573)*x478);
IkReal x502=(new_r00*x477);
IkReal x503=(new_r02*x478);
IkReal x504=(new_r11*x477);
evalcond[0]=((0.433010506600939)+x493+x503);
evalcond[1]=((0.75000087746404)+x491+(((-1.0)*new_r12*x487)));
evalcond[2]=(x489+x500+new_r02);
evalcond[3]=((((-1.0)*x484))+x497+new_r12);
evalcond[4]=((((-1.0)*x480))+(((0.250000205066586)*sj0))+x494+x495);
evalcond[5]=((((-0.250000205066586)*cj0))+(((-1.0)*x482))+x496+x504);
evalcond[6]=((((-1.0)*new_r10*x487))+(((0.433013258970445)*sj0))+x481+x502);
evalcond[7]=((((-1.0)*new_r11*x487))+x483+x492+(((-0.433013258970445)*cj0)));
evalcond[8]=(((sj0*x486))+(((0.250000205066586)*x485))+new_r00+((x477*x481))+(((-1.0)*x478*x480)));
evalcond[9]=((((-0.250000205066586)*x498))+(((-1.0)*cj0*x486))+new_r01+((x477*x483))+(((-1.0)*x478*x482)));
evalcond[10]=((((-0.433013258970445)*x485))+((sj0*x490))+(((-1.0)*x477*x480))+new_r10+(((-1.0)*x478*x481)));
evalcond[11]=((((0.433013258970445)*x498))+(((-1.0)*x477*x482))+(((-1.0)*cj0*x490))+new_r11+(((-1.0)*x478*x483)));
evalcond[12]=((0.749999415023631)+((new_r02*x489))+(((0.75000087746404)*x491))+(((0.433010506600939)*x493))+(((-1.0)*new_r12*x484)));
evalcond[13]=((0.433013039627618)+((new_r02*x486))+((new_r12*x490))+(((0.250000205066586)*x503))+(((-1.0)*new_r12*x499)));
evalcond[14]=((-5.41267840225675e-7)+(((-0.49999820135573)*x491))+((new_r02*x488))+(((0.866026442229025)*x493))+((new_r12*x501)));
evalcond[15]=((((0.500000584976027)*new_r20))+(((-1.0)*new_r10*x484))+((new_r00*x500))+((new_r00*x489))+(((0.433010506600939)*x495)));
evalcond[16]=((((0.500000584976027)*new_r21))+(((-1.0)*new_r11*x484))+(((0.75000087746404)*x492))+((new_r11*x497))+((new_r01*x489)));
evalcond[17]=(sj0+(((-1.0)*new_r10*x499))+((new_r10*x490))+(((-0.866025066047432)*new_r20))+((new_r00*x486))+(((0.250000205066586)*x494)));
evalcond[18]=((((-1.0)*new_r11*x499))+(((-1.0)*x479))+((new_r11*x490))+(((-0.866025066047432)*new_r21))+((new_r01*x486))+(((0.250000205066586)*x496)));
evalcond[19]=((((0.866026442229025)*x495))+(((1.08253441393799e-6)*new_r20))+(((-0.49999820135573)*x502))+(((-1.0)*x479))+((new_r10*x501))+((new_r00*x488)));
evalcond[20]=((((-0.49999820135573)*x492))+(((-1.0)*sj0))+(((1.08253441393799e-6)*new_r21))+((new_r11*x501))+((new_r01*x488))+(((0.866026442229025)*x504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x505=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r02))+(((-433008986799901.0)*new_r12)))),-1);
if(!x505.valid){
continue;
}
CheckValue<IkReal> x506 = IKatan2WithCheck(IkReal(((-324757120049741.0)+(((999996490152053.0)*new_r02*new_r12)))),IkReal(((187497440736984.0)+(((-999996490152053.0)*(new_r02*new_r02))))),IKFAST_ATAN2_MAGTHRESH);
if(!x506.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x505.value)))+(x506.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x507=IKcos(j2);
IkReal x508=IKsin(j2);
IkReal x509=((1.0)*cj0);
IkReal x510=((0.866026442229025)*cj0);
IkReal x511=((0.49999820135573)*cj0);
IkReal x512=((0.866026442229025)*sj0);
IkReal x513=((0.49999820135573)*sj0);
IkReal x514=((0.75000087746404)*x508);
IkReal x515=(sj0*x508);
IkReal x516=((0.433013258970445)*x507);
IkReal x517=((1.0)*x508);
IkReal x518=((0.866026442229025)*x508);
IkReal x519=((0.433010506600939)*x508);
IkReal x520=((0.250000205066586)*x507);
IkReal x521=(new_r02*x507);
IkReal x522=(new_r01*x507);
IkReal x523=(new_r12*x507);
IkReal x524=(new_r00*x508);
IkReal x525=(new_r10*x507);
IkReal x526=(new_r01*x508);
IkReal x527=((0.433010506600939)*x507);
IkReal x528=(cj0*x508);
IkReal x529=((0.433013258970445)*x508);
IkReal x530=((0.75000087746404)*x507);
IkReal x531=((0.49999820135573)*x508);
IkReal x532=(new_r00*x507);
IkReal x533=(new_r02*x508);
IkReal x534=(new_r11*x507);
evalcond[0]=((0.433010506600939)+x533+x523);
evalcond[1]=((0.75000087746404)+(((-1.0)*new_r12*x517))+x521);
evalcond[2]=(x530+x519+new_r02);
evalcond[3]=(x527+new_r12+(((-1.0)*x514)));
evalcond[4]=((((0.250000205066586)*sj0))+x524+x525+(((-1.0)*x510)));
evalcond[5]=((((-0.250000205066586)*cj0))+x534+x526+(((-1.0)*x512)));
evalcond[6]=((((-1.0)*new_r10*x517))+(((0.433013258970445)*sj0))+x532+x511);
evalcond[7]=((((-1.0)*new_r11*x517))+(((-0.433013258970445)*cj0))+x522+x513);
evalcond[8]=(((x507*x511))+new_r00+(((-1.0)*x508*x510))+((sj0*x516))+(((0.250000205066586)*x515)));
evalcond[9]=(((x507*x513))+(((-0.250000205066586)*x528))+new_r01+(((-1.0)*x508*x512))+(((-1.0)*cj0*x516)));
evalcond[10]=(((sj0*x520))+(((-0.433013258970445)*x515))+new_r10+(((-1.0)*x508*x511))+(((-1.0)*x507*x510)));
evalcond[11]=((((0.433013258970445)*x528))+(((-1.0)*cj0*x520))+new_r11+(((-1.0)*x508*x513))+(((-1.0)*x507*x512)));
evalcond[12]=((0.749999415023631)+(((0.75000087746404)*x521))+((new_r02*x519))+(((-1.0)*new_r12*x514))+(((0.433010506600939)*x523)));
evalcond[13]=((0.433013039627618)+((new_r02*x516))+((new_r12*x520))+(((-1.0)*new_r12*x529))+(((0.250000205066586)*x533)));
evalcond[14]=((-5.41267840225675e-7)+((new_r02*x518))+((new_r12*x531))+(((0.866026442229025)*x523))+(((-0.49999820135573)*x521)));
evalcond[15]=(((new_r00*x519))+(((0.500000584976027)*new_r20))+(((-1.0)*new_r10*x514))+(((0.433010506600939)*x525))+((new_r00*x530)));
evalcond[16]=(((new_r01*x519))+(((0.75000087746404)*x522))+(((0.500000584976027)*new_r21))+(((-1.0)*new_r11*x514))+((new_r11*x527)));
evalcond[17]=(((new_r00*x516))+sj0+((new_r10*x520))+(((-1.0)*new_r10*x529))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x524)));
evalcond[18]=(((new_r01*x516))+(((-1.0)*x509))+((new_r11*x520))+(((-1.0)*new_r11*x529))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x526)));
evalcond[19]=(((new_r00*x518))+(((1.08253441393799e-6)*new_r20))+(((-1.0)*x509))+(((0.866026442229025)*x525))+(((-0.49999820135573)*x532))+((new_r10*x531)));
evalcond[20]=(((new_r01*x518))+(((-1.0)*sj0))+(((1.08253441393799e-6)*new_r21))+(((0.866026442229025)*x534))+((new_r11*x531))+(((-0.49999820135573)*x522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((6.14158329400386)+(IKabs(((1.0)+(IKsign(sj1)))))+(IKabs(cj1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.15470098869363)*new_r20))+(((-1.44338034437518e-6)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.15470098869363)*new_r21))+(((-1.44338034437518e-6)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.15470098869363)*new_r20))+(((-1.44338034437518e-6)*new_r21))))+IKsqr(((((-1.15470098869363)*new_r21))+(((-1.44338034437518e-6)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.15470098869363)*new_r20))+(((-1.44338034437518e-6)*new_r21))), ((((-1.15470098869363)*new_r21))+(((-1.44338034437518e-6)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x535=IKsin(j0);
IkReal x536=IKcos(j0);
evalcond[0]=((((-0.866025066047432)*x535))+(((1.08253441393799e-6)*x536))+new_r20);
evalcond[1]=((((1.08253441393799e-6)*x535))+(((0.866025066047432)*x536))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
IkReal x537=new_r02*new_r02;
j2eval[0]=((((1.73206161520519)*new_r02))+(((-1.0)*new_r12)));
j2eval[1]=((1.0)+(((-4.61883457642595)*new_r02*new_r12))+(((7.1111887620993)*(x537*x537)))+(((-2.66666874658427)*x537))+(((7.1111887620993)*x537*(new_r12*new_r12))));
j2eval[2]=IKsign(((((749998245075000.0)*new_r02))+(((-433008986799901.0)*new_r12))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
IkReal x538=new_r12*new_r12;
j2eval[0]=((((1.73206161520519)*new_r12))+new_r02);
j2eval[1]=((1.0)+(((7.1111887620993)*x538*(new_r02*new_r02)))+(((7.1111887620993)*(x538*x538)))+(((4.61883457642595)*new_r02*new_r12))+(((-2.66666874658427)*x538)));
j2eval[2]=IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
IkReal x539=new_r02*new_r02;
j2eval[0]=((((1.73206161520519)*new_r12))+new_r02);
j2eval[1]=((1.0)+(((1.5395923119446)*new_r02*new_r12))+(((2.37036667275206)*(x539*x539)))+(((-2.66666874658427)*x539))+(((2.37036667275206)*x539*(new_r12*new_r12))));
j2eval[2]=IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[4];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=(new_r10+(((-1.73206161520519)*new_r00)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=(new_r11+(((-1.73206161520519)*new_r01)));
j2eval[1]=5624995940.50689;
j2eval[2]=sj0;
j2eval[3]=IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((((-1.0)*new_r00))+(((-1.73206161520519)*new_r10)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x540=(new_r01*new_r10);
IkReal x541=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x540))+x541);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))))+(IKabs(((((-1.33332787645226e+28)*new_r11))+(((4.61878500004103e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x541))+(((-5.33330713107669e+28)*x540))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x542=(new_r00*new_r01);
IkReal x543=(new_r10*new_r11);
j2eval[0]=((((-1.0)*x543))+(((-1.0)*x542)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x543))+(((-5.33330713107669e+28)*x542))));
j2eval[2]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x544=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x544.valid){
continue;
}
CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r00))+(((2.30939270191783e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r10))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x545.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x544.value)))+(x545.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x546=IKsin(j2);
IkReal x547=IKcos(j2);
IkReal x548=((0.75000087746404)*x546);
IkReal x549=(new_r01*x547);
IkReal x550=(new_r11*x546);
IkReal x551=(new_r01*x546);
IkReal x552=((0.433010506600939)*x546);
IkReal x553=((0.433010506600939)*x547);
IkReal x554=(new_r10*x547);
IkReal x555=(new_r00*x546);
IkReal x556=((0.49999820135573)*x547);
IkReal x557=(new_r10*x546);
IkReal x558=(new_r11*x547);
IkReal x559=((0.75000087746404)*x547);
IkReal x560=(new_r00*x547);
evalcond[0]=((0.250000205066586)+x555+x554);
evalcond[1]=((0.866026442229025)+x558+x551);
evalcond[2]=((0.433013258970445)+(((-1.0)*x557))+x560);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x550))+x549);
evalcond[4]=((((-1.0)*x559))+(((-1.0)*x552)));
evalcond[5]=((((-1.0)*x553))+x548);
evalcond[6]=((((0.250000205066586)*x546))+(((0.433013258970445)*x547))+new_r00);
evalcond[7]=((((0.866026442229025)*x546))+(((-1.0)*x556))+new_r01);
evalcond[8]=((((0.250000205066586)*x547))+(((-0.433013258970445)*x546))+new_r10);
evalcond[9]=((((0.866026442229025)*x547))+(((0.49999820135573)*x546))+new_r11);
evalcond[10]=((((-0.433013258970445)*x550))+(((0.433013258970445)*x549))+(((0.250000205066586)*x558))+(((0.250000205066586)*x551)));
evalcond[11]=(((new_r10*x548))+(((-1.0)*new_r10*x553))+(((-1.0)*new_r00*x552))+(((-1.0)*new_r00*x559)));
evalcond[12]=((((-0.75000087746404)*x549))+(((-1.0)*new_r11*x553))+((new_r11*x548))+(((-0.433010506600939)*x551)));
evalcond[13]=((((-0.49999820135573)*x557))+(((-0.866026442229025)*x555))+(((-0.866026442229025)*x554))+((new_r00*x556)));
evalcond[14]=((1.0)+(((0.433013258970445)*x560))+(((-0.433013258970445)*x557))+(((0.250000205066586)*x555))+(((0.250000205066586)*x554)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x549))+(((-0.49999820135573)*x550))+(((-0.866026442229025)*x558))+(((-0.866026442229025)*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x561=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r10*new_r11))+(((-5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x561.valid){
continue;
}
CheckValue<IkReal> x562 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x562.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x561.value)))+(x562.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x563=IKsin(j2);
IkReal x564=IKcos(j2);
IkReal x565=((0.75000087746404)*x563);
IkReal x566=(new_r01*x564);
IkReal x567=(new_r11*x563);
IkReal x568=(new_r01*x563);
IkReal x569=((0.433010506600939)*x563);
IkReal x570=((0.433010506600939)*x564);
IkReal x571=(new_r10*x564);
IkReal x572=(new_r00*x563);
IkReal x573=((0.49999820135573)*x564);
IkReal x574=(new_r10*x563);
IkReal x575=(new_r11*x564);
IkReal x576=((0.75000087746404)*x564);
IkReal x577=(new_r00*x564);
evalcond[0]=((0.250000205066586)+x571+x572);
evalcond[1]=((0.866026442229025)+x575+x568);
evalcond[2]=((0.433013258970445)+(((-1.0)*x574))+x577);
evalcond[3]=((-0.49999820135573)+x566+(((-1.0)*x567)));
evalcond[4]=((((-1.0)*x576))+(((-1.0)*x569)));
evalcond[5]=((((-1.0)*x570))+x565);
evalcond[6]=((((0.250000205066586)*x563))+(((0.433013258970445)*x564))+new_r00);
evalcond[7]=((((-1.0)*x573))+new_r01+(((0.866026442229025)*x563)));
evalcond[8]=((((0.250000205066586)*x564))+new_r10+(((-0.433013258970445)*x563)));
evalcond[9]=((((0.49999820135573)*x563))+new_r11+(((0.866026442229025)*x564)));
evalcond[10]=((((0.250000205066586)*x575))+(((0.433013258970445)*x566))+(((0.250000205066586)*x568))+(((-0.433013258970445)*x567)));
evalcond[11]=((((-1.0)*new_r00*x569))+(((-1.0)*new_r10*x570))+(((-1.0)*new_r00*x576))+((new_r10*x565)));
evalcond[12]=((((-0.433010506600939)*x568))+(((-1.0)*new_r11*x570))+(((-0.75000087746404)*x566))+((new_r11*x565)));
evalcond[13]=(((new_r00*x573))+(((-0.49999820135573)*x574))+(((-0.866026442229025)*x571))+(((-0.866026442229025)*x572)));
evalcond[14]=((1.0)+(((0.250000205066586)*x571))+(((0.250000205066586)*x572))+(((0.433013258970445)*x577))+(((-0.433013258970445)*x574)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x566))+(((-0.866026442229025)*x568))+(((-0.866026442229025)*x575))+(((-0.49999820135573)*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x578 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r11))+(((4.61878500004103e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x578.valid){
continue;
}
CheckValue<IkReal> x579=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x579.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x578.value)+(((1.5707963267949)*(x579.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x580=IKsin(j2);
IkReal x581=IKcos(j2);
IkReal x582=((0.75000087746404)*x580);
IkReal x583=(new_r01*x581);
IkReal x584=(new_r11*x580);
IkReal x585=(new_r01*x580);
IkReal x586=((0.433010506600939)*x580);
IkReal x587=((0.433010506600939)*x581);
IkReal x588=(new_r10*x581);
IkReal x589=(new_r00*x580);
IkReal x590=((0.49999820135573)*x581);
IkReal x591=(new_r10*x580);
IkReal x592=(new_r11*x581);
IkReal x593=((0.75000087746404)*x581);
IkReal x594=(new_r00*x581);
evalcond[0]=((0.250000205066586)+x588+x589);
evalcond[1]=((0.866026442229025)+x585+x592);
evalcond[2]=((0.433013258970445)+(((-1.0)*x591))+x594);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x584))+x583);
evalcond[4]=((((-1.0)*x593))+(((-1.0)*x586)));
evalcond[5]=(x582+(((-1.0)*x587)));
evalcond[6]=((((0.250000205066586)*x580))+(((0.433013258970445)*x581))+new_r00);
evalcond[7]=((((0.866026442229025)*x580))+(((-1.0)*x590))+new_r01);
evalcond[8]=((((0.250000205066586)*x581))+(((-0.433013258970445)*x580))+new_r10);
evalcond[9]=((((0.866026442229025)*x581))+(((0.49999820135573)*x580))+new_r11);
evalcond[10]=((((0.250000205066586)*x585))+(((-0.433013258970445)*x584))+(((0.433013258970445)*x583))+(((0.250000205066586)*x592)));
evalcond[11]=((((-1.0)*new_r00*x593))+(((-1.0)*new_r10*x587))+(((-1.0)*new_r00*x586))+((new_r10*x582)));
evalcond[12]=((((-0.433010506600939)*x585))+(((-1.0)*new_r11*x587))+(((-0.75000087746404)*x583))+((new_r11*x582)));
evalcond[13]=(((new_r00*x590))+(((-0.49999820135573)*x591))+(((-0.866026442229025)*x588))+(((-0.866026442229025)*x589)));
evalcond[14]=((1.0)+(((0.250000205066586)*x588))+(((0.250000205066586)*x589))+(((0.433013258970445)*x594))+(((-0.433013258970445)*x591)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x584))+(((-0.866026442229025)*x592))+(((0.49999820135573)*x583))+(((-0.866026442229025)*x585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x595=(new_r01*new_r10);
IkReal x596=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x595))+x596);
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x595))+(((5.33330713107669e+28)*x596))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x597=(new_r00*new_r01);
IkReal x598=(new_r10*new_r11);
j2eval[0]=(x597+x598);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x597))+(((5.33330713107669e+28)*x598))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x599=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x599.valid){
continue;
}
CheckValue<IkReal> x600 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r00))+(((-2.30939270191783e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r10))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x600.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x599.value)))+(x600.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x601=IKsin(j2);
IkReal x602=IKcos(j2);
IkReal x603=((0.75000087746404)*x601);
IkReal x604=(new_r01*x602);
IkReal x605=(new_r11*x601);
IkReal x606=(new_r01*x601);
IkReal x607=((0.433010506600939)*x601);
IkReal x608=((0.433010506600939)*x602);
IkReal x609=(new_r10*x602);
IkReal x610=(new_r00*x601);
IkReal x611=((0.49999820135573)*x602);
IkReal x612=(new_r10*x601);
IkReal x613=(new_r11*x602);
IkReal x614=((0.75000087746404)*x602);
IkReal x615=(new_r00*x602);
evalcond[0]=((-0.250000205066586)+x609+x610);
evalcond[1]=((-0.866026442229025)+x606+x613);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x612))+x615);
evalcond[3]=((0.49999820135573)+(((-1.0)*x605))+x604);
evalcond[4]=((((-1.0)*x614))+(((-1.0)*x607)));
evalcond[5]=(x603+(((-1.0)*x608)));
evalcond[6]=((((-0.250000205066586)*x601))+(((-0.433013258970445)*x602))+new_r00);
evalcond[7]=((((-0.866026442229025)*x601))+x611+new_r01);
evalcond[8]=((((0.433013258970445)*x601))+(((-0.250000205066586)*x602))+new_r10);
evalcond[9]=((((-0.866026442229025)*x602))+new_r11+(((-0.49999820135573)*x601)));
evalcond[10]=((((-0.433013258970445)*x605))+(((0.250000205066586)*x606))+(((0.250000205066586)*x613))+(((0.433013258970445)*x604)));
evalcond[11]=((((-1.0)*new_r10*x608))+((new_r10*x603))+(((-1.0)*new_r00*x614))+(((-1.0)*new_r00*x607)));
evalcond[12]=((((-1.0)*new_r11*x608))+(((-0.433010506600939)*x606))+(((-0.75000087746404)*x604))+((new_r11*x603)));
evalcond[13]=((((-0.866026442229025)*x610))+(((-0.49999820135573)*x612))+(((-0.866026442229025)*x609))+((new_r00*x611)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x609))+(((-0.433013258970445)*x612))+(((0.250000205066586)*x610))+(((0.433013258970445)*x615)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x613))+(((-0.866026442229025)*x606))+(((-0.49999820135573)*x605))+(((0.49999820135573)*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x616=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x616.valid){
continue;
}
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x616.value)))+(x617.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x618=IKsin(j2);
IkReal x619=IKcos(j2);
IkReal x620=((0.75000087746404)*x618);
IkReal x621=(new_r01*x619);
IkReal x622=(new_r11*x618);
IkReal x623=(new_r01*x618);
IkReal x624=((0.433010506600939)*x618);
IkReal x625=((0.433010506600939)*x619);
IkReal x626=(new_r10*x619);
IkReal x627=(new_r00*x618);
IkReal x628=((0.49999820135573)*x619);
IkReal x629=(new_r10*x618);
IkReal x630=(new_r11*x619);
IkReal x631=((0.75000087746404)*x619);
IkReal x632=(new_r00*x619);
evalcond[0]=((-0.250000205066586)+x627+x626);
evalcond[1]=((-0.866026442229025)+x623+x630);
evalcond[2]=((-0.433013258970445)+x632+(((-1.0)*x629)));
evalcond[3]=((0.49999820135573)+x621+(((-1.0)*x622)));
evalcond[4]=((((-1.0)*x624))+(((-1.0)*x631)));
evalcond[5]=((((-1.0)*x625))+x620);
evalcond[6]=((((-0.250000205066586)*x618))+(((-0.433013258970445)*x619))+new_r00);
evalcond[7]=((((-0.866026442229025)*x618))+x628+new_r01);
evalcond[8]=((((-0.250000205066586)*x619))+new_r10+(((0.433013258970445)*x618)));
evalcond[9]=((((-0.866026442229025)*x619))+(((-0.49999820135573)*x618))+new_r11);
evalcond[10]=((((0.250000205066586)*x623))+(((0.250000205066586)*x630))+(((0.433013258970445)*x621))+(((-0.433013258970445)*x622)));
evalcond[11]=((((-1.0)*new_r00*x624))+(((-1.0)*new_r00*x631))+((new_r10*x620))+(((-1.0)*new_r10*x625)));
evalcond[12]=((((-0.433010506600939)*x623))+((new_r11*x620))+(((-1.0)*new_r11*x625))+(((-0.75000087746404)*x621)));
evalcond[13]=((((-0.866026442229025)*x627))+(((-0.866026442229025)*x626))+(((-0.49999820135573)*x629))+((new_r00*x628)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x627))+(((0.250000205066586)*x626))+(((0.433013258970445)*x632))+(((-0.433013258970445)*x629)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x623))+(((-0.866026442229025)*x630))+(((-0.49999820135573)*x622))+(((0.49999820135573)*x621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x633=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x633.valid){
continue;
}
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x633.value)))+(x634.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x635=IKsin(j2);
IkReal x636=IKcos(j2);
IkReal x637=((0.75000087746404)*x635);
IkReal x638=(new_r01*x636);
IkReal x639=(new_r11*x635);
IkReal x640=(new_r01*x635);
IkReal x641=((0.433010506600939)*x635);
IkReal x642=((0.433010506600939)*x636);
IkReal x643=(new_r10*x636);
IkReal x644=(new_r00*x635);
IkReal x645=((0.49999820135573)*x636);
IkReal x646=(new_r10*x635);
IkReal x647=(new_r11*x636);
IkReal x648=((0.75000087746404)*x636);
IkReal x649=(new_r00*x636);
evalcond[0]=((-0.250000205066586)+x644+x643);
evalcond[1]=((-0.866026442229025)+x647+x640);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x646))+x649);
evalcond[3]=((0.49999820135573)+x638+(((-1.0)*x639)));
evalcond[4]=((((-1.0)*x641))+(((-1.0)*x648)));
evalcond[5]=((((-1.0)*x642))+x637);
evalcond[6]=((((-0.433013258970445)*x636))+(((-0.250000205066586)*x635))+new_r00);
evalcond[7]=((((-0.866026442229025)*x635))+x645+new_r01);
evalcond[8]=((((-0.250000205066586)*x636))+new_r10+(((0.433013258970445)*x635)));
evalcond[9]=((((-0.49999820135573)*x635))+(((-0.866026442229025)*x636))+new_r11);
evalcond[10]=((((0.250000205066586)*x647))+(((0.250000205066586)*x640))+(((0.433013258970445)*x638))+(((-0.433013258970445)*x639)));
evalcond[11]=((((-1.0)*new_r10*x642))+(((-1.0)*new_r00*x648))+(((-1.0)*new_r00*x641))+((new_r10*x637)));
evalcond[12]=((((-1.0)*new_r11*x642))+(((-0.433010506600939)*x640))+((new_r11*x637))+(((-0.75000087746404)*x638)));
evalcond[13]=((((-0.866026442229025)*x644))+(((-0.866026442229025)*x643))+((new_r00*x645))+(((-0.49999820135573)*x646)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x649))+(((-0.433013258970445)*x646))+(((0.250000205066586)*x644))+(((0.250000205066586)*x643)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x639))+(((-0.866026442229025)*x647))+(((-0.866026442229025)*x640))+(((0.49999820135573)*x638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x650=(new_r01*new_r10);
IkReal x651=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x650))+x651);
j2eval[1]=IKsign(((((5.33330713107669e+28)*x651))+(((-5.33330713107669e+28)*x650))));
j2eval[2]=((IKabs(((((1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))))+(IKabs(((((-1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x652=(new_r00*new_r01);
IkReal x653=(new_r10*new_r11);
j2eval[0]=((((-1.0)*x652))+(((-1.0)*x653)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x653))+(((-5.33330713107669e+28)*x652))));
j2eval[2]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))))+(IKabs(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
j2eval[0]=-1.0;
j2eval[1]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*(new_r10*new_r10)))+(((-5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x655.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x654.value)+(((1.5707963267949)*(x655.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x656=IKsin(j2);
IkReal x657=IKcos(j2);
IkReal x658=((0.75000087746404)*x656);
IkReal x659=(new_r01*x657);
IkReal x660=(new_r11*x656);
IkReal x661=(new_r01*x656);
IkReal x662=((0.433010506600939)*x656);
IkReal x663=((0.433010506600939)*x657);
IkReal x664=(new_r10*x657);
IkReal x665=(new_r00*x656);
IkReal x666=((0.49999820135573)*x657);
IkReal x667=(new_r10*x656);
IkReal x668=(new_r11*x657);
IkReal x669=((0.75000087746404)*x657);
IkReal x670=(new_r00*x657);
evalcond[0]=((0.866026442229025)+x665+x664);
evalcond[1]=((-0.250000205066586)+x668+x661);
evalcond[2]=((-0.49999820135573)+(((-1.0)*x667))+x670);
evalcond[3]=((-0.433013258970445)+(((-1.0)*x660))+x659);
evalcond[4]=((((-1.0)*x662))+(((-1.0)*x669)));
evalcond[5]=((((-1.0)*x663))+x658);
evalcond[6]=((((0.866026442229025)*x656))+(((-1.0)*x666))+new_r00);
evalcond[7]=((((-0.433013258970445)*x657))+(((-0.250000205066586)*x656))+new_r01);
evalcond[8]=((((0.866026442229025)*x657))+(((0.49999820135573)*x656))+new_r10);
evalcond[9]=((((0.433013258970445)*x656))+(((-0.250000205066586)*x657))+new_r11);
evalcond[10]=((((-0.433013258970445)*x667))+(((0.433013258970445)*x670))+(((0.250000205066586)*x665))+(((0.250000205066586)*x664)));
evalcond[11]=((((-1.0)*new_r10*x663))+((new_r10*x658))+(((-1.0)*new_r00*x669))+(((-1.0)*new_r00*x662)));
evalcond[12]=((((-0.433010506600939)*x661))+(((-1.0)*new_r11*x663))+((new_r11*x658))+(((-0.75000087746404)*x659)));
evalcond[13]=((((0.49999820135573)*x659))+(((-0.866026442229025)*x668))+(((-0.866026442229025)*x661))+(((-0.49999820135573)*x660)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x659))+(((-0.433013258970445)*x660))+(((0.250000205066586)*x668))+(((0.250000205066586)*x661)));
evalcond[15]=((-1.0)+(((-0.866026442229025)*x665))+(((-0.866026442229025)*x664))+(((-0.49999820135573)*x667))+((new_r00*x666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x671=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r10*new_r11))+(((-5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x671.valid){
continue;
}
CheckValue<IkReal> x672 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x672.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x671.value)))+(x672.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x673=IKsin(j2);
IkReal x674=IKcos(j2);
IkReal x675=((0.75000087746404)*x673);
IkReal x676=(new_r01*x674);
IkReal x677=(new_r11*x673);
IkReal x678=(new_r01*x673);
IkReal x679=((0.433010506600939)*x673);
IkReal x680=((0.433010506600939)*x674);
IkReal x681=(new_r10*x674);
IkReal x682=(new_r00*x673);
IkReal x683=((0.49999820135573)*x674);
IkReal x684=(new_r10*x673);
IkReal x685=(new_r11*x674);
IkReal x686=((0.75000087746404)*x674);
IkReal x687=(new_r00*x674);
evalcond[0]=((0.866026442229025)+x682+x681);
evalcond[1]=((-0.250000205066586)+x678+x685);
evalcond[2]=((-0.49999820135573)+x687+(((-1.0)*x684)));
evalcond[3]=((-0.433013258970445)+x676+(((-1.0)*x677)));
evalcond[4]=((((-1.0)*x686))+(((-1.0)*x679)));
evalcond[5]=((((-1.0)*x680))+x675);
evalcond[6]=((((0.866026442229025)*x673))+(((-1.0)*x683))+new_r00);
evalcond[7]=((((-0.433013258970445)*x674))+(((-0.250000205066586)*x673))+new_r01);
evalcond[8]=((((0.866026442229025)*x674))+(((0.49999820135573)*x673))+new_r10);
evalcond[9]=((((-0.250000205066586)*x674))+new_r11+(((0.433013258970445)*x673)));
evalcond[10]=((((0.250000205066586)*x681))+(((0.250000205066586)*x682))+(((0.433013258970445)*x687))+(((-0.433013258970445)*x684)));
evalcond[11]=((((-1.0)*new_r10*x680))+((new_r10*x675))+(((-1.0)*new_r00*x679))+(((-1.0)*new_r00*x686)));
evalcond[12]=(((new_r11*x675))+(((-0.75000087746404)*x676))+(((-0.433010506600939)*x678))+(((-1.0)*new_r11*x680)));
evalcond[13]=((((-0.866026442229025)*x685))+(((-0.49999820135573)*x677))+(((0.49999820135573)*x676))+(((-0.866026442229025)*x678)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x685))+(((0.433013258970445)*x676))+(((-0.433013258970445)*x677))+(((0.250000205066586)*x678)));
evalcond[15]=((-1.0)+(((-0.866026442229025)*x681))+(((-0.866026442229025)*x682))+(((-0.49999820135573)*x684))+((new_r00*x683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x688 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))),IkReal(((((1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x688.valid){
continue;
}
CheckValue<IkReal> x689=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x689.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x688.value)+(((1.5707963267949)*(x689.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x690=IKsin(j2);
IkReal x691=IKcos(j2);
IkReal x692=((0.75000087746404)*x690);
IkReal x693=(new_r01*x691);
IkReal x694=(new_r11*x690);
IkReal x695=(new_r01*x690);
IkReal x696=((0.433010506600939)*x690);
IkReal x697=((0.433010506600939)*x691);
IkReal x698=(new_r10*x691);
IkReal x699=(new_r00*x690);
IkReal x700=((0.49999820135573)*x691);
IkReal x701=(new_r10*x690);
IkReal x702=(new_r11*x691);
IkReal x703=((0.75000087746404)*x691);
IkReal x704=(new_r00*x691);
evalcond[0]=((0.866026442229025)+x698+x699);
evalcond[1]=((-0.250000205066586)+x695+x702);
evalcond[2]=((-0.49999820135573)+(((-1.0)*x701))+x704);
evalcond[3]=((-0.433013258970445)+x693+(((-1.0)*x694)));
evalcond[4]=((((-1.0)*x703))+(((-1.0)*x696)));
evalcond[5]=(x692+(((-1.0)*x697)));
evalcond[6]=((((-1.0)*x700))+(((0.866026442229025)*x690))+new_r00);
evalcond[7]=(new_r01+(((-0.433013258970445)*x691))+(((-0.250000205066586)*x690)));
evalcond[8]=((((0.866026442229025)*x691))+(((0.49999820135573)*x690))+new_r10);
evalcond[9]=((((0.433013258970445)*x690))+new_r11+(((-0.250000205066586)*x691)));
evalcond[10]=((((-0.433013258970445)*x701))+(((0.433013258970445)*x704))+(((0.250000205066586)*x698))+(((0.250000205066586)*x699)));
evalcond[11]=(((new_r10*x692))+(((-1.0)*new_r00*x696))+(((-1.0)*new_r10*x697))+(((-1.0)*new_r00*x703)));
evalcond[12]=((((-0.75000087746404)*x693))+(((-0.433010506600939)*x695))+((new_r11*x692))+(((-1.0)*new_r11*x697)));
evalcond[13]=((((-0.49999820135573)*x694))+(((-0.866026442229025)*x695))+(((0.49999820135573)*x693))+(((-0.866026442229025)*x702)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x694))+(((0.433013258970445)*x693))+(((0.250000205066586)*x695))+(((0.250000205066586)*x702)));
evalcond[15]=((-1.0)+((new_r00*x700))+(((-0.49999820135573)*x701))+(((-0.866026442229025)*x698))+(((-0.866026442229025)*x699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x705=(new_r01*new_r10);
IkReal x706=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x705))+x706);
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x705))+(((5.33330713107669e+28)*x706))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))))+(IKabs(((((4.61878500004103e+28)*new_r11))+(((1.33332787645226e+28)*new_r10))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x707=(new_r00*new_r01);
IkReal x708=(new_r10*new_r11);
j2eval[0]=(x708+x707);
j2eval[1]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))))+(IKabs(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x708))+(((5.33330713107669e+28)*x707))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x709=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x709.valid){
continue;
}
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x709.value)))+(x710.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x711=IKsin(j2);
IkReal x712=IKcos(j2);
IkReal x713=((0.75000087746404)*x711);
IkReal x714=(new_r01*x712);
IkReal x715=(new_r11*x711);
IkReal x716=(new_r01*x711);
IkReal x717=((0.433010506600939)*x711);
IkReal x718=((0.433010506600939)*x712);
IkReal x719=(new_r10*x712);
IkReal x720=(new_r00*x711);
IkReal x721=((0.49999820135573)*x712);
IkReal x722=(new_r10*x711);
IkReal x723=(new_r11*x712);
IkReal x724=((0.75000087746404)*x712);
IkReal x725=(new_r00*x712);
evalcond[0]=((-0.866026442229025)+x719+x720);
evalcond[1]=((0.250000205066586)+x716+x723);
evalcond[2]=((0.49999820135573)+(((-1.0)*x722))+x725);
evalcond[3]=((0.433013258970445)+(((-1.0)*x715))+x714);
evalcond[4]=((((-1.0)*x724))+(((-1.0)*x717)));
evalcond[5]=((((-1.0)*x718))+x713);
evalcond[6]=((((-0.866026442229025)*x711))+x721+new_r00);
evalcond[7]=((((0.433013258970445)*x712))+(((0.250000205066586)*x711))+new_r01);
evalcond[8]=((((-0.49999820135573)*x711))+(((-0.866026442229025)*x712))+new_r10);
evalcond[9]=((((-0.433013258970445)*x711))+(((0.250000205066586)*x712))+new_r11);
evalcond[10]=((((0.250000205066586)*x720))+(((0.433013258970445)*x725))+(((-0.433013258970445)*x722))+(((0.250000205066586)*x719)));
evalcond[11]=((((-1.0)*new_r10*x718))+((new_r10*x713))+(((-1.0)*new_r00*x724))+(((-1.0)*new_r00*x717)));
evalcond[12]=((((-0.433010506600939)*x716))+((new_r11*x713))+(((-1.0)*new_r11*x718))+(((-0.75000087746404)*x714)));
evalcond[13]=((((0.49999820135573)*x714))+(((-0.49999820135573)*x715))+(((-0.866026442229025)*x723))+(((-0.866026442229025)*x716)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x715))+(((0.250000205066586)*x723))+(((0.433013258970445)*x714))+(((0.250000205066586)*x716)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x722))+((new_r00*x721))+(((-0.866026442229025)*x720))+(((-0.866026442229025)*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x726=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x726.valid){
continue;
}
CheckValue<IkReal> x727 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x727.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x726.value)))+(x727.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x728=IKsin(j2);
IkReal x729=IKcos(j2);
IkReal x730=((0.75000087746404)*x728);
IkReal x731=(new_r01*x729);
IkReal x732=(new_r11*x728);
IkReal x733=(new_r01*x728);
IkReal x734=((0.433010506600939)*x728);
IkReal x735=((0.433010506600939)*x729);
IkReal x736=(new_r10*x729);
IkReal x737=(new_r00*x728);
IkReal x738=((0.49999820135573)*x729);
IkReal x739=(new_r10*x728);
IkReal x740=(new_r11*x729);
IkReal x741=((0.75000087746404)*x729);
IkReal x742=(new_r00*x729);
evalcond[0]=((-0.866026442229025)+x737+x736);
evalcond[1]=((0.250000205066586)+x733+x740);
evalcond[2]=((0.49999820135573)+(((-1.0)*x739))+x742);
evalcond[3]=((0.433013258970445)+(((-1.0)*x732))+x731);
evalcond[4]=((((-1.0)*x734))+(((-1.0)*x741)));
evalcond[5]=((((-1.0)*x735))+x730);
evalcond[6]=(x738+new_r00+(((-0.866026442229025)*x728)));
evalcond[7]=((((0.433013258970445)*x729))+new_r01+(((0.250000205066586)*x728)));
evalcond[8]=((((-0.49999820135573)*x728))+new_r10+(((-0.866026442229025)*x729)));
evalcond[9]=(new_r11+(((-0.433013258970445)*x728))+(((0.250000205066586)*x729)));
evalcond[10]=((((0.250000205066586)*x736))+(((0.250000205066586)*x737))+(((-0.433013258970445)*x739))+(((0.433013258970445)*x742)));
evalcond[11]=((((-1.0)*new_r00*x741))+(((-1.0)*new_r00*x734))+(((-1.0)*new_r10*x735))+((new_r10*x730)));
evalcond[12]=((((-0.433010506600939)*x733))+(((-0.75000087746404)*x731))+(((-1.0)*new_r11*x735))+((new_r11*x730)));
evalcond[13]=((((-0.49999820135573)*x732))+(((-0.866026442229025)*x733))+(((0.49999820135573)*x731))+(((-0.866026442229025)*x740)));
evalcond[14]=((1.0)+(((0.250000205066586)*x733))+(((0.433013258970445)*x731))+(((-0.433013258970445)*x732))+(((0.250000205066586)*x740)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x739))+((new_r00*x738))+(((-0.866026442229025)*x736))+(((-0.866026442229025)*x737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*new_r11))+(((1.33332787645226e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
CheckValue<IkReal> x744=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x744.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x743.value)+(((1.5707963267949)*(x744.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x745=IKsin(j2);
IkReal x746=IKcos(j2);
IkReal x747=((0.75000087746404)*x745);
IkReal x748=(new_r01*x746);
IkReal x749=(new_r11*x745);
IkReal x750=(new_r01*x745);
IkReal x751=((0.433010506600939)*x745);
IkReal x752=((0.433010506600939)*x746);
IkReal x753=(new_r10*x746);
IkReal x754=(new_r00*x745);
IkReal x755=((0.49999820135573)*x746);
IkReal x756=(new_r10*x745);
IkReal x757=(new_r11*x746);
IkReal x758=((0.75000087746404)*x746);
IkReal x759=(new_r00*x746);
evalcond[0]=((-0.866026442229025)+x754+x753);
evalcond[1]=((0.250000205066586)+x757+x750);
evalcond[2]=((0.49999820135573)+(((-1.0)*x756))+x759);
evalcond[3]=((0.433013258970445)+(((-1.0)*x749))+x748);
evalcond[4]=((((-1.0)*x751))+(((-1.0)*x758)));
evalcond[5]=(x747+(((-1.0)*x752)));
evalcond[6]=((((-0.866026442229025)*x745))+x755+new_r00);
evalcond[7]=((((0.250000205066586)*x745))+new_r01+(((0.433013258970445)*x746)));
evalcond[8]=((((-0.866026442229025)*x746))+(((-0.49999820135573)*x745))+new_r10);
evalcond[9]=((((-0.433013258970445)*x745))+(((0.250000205066586)*x746))+new_r11);
evalcond[10]=((((0.250000205066586)*x753))+(((0.250000205066586)*x754))+(((-0.433013258970445)*x756))+(((0.433013258970445)*x759)));
evalcond[11]=((((-1.0)*new_r00*x758))+(((-1.0)*new_r00*x751))+(((-1.0)*new_r10*x752))+((new_r10*x747)));
evalcond[12]=((((-0.75000087746404)*x748))+(((-0.433010506600939)*x750))+(((-1.0)*new_r11*x752))+((new_r11*x747)));
evalcond[13]=((((0.49999820135573)*x748))+(((-0.49999820135573)*x749))+(((-0.866026442229025)*x750))+(((-0.866026442229025)*x757)));
evalcond[14]=((1.0)+(((0.250000205066586)*x750))+(((0.250000205066586)*x757))+(((-0.433013258970445)*x749))+(((0.433013258970445)*x748)));
evalcond[15]=((1.0)+((new_r00*x755))+(((-0.49999820135573)*x756))+(((-0.866026442229025)*x753))+(((-0.866026442229025)*x754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x760 = IKatan2WithCheck(IkReal(((((10825.2588795883)*sj0))+(((37499.810974959)*cj0)))),IkReal(((((64951.9831671769)*cj0))+(((18750.015379994)*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x760.valid){
continue;
}
CheckValue<IkReal> x761=IKPowWithIntegerCheck(IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10)))),-1);
if(!x761.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x760.value)+(((1.5707963267949)*(x761.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x762=IKsin(j2);
IkReal x763=IKcos(j2);
IkReal x764=((1.0)*cj0);
IkReal x765=((0.866026442229025)*cj0);
IkReal x766=((0.49999820135573)*cj0);
IkReal x767=((0.433013258970445)*sj0);
IkReal x768=((0.866026442229025)*sj0);
IkReal x769=((0.49999820135573)*sj0);
IkReal x770=((0.75000087746404)*x762);
IkReal x771=(sj0*x762);
IkReal x772=(new_r01*x763);
IkReal x773=(new_r11*x762);
IkReal x774=((0.866026442229025)*x762);
IkReal x775=((0.250000205066586)*x763);
IkReal x776=((0.433010506600939)*x762);
IkReal x777=((0.433010506600939)*x763);
IkReal x778=((0.75000087746404)*x763);
IkReal x779=(new_r10*x763);
IkReal x780=(new_r10*x762);
IkReal x781=(new_r00*x762);
IkReal x782=(new_r01*x762);
IkReal x783=(cj0*x762);
IkReal x784=((0.433013258970445)*x763);
IkReal x785=(new_r00*x763);
IkReal x786=(new_r11*x763);
evalcond[0]=((((-1.0)*x776))+(((-1.0)*x778)));
evalcond[1]=(x770+(((-1.0)*x777)));
evalcond[2]=((((0.250000205066586)*sj0))+x779+x765+x781);
evalcond[3]=((((-0.250000205066586)*cj0))+x768+x782+x786);
evalcond[4]=((((-1.0)*x766))+x767+x785+(((-1.0)*x780)));
evalcond[5]=((((-1.0)*x769))+(((-0.433013258970445)*cj0))+x772+(((-1.0)*x773)));
evalcond[6]=((((-1.0)*new_r00*x778))+(((-1.0)*new_r00*x776))+(((-1.0)*new_r10*x777))+((new_r10*x770)));
evalcond[7]=((((-0.75000087746404)*x772))+(((-1.0)*new_r01*x776))+(((-1.0)*new_r11*x777))+((new_r11*x770)));
evalcond[8]=(sj0+(((-0.433013258970445)*x780))+((new_r00*x784))+((new_r10*x775))+(((0.250000205066586)*x781)));
evalcond[9]=((((-1.0)*x763*x766))+(((0.250000205066586)*x771))+((x763*x767))+((x762*x765))+new_r00);
evalcond[10]=((((-1.0)*cj0*x784))+(((-1.0)*x763*x769))+(((-0.250000205066586)*x783))+((x762*x768))+new_r01);
evalcond[11]=((((-1.0)*x762*x767))+((x763*x765))+((x762*x766))+((sj0*x775))+new_r10);
evalcond[12]=((((-1.0)*cj0*x775))+((x763*x768))+((x762*x769))+new_r11+(((0.433013258970445)*x783)));
evalcond[13]=((((-1.0)*x764))+(((-0.433013258970445)*x773))+((new_r11*x775))+(((0.250000205066586)*x782))+(((0.433013258970445)*x772)));
evalcond[14]=((((0.49999820135573)*x785))+(((-0.49999820135573)*x780))+(((-1.0)*new_r00*x774))+(((-1.0)*x764))+(((-0.866026442229025)*x779)));
evalcond[15]=((((-1.0)*sj0))+(((0.49999820135573)*x772))+(((-1.0)*new_r01*x774))+(((-0.49999820135573)*x773))+(((-0.866026442229025)*x786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x787=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01)))),-1);
if(!x787.valid){
continue;
}
CheckValue<IkReal> x788 = IKatan2WithCheck(IkReal(((((-18750.015379994)*cj0))+(((64951.9831671769)*sj0)))),IkReal(((((-37499.810974959)*sj0))+(((10825.2588795883)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x788.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x787.value)))+(x788.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x789=IKsin(j2);
IkReal x790=IKcos(j2);
IkReal x791=((1.0)*cj0);
IkReal x792=((0.866026442229025)*cj0);
IkReal x793=((0.49999820135573)*cj0);
IkReal x794=((0.433013258970445)*sj0);
IkReal x795=((0.866026442229025)*sj0);
IkReal x796=((0.49999820135573)*sj0);
IkReal x797=((0.75000087746404)*x789);
IkReal x798=(sj0*x789);
IkReal x799=(new_r01*x790);
IkReal x800=(new_r11*x789);
IkReal x801=((0.866026442229025)*x789);
IkReal x802=((0.250000205066586)*x790);
IkReal x803=((0.433010506600939)*x789);
IkReal x804=((0.433010506600939)*x790);
IkReal x805=((0.75000087746404)*x790);
IkReal x806=(new_r10*x790);
IkReal x807=(new_r10*x789);
IkReal x808=(new_r00*x789);
IkReal x809=(new_r01*x789);
IkReal x810=(cj0*x789);
IkReal x811=((0.433013258970445)*x790);
IkReal x812=(new_r00*x790);
IkReal x813=(new_r11*x790);
evalcond[0]=((((-1.0)*x803))+(((-1.0)*x805)));
evalcond[1]=(x797+(((-1.0)*x804)));
evalcond[2]=((((0.250000205066586)*sj0))+x792+x808+x806);
evalcond[3]=((((-0.250000205066586)*cj0))+x795+x813+x809);
evalcond[4]=((((-1.0)*x807))+(((-1.0)*x793))+x794+x812);
evalcond[5]=((((-1.0)*x800))+(((-1.0)*x796))+(((-0.433013258970445)*cj0))+x799);
evalcond[6]=(((new_r10*x797))+(((-1.0)*new_r00*x803))+(((-1.0)*new_r00*x805))+(((-1.0)*new_r10*x804)));
evalcond[7]=((((-1.0)*new_r01*x803))+((new_r11*x797))+(((-0.75000087746404)*x799))+(((-1.0)*new_r11*x804)));
evalcond[8]=(sj0+((new_r00*x811))+(((0.250000205066586)*x808))+((new_r10*x802))+(((-0.433013258970445)*x807)));
evalcond[9]=(((x790*x794))+(((-1.0)*x790*x793))+(((0.250000205066586)*x798))+new_r00+((x789*x792)));
evalcond[10]=((((-0.250000205066586)*x810))+(((-1.0)*cj0*x811))+(((-1.0)*x790*x796))+new_r01+((x789*x795)));
evalcond[11]=(((x790*x792))+((sj0*x802))+(((-1.0)*x789*x794))+new_r10+((x789*x793)));
evalcond[12]=(((x790*x795))+(((-1.0)*cj0*x802))+new_r11+(((0.433013258970445)*x810))+((x789*x796)));
evalcond[13]=((((-1.0)*x791))+(((0.250000205066586)*x809))+((new_r11*x802))+(((0.433013258970445)*x799))+(((-0.433013258970445)*x800)));
evalcond[14]=((((-1.0)*x791))+(((-1.0)*new_r00*x801))+(((-0.866026442229025)*x806))+(((0.49999820135573)*x812))+(((-0.49999820135573)*x807)));
evalcond[15]=((((-1.0)*sj0))+(((-0.866026442229025)*x813))+(((-1.0)*new_r01*x801))+(((-0.49999820135573)*x800))+(((0.49999820135573)*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(((((64951.9831671769)*cj0))+(((18750.015379994)*sj0)))),IkReal(((((-37499.810974959)*cj0))+(((-10825.2588795883)*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
CheckValue<IkReal> x815=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00)))),-1);
if(!x815.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x814.value)+(((1.5707963267949)*(x815.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x816=IKsin(j2);
IkReal x817=IKcos(j2);
IkReal x818=((1.0)*cj0);
IkReal x819=((0.866026442229025)*cj0);
IkReal x820=((0.49999820135573)*cj0);
IkReal x821=((0.433013258970445)*sj0);
IkReal x822=((0.866026442229025)*sj0);
IkReal x823=((0.49999820135573)*sj0);
IkReal x824=((0.75000087746404)*x816);
IkReal x825=(sj0*x816);
IkReal x826=(new_r01*x817);
IkReal x827=(new_r11*x816);
IkReal x828=((0.866026442229025)*x816);
IkReal x829=((0.250000205066586)*x817);
IkReal x830=((0.433010506600939)*x816);
IkReal x831=((0.433010506600939)*x817);
IkReal x832=((0.75000087746404)*x817);
IkReal x833=(new_r10*x817);
IkReal x834=(new_r10*x816);
IkReal x835=(new_r00*x816);
IkReal x836=(new_r01*x816);
IkReal x837=(cj0*x816);
IkReal x838=((0.433013258970445)*x817);
IkReal x839=(new_r00*x817);
IkReal x840=(new_r11*x817);
evalcond[0]=((((-1.0)*x830))+(((-1.0)*x832)));
evalcond[1]=((((-1.0)*x831))+x824);
evalcond[2]=((((0.250000205066586)*sj0))+x819+x835+x833);
evalcond[3]=((((-0.250000205066586)*cj0))+x822+x836+x840);
evalcond[4]=((((-1.0)*x820))+(((-1.0)*x834))+x821+x839);
evalcond[5]=((((-1.0)*x823))+(((-1.0)*x827))+(((-0.433013258970445)*cj0))+x826);
evalcond[6]=((((-1.0)*new_r10*x831))+((new_r10*x824))+(((-1.0)*new_r00*x832))+(((-1.0)*new_r00*x830)));
evalcond[7]=((((-1.0)*new_r11*x831))+((new_r11*x824))+(((-1.0)*new_r01*x830))+(((-0.75000087746404)*x826)));
evalcond[8]=((((0.250000205066586)*x835))+sj0+((new_r10*x829))+((new_r00*x838))+(((-0.433013258970445)*x834)));
evalcond[9]=((((0.250000205066586)*x825))+((x816*x819))+((x817*x821))+(((-1.0)*x817*x820))+new_r00);
evalcond[10]=((((-1.0)*x817*x823))+((x816*x822))+(((-1.0)*cj0*x838))+new_r01+(((-0.250000205066586)*x837)));
evalcond[11]=((((-1.0)*x816*x821))+((sj0*x829))+((x816*x820))+((x817*x819))+new_r10);
evalcond[12]=(((x817*x822))+(((-1.0)*cj0*x829))+((x816*x823))+(((0.433013258970445)*x837))+new_r11);
evalcond[13]=((((0.250000205066586)*x836))+(((-1.0)*x818))+((new_r11*x829))+(((0.433013258970445)*x826))+(((-0.433013258970445)*x827)));
evalcond[14]=((((0.49999820135573)*x839))+(((-1.0)*x818))+(((-0.866026442229025)*x833))+(((-1.0)*new_r00*x828))+(((-0.49999820135573)*x834)));
evalcond[15]=((((-1.0)*sj0))+(((-0.866026442229025)*x840))+(((-0.49999820135573)*x827))+(((-1.0)*new_r01*x828))+(((0.49999820135573)*x826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal(((-562499341902740.0)+(((999996490152053.0)*(new_r02*new_r02))))),IkReal(((324757120049741.0)+(((999996490152053.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
CheckValue<IkReal> x842=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02)))),-1);
if(!x842.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x841.value)+(((1.5707963267949)*(x842.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x843=IKcos(j2);
IkReal x844=IKsin(j2);
IkReal x845=((1.0)*cj0);
IkReal x846=((0.866026442229025)*cj0);
IkReal x847=((0.49999820135573)*cj0);
IkReal x848=((0.866026442229025)*sj0);
IkReal x849=((0.49999820135573)*sj0);
IkReal x850=((0.75000087746404)*x844);
IkReal x851=(sj0*x844);
IkReal x852=((0.433013258970445)*x843);
IkReal x853=((1.0)*x844);
IkReal x854=((0.866026442229025)*x844);
IkReal x855=((0.433010506600939)*x844);
IkReal x856=((0.250000205066586)*x843);
IkReal x857=(new_r02*x843);
IkReal x858=(new_r01*x843);
IkReal x859=(new_r12*x843);
IkReal x860=(new_r00*x844);
IkReal x861=(new_r10*x843);
IkReal x862=(new_r01*x844);
IkReal x863=((0.433010506600939)*x843);
IkReal x864=(cj0*x844);
IkReal x865=((0.433013258970445)*x844);
IkReal x866=((0.75000087746404)*x843);
IkReal x867=((0.49999820135573)*x844);
IkReal x868=(new_r00*x843);
IkReal x869=(new_r02*x844);
IkReal x870=(new_r11*x843);
evalcond[0]=((-0.433010506600939)+x859+x869);
evalcond[1]=((-0.75000087746404)+x857+(((-1.0)*new_r12*x853)));
evalcond[2]=((((-1.0)*x866))+(((-1.0)*x855))+new_r02);
evalcond[3]=((((-1.0)*x863))+new_r12+x850);
evalcond[4]=((((0.250000205066586)*sj0))+x861+x860+x846);
evalcond[5]=((((-0.250000205066586)*cj0))+x862+x870+x848);
evalcond[6]=((((0.433013258970445)*sj0))+(((-1.0)*x847))+(((-1.0)*new_r10*x853))+x868);
evalcond[7]=((((-1.0)*new_r11*x853))+(((-1.0)*x849))+(((-0.433013258970445)*cj0))+x858);
evalcond[8]=(((sj0*x852))+(((-1.0)*x843*x847))+(((0.250000205066586)*x851))+new_r00+((x844*x846)));
evalcond[9]=((((-0.250000205066586)*x864))+(((-1.0)*x843*x849))+new_r01+((x844*x848))+(((-1.0)*cj0*x852)));
evalcond[10]=((((-0.433013258970445)*x851))+((sj0*x856))+((x843*x846))+new_r10+((x844*x847)));
evalcond[11]=((((0.433013258970445)*x864))+((x843*x848))+new_r11+((x844*x849))+(((-1.0)*cj0*x856)));
evalcond[12]=((0.749999415023631)+((new_r12*x850))+(((-0.75000087746404)*x857))+(((-0.433010506600939)*x859))+(((-1.0)*new_r02*x855)));
evalcond[13]=((-0.433013039627618)+((new_r12*x856))+((new_r02*x852))+(((0.250000205066586)*x869))+(((-1.0)*new_r12*x865)));
evalcond[14]=((-5.41267840225675e-7)+(((0.49999820135573)*x857))+(((-0.866026442229025)*x859))+(((-1.0)*new_r02*x854))+(((-1.0)*new_r12*x867)));
evalcond[15]=((((-1.0)*new_r00*x866))+(((-0.500000584976027)*new_r20))+(((-1.0)*new_r00*x855))+((new_r10*x850))+(((-0.433010506600939)*x861)));
evalcond[16]=((((-1.0)*new_r01*x855))+(((-0.500000584976027)*new_r21))+((new_r11*x850))+(((-1.0)*new_r11*x863))+(((-0.75000087746404)*x858)));
evalcond[17]=(sj0+((new_r10*x856))+(((-0.866025066047432)*new_r20))+(((-1.0)*new_r10*x865))+(((0.250000205066586)*x860))+((new_r00*x852)));
evalcond[18]=(((new_r11*x856))+(((-1.0)*x845))+(((-0.866025066047432)*new_r21))+(((-1.0)*new_r11*x865))+(((0.250000205066586)*x862))+((new_r01*x852)));
evalcond[19]=((((-1.08253441393799e-6)*new_r20))+(((0.49999820135573)*x868))+(((-1.0)*new_r00*x854))+(((-1.0)*x845))+(((-1.0)*new_r10*x867))+(((-0.866026442229025)*x861)));
evalcond[20]=((((-1.0)*sj0))+(((-1.08253441393799e-6)*new_r21))+(((-1.0)*new_r01*x854))+(((0.49999820135573)*x858))+(((-0.866026442229025)*x870))+(((-1.0)*new_r11*x867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal(((187497440736984.0)+(((-999996490152053.0)*(new_r12*new_r12))))),IkReal(((324757120049741.0)+(((999996490152053.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
CheckValue<IkReal> x872=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02)))),-1);
if(!x872.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x871.value)+(((1.5707963267949)*(x872.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x873=IKcos(j2);
IkReal x874=IKsin(j2);
IkReal x875=((1.0)*cj0);
IkReal x876=((0.866026442229025)*cj0);
IkReal x877=((0.49999820135573)*cj0);
IkReal x878=((0.866026442229025)*sj0);
IkReal x879=((0.49999820135573)*sj0);
IkReal x880=((0.75000087746404)*x874);
IkReal x881=(sj0*x874);
IkReal x882=((0.433013258970445)*x873);
IkReal x883=((1.0)*x874);
IkReal x884=((0.866026442229025)*x874);
IkReal x885=((0.433010506600939)*x874);
IkReal x886=((0.250000205066586)*x873);
IkReal x887=(new_r02*x873);
IkReal x888=(new_r01*x873);
IkReal x889=(new_r12*x873);
IkReal x890=(new_r00*x874);
IkReal x891=(new_r10*x873);
IkReal x892=(new_r01*x874);
IkReal x893=((0.433010506600939)*x873);
IkReal x894=(cj0*x874);
IkReal x895=((0.433013258970445)*x874);
IkReal x896=((0.75000087746404)*x873);
IkReal x897=((0.49999820135573)*x874);
IkReal x898=(new_r00*x873);
IkReal x899=(new_r02*x874);
IkReal x900=(new_r11*x873);
evalcond[0]=((-0.433010506600939)+x889+x899);
evalcond[1]=((-0.75000087746404)+(((-1.0)*new_r12*x883))+x887);
evalcond[2]=((((-1.0)*x896))+(((-1.0)*x885))+new_r02);
evalcond[3]=((((-1.0)*x893))+new_r12+x880);
evalcond[4]=((((0.250000205066586)*sj0))+x876+x890+x891);
evalcond[5]=((((-0.250000205066586)*cj0))+x878+x892+x900);
evalcond[6]=((((-1.0)*new_r10*x883))+(((0.433013258970445)*sj0))+x898+(((-1.0)*x877)));
evalcond[7]=((((-1.0)*new_r11*x883))+(((-0.433013258970445)*cj0))+x888+(((-1.0)*x879)));
evalcond[8]=(((sj0*x882))+((x874*x876))+(((-1.0)*x873*x877))+new_r00+(((0.250000205066586)*x881)));
evalcond[9]=((((-0.250000205066586)*x894))+((x874*x878))+(((-1.0)*cj0*x882))+(((-1.0)*x873*x879))+new_r01);
evalcond[10]=(((sj0*x886))+((x874*x877))+((x873*x876))+(((-0.433013258970445)*x881))+new_r10);
evalcond[11]=(((x874*x879))+(((-1.0)*cj0*x886))+((x873*x878))+(((0.433013258970445)*x894))+new_r11);
evalcond[12]=((0.749999415023631)+(((-0.75000087746404)*x887))+((new_r12*x880))+(((-0.433010506600939)*x889))+(((-1.0)*new_r02*x885)));
evalcond[13]=((-0.433013039627618)+(((-1.0)*new_r12*x895))+((new_r12*x886))+((new_r02*x882))+(((0.250000205066586)*x899)));
evalcond[14]=((-5.41267840225675e-7)+(((-0.866026442229025)*x889))+(((-1.0)*new_r12*x897))+(((0.49999820135573)*x887))+(((-1.0)*new_r02*x884)));
evalcond[15]=(((new_r10*x880))+(((-0.500000584976027)*new_r20))+(((-1.0)*new_r00*x885))+(((-0.433010506600939)*x891))+(((-1.0)*new_r00*x896)));
evalcond[16]=((((-0.75000087746404)*x888))+((new_r11*x880))+(((-1.0)*new_r11*x893))+(((-0.500000584976027)*new_r21))+(((-1.0)*new_r01*x885)));
evalcond[17]=(sj0+((new_r10*x886))+((new_r00*x882))+(((-1.0)*new_r10*x895))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x890)));
evalcond[18]=(((new_r01*x882))+((new_r11*x886))+(((-1.0)*new_r11*x895))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x892))+(((-1.0)*x875)));
evalcond[19]=((((-0.866026442229025)*x891))+(((-1.08253441393799e-6)*new_r20))+(((-1.0)*new_r10*x897))+(((-1.0)*new_r00*x884))+(((0.49999820135573)*x898))+(((-1.0)*x875)));
evalcond[20]=((((-1.0)*sj0))+(((-0.866026442229025)*x900))+(((-1.08253441393799e-6)*new_r21))+(((-1.0)*new_r11*x897))+(((-1.0)*new_r01*x884))+(((0.49999820135573)*x888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x901=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r02))+(((-433008986799901.0)*new_r12)))),-1);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal(((324757120049741.0)+(((-999996490152053.0)*new_r02*new_r12)))),IkReal(((-187497440736984.0)+(((999996490152053.0)*(new_r02*new_r02))))),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x901.value)))+(x902.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x903=IKcos(j2);
IkReal x904=IKsin(j2);
IkReal x905=((1.0)*cj0);
IkReal x906=((0.866026442229025)*cj0);
IkReal x907=((0.49999820135573)*cj0);
IkReal x908=((0.866026442229025)*sj0);
IkReal x909=((0.49999820135573)*sj0);
IkReal x910=((0.75000087746404)*x904);
IkReal x911=(sj0*x904);
IkReal x912=((0.433013258970445)*x903);
IkReal x913=((1.0)*x904);
IkReal x914=((0.866026442229025)*x904);
IkReal x915=((0.433010506600939)*x904);
IkReal x916=((0.250000205066586)*x903);
IkReal x917=(new_r02*x903);
IkReal x918=(new_r01*x903);
IkReal x919=(new_r12*x903);
IkReal x920=(new_r00*x904);
IkReal x921=(new_r10*x903);
IkReal x922=(new_r01*x904);
IkReal x923=((0.433010506600939)*x903);
IkReal x924=(cj0*x904);
IkReal x925=((0.433013258970445)*x904);
IkReal x926=((0.75000087746404)*x903);
IkReal x927=((0.49999820135573)*x904);
IkReal x928=(new_r00*x903);
IkReal x929=(new_r02*x904);
IkReal x930=(new_r11*x903);
evalcond[0]=((-0.433010506600939)+x929+x919);
evalcond[1]=((-0.75000087746404)+(((-1.0)*new_r12*x913))+x917);
evalcond[2]=((((-1.0)*x926))+(((-1.0)*x915))+new_r02);
evalcond[3]=((((-1.0)*x923))+new_r12+x910);
evalcond[4]=((((0.250000205066586)*sj0))+x920+x921+x906);
evalcond[5]=((((-0.250000205066586)*cj0))+x930+x922+x908);
evalcond[6]=((((-1.0)*x907))+(((0.433013258970445)*sj0))+x928+(((-1.0)*new_r10*x913)));
evalcond[7]=((((-1.0)*x909))+(((-0.433013258970445)*cj0))+(((-1.0)*new_r11*x913))+x918);
evalcond[8]=((((-1.0)*x903*x907))+(((0.250000205066586)*x911))+new_r00+((sj0*x912))+((x904*x906)));
evalcond[9]=((((-1.0)*x903*x909))+(((-1.0)*cj0*x912))+new_r01+(((-0.250000205066586)*x924))+((x904*x908)));
evalcond[10]=(((x903*x906))+new_r10+((sj0*x916))+(((-0.433013258970445)*x911))+((x904*x907)));
evalcond[11]=((((-1.0)*cj0*x916))+((x903*x908))+new_r11+(((0.433013258970445)*x924))+((x904*x909)));
evalcond[12]=((0.749999415023631)+(((-1.0)*new_r02*x915))+(((-0.433010506600939)*x919))+(((-0.75000087746404)*x917))+((new_r12*x910)));
evalcond[13]=((-0.433013039627618)+((new_r12*x916))+(((0.250000205066586)*x929))+(((-1.0)*new_r12*x925))+((new_r02*x912)));
evalcond[14]=((-5.41267840225675e-7)+(((-0.866026442229025)*x919))+(((-1.0)*new_r02*x914))+(((-1.0)*new_r12*x927))+(((0.49999820135573)*x917)));
evalcond[15]=((((-0.500000584976027)*new_r20))+((new_r10*x910))+(((-1.0)*new_r00*x926))+(((-0.433010506600939)*x921))+(((-1.0)*new_r00*x915)));
evalcond[16]=((((-1.0)*new_r11*x923))+((new_r11*x910))+(((-0.500000584976027)*new_r21))+(((-0.75000087746404)*x918))+(((-1.0)*new_r01*x915)));
evalcond[17]=(sj0+(((-1.0)*new_r10*x925))+((new_r10*x916))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x920))+((new_r00*x912)));
evalcond[18]=((((-1.0)*new_r11*x925))+(((-1.0)*x905))+((new_r11*x916))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x922))+((new_r01*x912)));
evalcond[19]=((((-1.08253441393799e-6)*new_r20))+(((-1.0)*x905))+(((-1.0)*new_r10*x927))+(((0.49999820135573)*x928))+(((-0.866026442229025)*x921))+(((-1.0)*new_r00*x914)));
evalcond[20]=((((-1.0)*sj0))+(((-1.08253441393799e-6)*new_r21))+(((-1.0)*new_r11*x927))+(((-1.0)*new_r01*x914))+(((-0.866026442229025)*x930))+(((0.49999820135573)*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x931=((((1.73206161520519)*new_r12))+new_r02);
CheckValue<IkReal> x932 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(x931),IKFAST_ATAN2_MAGTHRESH);
if(!x932.valid){
continue;
}
IkReal gconst0=((-1.0)*(x932.value));
IkReal gconst1=0;
IkReal x933 = x931*x931;
if(IKabs(x933)==0){
continue;
}
IkReal gconst2=(x931*(pow(x933,-0.5)));
IkReal x934=j1;
CheckValue<IkReal> x937 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(((((1.73206161520519)*new_r12))+new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x937.valid){
continue;
}
IkReal x935=x937.value;
IkReal x936=x935;
if(((((j1*x936))+((j1*x934))+((x935*x936))+((x934*x935)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt((((j1*x936))+((j1*x934))+((x935*x936))+((x934*x935)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
IkReal x938=((((1.73206161520519)*new_r12))+new_r02);
sj1=gconst1;
cj1=gconst2;
j1=nan;
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(x938),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
IkReal gconst0=((-1.0)*(x939.value));
IkReal gconst1=0;
IkReal x940 = x938*x938;
if(IKabs(x940)==0){
continue;
}
IkReal gconst2=(x938*(pow(x940,-0.5)));
IkReal x941=new_r02*new_r02;
IkReal x942=new_r12*new_r12;
j2eval[0]=(x941+x942);
j2eval[1]=IKsign(((((5.33330713107669e+28)*x941))+(((5.33330713107669e+28)*x942))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
IkReal x943=((((1.73206161520519)*new_r12))+new_r02);
sj1=gconst1;
cj1=gconst2;
j1=nan;
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(x943),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
IkReal gconst0=((-1.0)*(x944.value));
IkReal gconst1=0;
IkReal x945 = x943*x943;
if(IKabs(x945)==0){
continue;
}
IkReal gconst2=(x943*(pow(x945,-0.5)));
IkReal x946=new_r02*new_r02;
j2eval[0]=((1.0)+(((-2.00000000000234)*x946))+(((1.33333013576058)*x946*(new_r12*new_r12)))+(((1.15469500000345)*new_r02*new_r12))+(((1.33333013576058)*(x946*x946))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
IkReal x947=((((1.73206161520519)*new_r12))+new_r02);
sj1=gconst1;
cj1=gconst2;
j1=nan;
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(x947),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
IkReal gconst0=((-1.0)*(x948.value));
IkReal gconst1=0;
IkReal x949 = x947*x947;
if(IKabs(x949)==0){
continue;
}
IkReal gconst2=(x947*(pow(x949,-0.5)));
IkReal x950=new_r12*new_r12;
j2eval[0]=((1.0)+(((-1.15469500000345)*new_r02*new_r12))+(((1.33333013576058)*(x950*x950)))+(((-2.00000000000234)*x950))+(((1.33333013576058)*x950*(new_r02*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x951=gconst2*gconst2;
CheckValue<IkReal> x952=IKPowWithIntegerCheck(IKsign(((((1.06666008502193e+43)*gconst2*new_r02))+(((-6.15833533438314e+42)*gconst2*new_r12)))),-1);
if(!x952.valid){
continue;
}
CheckValue<IkReal> x953 = IKatan2WithCheck(IkReal(((((9.23755838499249e+42)*x951))+(((-1.23167149755439e+43)*(new_r12*new_r12))))),IkReal(((((1.23167149755439e+43)*new_r02*new_r12))+(((-5.33328123968913e+42)*x951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x952.value)))+(x953.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x954=IKcos(j2);
IkReal x955=IKsin(j2);
IkReal x956=gconst2*gconst2;
IkReal x957=((0.49999820135573)*gconst2);
IkReal x958=((1.08253441393799e-6)*gconst2);
IkReal x959=(new_r02*x954);
IkReal x960=(gconst2*x955);
IkReal x961=(new_r12*x954);
IkReal x962=(new_r02*x955);
IkReal x963=(new_r12*x955);
IkReal x964=((0.866026442229025)*gconst2*x954);
evalcond[0]=((((-0.866026442229025)*gconst2))+x962+x961);
evalcond[1]=((((-1.0)*x963))+x959+x957);
evalcond[2]=(new_r02+(((-0.866026442229025)*x960))+((x954*x957)));
evalcond[3]=(new_r12+(((-1.0)*x955*x957))+(((-1.0)*x964)));
evalcond[4]=((((0.250000205066586)*x962))+(((0.250000205066586)*x961))+(((-9.37501937329267e-7)*gconst2))+(((-0.433013258970445)*x963))+(((0.433013258970445)*x959)));
evalcond[5]=((1.0)+(((-0.866026442229025)*gconst2*x961))+(((-1.0)*x957*x963))+((x957*x959))+(((-0.866026442229025)*new_r02*x960))+(((-1.17188075736007e-12)*x956)));
evalcond[6]=(((new_r00*x954*x957))+(((-1.0)*new_r10*x964))+(((-0.866026442229025)*new_r00*x960))+(((-1.0)*new_r10*x955*x957))+(((-1.0)*new_r20*x958)));
evalcond[7]=((((-1.0)*new_r11*x955*x957))+(((-1.0)*new_r21*x958))+((new_r01*x954*x957))+(((-1.0)*new_r11*x964))+(((-0.866026442229025)*new_r01*x960)));
evalcond[8]=((((0.75000087746404)*gconst2*x959))+(((-0.75000087746404)*new_r12*x960))+(((0.433010506600939)*gconst2*x961))+(((5.41267840225675e-7)*x956))+(((0.433010506600939)*new_r02*x960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x965=(new_r00*sj2);
IkReal x966=(cj2*new_r10);
CheckValue<IkReal> x967=IKPowWithIntegerCheck(gconst2,-1);
if(!x967.valid){
continue;
}
if( IKabs(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x966))+(((-1.00000476725774)*x965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.99497495445234e-49)*(x967.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x965))+(((2.47614376617447e+48)*x966)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x966))+(((-1.00000476725774)*x965))))+IKsqr(((6.99497495445234e-49)*(x967.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x965))+(((2.47614376617447e+48)*x966))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x966))+(((-1.00000476725774)*x965))), ((6.99497495445234e-49)*(x967.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x965))+(((2.47614376617447e+48)*x966))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x968=IKcos(j0);
IkReal x969=IKsin(j0);
IkReal x970=((0.500000584976027)*gconst2);
IkReal x971=(cj2*new_r01);
IkReal x972=(new_r01*sj2);
IkReal x973=((0.75000087746404)*gconst2);
IkReal x974=(cj2*new_r00);
IkReal x975=((0.433013258970445)*sj2);
IkReal x976=((0.433010506600939)*gconst2);
IkReal x977=(new_r00*sj2);
IkReal x978=(cj2*new_r10);
IkReal x979=(new_r10*sj2);
IkReal x980=(new_r11*sj2);
IkReal x981=(cj2*new_r11);
IkReal x982=((1.0)*x968);
IkReal x983=(sj2*x968);
IkReal x984=(cj2*x969);
IkReal x985=(cj2*x968);
IkReal x986=(sj2*x969);
evalcond[0]=((((-0.866025066047432)*x969))+new_r20+(((-1.0)*x968*x970)));
evalcond[1]=((((-1.0)*x969*x970))+(((0.866025066047432)*x968))+new_r21);
evalcond[2]=((((0.250000205066586)*x969))+x977+x978+(((-1.0)*x968*x976)));
evalcond[3]=((((-1.0)*x969*x976))+(((-0.250000205066586)*x968))+x981+x972);
evalcond[4]=((((0.433013258970445)*x969))+(((-1.0)*x979))+x974+(((-1.0)*x968*x973)));
evalcond[5]=((((-1.0)*x980))+(((-1.0)*x969*x973))+(((-0.433013258970445)*x968))+x971);
evalcond[6]=((((0.250000205066586)*x977))+(((0.250000205066586)*x978))+(((-1.0)*new_r10*x975))+(((-0.866025066047432)*new_r20))+x969+(((0.433013258970445)*x974)));
evalcond[7]=((((-1.0)*x982))+(((0.250000205066586)*x972))+(((0.250000205066586)*x981))+(((-1.0)*new_r11*x975))+(((-0.866025066047432)*new_r21))+(((0.433013258970445)*x971)));
evalcond[8]=((((0.433013258970445)*x984))+(((0.250000205066586)*x986))+new_r00+(((-1.0)*x976*x983))+(((-1.0)*x973*x985)));
evalcond[9]=((((-0.250000205066586)*x983))+(((-0.433013258970445)*x985))+new_r01+(((-1.0)*x976*x986))+(((-1.0)*x973*x984)));
evalcond[10]=((((-1.0)*x969*x975))+(((0.250000205066586)*x984))+((x973*x983))+new_r10+(((-1.0)*x976*x985)));
evalcond[11]=((((-0.250000205066586)*x985))+((x973*x986))+((x968*x975))+new_r11+(((-1.0)*x976*x984)));
evalcond[12]=((((-1.0)*x982))+((new_r20*x970))+((x976*x977))+((x976*x978))+((x973*x974))+(((-1.0)*x973*x979)));
evalcond[13]=((((-1.0)*x969))+((x976*x981))+((new_r21*x970))+((x971*x973))+(((-1.0)*x973*x980))+((x972*x976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x987=gconst2*gconst2;
CheckValue<IkReal> x988 = IKatan2WithCheck(IkReal(((((1.23167149755439e+43)*new_r02*new_r12))+(((5.33328123968913e+42)*x987)))),IkReal(((((9.23755838499249e+42)*x987))+(((-1.23167149755439e+43)*(new_r02*new_r02))))),IKFAST_ATAN2_MAGTHRESH);
if(!x988.valid){
continue;
}
CheckValue<IkReal> x989=IKPowWithIntegerCheck(IKsign(((((6.15833533438314e+42)*gconst2*new_r02))+(((1.06666008502193e+43)*gconst2*new_r12)))),-1);
if(!x989.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x988.value)+(((1.5707963267949)*(x989.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x990=IKcos(j2);
IkReal x991=IKsin(j2);
IkReal x992=gconst2*gconst2;
IkReal x993=((0.49999820135573)*gconst2);
IkReal x994=((1.08253441393799e-6)*gconst2);
IkReal x995=(new_r02*x990);
IkReal x996=(gconst2*x991);
IkReal x997=(new_r12*x990);
IkReal x998=(new_r02*x991);
IkReal x999=(new_r12*x991);
IkReal x1000=((0.866026442229025)*gconst2*x990);
evalcond[0]=((((-0.866026442229025)*gconst2))+x997+x998);
evalcond[1]=((((-1.0)*x999))+x993+x995);
evalcond[2]=(((x990*x993))+(((-0.866026442229025)*x996))+new_r02);
evalcond[3]=((((-1.0)*x1000))+(((-1.0)*x991*x993))+new_r12);
evalcond[4]=((((0.250000205066586)*x997))+(((0.250000205066586)*x998))+(((0.433013258970445)*x995))+(((-0.433013258970445)*x999))+(((-9.37501937329267e-7)*gconst2)));
evalcond[5]=((1.0)+((x993*x995))+(((-0.866026442229025)*gconst2*x997))+(((-0.866026442229025)*new_r02*x996))+(((-1.17188075736007e-12)*x992))+(((-1.0)*x993*x999)));
evalcond[6]=((((-1.0)*new_r10*x991*x993))+(((-0.866026442229025)*new_r00*x996))+((new_r00*x990*x993))+(((-1.0)*new_r20*x994))+(((-1.0)*new_r10*x1000)));
evalcond[7]=((((-0.866026442229025)*new_r01*x996))+((new_r01*x990*x993))+(((-1.0)*new_r11*x991*x993))+(((-1.0)*new_r21*x994))+(((-1.0)*new_r11*x1000)));
evalcond[8]=((((0.75000087746404)*gconst2*x995))+(((0.433010506600939)*gconst2*x997))+(((5.41267840225675e-7)*x992))+(((0.433010506600939)*new_r02*x996))+(((-0.75000087746404)*new_r12*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1001=(new_r00*sj2);
IkReal x1002=(cj2*new_r10);
CheckValue<IkReal> x1003=IKPowWithIntegerCheck(gconst2,-1);
if(!x1003.valid){
continue;
}
if( IKabs(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1002))+(((-1.00000476725774)*x1001)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.99497495445234e-49)*(x1003.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1001))+(((2.47614376617447e+48)*x1002)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1002))+(((-1.00000476725774)*x1001))))+IKsqr(((6.99497495445234e-49)*(x1003.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1001))+(((2.47614376617447e+48)*x1002))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1002))+(((-1.00000476725774)*x1001))), ((6.99497495445234e-49)*(x1003.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1001))+(((2.47614376617447e+48)*x1002))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x1004=IKcos(j0);
IkReal x1005=IKsin(j0);
IkReal x1006=((0.500000584976027)*gconst2);
IkReal x1007=(cj2*new_r01);
IkReal x1008=(new_r01*sj2);
IkReal x1009=((0.75000087746404)*gconst2);
IkReal x1010=(cj2*new_r00);
IkReal x1011=((0.433013258970445)*sj2);
IkReal x1012=((0.433010506600939)*gconst2);
IkReal x1013=(new_r00*sj2);
IkReal x1014=(cj2*new_r10);
IkReal x1015=(new_r10*sj2);
IkReal x1016=(new_r11*sj2);
IkReal x1017=(cj2*new_r11);
IkReal x1018=((1.0)*x1004);
IkReal x1019=(sj2*x1004);
IkReal x1020=(cj2*x1005);
IkReal x1021=(cj2*x1004);
IkReal x1022=(sj2*x1005);
evalcond[0]=((((-0.866025066047432)*x1005))+(((-1.0)*x1004*x1006))+new_r20);
evalcond[1]=((((0.866025066047432)*x1004))+(((-1.0)*x1005*x1006))+new_r21);
evalcond[2]=(x1014+x1013+(((-1.0)*x1004*x1012))+(((0.250000205066586)*x1005)));
evalcond[3]=(x1017+x1008+(((-1.0)*x1005*x1012))+(((-0.250000205066586)*x1004)));
evalcond[4]=(x1010+(((0.433013258970445)*x1005))+(((-1.0)*x1004*x1009))+(((-1.0)*x1015)));
evalcond[5]=(x1007+(((-0.433013258970445)*x1004))+(((-1.0)*x1005*x1009))+(((-1.0)*x1016)));
evalcond[6]=(x1005+(((-1.0)*new_r10*x1011))+(((-0.866025066047432)*new_r20))+(((0.433013258970445)*x1010))+(((0.250000205066586)*x1014))+(((0.250000205066586)*x1013)));
evalcond[7]=((((0.250000205066586)*x1008))+(((-1.0)*x1018))+(((-1.0)*new_r11*x1011))+(((-0.866025066047432)*new_r21))+(((0.433013258970445)*x1007))+(((0.250000205066586)*x1017)));
evalcond[8]=((((-1.0)*x1012*x1019))+(((0.250000205066586)*x1022))+(((0.433013258970445)*x1020))+(((-1.0)*x1009*x1021))+new_r00);
evalcond[9]=((((-0.433013258970445)*x1021))+(((-1.0)*x1009*x1020))+new_r01+(((-0.250000205066586)*x1019))+(((-1.0)*x1012*x1022)));
evalcond[10]=((((0.250000205066586)*x1020))+((x1009*x1019))+(((-1.0)*x1005*x1011))+new_r10+(((-1.0)*x1012*x1021)));
evalcond[11]=(((x1009*x1022))+(((-0.250000205066586)*x1021))+((x1004*x1011))+new_r11+(((-1.0)*x1012*x1020)));
evalcond[12]=(((x1009*x1010))+(((-1.0)*x1009*x1015))+(((-1.0)*x1018))+((new_r20*x1006))+((x1012*x1014))+((x1012*x1013)));
evalcond[13]=((((-1.0)*x1005))+(((-1.0)*x1009*x1016))+((new_r21*x1006))+((x1012*x1017))+((x1007*x1009))+((x1008*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1023=(gconst2*new_r12);
IkReal x1024=(gconst2*new_r02);
CheckValue<IkReal> x1025=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r02*new_r02)))+(((5.33330713107669e+28)*(new_r12*new_r12))))),-1);
if(!x1025.valid){
continue;
}
CheckValue<IkReal> x1026 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*x1023))+(((4.61878500004103e+28)*x1024)))),IkReal(((((-2.66664397281603e+28)*x1024))+(((4.61878500004103e+28)*x1023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1025.value)))+(x1026.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1027=IKcos(j2);
IkReal x1028=IKsin(j2);
IkReal x1029=gconst2*gconst2;
IkReal x1030=((0.49999820135573)*gconst2);
IkReal x1031=((1.08253441393799e-6)*gconst2);
IkReal x1032=(new_r02*x1027);
IkReal x1033=(gconst2*x1028);
IkReal x1034=(new_r12*x1027);
IkReal x1035=(new_r02*x1028);
IkReal x1036=(new_r12*x1028);
IkReal x1037=((0.866026442229025)*gconst2*x1027);
evalcond[0]=(x1034+x1035+(((-0.866026442229025)*gconst2)));
evalcond[1]=(x1032+x1030+(((-1.0)*x1036)));
evalcond[2]=(((x1027*x1030))+new_r02+(((-0.866026442229025)*x1033)));
evalcond[3]=((((-1.0)*x1037))+(((-1.0)*x1028*x1030))+new_r12);
evalcond[4]=((((0.250000205066586)*x1034))+(((0.250000205066586)*x1035))+(((-0.433013258970445)*x1036))+(((-9.37501937329267e-7)*gconst2))+(((0.433013258970445)*x1032)));
evalcond[5]=((1.0)+(((-0.866026442229025)*gconst2*x1034))+(((-1.17188075736007e-12)*x1029))+((x1030*x1032))+(((-0.866026442229025)*new_r02*x1033))+(((-1.0)*x1030*x1036)));
evalcond[6]=(((new_r00*x1027*x1030))+(((-1.0)*new_r10*x1028*x1030))+(((-0.866026442229025)*new_r00*x1033))+(((-1.0)*new_r20*x1031))+(((-1.0)*new_r10*x1037)));
evalcond[7]=((((-0.866026442229025)*new_r01*x1033))+(((-1.0)*new_r21*x1031))+(((-1.0)*new_r11*x1037))+(((-1.0)*new_r11*x1028*x1030))+((new_r01*x1027*x1030)));
evalcond[8]=((((-0.75000087746404)*new_r12*x1033))+(((0.433010506600939)*new_r02*x1033))+(((0.75000087746404)*gconst2*x1032))+(((0.433010506600939)*gconst2*x1034))+(((5.41267840225675e-7)*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1038=(new_r00*sj2);
IkReal x1039=(cj2*new_r10);
CheckValue<IkReal> x1040=IKPowWithIntegerCheck(gconst2,-1);
if(!x1040.valid){
continue;
}
if( IKabs(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1038))+(((-1.00000476725774)*x1039)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.99497495445234e-49)*(x1040.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1039))+(((2.47614376617447e+48)*x1038)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1038))+(((-1.00000476725774)*x1039))))+IKsqr(((6.99497495445234e-49)*(x1040.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1039))+(((2.47614376617447e+48)*x1038))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1038))+(((-1.00000476725774)*x1039))), ((6.99497495445234e-49)*(x1040.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1039))+(((2.47614376617447e+48)*x1038))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x1041=IKcos(j0);
IkReal x1042=IKsin(j0);
IkReal x1043=((0.500000584976027)*gconst2);
IkReal x1044=(cj2*new_r01);
IkReal x1045=(new_r01*sj2);
IkReal x1046=((0.75000087746404)*gconst2);
IkReal x1047=(cj2*new_r00);
IkReal x1048=((0.433013258970445)*sj2);
IkReal x1049=((0.433010506600939)*gconst2);
IkReal x1050=(new_r00*sj2);
IkReal x1051=(cj2*new_r10);
IkReal x1052=(new_r10*sj2);
IkReal x1053=(new_r11*sj2);
IkReal x1054=(cj2*new_r11);
IkReal x1055=((1.0)*x1041);
IkReal x1056=(sj2*x1041);
IkReal x1057=(cj2*x1042);
IkReal x1058=(cj2*x1041);
IkReal x1059=(sj2*x1042);
evalcond[0]=((((-1.0)*x1041*x1043))+(((-0.866025066047432)*x1042))+new_r20);
evalcond[1]=((((0.866025066047432)*x1041))+(((-1.0)*x1042*x1043))+new_r21);
evalcond[2]=(x1050+x1051+(((0.250000205066586)*x1042))+(((-1.0)*x1041*x1049)));
evalcond[3]=((((-0.250000205066586)*x1041))+x1054+x1045+(((-1.0)*x1042*x1049)));
evalcond[4]=(x1047+(((-1.0)*x1041*x1046))+(((-1.0)*x1052))+(((0.433013258970445)*x1042)));
evalcond[5]=(x1044+(((-1.0)*x1042*x1046))+(((-1.0)*x1053))+(((-0.433013258970445)*x1041)));
evalcond[6]=(x1042+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x1050))+(((0.250000205066586)*x1051))+(((-1.0)*new_r10*x1048))+(((0.433013258970445)*x1047)));
evalcond[7]=((((-1.0)*x1055))+(((0.250000205066586)*x1045))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x1054))+(((-1.0)*new_r11*x1048))+(((0.433013258970445)*x1044)));
evalcond[8]=((((-1.0)*x1046*x1058))+(((0.250000205066586)*x1059))+new_r00+(((-1.0)*x1049*x1056))+(((0.433013258970445)*x1057)));
evalcond[9]=((((-1.0)*x1046*x1057))+(((-0.250000205066586)*x1056))+(((-0.433013258970445)*x1058))+new_r01+(((-1.0)*x1049*x1059)));
evalcond[10]=((((-1.0)*x1042*x1048))+(((0.250000205066586)*x1057))+new_r10+((x1046*x1056))+(((-1.0)*x1049*x1058)));
evalcond[11]=((((-0.250000205066586)*x1058))+((x1041*x1048))+new_r11+((x1046*x1059))+(((-1.0)*x1049*x1057)));
evalcond[12]=((((-1.0)*x1055))+(((-1.0)*x1046*x1052))+((new_r20*x1043))+((x1049*x1050))+((x1049*x1051))+((x1046*x1047)));
evalcond[13]=((((-1.0)*x1046*x1053))+((new_r21*x1043))+((x1049*x1054))+(((-1.0)*x1042))+((x1045*x1049))+((x1044*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1060=((((1.73206161520519)*new_r12))+new_r02);
CheckValue<IkReal> x1061 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(x1060),IKFAST_ATAN2_MAGTHRESH);
if(!x1061.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1061.value))));
IkReal gconst4=0;
IkReal x1062 = x1060*x1060;
if(IKabs(x1062)==0){
continue;
}
IkReal gconst5=((-1.0)*x1060*(pow(x1062,-0.5)));
IkReal x1063=j1;
CheckValue<IkReal> x1066 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(((((1.73206161520519)*new_r12))+new_r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x1066.valid){
continue;
}
IkReal x1064=x1066.value;
IkReal x1065=x1064;
if((((9.86960440108936)+(((-3.14159265358979)*j1))+((x1063*x1064))+(((-3.14159265358979)*x1064))+(((-3.14159265358979)*x1065))+(((-3.14159265358979)*x1063))+((j1*x1065))+((j1*x1063))+((x1064*x1065)))) < -0.00001)
continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKsqrt(((9.86960440108936)+(((-3.14159265358979)*j1))+((x1063*x1064))+(((-3.14159265358979)*x1064))+(((-3.14159265358979)*x1065))+(((-3.14159265358979)*x1063))+((j1*x1065))+((j1*x1063))+((x1064*x1065)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
IkReal x1067=((((1.73206161520519)*new_r12))+new_r02);
sj1=gconst4;
cj1=gconst5;
j1=nan;
CheckValue<IkReal> x1068 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(x1067),IKFAST_ATAN2_MAGTHRESH);
if(!x1068.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1068.value))));
IkReal gconst4=0;
IkReal x1069 = x1067*x1067;
if(IKabs(x1069)==0){
continue;
}
IkReal gconst5=((-1.0)*x1067*(pow(x1069,-0.5)));
IkReal x1070=new_r02*new_r02;
IkReal x1071=new_r12*new_r12;
j2eval[0]=(x1070+x1071);
j2eval[1]=IKsign(((((5.33330713107669e+28)*x1070))+(((5.33330713107669e+28)*x1071))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
IkReal x1072=((((1.73206161520519)*new_r12))+new_r02);
sj1=gconst4;
cj1=gconst5;
j1=nan;
CheckValue<IkReal> x1073 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(x1072),IKFAST_ATAN2_MAGTHRESH);
if(!x1073.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1073.value))));
IkReal gconst4=0;
IkReal x1074 = x1072*x1072;
if(IKabs(x1074)==0){
continue;
}
IkReal gconst5=((-1.0)*x1072*(pow(x1074,-0.5)));
IkReal x1075=new_r02*new_r02;
j2eval[0]=((1.0)+(((1.33333013576059)*x1075*(new_r12*new_r12)))+(((1.15469500000345)*new_r02*new_r12))+(((1.33333013576059)*(x1075*x1075)))+(((-2.00000000000234)*x1075)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
IkReal x1076=((((1.73206161520519)*new_r12))+new_r02);
sj1=gconst4;
cj1=gconst5;
j1=nan;
CheckValue<IkReal> x1077 = IKatan2WithCheck(IkReal(((((1.15470223870694)*new_r12))+(((-2.00001253786471)*new_r02)))),IkReal(x1076),IKFAST_ATAN2_MAGTHRESH);
if(!x1077.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1077.value))));
IkReal gconst4=0;
IkReal x1078 = x1076*x1076;
if(IKabs(x1078)==0){
continue;
}
IkReal gconst5=((-1.0)*x1076*(pow(x1078,-0.5)));
IkReal x1079=new_r12*new_r12;
j2eval[0]=((1.0)+(((-1.15469500000345)*new_r02*new_r12))+(((1.33333013576059)*x1079*(new_r02*new_r02)))+(((-2.00000000000234)*x1079))+(((1.33333013576059)*(x1079*x1079))));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1080=gconst5*gconst5;
CheckValue<IkReal> x1081 = IKatan2WithCheck(IkReal(((((-1.23167149755439e+43)*(new_r12*new_r12)))+(((9.23755838499249e+42)*x1080)))),IkReal(((((1.23167149755439e+43)*new_r02*new_r12))+(((-5.33328123968913e+42)*x1080)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1081.valid){
continue;
}
CheckValue<IkReal> x1082=IKPowWithIntegerCheck(IKsign(((((1.06666008502193e+43)*gconst5*new_r02))+(((-6.15833533438314e+42)*gconst5*new_r12)))),-1);
if(!x1082.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1081.value)+(((1.5707963267949)*(x1082.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1083=IKcos(j2);
IkReal x1084=IKsin(j2);
IkReal x1085=gconst5*gconst5;
IkReal x1086=(gconst5*new_r00);
IkReal x1087=((0.49999820135573)*gconst5);
IkReal x1088=((0.866026442229025)*gconst5);
IkReal x1089=((0.75000087746404)*gconst5);
IkReal x1090=((0.433010506600939)*gconst5);
IkReal x1091=((1.08253441393799e-6)*gconst5);
IkReal x1092=(gconst5*new_r02);
IkReal x1093=(gconst5*new_r01);
IkReal x1094=((0.49999820135573)*x1083);
IkReal x1095=(new_r02*x1083);
IkReal x1096=((0.866026442229025)*x1084);
IkReal x1097=(new_r12*x1083);
IkReal x1098=(new_r12*x1084);
IkReal x1099=(new_r02*x1084);
evalcond[0]=(x1097+x1099+(((-1.0)*x1088)));
evalcond[1]=(x1095+x1087+(((-1.0)*x1098)));
evalcond[2]=((((-1.0)*x1084*x1088))+new_r02+((x1083*x1087)));
evalcond[3]=((((-1.0)*x1084*x1087))+new_r12+(((-1.0)*x1083*x1088)));
evalcond[4]=((((0.250000205066586)*x1097))+(((0.250000205066586)*x1099))+(((0.433013258970445)*x1095))+(((-0.433013258970445)*x1098))+(((-9.37501937329267e-7)*gconst5)));
evalcond[5]=((1.0)+((x1087*x1095))+(((-1.0)*x1088*x1097))+(((-1.0)*x1088*x1099))+(((-1.17188075736007e-12)*x1085))+(((-1.0)*x1087*x1098)));
evalcond[6]=((((-1.0)*new_r20*x1091))+(((-1.0)*x1086*x1096))+(((-1.0)*new_r10*x1083*x1088))+((x1086*x1094))+(((-1.0)*new_r10*x1084*x1087)));
evalcond[7]=((((-1.0)*new_r21*x1091))+(((-1.0)*new_r01*x1084*x1088))+((new_r01*x1083*x1087))+(((-1.0)*new_r11*x1083*x1088))+(((-1.0)*new_r11*x1084*x1087)));
evalcond[8]=(((x1089*x1095))+(((5.41267840225675e-7)*x1085))+(((-1.0)*x1089*x1098))+((x1090*x1099))+((x1090*x1097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1100=(new_r00*sj2);
IkReal x1101=(cj2*new_r10);
CheckValue<IkReal> x1102=IKPowWithIntegerCheck(gconst5,-1);
if(!x1102.valid){
continue;
}
if( IKabs(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1100))+(((-1.00000476725774)*x1101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.99497495445234e-49)*(x1102.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1101))+(((2.47614376617447e+48)*x1100)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1100))+(((-1.00000476725774)*x1101))))+IKsqr(((6.99497495445234e-49)*(x1102.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1101))+(((2.47614376617447e+48)*x1100))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.866024128540551)*new_r20))+(((-1.00000476725774)*x1100))+(((-1.00000476725774)*x1101))), ((6.99497495445234e-49)*(x1102.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1101))+(((2.47614376617447e+48)*x1100))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x1103=IKcos(j0);
IkReal x1104=IKsin(j0);
IkReal x1105=(cj2*new_r01);
IkReal x1106=(new_r01*sj2);
IkReal x1107=(cj2*new_r00);
IkReal x1108=((0.433013258970445)*sj2);
IkReal x1109=(new_r00*sj2);
IkReal x1110=((0.433010506600939)*gconst5);
IkReal x1111=((0.500000584976027)*gconst5);
IkReal x1112=((0.75000087746404)*gconst5);
IkReal x1113=((1.0)*sj2);
IkReal x1114=(cj2*new_r10);
IkReal x1115=(cj2*new_r11);
IkReal x1116=((1.0)*x1103);
IkReal x1117=(sj2*x1112);
IkReal x1118=((0.250000205066586)*x1103);
IkReal x1119=(cj2*x1103);
IkReal x1120=(cj2*x1104);
IkReal x1121=(sj2*x1104);
evalcond[0]=((((-1.0)*x1103*x1111))+(((-0.866025066047432)*x1104))+new_r20);
evalcond[1]=((((0.866025066047432)*x1103))+(((-1.0)*x1104*x1111))+new_r21);
evalcond[2]=((((0.250000205066586)*x1104))+(((-1.0)*x1103*x1110))+x1109+x1114);
evalcond[3]=(x1106+x1115+(((-0.250000205066586)*x1103))+(((-1.0)*x1104*x1110)));
evalcond[4]=((((-1.0)*x1103*x1112))+x1107+(((-1.0)*new_r10*x1113))+(((0.433013258970445)*x1104)));
evalcond[5]=(x1105+(((-0.433013258970445)*x1103))+(((-1.0)*new_r11*x1113))+(((-1.0)*x1104*x1112)));
evalcond[6]=(x1104+(((0.433013258970445)*x1107))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x1109))+(((0.250000205066586)*x1114))+(((-1.0)*new_r10*x1108)));
evalcond[7]=((((0.433013258970445)*x1105))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x1106))+(((0.250000205066586)*x1115))+(((-1.0)*new_r11*x1108))+(((-1.0)*x1116)));
evalcond[8]=((((0.433013258970445)*x1120))+(((-1.0)*x1112*x1119))+(((0.250000205066586)*x1121))+(((-1.0)*sj2*x1103*x1110))+new_r00);
evalcond[9]=((((-1.0)*x1112*x1120))+(((-0.433013258970445)*x1119))+(((-1.0)*sj2*x1118))+(((-1.0)*x1110*x1121))+new_r01);
evalcond[10]=((((0.250000205066586)*x1120))+(((-1.0)*x1104*x1108))+new_r10+((x1103*x1117))+(((-1.0)*x1110*x1119)));
evalcond[11]=(((x1104*x1117))+(((-1.0)*x1110*x1120))+new_r11+(((-1.0)*cj2*x1118))+((x1103*x1108)));
evalcond[12]=(((x1109*x1110))+((new_r20*x1111))+((x1110*x1114))+(((-1.0)*new_r10*x1117))+(((-1.0)*x1116))+((x1107*x1112)));
evalcond[13]=(((x1105*x1112))+((x1110*x1115))+(((-1.0)*x1104))+((new_r21*x1111))+(((-1.0)*new_r11*x1117))+((x1106*x1110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1122=gconst5*gconst5;
CheckValue<IkReal> x1123 = IKatan2WithCheck(IkReal(((((1.23167149755439e+43)*new_r02*new_r12))+(((5.33328123968913e+42)*x1122)))),IkReal(((((9.23755838499249e+42)*x1122))+(((-1.23167149755439e+43)*(new_r02*new_r02))))),IKFAST_ATAN2_MAGTHRESH);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124=IKPowWithIntegerCheck(IKsign(((((1.06666008502193e+43)*gconst5*new_r12))+(((6.15833533438314e+42)*gconst5*new_r02)))),-1);
if(!x1124.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1123.value)+(((1.5707963267949)*(x1124.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1125=IKcos(j2);
IkReal x1126=IKsin(j2);
IkReal x1127=gconst5*gconst5;
IkReal x1128=(gconst5*new_r00);
IkReal x1129=((0.49999820135573)*gconst5);
IkReal x1130=((0.866026442229025)*gconst5);
IkReal x1131=((0.75000087746404)*gconst5);
IkReal x1132=((0.433010506600939)*gconst5);
IkReal x1133=((1.08253441393799e-6)*gconst5);
IkReal x1134=(gconst5*new_r02);
IkReal x1135=(gconst5*new_r01);
IkReal x1136=((0.49999820135573)*x1125);
IkReal x1137=(new_r02*x1125);
IkReal x1138=((0.866026442229025)*x1126);
IkReal x1139=(new_r12*x1125);
IkReal x1140=(new_r12*x1126);
IkReal x1141=(new_r02*x1126);
evalcond[0]=(x1141+x1139+(((-1.0)*x1130)));
evalcond[1]=(x1129+x1137+(((-1.0)*x1140)));
evalcond[2]=((((-1.0)*x1126*x1130))+((x1125*x1129))+new_r02);
evalcond[3]=((((-1.0)*x1126*x1129))+new_r12+(((-1.0)*x1125*x1130)));
evalcond[4]=((((0.250000205066586)*x1141))+(((0.433013258970445)*x1137))+(((0.250000205066586)*x1139))+(((-9.37501937329267e-7)*gconst5))+(((-0.433013258970445)*x1140)));
evalcond[5]=((1.0)+(((-1.17188075736007e-12)*x1127))+((x1129*x1137))+(((-1.0)*x1129*x1140))+(((-1.0)*x1130*x1139))+(((-1.0)*x1130*x1141)));
evalcond[6]=((((-1.0)*new_r10*x1125*x1130))+((x1128*x1136))+(((-1.0)*x1128*x1138))+(((-1.0)*new_r20*x1133))+(((-1.0)*new_r10*x1126*x1129)));
evalcond[7]=((((-1.0)*new_r01*x1126*x1130))+((new_r01*x1125*x1129))+(((-1.0)*new_r11*x1126*x1129))+(((-1.0)*new_r11*x1125*x1130))+(((-1.0)*new_r21*x1133)));
evalcond[8]=(((x1131*x1137))+((x1132*x1141))+(((-1.0)*x1131*x1140))+(((5.41267840225675e-7)*x1127))+((x1132*x1139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1142=(new_r00*sj2);
IkReal x1143=(cj2*new_r10);
CheckValue<IkReal> x1144=IKPowWithIntegerCheck(gconst5,-1);
if(!x1144.valid){
continue;
}
if( IKabs(((((-1.00000476725774)*x1143))+(((-1.00000476725774)*x1142))+(((0.866024128540551)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.99497495445234e-49)*(x1144.value)*(((((2.47614376617447e+48)*x1143))+(((2.47614376617447e+48)*x1142))+(((7.14802000065968e+47)*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000476725774)*x1143))+(((-1.00000476725774)*x1142))+(((0.866024128540551)*new_r20))))+IKsqr(((6.99497495445234e-49)*(x1144.value)*(((((2.47614376617447e+48)*x1143))+(((2.47614376617447e+48)*x1142))+(((7.14802000065968e+47)*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.00000476725774)*x1143))+(((-1.00000476725774)*x1142))+(((0.866024128540551)*new_r20))), ((6.99497495445234e-49)*(x1144.value)*(((((2.47614376617447e+48)*x1143))+(((2.47614376617447e+48)*x1142))+(((7.14802000065968e+47)*new_r20))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x1145=IKcos(j0);
IkReal x1146=IKsin(j0);
IkReal x1147=(cj2*new_r01);
IkReal x1148=(new_r01*sj2);
IkReal x1149=(cj2*new_r00);
IkReal x1150=((0.433013258970445)*sj2);
IkReal x1151=(new_r00*sj2);
IkReal x1152=((0.433010506600939)*gconst5);
IkReal x1153=((0.500000584976027)*gconst5);
IkReal x1154=((0.75000087746404)*gconst5);
IkReal x1155=((1.0)*sj2);
IkReal x1156=(cj2*new_r10);
IkReal x1157=(cj2*new_r11);
IkReal x1158=((1.0)*x1145);
IkReal x1159=(sj2*x1154);
IkReal x1160=((0.250000205066586)*x1145);
IkReal x1161=(cj2*x1145);
IkReal x1162=(cj2*x1146);
IkReal x1163=(sj2*x1146);
evalcond[0]=((((-0.866025066047432)*x1146))+new_r20+(((-1.0)*x1145*x1153)));
evalcond[1]=((((-1.0)*x1146*x1153))+new_r21+(((0.866025066047432)*x1145)));
evalcond[2]=(x1156+x1151+(((0.250000205066586)*x1146))+(((-1.0)*x1145*x1152)));
evalcond[3]=(x1148+x1157+(((-0.250000205066586)*x1145))+(((-1.0)*x1146*x1152)));
evalcond[4]=(x1149+(((0.433013258970445)*x1146))+(((-1.0)*new_r10*x1155))+(((-1.0)*x1145*x1154)));
evalcond[5]=(x1147+(((-1.0)*x1146*x1154))+(((-0.433013258970445)*x1145))+(((-1.0)*new_r11*x1155)));
evalcond[6]=(x1146+(((0.250000205066586)*x1156))+(((0.250000205066586)*x1151))+(((0.433013258970445)*x1149))+(((-0.866025066047432)*new_r20))+(((-1.0)*new_r10*x1150)));
evalcond[7]=((((0.250000205066586)*x1148))+(((-1.0)*x1158))+(((0.250000205066586)*x1157))+(((0.433013258970445)*x1147))+(((-0.866025066047432)*new_r21))+(((-1.0)*new_r11*x1150)));
evalcond[8]=((((0.433013258970445)*x1162))+(((0.250000205066586)*x1163))+(((-1.0)*sj2*x1145*x1152))+new_r00+(((-1.0)*x1154*x1161)));
evalcond[9]=((((-1.0)*sj2*x1160))+(((-1.0)*x1152*x1163))+(((-0.433013258970445)*x1161))+new_r01+(((-1.0)*x1154*x1162)));
evalcond[10]=((((-1.0)*x1152*x1161))+(((0.250000205066586)*x1162))+(((-1.0)*x1146*x1150))+new_r10+((x1145*x1159)));
evalcond[11]=(((x1146*x1159))+(((-1.0)*x1152*x1162))+(((-1.0)*cj2*x1160))+new_r11+((x1145*x1150)));
evalcond[12]=(((x1149*x1154))+((new_r20*x1153))+(((-1.0)*x1158))+((x1152*x1156))+((x1151*x1152))+(((-1.0)*new_r10*x1159)));
evalcond[13]=(((x1152*x1157))+(((-1.0)*x1146))+((x1147*x1154))+((x1148*x1152))+(((-1.0)*new_r11*x1159))+((new_r21*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1164=(gconst5*new_r02);
IkReal x1165=(gconst5*new_r12);
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r02*new_r02)))+(((5.33330713107669e+28)*(new_r12*new_r12))))),-1);
if(!x1166.valid){
continue;
}
CheckValue<IkReal> x1167 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*x1164))+(((2.66664397281603e+28)*x1165)))),IkReal(((((4.61878500004103e+28)*x1165))+(((-2.66664397281603e+28)*x1164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1167.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1166.value)))+(x1167.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1168=IKcos(j2);
IkReal x1169=IKsin(j2);
IkReal x1170=gconst5*gconst5;
IkReal x1171=(gconst5*new_r00);
IkReal x1172=((0.49999820135573)*gconst5);
IkReal x1173=((0.866026442229025)*gconst5);
IkReal x1174=((0.75000087746404)*gconst5);
IkReal x1175=((0.433010506600939)*gconst5);
IkReal x1176=((1.08253441393799e-6)*gconst5);
IkReal x1177=(gconst5*new_r02);
IkReal x1178=(gconst5*new_r01);
IkReal x1179=((0.49999820135573)*x1168);
IkReal x1180=(new_r02*x1168);
IkReal x1181=((0.866026442229025)*x1169);
IkReal x1182=(new_r12*x1168);
IkReal x1183=(new_r12*x1169);
IkReal x1184=(new_r02*x1169);
evalcond[0]=(x1184+x1182+(((-1.0)*x1173)));
evalcond[1]=(x1180+x1172+(((-1.0)*x1183)));
evalcond[2]=(((x1168*x1172))+(((-1.0)*x1169*x1173))+new_r02);
evalcond[3]=((((-1.0)*x1168*x1173))+(((-1.0)*x1169*x1172))+new_r12);
evalcond[4]=((((0.433013258970445)*x1180))+(((-0.433013258970445)*x1183))+(((-9.37501937329267e-7)*gconst5))+(((0.250000205066586)*x1182))+(((0.250000205066586)*x1184)));
evalcond[5]=((1.0)+(((-1.17188075736007e-12)*x1170))+((x1172*x1180))+(((-1.0)*x1172*x1183))+(((-1.0)*x1173*x1182))+(((-1.0)*x1173*x1184)));
evalcond[6]=((((-1.0)*x1171*x1181))+(((-1.0)*new_r20*x1176))+(((-1.0)*new_r10*x1169*x1172))+(((-1.0)*new_r10*x1168*x1173))+((x1171*x1179)));
evalcond[7]=((((-1.0)*new_r01*x1169*x1173))+(((-1.0)*new_r11*x1169*x1172))+(((-1.0)*new_r11*x1168*x1173))+((new_r01*x1168*x1172))+(((-1.0)*new_r21*x1176)));
evalcond[8]=(((x1174*x1180))+((x1175*x1184))+((x1175*x1182))+(((5.41267840225675e-7)*x1170))+(((-1.0)*x1174*x1183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1185=(new_r00*sj2);
IkReal x1186=(cj2*new_r10);
CheckValue<IkReal> x1187=IKPowWithIntegerCheck(gconst5,-1);
if(!x1187.valid){
continue;
}
if( IKabs(((((-1.00000476725774)*x1185))+(((-1.00000476725774)*x1186))+(((0.866024128540551)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((6.99497495445234e-49)*(x1187.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1185))+(((2.47614376617447e+48)*x1186)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000476725774)*x1185))+(((-1.00000476725774)*x1186))+(((0.866024128540551)*new_r20))))+IKsqr(((6.99497495445234e-49)*(x1187.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1185))+(((2.47614376617447e+48)*x1186))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.00000476725774)*x1185))+(((-1.00000476725774)*x1186))+(((0.866024128540551)*new_r20))), ((6.99497495445234e-49)*(x1187.value)*(((((7.14802000065968e+47)*new_r20))+(((2.47614376617447e+48)*x1185))+(((2.47614376617447e+48)*x1186))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x1188=IKcos(j0);
IkReal x1189=IKsin(j0);
IkReal x1190=(cj2*new_r01);
IkReal x1191=(new_r01*sj2);
IkReal x1192=(cj2*new_r00);
IkReal x1193=((0.433013258970445)*sj2);
IkReal x1194=(new_r00*sj2);
IkReal x1195=((0.433010506600939)*gconst5);
IkReal x1196=((0.500000584976027)*gconst5);
IkReal x1197=((0.75000087746404)*gconst5);
IkReal x1198=((1.0)*sj2);
IkReal x1199=(cj2*new_r10);
IkReal x1200=(cj2*new_r11);
IkReal x1201=((1.0)*x1188);
IkReal x1202=(sj2*x1197);
IkReal x1203=((0.250000205066586)*x1188);
IkReal x1204=(cj2*x1188);
IkReal x1205=(cj2*x1189);
IkReal x1206=(sj2*x1189);
evalcond[0]=((((-1.0)*x1188*x1196))+(((-0.866025066047432)*x1189))+new_r20);
evalcond[1]=((((-1.0)*x1189*x1196))+(((0.866025066047432)*x1188))+new_r21);
evalcond[2]=(x1199+x1194+(((0.250000205066586)*x1189))+(((-1.0)*x1188*x1195)));
evalcond[3]=(x1191+x1200+(((-1.0)*x1189*x1195))+(((-0.250000205066586)*x1188)));
evalcond[4]=(x1192+(((-1.0)*x1188*x1197))+(((-1.0)*new_r10*x1198))+(((0.433013258970445)*x1189)));
evalcond[5]=(x1190+(((-1.0)*x1189*x1197))+(((-1.0)*new_r11*x1198))+(((-0.433013258970445)*x1188)));
evalcond[6]=(x1189+(((0.433013258970445)*x1192))+(((0.250000205066586)*x1199))+(((0.250000205066586)*x1194))+(((-1.0)*new_r10*x1193))+(((-0.866025066047432)*new_r20)));
evalcond[7]=((((0.433013258970445)*x1190))+(((-1.0)*new_r11*x1193))+(((0.250000205066586)*x1191))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x1200))+(((-1.0)*x1201)));
evalcond[8]=((((0.433013258970445)*x1205))+(((-1.0)*sj2*x1188*x1195))+(((0.250000205066586)*x1206))+new_r00+(((-1.0)*x1197*x1204)));
evalcond[9]=((((-1.0)*sj2*x1203))+(((-0.433013258970445)*x1204))+new_r01+(((-1.0)*x1197*x1205))+(((-1.0)*x1195*x1206)));
evalcond[10]=((((-1.0)*x1189*x1193))+(((0.250000205066586)*x1205))+new_r10+(((-1.0)*x1195*x1204))+((x1188*x1202)));
evalcond[11]=(((x1189*x1202))+(((-1.0)*cj2*x1203))+((x1188*x1193))+new_r11+(((-1.0)*x1195*x1205)));
evalcond[12]=(((x1194*x1195))+((x1195*x1199))+(((-1.0)*new_r10*x1202))+((x1192*x1197))+(((-1.0)*x1201))+((new_r20*x1196)));
evalcond[13]=(((new_r21*x1196))+(((-1.0)*new_r11*x1202))+((x1195*x1200))+(((-1.0)*x1189))+((x1191*x1195))+((x1190*x1197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=0.250000584976369;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=((((1.33333437329057)*(cj1*cj1)))+(sj1*sj1));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
IkReal x1207=cj1*cj1;
IkReal x1208=new_r10*new_r10;
IkReal x1209=sj1*sj1;
IkReal x1210=((1.0)+(((-1.0)*(new_r01*new_r01))));
IkReal x1211=((1.33333437329057)*x1207);
j2eval[0]=(((x1210*x1211))+((x1208*x1209))+((x1209*x1210))+((x1208*x1211)));
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((6.14158329400386)+(IKabs(cj1))+(IKabs(((-1.0)+(IKsign(sj1)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
j0array[0]=3.14159140358624;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=6.28318405717603;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((0.866025066047432)*(IKcos(j0))))+(((-1.08253441393799e-6)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
j2eval[0]=(new_r10+(((-1.73206161520519)*new_r00)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
j2eval[0]=(new_r11+(((-1.73206161520519)*new_r01)));
j2eval[1]=5624995940.50689;
j2eval[2]=sj0;
j2eval[3]=IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
j2eval[0]=((((-1.0)*new_r00))+(((-1.73206161520519)*new_r10)));
j2eval[1]=IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10))));
j2eval[2]=5624995940.50689;
j2eval[3]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1212=(new_r01*new_r10);
IkReal x1213=(new_r00*new_r11);
j2eval[0]=(x1213+(((-1.0)*x1212)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x1213))+(((-5.33330713107669e+28)*x1212))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1214=(new_r00*new_r01);
IkReal x1215=(new_r10*new_r11);
j2eval[0]=(x1214+x1215);
j2eval[1]=((IKabs(((((-1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))))+(IKabs(((((-1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1214))+(((5.33330713107669e+28)*x1215))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1216=new_r10*new_r10;
IkReal x1217=new_r01*new_r01;
j2eval[0]=((1.0)+x1216+(((-1.0)*x1217)));
j2eval[1]=IKsign(((5.33330713107669e+28)+(((5.33330713107669e+28)*x1216))+(((-5.33330713107669e+28)*x1217))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1218=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1218.valid){
continue;
}
CheckValue<IkReal> x1219 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r00))+(((2.30939270191783e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r10))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1219.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1218.value)))+(x1219.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1220=IKsin(j2);
IkReal x1221=IKcos(j2);
IkReal x1222=((0.75000087746404)*x1220);
IkReal x1223=(new_r01*x1221);
IkReal x1224=(new_r11*x1220);
IkReal x1225=(new_r01*x1220);
IkReal x1226=((0.433010506600939)*x1220);
IkReal x1227=((0.433010506600939)*x1221);
IkReal x1228=(new_r10*x1221);
IkReal x1229=(new_r00*x1220);
IkReal x1230=((0.49999820135573)*x1221);
IkReal x1231=(new_r10*x1220);
IkReal x1232=(new_r11*x1221);
IkReal x1233=((0.75000087746404)*x1221);
IkReal x1234=(new_r00*x1221);
evalcond[0]=((0.250000205066586)+x1229+x1228);
evalcond[1]=((-0.866026442229025)+x1232+x1225);
evalcond[2]=((0.433013258970445)+(((-1.0)*x1231))+x1234);
evalcond[3]=((0.49999820135573)+x1223+(((-1.0)*x1224)));
evalcond[4]=(x1233+x1226);
evalcond[5]=(x1227+(((-1.0)*x1222)));
evalcond[6]=((((0.433013258970445)*x1221))+new_r00+(((0.250000205066586)*x1220)));
evalcond[7]=(x1230+(((-0.866026442229025)*x1220))+new_r01);
evalcond[8]=((((-0.433013258970445)*x1220))+new_r10+(((0.250000205066586)*x1221)));
evalcond[9]=((((-0.49999820135573)*x1220))+(((-0.866026442229025)*x1221))+new_r11);
evalcond[10]=((((-0.433013258970445)*x1224))+(((0.250000205066586)*x1225))+(((0.250000205066586)*x1232))+(((0.433013258970445)*x1223)));
evalcond[11]=(((new_r00*x1226))+((new_r10*x1227))+((new_r00*x1233))+(((-1.0)*new_r10*x1222)));
evalcond[12]=(((new_r11*x1227))+(((0.75000087746404)*x1223))+(((-1.0)*new_r11*x1222))+(((0.433010506600939)*x1225)));
evalcond[13]=((((0.49999820135573)*x1231))+(((-1.0)*new_r00*x1230))+(((0.866026442229025)*x1228))+(((0.866026442229025)*x1229)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x1231))+(((0.250000205066586)*x1229))+(((0.250000205066586)*x1228))+(((0.433013258970445)*x1234)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x1223))+(((0.49999820135573)*x1224))+(((0.866026442229025)*x1232))+(((0.866026442229025)*x1225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1235 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1235.valid){
continue;
}
CheckValue<IkReal> x1236=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1236.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1235.value)+(((1.5707963267949)*(x1236.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1237=IKsin(j2);
IkReal x1238=IKcos(j2);
IkReal x1239=((0.75000087746404)*x1237);
IkReal x1240=(new_r01*x1238);
IkReal x1241=(new_r11*x1237);
IkReal x1242=(new_r01*x1237);
IkReal x1243=((0.433010506600939)*x1237);
IkReal x1244=((0.433010506600939)*x1238);
IkReal x1245=(new_r10*x1238);
IkReal x1246=(new_r00*x1237);
IkReal x1247=((0.49999820135573)*x1238);
IkReal x1248=(new_r10*x1237);
IkReal x1249=(new_r11*x1238);
IkReal x1250=((0.75000087746404)*x1238);
IkReal x1251=(new_r00*x1238);
evalcond[0]=((0.250000205066586)+x1245+x1246);
evalcond[1]=((-0.866026442229025)+x1242+x1249);
evalcond[2]=((0.433013258970445)+x1251+(((-1.0)*x1248)));
evalcond[3]=((0.49999820135573)+x1240+(((-1.0)*x1241)));
evalcond[4]=(x1243+x1250);
evalcond[5]=(x1244+(((-1.0)*x1239)));
evalcond[6]=((((0.433013258970445)*x1238))+new_r00+(((0.250000205066586)*x1237)));
evalcond[7]=(x1247+(((-0.866026442229025)*x1237))+new_r01);
evalcond[8]=((((-0.433013258970445)*x1237))+new_r10+(((0.250000205066586)*x1238)));
evalcond[9]=((((-0.49999820135573)*x1237))+(((-0.866026442229025)*x1238))+new_r11);
evalcond[10]=((((-0.433013258970445)*x1241))+(((0.250000205066586)*x1242))+(((0.250000205066586)*x1249))+(((0.433013258970445)*x1240)));
evalcond[11]=(((new_r00*x1250))+((new_r10*x1244))+((new_r00*x1243))+(((-1.0)*new_r10*x1239)));
evalcond[12]=((((0.433010506600939)*x1242))+((new_r11*x1244))+(((0.75000087746404)*x1240))+(((-1.0)*new_r11*x1239)));
evalcond[13]=((((0.866026442229025)*x1246))+(((0.866026442229025)*x1245))+(((0.49999820135573)*x1248))+(((-1.0)*new_r00*x1247)));
evalcond[14]=((1.0)+(((0.433013258970445)*x1251))+(((-0.433013258970445)*x1248))+(((0.250000205066586)*x1245))+(((0.250000205066586)*x1246)));
evalcond[15]=((-1.0)+(((0.866026442229025)*x1249))+(((0.866026442229025)*x1242))+(((0.49999820135573)*x1241))+(((-0.49999820135573)*x1240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1252 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1252.valid){
continue;
}
CheckValue<IkReal> x1253=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1253.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1252.value)+(((1.5707963267949)*(x1253.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1254=IKsin(j2);
IkReal x1255=IKcos(j2);
IkReal x1256=((0.75000087746404)*x1254);
IkReal x1257=(new_r01*x1255);
IkReal x1258=(new_r11*x1254);
IkReal x1259=(new_r01*x1254);
IkReal x1260=((0.433010506600939)*x1254);
IkReal x1261=((0.433010506600939)*x1255);
IkReal x1262=(new_r10*x1255);
IkReal x1263=(new_r00*x1254);
IkReal x1264=((0.49999820135573)*x1255);
IkReal x1265=(new_r10*x1254);
IkReal x1266=(new_r11*x1255);
IkReal x1267=((0.75000087746404)*x1255);
IkReal x1268=(new_r00*x1255);
evalcond[0]=((0.250000205066586)+x1263+x1262);
evalcond[1]=((-0.866026442229025)+x1266+x1259);
evalcond[2]=((0.433013258970445)+x1268+(((-1.0)*x1265)));
evalcond[3]=((0.49999820135573)+x1257+(((-1.0)*x1258)));
evalcond[4]=(x1260+x1267);
evalcond[5]=((((-1.0)*x1256))+x1261);
evalcond[6]=((((0.250000205066586)*x1254))+(((0.433013258970445)*x1255))+new_r00);
evalcond[7]=(x1264+(((-0.866026442229025)*x1254))+new_r01);
evalcond[8]=((((0.250000205066586)*x1255))+(((-0.433013258970445)*x1254))+new_r10);
evalcond[9]=((((-0.866026442229025)*x1255))+new_r11+(((-0.49999820135573)*x1254)));
evalcond[10]=((((0.250000205066586)*x1266))+(((0.250000205066586)*x1259))+(((0.433013258970445)*x1257))+(((-0.433013258970445)*x1258)));
evalcond[11]=((((-1.0)*new_r10*x1256))+((new_r00*x1267))+((new_r00*x1260))+((new_r10*x1261)));
evalcond[12]=((((-1.0)*new_r11*x1256))+(((0.75000087746404)*x1257))+(((0.433010506600939)*x1259))+((new_r11*x1261)));
evalcond[13]=((((0.866026442229025)*x1262))+(((0.866026442229025)*x1263))+(((0.49999820135573)*x1265))+(((-1.0)*new_r00*x1264)));
evalcond[14]=((1.0)+(((0.250000205066586)*x1263))+(((0.250000205066586)*x1262))+(((0.433013258970445)*x1268))+(((-0.433013258970445)*x1265)));
evalcond[15]=((-1.0)+(((0.866026442229025)*x1266))+(((0.866026442229025)*x1259))+(((-0.49999820135573)*x1257))+(((0.49999820135573)*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1269=(new_r01*new_r10);
IkReal x1270=(new_r00*new_r11);
j2eval[0]=(x1270+(((-1.0)*x1269)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x1269))+(((5.33330713107669e+28)*x1270))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))))+(IKabs(((((4.61878500004103e+28)*new_r10))+(((1.33332787645226e+28)*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1271=(new_r00*new_r01);
IkReal x1272=(new_r10*new_r11);
j2eval[0]=(x1271+x1272);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r11))+(((2.66664397281603e+28)*new_r00)))))+(IKabs(((((1.33332787645226e+28)*new_r01))+(((-2.66664397281603e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1271))+(((5.33330713107669e+28)*x1272))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1273=new_r10*new_r10;
IkReal x1274=new_r01*new_r01;
j2eval[0]=((1.0)+x1273+(((-1.0)*x1274)));
j2eval[1]=IKsign(((5.33330713107669e+28)+(((-5.33330713107669e+28)*x1274))+(((5.33330713107669e+28)*x1273))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1275=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1275.valid){
continue;
}
CheckValue<IkReal> x1276 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r00))+(((-2.30939270191783e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r10))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1276.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1275.value)))+(x1276.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1277=IKsin(j2);
IkReal x1278=IKcos(j2);
IkReal x1279=((0.75000087746404)*x1277);
IkReal x1280=(new_r01*x1278);
IkReal x1281=(new_r11*x1277);
IkReal x1282=(new_r01*x1277);
IkReal x1283=((0.433010506600939)*x1277);
IkReal x1284=((0.433010506600939)*x1278);
IkReal x1285=(new_r10*x1278);
IkReal x1286=(new_r00*x1277);
IkReal x1287=((0.49999820135573)*x1278);
IkReal x1288=(new_r10*x1277);
IkReal x1289=(new_r11*x1278);
IkReal x1290=((0.75000087746404)*x1278);
IkReal x1291=(new_r00*x1278);
evalcond[0]=((-0.250000205066586)+x1285+x1286);
evalcond[1]=((0.866026442229025)+x1282+x1289);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x1288))+x1291);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x1281))+x1280);
evalcond[4]=(x1283+x1290);
evalcond[5]=(x1284+(((-1.0)*x1279)));
evalcond[6]=((((-0.250000205066586)*x1277))+(((-0.433013258970445)*x1278))+new_r00);
evalcond[7]=((((0.866026442229025)*x1277))+(((-1.0)*x1287))+new_r01);
evalcond[8]=((((-0.250000205066586)*x1278))+(((0.433013258970445)*x1277))+new_r10);
evalcond[9]=((((0.49999820135573)*x1277))+(((0.866026442229025)*x1278))+new_r11);
evalcond[10]=((((0.250000205066586)*x1289))+(((0.250000205066586)*x1282))+(((-0.433013258970445)*x1281))+(((0.433013258970445)*x1280)));
evalcond[11]=((((-1.0)*new_r10*x1279))+((new_r10*x1284))+((new_r00*x1283))+((new_r00*x1290)));
evalcond[12]=(((new_r11*x1284))+(((-1.0)*new_r11*x1279))+(((0.75000087746404)*x1280))+(((0.433010506600939)*x1282)));
evalcond[13]=((((0.866026442229025)*x1286))+(((0.866026442229025)*x1285))+(((0.49999820135573)*x1288))+(((-1.0)*new_r00*x1287)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x1291))+(((0.250000205066586)*x1286))+(((0.250000205066586)*x1285))+(((-0.433013258970445)*x1288)));
evalcond[15]=((1.0)+(((0.866026442229025)*x1289))+(((0.866026442229025)*x1282))+(((0.49999820135573)*x1281))+(((-0.49999820135573)*x1280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1292=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1292.valid){
continue;
}
CheckValue<IkReal> x1293 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((-2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1293.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1292.value)))+(x1293.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1294=IKsin(j2);
IkReal x1295=IKcos(j2);
IkReal x1296=((0.75000087746404)*x1294);
IkReal x1297=(new_r01*x1295);
IkReal x1298=(new_r11*x1294);
IkReal x1299=(new_r01*x1294);
IkReal x1300=((0.433010506600939)*x1294);
IkReal x1301=((0.433010506600939)*x1295);
IkReal x1302=(new_r10*x1295);
IkReal x1303=(new_r00*x1294);
IkReal x1304=((0.49999820135573)*x1295);
IkReal x1305=(new_r10*x1294);
IkReal x1306=(new_r11*x1295);
IkReal x1307=((0.75000087746404)*x1295);
IkReal x1308=(new_r00*x1295);
evalcond[0]=((-0.250000205066586)+x1302+x1303);
evalcond[1]=((0.866026442229025)+x1306+x1299);
evalcond[2]=((-0.433013258970445)+x1308+(((-1.0)*x1305)));
evalcond[3]=((-0.49999820135573)+x1297+(((-1.0)*x1298)));
evalcond[4]=(x1307+x1300);
evalcond[5]=(x1301+(((-1.0)*x1296)));
evalcond[6]=((((-0.433013258970445)*x1295))+(((-0.250000205066586)*x1294))+new_r00);
evalcond[7]=((((-1.0)*x1304))+new_r01+(((0.866026442229025)*x1294)));
evalcond[8]=((((-0.250000205066586)*x1295))+(((0.433013258970445)*x1294))+new_r10);
evalcond[9]=((((0.49999820135573)*x1294))+new_r11+(((0.866026442229025)*x1295)));
evalcond[10]=((((0.433013258970445)*x1297))+(((0.250000205066586)*x1306))+(((0.250000205066586)*x1299))+(((-0.433013258970445)*x1298)));
evalcond[11]=((((-1.0)*new_r10*x1296))+((new_r10*x1301))+((new_r00*x1307))+((new_r00*x1300)));
evalcond[12]=((((0.433010506600939)*x1299))+(((-1.0)*new_r11*x1296))+((new_r11*x1301))+(((0.75000087746404)*x1297)));
evalcond[13]=((((0.49999820135573)*x1305))+(((-1.0)*new_r00*x1304))+(((0.866026442229025)*x1303))+(((0.866026442229025)*x1302)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x1305))+(((0.433013258970445)*x1308))+(((0.250000205066586)*x1302))+(((0.250000205066586)*x1303)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x1297))+(((0.866026442229025)*x1299))+(((0.49999820135573)*x1298))+(((0.866026442229025)*x1306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1309=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1309.valid){
continue;
}
CheckValue<IkReal> x1310 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*new_r10))+(((1.33332787645226e+28)*new_r11)))),IkReal(((((-1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1310.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1309.value)))+(x1310.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1311=IKsin(j2);
IkReal x1312=IKcos(j2);
IkReal x1313=((0.75000087746404)*x1311);
IkReal x1314=(new_r01*x1312);
IkReal x1315=(new_r11*x1311);
IkReal x1316=(new_r01*x1311);
IkReal x1317=((0.433010506600939)*x1311);
IkReal x1318=((0.433010506600939)*x1312);
IkReal x1319=(new_r10*x1312);
IkReal x1320=(new_r00*x1311);
IkReal x1321=((0.49999820135573)*x1312);
IkReal x1322=(new_r10*x1311);
IkReal x1323=(new_r11*x1312);
IkReal x1324=((0.75000087746404)*x1312);
IkReal x1325=(new_r00*x1312);
evalcond[0]=((-0.250000205066586)+x1319+x1320);
evalcond[1]=((0.866026442229025)+x1316+x1323);
evalcond[2]=((-0.433013258970445)+x1325+(((-1.0)*x1322)));
evalcond[3]=((-0.49999820135573)+x1314+(((-1.0)*x1315)));
evalcond[4]=(x1317+x1324);
evalcond[5]=(x1318+(((-1.0)*x1313)));
evalcond[6]=((((-0.250000205066586)*x1311))+(((-0.433013258970445)*x1312))+new_r00);
evalcond[7]=((((0.866026442229025)*x1311))+(((-1.0)*x1321))+new_r01);
evalcond[8]=((((-0.250000205066586)*x1312))+new_r10+(((0.433013258970445)*x1311)));
evalcond[9]=((((0.866026442229025)*x1312))+new_r11+(((0.49999820135573)*x1311)));
evalcond[10]=((((0.250000205066586)*x1316))+(((-0.433013258970445)*x1315))+(((0.433013258970445)*x1314))+(((0.250000205066586)*x1323)));
evalcond[11]=(((new_r00*x1324))+(((-1.0)*new_r10*x1313))+((new_r00*x1317))+((new_r10*x1318)));
evalcond[12]=((((0.75000087746404)*x1314))+(((-1.0)*new_r11*x1313))+(((0.433010506600939)*x1316))+((new_r11*x1318)));
evalcond[13]=((((0.866026442229025)*x1319))+(((0.866026442229025)*x1320))+(((-1.0)*new_r00*x1321))+(((0.49999820135573)*x1322)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x1319))+(((-0.433013258970445)*x1322))+(((0.433013258970445)*x1325))+(((0.250000205066586)*x1320)));
evalcond[15]=((1.0)+(((0.866026442229025)*x1316))+(((0.866026442229025)*x1323))+(((-0.49999820135573)*x1314))+(((0.49999820135573)*x1315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1326=(new_r01*new_r10);
IkReal x1327=(new_r00*new_r11);
j2eval[0]=(x1327+(((-1.0)*x1326)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x1327))+(((-5.33330713107669e+28)*x1326))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r10))+(((4.61878500004103e+28)*new_r11)))))+(IKabs(((((1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1328=(new_r00*new_r01);
IkReal x1329=(new_r10*new_r11);
j2eval[0]=(x1328+x1329);
j2eval[1]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((2.30939270191783e+28)*new_r00)))))+(IKabs(((((-2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1329))+(((5.33330713107669e+28)*x1328))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1330=new_r10*new_r10;
IkReal x1331=new_r01*new_r01;
j2eval[0]=((1.0)+x1330+(((-1.0)*x1331)));
j2eval[1]=IKsign(((5.33330713107669e+28)+(((5.33330713107669e+28)*x1330))+(((-5.33330713107669e+28)*x1331))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1332.valid){
continue;
}
CheckValue<IkReal> x1333 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1333.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1332.value)))+(x1333.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1334=IKsin(j2);
IkReal x1335=IKcos(j2);
IkReal x1336=((0.75000087746404)*x1334);
IkReal x1337=(new_r01*x1335);
IkReal x1338=(new_r11*x1334);
IkReal x1339=(new_r01*x1334);
IkReal x1340=((0.433010506600939)*x1334);
IkReal x1341=((0.433010506600939)*x1335);
IkReal x1342=(new_r10*x1335);
IkReal x1343=(new_r00*x1334);
IkReal x1344=((0.49999820135573)*x1335);
IkReal x1345=(new_r10*x1334);
IkReal x1346=(new_r11*x1335);
IkReal x1347=((0.75000087746404)*x1335);
IkReal x1348=(new_r00*x1335);
evalcond[0]=((-0.866026442229025)+x1342+x1343);
evalcond[1]=((-0.250000205066586)+x1346+x1339);
evalcond[2]=((0.49999820135573)+x1348+(((-1.0)*x1345)));
evalcond[3]=((-0.433013258970445)+x1337+(((-1.0)*x1338)));
evalcond[4]=(x1340+x1347);
evalcond[5]=(x1341+(((-1.0)*x1336)));
evalcond[6]=(x1344+(((-0.866026442229025)*x1334))+new_r00);
evalcond[7]=((((-0.250000205066586)*x1334))+new_r01+(((-0.433013258970445)*x1335)));
evalcond[8]=((((-0.49999820135573)*x1334))+(((-0.866026442229025)*x1335))+new_r10);
evalcond[9]=((((-0.250000205066586)*x1335))+new_r11+(((0.433013258970445)*x1334)));
evalcond[10]=((((0.433013258970445)*x1348))+(((0.250000205066586)*x1343))+(((0.250000205066586)*x1342))+(((-0.433013258970445)*x1345)));
evalcond[11]=(((new_r00*x1347))+((new_r00*x1340))+(((-1.0)*new_r10*x1336))+((new_r10*x1341)));
evalcond[12]=((((0.75000087746404)*x1337))+(((0.433010506600939)*x1339))+(((-1.0)*new_r11*x1336))+((new_r11*x1341)));
evalcond[13]=((((0.866026442229025)*x1339))+(((0.49999820135573)*x1338))+(((-0.49999820135573)*x1337))+(((0.866026442229025)*x1346)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x1339))+(((-0.433013258970445)*x1338))+(((0.250000205066586)*x1346))+(((0.433013258970445)*x1337)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x1344))+(((0.866026442229025)*x1343))+(((0.866026442229025)*x1342))+(((0.49999820135573)*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1349.valid){
continue;
}
CheckValue<IkReal> x1350 = IKatan2WithCheck(IkReal(((((-2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1350.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1349.value)))+(x1350.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1351=IKsin(j2);
IkReal x1352=IKcos(j2);
IkReal x1353=((0.75000087746404)*x1351);
IkReal x1354=(new_r01*x1352);
IkReal x1355=(new_r11*x1351);
IkReal x1356=(new_r01*x1351);
IkReal x1357=((0.433010506600939)*x1351);
IkReal x1358=((0.433010506600939)*x1352);
IkReal x1359=(new_r10*x1352);
IkReal x1360=(new_r00*x1351);
IkReal x1361=((0.49999820135573)*x1352);
IkReal x1362=(new_r10*x1351);
IkReal x1363=(new_r11*x1352);
IkReal x1364=((0.75000087746404)*x1352);
IkReal x1365=(new_r00*x1352);
evalcond[0]=((-0.866026442229025)+x1359+x1360);
evalcond[1]=((-0.250000205066586)+x1356+x1363);
evalcond[2]=((0.49999820135573)+x1365+(((-1.0)*x1362)));
evalcond[3]=((-0.433013258970445)+x1354+(((-1.0)*x1355)));
evalcond[4]=(x1357+x1364);
evalcond[5]=(x1358+(((-1.0)*x1353)));
evalcond[6]=(x1361+(((-0.866026442229025)*x1351))+new_r00);
evalcond[7]=((((-0.250000205066586)*x1351))+(((-0.433013258970445)*x1352))+new_r01);
evalcond[8]=((((-0.866026442229025)*x1352))+new_r10+(((-0.49999820135573)*x1351)));
evalcond[9]=((((0.433013258970445)*x1351))+(((-0.250000205066586)*x1352))+new_r11);
evalcond[10]=((((0.250000205066586)*x1360))+(((0.250000205066586)*x1359))+(((0.433013258970445)*x1365))+(((-0.433013258970445)*x1362)));
evalcond[11]=(((new_r10*x1358))+(((-1.0)*new_r10*x1353))+((new_r00*x1364))+((new_r00*x1357)));
evalcond[12]=(((new_r11*x1358))+(((0.433010506600939)*x1356))+(((-1.0)*new_r11*x1353))+(((0.75000087746404)*x1354)));
evalcond[13]=((((0.49999820135573)*x1355))+(((0.866026442229025)*x1356))+(((0.866026442229025)*x1363))+(((-0.49999820135573)*x1354)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x1355))+(((0.250000205066586)*x1363))+(((0.250000205066586)*x1356))+(((0.433013258970445)*x1354)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x1361))+(((0.49999820135573)*x1362))+(((0.866026442229025)*x1359))+(((0.866026442229025)*x1360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1366 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r10))+(((4.61878500004103e+28)*new_r11)))),IkReal(((((1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1366.valid){
continue;
}
CheckValue<IkReal> x1367=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1367.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1366.value)+(((1.5707963267949)*(x1367.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1368=IKsin(j2);
IkReal x1369=IKcos(j2);
IkReal x1370=((0.75000087746404)*x1368);
IkReal x1371=(new_r01*x1369);
IkReal x1372=(new_r11*x1368);
IkReal x1373=(new_r01*x1368);
IkReal x1374=((0.433010506600939)*x1368);
IkReal x1375=((0.433010506600939)*x1369);
IkReal x1376=(new_r10*x1369);
IkReal x1377=(new_r00*x1368);
IkReal x1378=((0.49999820135573)*x1369);
IkReal x1379=(new_r10*x1368);
IkReal x1380=(new_r11*x1369);
IkReal x1381=((0.75000087746404)*x1369);
IkReal x1382=(new_r00*x1369);
evalcond[0]=((-0.866026442229025)+x1377+x1376);
evalcond[1]=((-0.250000205066586)+x1373+x1380);
evalcond[2]=((0.49999820135573)+x1382+(((-1.0)*x1379)));
evalcond[3]=((-0.433013258970445)+x1371+(((-1.0)*x1372)));
evalcond[4]=(x1374+x1381);
evalcond[5]=(x1375+(((-1.0)*x1370)));
evalcond[6]=(x1378+(((-0.866026442229025)*x1368))+new_r00);
evalcond[7]=((((-0.250000205066586)*x1368))+(((-0.433013258970445)*x1369))+new_r01);
evalcond[8]=((((-0.866026442229025)*x1369))+new_r10+(((-0.49999820135573)*x1368)));
evalcond[9]=((((0.433013258970445)*x1368))+(((-0.250000205066586)*x1369))+new_r11);
evalcond[10]=((((-0.433013258970445)*x1379))+(((0.433013258970445)*x1382))+(((0.250000205066586)*x1377))+(((0.250000205066586)*x1376)));
evalcond[11]=(((new_r10*x1375))+((new_r00*x1381))+((new_r00*x1374))+(((-1.0)*new_r10*x1370)));
evalcond[12]=((((-1.0)*new_r11*x1370))+(((0.75000087746404)*x1371))+(((0.433010506600939)*x1373))+((new_r11*x1375)));
evalcond[13]=((((0.49999820135573)*x1372))+(((-0.49999820135573)*x1371))+(((0.866026442229025)*x1380))+(((0.866026442229025)*x1373)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x1372))+(((0.433013258970445)*x1371))+(((0.250000205066586)*x1380))+(((0.250000205066586)*x1373)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x1379))+(((-1.0)*new_r00*x1378))+(((0.866026442229025)*x1376))+(((0.866026442229025)*x1377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1383=(new_r01*new_r10);
IkReal x1384=(new_r00*new_r11);
j2eval[0]=(x1384+(((-1.0)*x1383)));
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))))+(IKabs(((((-1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((-5.33330713107669e+28)*x1383))+(((5.33330713107669e+28)*x1384))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1385=(new_r00*new_r01);
IkReal x1386=(new_r10*new_r11);
j2eval[0]=(x1385+x1386);
j2eval[1]=((IKabs(((((2.30939270191783e+28)*new_r10))+(((-4.61878500004103e+28)*new_r01)))))+(IKabs(((((-4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1386))+(((5.33330713107669e+28)*x1385))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.57079633263667;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1387=new_r01*new_r01;
IkReal x1388=new_r10*new_r10;
j2eval[0]=((-1.0)+x1387+(((-1.0)*x1388)));
j2eval[1]=IKsign(((-5.33330713107669e+28)+(((-5.33330713107669e+28)*x1388))+(((5.33330713107669e+28)*x1387))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1389 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1389.valid){
continue;
}
CheckValue<IkReal> x1390=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*(new_r10*new_r10)))+(((-5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1390.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1389.value)+(((1.5707963267949)*(x1390.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1391=IKsin(j2);
IkReal x1392=IKcos(j2);
IkReal x1393=((0.75000087746404)*x1391);
IkReal x1394=(new_r01*x1392);
IkReal x1395=(new_r11*x1391);
IkReal x1396=(new_r01*x1391);
IkReal x1397=((0.433010506600939)*x1391);
IkReal x1398=((0.433010506600939)*x1392);
IkReal x1399=(new_r10*x1392);
IkReal x1400=(new_r00*x1391);
IkReal x1401=((0.49999820135573)*x1392);
IkReal x1402=(new_r10*x1391);
IkReal x1403=(new_r11*x1392);
IkReal x1404=((0.75000087746404)*x1392);
IkReal x1405=(new_r00*x1392);
evalcond[0]=((0.866026442229025)+x1399+x1400);
evalcond[1]=((0.250000205066586)+x1396+x1403);
evalcond[2]=((-0.49999820135573)+(((-1.0)*x1402))+x1405);
evalcond[3]=((0.433013258970445)+x1394+(((-1.0)*x1395)));
evalcond[4]=(x1397+x1404);
evalcond[5]=(x1398+(((-1.0)*x1393)));
evalcond[6]=((((-1.0)*x1401))+(((0.866026442229025)*x1391))+new_r00);
evalcond[7]=((((0.250000205066586)*x1391))+(((0.433013258970445)*x1392))+new_r01);
evalcond[8]=((((0.49999820135573)*x1391))+(((0.866026442229025)*x1392))+new_r10);
evalcond[9]=((((0.250000205066586)*x1392))+new_r11+(((-0.433013258970445)*x1391)));
evalcond[10]=((((0.250000205066586)*x1400))+(((0.433013258970445)*x1405))+(((0.250000205066586)*x1399))+(((-0.433013258970445)*x1402)));
evalcond[11]=(((new_r10*x1398))+((new_r00*x1404))+((new_r00*x1397))+(((-1.0)*new_r10*x1393)));
evalcond[12]=(((new_r11*x1398))+(((0.433010506600939)*x1396))+(((0.75000087746404)*x1394))+(((-1.0)*new_r11*x1393)));
evalcond[13]=((((0.49999820135573)*x1395))+(((0.866026442229025)*x1396))+(((-0.49999820135573)*x1394))+(((0.866026442229025)*x1403)));
evalcond[14]=((1.0)+(((0.250000205066586)*x1403))+(((0.433013258970445)*x1394))+(((0.250000205066586)*x1396))+(((-0.433013258970445)*x1395)));
evalcond[15]=((1.0)+(((-1.0)*new_r00*x1401))+(((0.49999820135573)*x1402))+(((0.866026442229025)*x1399))+(((0.866026442229025)*x1400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1406=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1406.valid){
continue;
}
CheckValue<IkReal> x1407 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((-4.61878500004103e+28)*new_r01)))),IkReal(((((-4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1407.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1406.value)))+(x1407.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1408=IKsin(j2);
IkReal x1409=IKcos(j2);
IkReal x1410=((0.75000087746404)*x1408);
IkReal x1411=(new_r01*x1409);
IkReal x1412=(new_r11*x1408);
IkReal x1413=(new_r01*x1408);
IkReal x1414=((0.433010506600939)*x1408);
IkReal x1415=((0.433010506600939)*x1409);
IkReal x1416=(new_r10*x1409);
IkReal x1417=(new_r00*x1408);
IkReal x1418=((0.49999820135573)*x1409);
IkReal x1419=(new_r10*x1408);
IkReal x1420=(new_r11*x1409);
IkReal x1421=((0.75000087746404)*x1409);
IkReal x1422=(new_r00*x1409);
evalcond[0]=((0.866026442229025)+x1416+x1417);
evalcond[1]=((0.250000205066586)+x1420+x1413);
evalcond[2]=((-0.49999820135573)+x1422+(((-1.0)*x1419)));
evalcond[3]=((0.433013258970445)+x1411+(((-1.0)*x1412)));
evalcond[4]=(x1421+x1414);
evalcond[5]=((((-1.0)*x1410))+x1415);
evalcond[6]=((((0.866026442229025)*x1408))+(((-1.0)*x1418))+new_r00);
evalcond[7]=(new_r01+(((0.250000205066586)*x1408))+(((0.433013258970445)*x1409)));
evalcond[8]=((((0.866026442229025)*x1409))+(((0.49999820135573)*x1408))+new_r10);
evalcond[9]=((((-0.433013258970445)*x1408))+new_r11+(((0.250000205066586)*x1409)));
evalcond[10]=((((0.250000205066586)*x1416))+(((0.250000205066586)*x1417))+(((0.433013258970445)*x1422))+(((-0.433013258970445)*x1419)));
evalcond[11]=((((-1.0)*new_r10*x1410))+((new_r00*x1414))+((new_r10*x1415))+((new_r00*x1421)));
evalcond[12]=((((-1.0)*new_r11*x1410))+(((0.75000087746404)*x1411))+((new_r11*x1415))+(((0.433010506600939)*x1413)));
evalcond[13]=((((-0.49999820135573)*x1411))+(((0.866026442229025)*x1420))+(((0.49999820135573)*x1412))+(((0.866026442229025)*x1413)));
evalcond[14]=((1.0)+(((0.250000205066586)*x1413))+(((0.250000205066586)*x1420))+(((0.433013258970445)*x1411))+(((-0.433013258970445)*x1412)));
evalcond[15]=((1.0)+(((-1.0)*new_r00*x1418))+(((0.49999820135573)*x1419))+(((0.866026442229025)*x1417))+(((0.866026442229025)*x1416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1423 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))),IkReal(((((-1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1423.valid){
continue;
}
CheckValue<IkReal> x1424=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1424.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1423.value)+(((1.5707963267949)*(x1424.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1425=IKsin(j2);
IkReal x1426=IKcos(j2);
IkReal x1427=((0.75000087746404)*x1425);
IkReal x1428=(new_r01*x1426);
IkReal x1429=(new_r11*x1425);
IkReal x1430=(new_r01*x1425);
IkReal x1431=((0.433010506600939)*x1425);
IkReal x1432=((0.433010506600939)*x1426);
IkReal x1433=(new_r10*x1426);
IkReal x1434=(new_r00*x1425);
IkReal x1435=((0.49999820135573)*x1426);
IkReal x1436=(new_r10*x1425);
IkReal x1437=(new_r11*x1426);
IkReal x1438=((0.75000087746404)*x1426);
IkReal x1439=(new_r00*x1426);
evalcond[0]=((0.866026442229025)+x1434+x1433);
evalcond[1]=((0.250000205066586)+x1437+x1430);
evalcond[2]=((-0.49999820135573)+(((-1.0)*x1436))+x1439);
evalcond[3]=((0.433013258970445)+(((-1.0)*x1429))+x1428);
evalcond[4]=(x1431+x1438);
evalcond[5]=(x1432+(((-1.0)*x1427)));
evalcond[6]=((((-1.0)*x1435))+(((0.866026442229025)*x1425))+new_r00);
evalcond[7]=((((0.250000205066586)*x1425))+(((0.433013258970445)*x1426))+new_r01);
evalcond[8]=((((0.49999820135573)*x1425))+(((0.866026442229025)*x1426))+new_r10);
evalcond[9]=((((0.250000205066586)*x1426))+(((-0.433013258970445)*x1425))+new_r11);
evalcond[10]=((((0.433013258970445)*x1439))+(((-0.433013258970445)*x1436))+(((0.250000205066586)*x1434))+(((0.250000205066586)*x1433)));
evalcond[11]=(((new_r00*x1431))+((new_r00*x1438))+(((-1.0)*new_r10*x1427))+((new_r10*x1432)));
evalcond[12]=((((0.75000087746404)*x1428))+(((0.433010506600939)*x1430))+(((-1.0)*new_r11*x1427))+((new_r11*x1432)));
evalcond[13]=((((0.49999820135573)*x1429))+(((0.866026442229025)*x1430))+(((0.866026442229025)*x1437))+(((-0.49999820135573)*x1428)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x1429))+(((0.433013258970445)*x1428))+(((0.250000205066586)*x1437))+(((0.250000205066586)*x1430)));
evalcond[15]=((1.0)+(((0.49999820135573)*x1436))+(((-1.0)*new_r00*x1435))+(((0.866026442229025)*x1433))+(((0.866026442229025)*x1434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1440=IKPowWithIntegerCheck(IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10)))),-1);
if(!x1440.valid){
continue;
}
CheckValue<IkReal> x1441 = IKatan2WithCheck(IkReal(((((-37499.810974959)*cj0))+(((10825.2588795883)*sj0)))),IkReal(((((18750.015379994)*sj0))+(((-64951.9831671769)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1440.value)))+(x1441.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1442=IKcos(j2);
IkReal x1443=IKsin(j2);
IkReal x1444=((1.0)*cj0);
IkReal x1445=((0.866026442229025)*cj0);
IkReal x1446=((0.49999820135573)*cj0);
IkReal x1447=((0.433013258970445)*sj0);
IkReal x1448=((0.866026442229025)*sj0);
IkReal x1449=((0.49999820135573)*sj0);
IkReal x1450=((0.75000087746404)*x1443);
IkReal x1451=(sj0*x1443);
IkReal x1452=(new_r01*x1442);
IkReal x1453=(new_r11*x1443);
IkReal x1454=((0.866026442229025)*x1443);
IkReal x1455=((0.250000205066586)*x1442);
IkReal x1456=((0.433010506600939)*x1443);
IkReal x1457=((0.433010506600939)*x1442);
IkReal x1458=((0.75000087746404)*x1442);
IkReal x1459=(new_r10*x1442);
IkReal x1460=(new_r10*x1443);
IkReal x1461=(new_r00*x1443);
IkReal x1462=(new_r01*x1443);
IkReal x1463=(cj0*x1443);
IkReal x1464=((0.433013258970445)*x1442);
IkReal x1465=(new_r00*x1442);
IkReal x1466=(new_r11*x1442);
evalcond[0]=(x1456+x1458);
evalcond[1]=((((-1.0)*x1450))+x1457);
evalcond[2]=((((0.250000205066586)*sj0))+x1461+x1459+(((-1.0)*x1445)));
evalcond[3]=((((-0.250000205066586)*cj0))+x1466+x1462+(((-1.0)*x1448)));
evalcond[4]=(x1465+x1447+x1446+(((-1.0)*x1460)));
evalcond[5]=((((-1.0)*x1453))+(((-0.433013258970445)*cj0))+x1452+x1449);
evalcond[6]=((((-1.0)*new_r10*x1450))+((new_r00*x1458))+((new_r00*x1456))+((new_r10*x1457)));
evalcond[7]=((((0.75000087746404)*x1452))+((new_r01*x1456))+((new_r11*x1457))+(((-1.0)*new_r11*x1450)));
evalcond[8]=(((new_r00*x1464))+sj0+((new_r10*x1455))+(((-0.433013258970445)*x1460))+(((0.250000205066586)*x1461)));
evalcond[9]=((((0.250000205066586)*x1451))+((x1442*x1447))+((x1442*x1446))+new_r00+(((-1.0)*x1443*x1445)));
evalcond[10]=(((x1442*x1449))+(((-0.250000205066586)*x1463))+(((-1.0)*cj0*x1464))+new_r01+(((-1.0)*x1443*x1448)));
evalcond[11]=(((sj0*x1455))+new_r10+(((-1.0)*x1442*x1445))+(((-1.0)*x1443*x1446))+(((-1.0)*x1443*x1447)));
evalcond[12]=((((0.433013258970445)*x1463))+new_r11+(((-1.0)*x1442*x1448))+(((-1.0)*x1443*x1449))+(((-1.0)*cj0*x1455)));
evalcond[13]=((((-0.433013258970445)*x1453))+(((0.433013258970445)*x1452))+((new_r11*x1455))+(((-1.0)*x1444))+(((0.250000205066586)*x1462)));
evalcond[14]=((((-0.49999820135573)*x1465))+((new_r00*x1454))+(((0.49999820135573)*x1460))+(((-1.0)*x1444))+(((0.866026442229025)*x1459)));
evalcond[15]=((((-1.0)*sj0))+(((-0.49999820135573)*x1452))+((new_r01*x1454))+(((0.866026442229025)*x1466))+(((0.49999820135573)*x1453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1467=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01)))),-1);
if(!x1467.valid){
continue;
}
CheckValue<IkReal> x1468 = IKatan2WithCheck(IkReal(((((-18750.015379994)*cj0))+(((-64951.9831671769)*sj0)))),IkReal(((((37499.810974959)*sj0))+(((10825.2588795883)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1468.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1467.value)))+(x1468.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1469=IKcos(j2);
IkReal x1470=IKsin(j2);
IkReal x1471=((1.0)*cj0);
IkReal x1472=((0.866026442229025)*cj0);
IkReal x1473=((0.49999820135573)*cj0);
IkReal x1474=((0.433013258970445)*sj0);
IkReal x1475=((0.866026442229025)*sj0);
IkReal x1476=((0.49999820135573)*sj0);
IkReal x1477=((0.75000087746404)*x1470);
IkReal x1478=(sj0*x1470);
IkReal x1479=(new_r01*x1469);
IkReal x1480=(new_r11*x1470);
IkReal x1481=((0.866026442229025)*x1470);
IkReal x1482=((0.250000205066586)*x1469);
IkReal x1483=((0.433010506600939)*x1470);
IkReal x1484=((0.433010506600939)*x1469);
IkReal x1485=((0.75000087746404)*x1469);
IkReal x1486=(new_r10*x1469);
IkReal x1487=(new_r10*x1470);
IkReal x1488=(new_r00*x1470);
IkReal x1489=(new_r01*x1470);
IkReal x1490=(cj0*x1470);
IkReal x1491=((0.433013258970445)*x1469);
IkReal x1492=(new_r00*x1469);
IkReal x1493=(new_r11*x1469);
evalcond[0]=(x1483+x1485);
evalcond[1]=(x1484+(((-1.0)*x1477)));
evalcond[2]=((((0.250000205066586)*sj0))+x1486+x1488+(((-1.0)*x1472)));
evalcond[3]=((((-0.250000205066586)*cj0))+x1493+x1489+(((-1.0)*x1475)));
evalcond[4]=((((-1.0)*x1487))+x1473+x1474+x1492);
evalcond[5]=((((-1.0)*x1480))+(((-0.433013258970445)*cj0))+x1476+x1479);
evalcond[6]=(((new_r00*x1483))+((new_r00*x1485))+(((-1.0)*new_r10*x1477))+((new_r10*x1484)));
evalcond[7]=(((new_r11*x1484))+((new_r01*x1483))+(((-1.0)*new_r11*x1477))+(((0.75000087746404)*x1479)));
evalcond[8]=(sj0+((new_r00*x1491))+(((0.250000205066586)*x1488))+((new_r10*x1482))+(((-0.433013258970445)*x1487)));
evalcond[9]=((((-1.0)*x1470*x1472))+(((0.250000205066586)*x1478))+new_r00+((x1469*x1474))+((x1469*x1473)));
evalcond[10]=((((-1.0)*x1470*x1475))+(((-1.0)*cj0*x1491))+new_r01+((x1469*x1476))+(((-0.250000205066586)*x1490)));
evalcond[11]=((((-1.0)*x1470*x1474))+(((-1.0)*x1470*x1473))+((sj0*x1482))+(((-1.0)*x1469*x1472))+new_r10);
evalcond[12]=((((-1.0)*x1470*x1476))+(((0.433013258970445)*x1490))+(((-1.0)*x1469*x1475))+(((-1.0)*cj0*x1482))+new_r11);
evalcond[13]=((((0.433013258970445)*x1479))+((new_r11*x1482))+(((0.250000205066586)*x1489))+(((-1.0)*x1471))+(((-0.433013258970445)*x1480)));
evalcond[14]=((((-0.49999820135573)*x1492))+((new_r00*x1481))+(((0.866026442229025)*x1486))+(((-1.0)*x1471))+(((0.49999820135573)*x1487)));
evalcond[15]=((((-1.0)*sj0))+(((0.866026442229025)*x1493))+((new_r01*x1481))+(((-0.49999820135573)*x1479))+(((0.49999820135573)*x1480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1494=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00)))),-1);
if(!x1494.valid){
continue;
}
CheckValue<IkReal> x1495 = IKatan2WithCheck(IkReal(((((18750.015379994)*sj0))+(((-64951.9831671769)*cj0)))),IkReal(((((-10825.2588795883)*sj0))+(((37499.810974959)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1495.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1494.value)))+(x1495.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1496=IKcos(j2);
IkReal x1497=IKsin(j2);
IkReal x1498=((1.0)*cj0);
IkReal x1499=((0.866026442229025)*cj0);
IkReal x1500=((0.49999820135573)*cj0);
IkReal x1501=((0.433013258970445)*sj0);
IkReal x1502=((0.866026442229025)*sj0);
IkReal x1503=((0.49999820135573)*sj0);
IkReal x1504=((0.75000087746404)*x1497);
IkReal x1505=(sj0*x1497);
IkReal x1506=(new_r01*x1496);
IkReal x1507=(new_r11*x1497);
IkReal x1508=((0.866026442229025)*x1497);
IkReal x1509=((0.250000205066586)*x1496);
IkReal x1510=((0.433010506600939)*x1497);
IkReal x1511=((0.433010506600939)*x1496);
IkReal x1512=((0.75000087746404)*x1496);
IkReal x1513=(new_r10*x1496);
IkReal x1514=(new_r10*x1497);
IkReal x1515=(new_r00*x1497);
IkReal x1516=(new_r01*x1497);
IkReal x1517=(cj0*x1497);
IkReal x1518=((0.433013258970445)*x1496);
IkReal x1519=(new_r00*x1496);
IkReal x1520=(new_r11*x1496);
evalcond[0]=(x1510+x1512);
evalcond[1]=((((-1.0)*x1504))+x1511);
evalcond[2]=((((-1.0)*x1499))+(((0.250000205066586)*sj0))+x1515+x1513);
evalcond[3]=((((-1.0)*x1502))+(((-0.250000205066586)*cj0))+x1520+x1516);
evalcond[4]=((((-1.0)*x1514))+x1500+x1501+x1519);
evalcond[5]=((((-1.0)*x1507))+x1503+x1506+(((-0.433013258970445)*cj0)));
evalcond[6]=(((new_r10*x1511))+(((-1.0)*new_r10*x1504))+((new_r00*x1512))+((new_r00*x1510)));
evalcond[7]=((((-1.0)*new_r11*x1504))+(((0.75000087746404)*x1506))+((new_r01*x1510))+((new_r11*x1511)));
evalcond[8]=(((new_r10*x1509))+sj0+(((-0.433013258970445)*x1514))+(((0.250000205066586)*x1515))+((new_r00*x1518)));
evalcond[9]=((((-1.0)*x1497*x1499))+(((0.250000205066586)*x1505))+((x1496*x1500))+((x1496*x1501))+new_r00);
evalcond[10]=((((-1.0)*cj0*x1518))+((x1496*x1503))+(((-1.0)*x1497*x1502))+(((-0.250000205066586)*x1517))+new_r01);
evalcond[11]=((((-1.0)*x1496*x1499))+((sj0*x1509))+(((-1.0)*x1497*x1500))+(((-1.0)*x1497*x1501))+new_r10);
evalcond[12]=((((-1.0)*cj0*x1509))+(((0.433013258970445)*x1517))+(((-1.0)*x1497*x1503))+new_r11+(((-1.0)*x1496*x1502)));
evalcond[13]=((((-0.433013258970445)*x1507))+(((-1.0)*x1498))+(((0.250000205066586)*x1516))+(((0.433013258970445)*x1506))+((new_r11*x1509)));
evalcond[14]=((((0.49999820135573)*x1514))+(((-1.0)*x1498))+(((0.866026442229025)*x1513))+((new_r00*x1508))+(((-0.49999820135573)*x1519)));
evalcond[15]=((((0.49999820135573)*x1507))+(((-1.0)*sj0))+(((0.866026442229025)*x1520))+((new_r01*x1508))+(((-0.49999820135573)*x1506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((6.14158329400386)+(IKabs(((1.0)+(IKsign(sj1)))))+(IKabs(cj1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
j0array[0]=-3.14159140358624;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.25000355805094e-6;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((1.08253441393799e-6)*(IKsin(j0))))+(((0.866025066047432)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
j2eval[0]=(new_r10+(((-1.73206161520519)*new_r00)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
j2eval[0]=(new_r11+(((-1.73206161520519)*new_r01)));
j2eval[1]=5624995940.50689;
j2eval[2]=sj0;
j2eval[3]=IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
j2eval[0]=((((-1.0)*new_r00))+(((-1.73206161520519)*new_r10)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1521=(new_r01*new_r10);
IkReal x1522=(new_r00*new_r11);
j2eval[0]=(x1522+(((-1.0)*x1521)));
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))))+(IKabs(((((-1.33332787645226e+28)*new_r11))+(((4.61878500004103e+28)*new_r10))))));
j2eval[2]=IKsign(((((-5.33330713107669e+28)*x1521))+(((5.33330713107669e+28)*x1522))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1523=(new_r00*new_r01);
IkReal x1524=(new_r10*new_r11);
j2eval[0]=((((-1.0)*x1523))+(((-1.0)*x1524)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x1524))+(((-5.33330713107669e+28)*x1523))));
j2eval[2]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1525=new_r10*new_r10;
IkReal x1526=new_r01*new_r01;
j2eval[0]=((1.0)+x1525+(((-1.0)*x1526)));
j2eval[1]=IKsign(((5.33330713107669e+28)+(((-5.33330713107669e+28)*x1526))+(((5.33330713107669e+28)*x1525))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1527=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1527.valid){
continue;
}
CheckValue<IkReal> x1528 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r00))+(((2.30939270191783e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r10))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1528.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1527.value)))+(x1528.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1529=IKsin(j2);
IkReal x1530=IKcos(j2);
IkReal x1531=((0.75000087746404)*x1529);
IkReal x1532=(new_r01*x1530);
IkReal x1533=(new_r11*x1529);
IkReal x1534=(new_r01*x1529);
IkReal x1535=((0.433010506600939)*x1529);
IkReal x1536=((0.433010506600939)*x1530);
IkReal x1537=(new_r10*x1530);
IkReal x1538=(new_r00*x1529);
IkReal x1539=((0.49999820135573)*x1530);
IkReal x1540=(new_r10*x1529);
IkReal x1541=(new_r11*x1530);
IkReal x1542=((0.75000087746404)*x1530);
IkReal x1543=(new_r00*x1530);
evalcond[0]=((0.250000205066586)+x1537+x1538);
evalcond[1]=((0.866026442229025)+x1541+x1534);
evalcond[2]=((0.433013258970445)+(((-1.0)*x1540))+x1543);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x1533))+x1532);
evalcond[4]=((((-1.0)*x1535))+(((-1.0)*x1542)));
evalcond[5]=((((-1.0)*x1536))+x1531);
evalcond[6]=((((0.250000205066586)*x1529))+(((0.433013258970445)*x1530))+new_r00);
evalcond[7]=((((-1.0)*x1539))+new_r01+(((0.866026442229025)*x1529)));
evalcond[8]=((((-0.433013258970445)*x1529))+(((0.250000205066586)*x1530))+new_r10);
evalcond[9]=((((0.49999820135573)*x1529))+new_r11+(((0.866026442229025)*x1530)));
evalcond[10]=((((-0.433013258970445)*x1533))+(((0.250000205066586)*x1534))+(((0.433013258970445)*x1532))+(((0.250000205066586)*x1541)));
evalcond[11]=((((-1.0)*new_r00*x1535))+(((-1.0)*new_r00*x1542))+(((-1.0)*new_r10*x1536))+((new_r10*x1531)));
evalcond[12]=((((-0.75000087746404)*x1532))+(((-0.433010506600939)*x1534))+((new_r11*x1531))+(((-1.0)*new_r11*x1536)));
evalcond[13]=(((new_r00*x1539))+(((-0.866026442229025)*x1537))+(((-0.866026442229025)*x1538))+(((-0.49999820135573)*x1540)));
evalcond[14]=((1.0)+(((0.250000205066586)*x1537))+(((0.250000205066586)*x1538))+(((0.433013258970445)*x1543))+(((-0.433013258970445)*x1540)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x1533))+(((0.49999820135573)*x1532))+(((-0.866026442229025)*x1541))+(((-0.866026442229025)*x1534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1544=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r10*new_r11))+(((-5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1544.valid){
continue;
}
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1544.value)))+(x1545.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1546=IKsin(j2);
IkReal x1547=IKcos(j2);
IkReal x1548=((0.75000087746404)*x1546);
IkReal x1549=(new_r01*x1547);
IkReal x1550=(new_r11*x1546);
IkReal x1551=(new_r01*x1546);
IkReal x1552=((0.433010506600939)*x1546);
IkReal x1553=((0.433010506600939)*x1547);
IkReal x1554=(new_r10*x1547);
IkReal x1555=(new_r00*x1546);
IkReal x1556=((0.49999820135573)*x1547);
IkReal x1557=(new_r10*x1546);
IkReal x1558=(new_r11*x1547);
IkReal x1559=((0.75000087746404)*x1547);
IkReal x1560=(new_r00*x1547);
evalcond[0]=((0.250000205066586)+x1555+x1554);
evalcond[1]=((0.866026442229025)+x1551+x1558);
evalcond[2]=((0.433013258970445)+(((-1.0)*x1557))+x1560);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x1550))+x1549);
evalcond[4]=((((-1.0)*x1552))+(((-1.0)*x1559)));
evalcond[5]=(x1548+(((-1.0)*x1553)));
evalcond[6]=((((0.250000205066586)*x1546))+(((0.433013258970445)*x1547))+new_r00);
evalcond[7]=((((-1.0)*x1556))+new_r01+(((0.866026442229025)*x1546)));
evalcond[8]=((((0.250000205066586)*x1547))+(((-0.433013258970445)*x1546))+new_r10);
evalcond[9]=(new_r11+(((0.49999820135573)*x1546))+(((0.866026442229025)*x1547)));
evalcond[10]=((((-0.433013258970445)*x1550))+(((0.250000205066586)*x1551))+(((0.250000205066586)*x1558))+(((0.433013258970445)*x1549)));
evalcond[11]=((((-1.0)*new_r10*x1553))+((new_r10*x1548))+(((-1.0)*new_r00*x1559))+(((-1.0)*new_r00*x1552)));
evalcond[12]=((((-0.433010506600939)*x1551))+((new_r11*x1548))+(((-1.0)*new_r11*x1553))+(((-0.75000087746404)*x1549)));
evalcond[13]=((((-0.866026442229025)*x1554))+(((-0.866026442229025)*x1555))+((new_r00*x1556))+(((-0.49999820135573)*x1557)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x1557))+(((0.250000205066586)*x1554))+(((0.250000205066586)*x1555))+(((0.433013258970445)*x1560)));
evalcond[15]=((-1.0)+(((-0.866026442229025)*x1551))+(((-0.866026442229025)*x1558))+(((-0.49999820135573)*x1550))+(((0.49999820135573)*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1561 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r11))+(((4.61878500004103e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1562.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1561.value)+(((1.5707963267949)*(x1562.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1563=IKsin(j2);
IkReal x1564=IKcos(j2);
IkReal x1565=((0.75000087746404)*x1563);
IkReal x1566=(new_r01*x1564);
IkReal x1567=(new_r11*x1563);
IkReal x1568=(new_r01*x1563);
IkReal x1569=((0.433010506600939)*x1563);
IkReal x1570=((0.433010506600939)*x1564);
IkReal x1571=(new_r10*x1564);
IkReal x1572=(new_r00*x1563);
IkReal x1573=((0.49999820135573)*x1564);
IkReal x1574=(new_r10*x1563);
IkReal x1575=(new_r11*x1564);
IkReal x1576=((0.75000087746404)*x1564);
IkReal x1577=(new_r00*x1564);
evalcond[0]=((0.250000205066586)+x1572+x1571);
evalcond[1]=((0.866026442229025)+x1568+x1575);
evalcond[2]=((0.433013258970445)+x1577+(((-1.0)*x1574)));
evalcond[3]=((-0.49999820135573)+x1566+(((-1.0)*x1567)));
evalcond[4]=((((-1.0)*x1576))+(((-1.0)*x1569)));
evalcond[5]=(x1565+(((-1.0)*x1570)));
evalcond[6]=((((0.250000205066586)*x1563))+(((0.433013258970445)*x1564))+new_r00);
evalcond[7]=(new_r01+(((-1.0)*x1573))+(((0.866026442229025)*x1563)));
evalcond[8]=((((0.250000205066586)*x1564))+(((-0.433013258970445)*x1563))+new_r10);
evalcond[9]=(new_r11+(((0.49999820135573)*x1563))+(((0.866026442229025)*x1564)));
evalcond[10]=((((0.433013258970445)*x1566))+(((0.250000205066586)*x1575))+(((-0.433013258970445)*x1567))+(((0.250000205066586)*x1568)));
evalcond[11]=((((-1.0)*new_r00*x1576))+(((-1.0)*new_r10*x1570))+((new_r10*x1565))+(((-1.0)*new_r00*x1569)));
evalcond[12]=((((-1.0)*new_r11*x1570))+(((-0.433010506600939)*x1568))+((new_r11*x1565))+(((-0.75000087746404)*x1566)));
evalcond[13]=(((new_r00*x1573))+(((-0.866026442229025)*x1572))+(((-0.866026442229025)*x1571))+(((-0.49999820135573)*x1574)));
evalcond[14]=((1.0)+(((0.433013258970445)*x1577))+(((-0.433013258970445)*x1574))+(((0.250000205066586)*x1572))+(((0.250000205066586)*x1571)));
evalcond[15]=((-1.0)+(((-0.866026442229025)*x1575))+(((-0.866026442229025)*x1568))+(((-0.49999820135573)*x1567))+(((0.49999820135573)*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1578=(new_r01*new_r10);
IkReal x1579=(new_r00*new_r11);
j2eval[0]=(x1579+(((-1.0)*x1578)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x1579))+(((-5.33330713107669e+28)*x1578))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1580=(new_r00*new_r01);
IkReal x1581=(new_r10*new_r11);
j2eval[0]=(x1580+x1581);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1580))+(((5.33330713107669e+28)*x1581))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1582=new_r10*new_r10;
IkReal x1583=new_r01*new_r01;
j2eval[0]=((1.0)+x1582+(((-1.0)*x1583)));
j2eval[1]=IKsign(((5.33330713107669e+28)+(((5.33330713107669e+28)*x1582))+(((-5.33330713107669e+28)*x1583))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1584=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1584.valid){
continue;
}
CheckValue<IkReal> x1585 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r00))+(((-2.30939270191783e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r10))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1585.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1584.value)))+(x1585.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1586=IKsin(j2);
IkReal x1587=IKcos(j2);
IkReal x1588=((0.75000087746404)*x1586);
IkReal x1589=(new_r01*x1587);
IkReal x1590=(new_r11*x1586);
IkReal x1591=(new_r01*x1586);
IkReal x1592=((0.433010506600939)*x1586);
IkReal x1593=((0.433010506600939)*x1587);
IkReal x1594=(new_r10*x1587);
IkReal x1595=(new_r00*x1586);
IkReal x1596=((0.49999820135573)*x1587);
IkReal x1597=(new_r10*x1586);
IkReal x1598=(new_r11*x1587);
IkReal x1599=((0.75000087746404)*x1587);
IkReal x1600=(new_r00*x1587);
evalcond[0]=((-0.250000205066586)+x1595+x1594);
evalcond[1]=((-0.866026442229025)+x1591+x1598);
evalcond[2]=((-0.433013258970445)+x1600+(((-1.0)*x1597)));
evalcond[3]=((0.49999820135573)+x1589+(((-1.0)*x1590)));
evalcond[4]=((((-1.0)*x1592))+(((-1.0)*x1599)));
evalcond[5]=((((-1.0)*x1593))+x1588);
evalcond[6]=((((-0.433013258970445)*x1587))+(((-0.250000205066586)*x1586))+new_r00);
evalcond[7]=(x1596+new_r01+(((-0.866026442229025)*x1586)));
evalcond[8]=((((-0.250000205066586)*x1587))+(((0.433013258970445)*x1586))+new_r10);
evalcond[9]=((((-0.49999820135573)*x1586))+new_r11+(((-0.866026442229025)*x1587)));
evalcond[10]=((((0.250000205066586)*x1591))+(((0.250000205066586)*x1598))+(((-0.433013258970445)*x1590))+(((0.433013258970445)*x1589)));
evalcond[11]=(((new_r10*x1588))+(((-1.0)*new_r10*x1593))+(((-1.0)*new_r00*x1599))+(((-1.0)*new_r00*x1592)));
evalcond[12]=((((-0.433010506600939)*x1591))+((new_r11*x1588))+(((-1.0)*new_r11*x1593))+(((-0.75000087746404)*x1589)));
evalcond[13]=(((new_r00*x1596))+(((-0.866026442229025)*x1595))+(((-0.866026442229025)*x1594))+(((-0.49999820135573)*x1597)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x1595))+(((0.250000205066586)*x1594))+(((0.433013258970445)*x1600))+(((-0.433013258970445)*x1597)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x1591))+(((-0.866026442229025)*x1598))+(((-0.49999820135573)*x1590))+(((0.49999820135573)*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1601.valid){
continue;
}
CheckValue<IkReal> x1602 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1602.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1601.value)))+(x1602.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1603=IKsin(j2);
IkReal x1604=IKcos(j2);
IkReal x1605=((0.75000087746404)*x1603);
IkReal x1606=(new_r01*x1604);
IkReal x1607=(new_r11*x1603);
IkReal x1608=(new_r01*x1603);
IkReal x1609=((0.433010506600939)*x1603);
IkReal x1610=((0.433010506600939)*x1604);
IkReal x1611=(new_r10*x1604);
IkReal x1612=(new_r00*x1603);
IkReal x1613=((0.49999820135573)*x1604);
IkReal x1614=(new_r10*x1603);
IkReal x1615=(new_r11*x1604);
IkReal x1616=((0.75000087746404)*x1604);
IkReal x1617=(new_r00*x1604);
evalcond[0]=((-0.250000205066586)+x1612+x1611);
evalcond[1]=((-0.866026442229025)+x1615+x1608);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x1614))+x1617);
evalcond[3]=((0.49999820135573)+(((-1.0)*x1607))+x1606);
evalcond[4]=((((-1.0)*x1609))+(((-1.0)*x1616)));
evalcond[5]=(x1605+(((-1.0)*x1610)));
evalcond[6]=((((-0.433013258970445)*x1604))+(((-0.250000205066586)*x1603))+new_r00);
evalcond[7]=((((-0.866026442229025)*x1603))+x1613+new_r01);
evalcond[8]=((((0.433013258970445)*x1603))+(((-0.250000205066586)*x1604))+new_r10);
evalcond[9]=((((-0.49999820135573)*x1603))+(((-0.866026442229025)*x1604))+new_r11);
evalcond[10]=((((0.250000205066586)*x1608))+(((0.433013258970445)*x1606))+(((-0.433013258970445)*x1607))+(((0.250000205066586)*x1615)));
evalcond[11]=((((-1.0)*new_r00*x1616))+(((-1.0)*new_r10*x1610))+((new_r10*x1605))+(((-1.0)*new_r00*x1609)));
evalcond[12]=((((-1.0)*new_r11*x1610))+((new_r11*x1605))+(((-0.75000087746404)*x1606))+(((-0.433010506600939)*x1608)));
evalcond[13]=((((-0.49999820135573)*x1614))+((new_r00*x1613))+(((-0.866026442229025)*x1612))+(((-0.866026442229025)*x1611)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x1614))+(((0.433013258970445)*x1617))+(((0.250000205066586)*x1612))+(((0.250000205066586)*x1611)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x1607))+(((0.49999820135573)*x1606))+(((-0.866026442229025)*x1608))+(((-0.866026442229025)*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1618.valid){
continue;
}
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1618.value)))+(x1619.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1620=IKsin(j2);
IkReal x1621=IKcos(j2);
IkReal x1622=((0.75000087746404)*x1620);
IkReal x1623=(new_r01*x1621);
IkReal x1624=(new_r11*x1620);
IkReal x1625=(new_r01*x1620);
IkReal x1626=((0.433010506600939)*x1620);
IkReal x1627=((0.433010506600939)*x1621);
IkReal x1628=(new_r10*x1621);
IkReal x1629=(new_r00*x1620);
IkReal x1630=((0.49999820135573)*x1621);
IkReal x1631=(new_r10*x1620);
IkReal x1632=(new_r11*x1621);
IkReal x1633=((0.75000087746404)*x1621);
IkReal x1634=(new_r00*x1621);
evalcond[0]=((-0.250000205066586)+x1629+x1628);
evalcond[1]=((-0.866026442229025)+x1625+x1632);
evalcond[2]=((-0.433013258970445)+x1634+(((-1.0)*x1631)));
evalcond[3]=((0.49999820135573)+(((-1.0)*x1624))+x1623);
evalcond[4]=((((-1.0)*x1626))+(((-1.0)*x1633)));
evalcond[5]=(x1622+(((-1.0)*x1627)));
evalcond[6]=((((-0.433013258970445)*x1621))+(((-0.250000205066586)*x1620))+new_r00);
evalcond[7]=(x1630+new_r01+(((-0.866026442229025)*x1620)));
evalcond[8]=((((0.433013258970445)*x1620))+(((-0.250000205066586)*x1621))+new_r10);
evalcond[9]=((((-0.49999820135573)*x1620))+new_r11+(((-0.866026442229025)*x1621)));
evalcond[10]=((((0.250000205066586)*x1625))+(((-0.433013258970445)*x1624))+(((0.250000205066586)*x1632))+(((0.433013258970445)*x1623)));
evalcond[11]=((((-1.0)*new_r00*x1626))+(((-1.0)*new_r10*x1627))+((new_r10*x1622))+(((-1.0)*new_r00*x1633)));
evalcond[12]=((((-1.0)*new_r11*x1627))+((new_r11*x1622))+(((-0.75000087746404)*x1623))+(((-0.433010506600939)*x1625)));
evalcond[13]=((((-0.49999820135573)*x1631))+((new_r00*x1630))+(((-0.866026442229025)*x1629))+(((-0.866026442229025)*x1628)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x1629))+(((0.250000205066586)*x1628))+(((-0.433013258970445)*x1631))+(((0.433013258970445)*x1634)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x1624))+(((0.49999820135573)*x1623))+(((-0.866026442229025)*x1625))+(((-0.866026442229025)*x1632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1635=(new_r01*new_r10);
IkReal x1636=(new_r00*new_r11);
j2eval[0]=(x1636+(((-1.0)*x1635)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x1636))+(((-5.33330713107669e+28)*x1635))));
j2eval[2]=((IKabs(((((1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))))+(IKabs(((((-1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1637=(new_r00*new_r01);
IkReal x1638=(new_r10*new_r11);
j2eval[0]=((((-1.0)*x1637))+(((-1.0)*x1638)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x1638))+(((-5.33330713107669e+28)*x1637))));
j2eval[2]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))))+(IKabs(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1639=new_r01*new_r01;
IkReal x1640=new_r10*new_r10;
j2eval[0]=((-1.0)+x1639+(((-1.0)*x1640)));
j2eval[1]=IKsign(((-5.33330713107669e+28)+(((-5.33330713107669e+28)*x1640))+(((5.33330713107669e+28)*x1639))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
CheckValue<IkReal> x1642=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*(new_r10*new_r10)))+(((-5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1642.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1641.value)+(((1.5707963267949)*(x1642.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1643=IKsin(j2);
IkReal x1644=IKcos(j2);
IkReal x1645=((0.75000087746404)*x1643);
IkReal x1646=(new_r01*x1644);
IkReal x1647=(new_r11*x1643);
IkReal x1648=(new_r01*x1643);
IkReal x1649=((0.433010506600939)*x1643);
IkReal x1650=((0.433010506600939)*x1644);
IkReal x1651=(new_r10*x1644);
IkReal x1652=(new_r00*x1643);
IkReal x1653=((0.49999820135573)*x1644);
IkReal x1654=(new_r10*x1643);
IkReal x1655=(new_r11*x1644);
IkReal x1656=((0.75000087746404)*x1644);
IkReal x1657=(new_r00*x1644);
evalcond[0]=((0.866026442229025)+x1652+x1651);
evalcond[1]=((-0.250000205066586)+x1655+x1648);
evalcond[2]=((-0.49999820135573)+x1657+(((-1.0)*x1654)));
evalcond[3]=((-0.433013258970445)+x1646+(((-1.0)*x1647)));
evalcond[4]=((((-1.0)*x1649))+(((-1.0)*x1656)));
evalcond[5]=(x1645+(((-1.0)*x1650)));
evalcond[6]=((((-1.0)*x1653))+(((0.866026442229025)*x1643))+new_r00);
evalcond[7]=((((-0.433013258970445)*x1644))+(((-0.250000205066586)*x1643))+new_r01);
evalcond[8]=((((0.866026442229025)*x1644))+new_r10+(((0.49999820135573)*x1643)));
evalcond[9]=((((0.433013258970445)*x1643))+(((-0.250000205066586)*x1644))+new_r11);
evalcond[10]=((((0.433013258970445)*x1657))+(((0.250000205066586)*x1652))+(((0.250000205066586)*x1651))+(((-0.433013258970445)*x1654)));
evalcond[11]=(((new_r10*x1645))+(((-1.0)*new_r00*x1649))+(((-1.0)*new_r00*x1656))+(((-1.0)*new_r10*x1650)));
evalcond[12]=(((new_r11*x1645))+(((-0.433010506600939)*x1648))+(((-1.0)*new_r11*x1650))+(((-0.75000087746404)*x1646)));
evalcond[13]=((((-0.866026442229025)*x1648))+(((-0.866026442229025)*x1655))+(((-0.49999820135573)*x1647))+(((0.49999820135573)*x1646)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x1646))+(((0.250000205066586)*x1655))+(((0.250000205066586)*x1648))+(((-0.433013258970445)*x1647)));
evalcond[15]=((-1.0)+(((-0.866026442229025)*x1652))+(((-0.866026442229025)*x1651))+(((-0.49999820135573)*x1654))+((new_r00*x1653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1658=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r10*new_r11))+(((-5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1658.valid){
continue;
}
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1658.value)))+(x1659.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1660=IKsin(j2);
IkReal x1661=IKcos(j2);
IkReal x1662=((0.75000087746404)*x1660);
IkReal x1663=(new_r01*x1661);
IkReal x1664=(new_r11*x1660);
IkReal x1665=(new_r01*x1660);
IkReal x1666=((0.433010506600939)*x1660);
IkReal x1667=((0.433010506600939)*x1661);
IkReal x1668=(new_r10*x1661);
IkReal x1669=(new_r00*x1660);
IkReal x1670=((0.49999820135573)*x1661);
IkReal x1671=(new_r10*x1660);
IkReal x1672=(new_r11*x1661);
IkReal x1673=((0.75000087746404)*x1661);
IkReal x1674=(new_r00*x1661);
evalcond[0]=((0.866026442229025)+x1669+x1668);
evalcond[1]=((-0.250000205066586)+x1665+x1672);
evalcond[2]=((-0.49999820135573)+x1674+(((-1.0)*x1671)));
evalcond[3]=((-0.433013258970445)+x1663+(((-1.0)*x1664)));
evalcond[4]=((((-1.0)*x1666))+(((-1.0)*x1673)));
evalcond[5]=(x1662+(((-1.0)*x1667)));
evalcond[6]=(new_r00+(((-1.0)*x1670))+(((0.866026442229025)*x1660)));
evalcond[7]=((((-0.433013258970445)*x1661))+(((-0.250000205066586)*x1660))+new_r01);
evalcond[8]=((((0.49999820135573)*x1660))+new_r10+(((0.866026442229025)*x1661)));
evalcond[9]=((((0.433013258970445)*x1660))+(((-0.250000205066586)*x1661))+new_r11);
evalcond[10]=((((0.250000205066586)*x1669))+(((0.250000205066586)*x1668))+(((-0.433013258970445)*x1671))+(((0.433013258970445)*x1674)));
evalcond[11]=((((-1.0)*new_r00*x1673))+(((-1.0)*new_r00*x1666))+(((-1.0)*new_r10*x1667))+((new_r10*x1662)));
evalcond[12]=(((new_r11*x1662))+(((-0.433010506600939)*x1665))+(((-1.0)*new_r11*x1667))+(((-0.75000087746404)*x1663)));
evalcond[13]=((((0.49999820135573)*x1663))+(((-0.866026442229025)*x1665))+(((-0.866026442229025)*x1672))+(((-0.49999820135573)*x1664)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x1663))+(((0.250000205066586)*x1665))+(((-0.433013258970445)*x1664))+(((0.250000205066586)*x1672)));
evalcond[15]=((-1.0)+((new_r00*x1670))+(((-0.866026442229025)*x1669))+(((-0.866026442229025)*x1668))+(((-0.49999820135573)*x1671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))),IkReal(((((1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1676.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1675.value)+(((1.5707963267949)*(x1676.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1677=IKsin(j2);
IkReal x1678=IKcos(j2);
IkReal x1679=((0.75000087746404)*x1677);
IkReal x1680=(new_r01*x1678);
IkReal x1681=(new_r11*x1677);
IkReal x1682=(new_r01*x1677);
IkReal x1683=((0.433010506600939)*x1677);
IkReal x1684=((0.433010506600939)*x1678);
IkReal x1685=(new_r10*x1678);
IkReal x1686=(new_r00*x1677);
IkReal x1687=((0.49999820135573)*x1678);
IkReal x1688=(new_r10*x1677);
IkReal x1689=(new_r11*x1678);
IkReal x1690=((0.75000087746404)*x1678);
IkReal x1691=(new_r00*x1678);
evalcond[0]=((0.866026442229025)+x1685+x1686);
evalcond[1]=((-0.250000205066586)+x1682+x1689);
evalcond[2]=((-0.49999820135573)+x1691+(((-1.0)*x1688)));
evalcond[3]=((-0.433013258970445)+x1680+(((-1.0)*x1681)));
evalcond[4]=((((-1.0)*x1683))+(((-1.0)*x1690)));
evalcond[5]=((((-1.0)*x1684))+x1679);
evalcond[6]=((((-1.0)*x1687))+(((0.866026442229025)*x1677))+new_r00);
evalcond[7]=((((-0.250000205066586)*x1677))+new_r01+(((-0.433013258970445)*x1678)));
evalcond[8]=((((0.49999820135573)*x1677))+(((0.866026442229025)*x1678))+new_r10);
evalcond[9]=((((0.433013258970445)*x1677))+(((-0.250000205066586)*x1678))+new_r11);
evalcond[10]=((((0.250000205066586)*x1685))+(((0.250000205066586)*x1686))+(((-0.433013258970445)*x1688))+(((0.433013258970445)*x1691)));
evalcond[11]=((((-1.0)*new_r10*x1684))+(((-1.0)*new_r00*x1683))+(((-1.0)*new_r00*x1690))+((new_r10*x1679)));
evalcond[12]=((((-1.0)*new_r11*x1684))+(((-0.75000087746404)*x1680))+((new_r11*x1679))+(((-0.433010506600939)*x1682)));
evalcond[13]=((((0.49999820135573)*x1680))+(((-0.49999820135573)*x1681))+(((-0.866026442229025)*x1682))+(((-0.866026442229025)*x1689)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x1682))+(((0.250000205066586)*x1689))+(((-0.433013258970445)*x1681))+(((0.433013258970445)*x1680)));
evalcond[15]=((-1.0)+((new_r00*x1687))+(((-0.49999820135573)*x1688))+(((-0.866026442229025)*x1685))+(((-0.866026442229025)*x1686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1692=(new_r01*new_r10);
IkReal x1693=(new_r00*new_r11);
j2eval[0]=(x1693+(((-1.0)*x1692)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x1693))+(((-5.33330713107669e+28)*x1692))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))))+(IKabs(((((4.61878500004103e+28)*new_r11))+(((1.33332787645226e+28)*new_r10))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1694=(new_r00*new_r01);
IkReal x1695=(new_r10*new_r11);
j2eval[0]=(x1694+x1695);
j2eval[1]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))))+(IKabs(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1695))+(((5.33330713107669e+28)*x1694))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1696=new_r10*new_r10;
IkReal x1697=new_r01*new_r01;
j2eval[0]=((1.0)+x1696+(((-1.0)*x1697)));
j2eval[1]=IKsign(((5.33330713107669e+28)+(((5.33330713107669e+28)*x1696))+(((-5.33330713107669e+28)*x1697))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1698=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1698.valid){
continue;
}
CheckValue<IkReal> x1699 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1699.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1698.value)))+(x1699.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1700=IKsin(j2);
IkReal x1701=IKcos(j2);
IkReal x1702=((0.75000087746404)*x1700);
IkReal x1703=(new_r01*x1701);
IkReal x1704=(new_r11*x1700);
IkReal x1705=(new_r01*x1700);
IkReal x1706=((0.433010506600939)*x1700);
IkReal x1707=((0.433010506600939)*x1701);
IkReal x1708=(new_r10*x1701);
IkReal x1709=(new_r00*x1700);
IkReal x1710=((0.49999820135573)*x1701);
IkReal x1711=(new_r10*x1700);
IkReal x1712=(new_r11*x1701);
IkReal x1713=((0.75000087746404)*x1701);
IkReal x1714=(new_r00*x1701);
evalcond[0]=((-0.866026442229025)+x1708+x1709);
evalcond[1]=((0.250000205066586)+x1705+x1712);
evalcond[2]=((0.49999820135573)+x1714+(((-1.0)*x1711)));
evalcond[3]=((0.433013258970445)+x1703+(((-1.0)*x1704)));
evalcond[4]=((((-1.0)*x1713))+(((-1.0)*x1706)));
evalcond[5]=(x1702+(((-1.0)*x1707)));
evalcond[6]=(x1710+new_r00+(((-0.866026442229025)*x1700)));
evalcond[7]=(new_r01+(((0.433013258970445)*x1701))+(((0.250000205066586)*x1700)));
evalcond[8]=((((-0.49999820135573)*x1700))+new_r10+(((-0.866026442229025)*x1701)));
evalcond[9]=((((-0.433013258970445)*x1700))+new_r11+(((0.250000205066586)*x1701)));
evalcond[10]=((((0.250000205066586)*x1708))+(((0.250000205066586)*x1709))+(((0.433013258970445)*x1714))+(((-0.433013258970445)*x1711)));
evalcond[11]=((((-1.0)*new_r10*x1707))+(((-1.0)*new_r00*x1713))+((new_r10*x1702))+(((-1.0)*new_r00*x1706)));
evalcond[12]=((((-0.433010506600939)*x1705))+(((-0.75000087746404)*x1703))+(((-1.0)*new_r11*x1707))+((new_r11*x1702)));
evalcond[13]=((((-0.866026442229025)*x1705))+(((0.49999820135573)*x1703))+(((-0.49999820135573)*x1704))+(((-0.866026442229025)*x1712)));
evalcond[14]=((1.0)+(((0.250000205066586)*x1705))+(((0.250000205066586)*x1712))+(((-0.433013258970445)*x1704))+(((0.433013258970445)*x1703)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x1708))+(((-0.866026442229025)*x1709))+((new_r00*x1710))+(((-0.49999820135573)*x1711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1715=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1715.valid){
continue;
}
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1715.value)))+(x1716.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1717=IKsin(j2);
IkReal x1718=IKcos(j2);
IkReal x1719=((0.75000087746404)*x1717);
IkReal x1720=(new_r01*x1718);
IkReal x1721=(new_r11*x1717);
IkReal x1722=(new_r01*x1717);
IkReal x1723=((0.433010506600939)*x1717);
IkReal x1724=((0.433010506600939)*x1718);
IkReal x1725=(new_r10*x1718);
IkReal x1726=(new_r00*x1717);
IkReal x1727=((0.49999820135573)*x1718);
IkReal x1728=(new_r10*x1717);
IkReal x1729=(new_r11*x1718);
IkReal x1730=((0.75000087746404)*x1718);
IkReal x1731=(new_r00*x1718);
evalcond[0]=((-0.866026442229025)+x1726+x1725);
evalcond[1]=((0.250000205066586)+x1729+x1722);
evalcond[2]=((0.49999820135573)+x1731+(((-1.0)*x1728)));
evalcond[3]=((0.433013258970445)+x1720+(((-1.0)*x1721)));
evalcond[4]=((((-1.0)*x1723))+(((-1.0)*x1730)));
evalcond[5]=(x1719+(((-1.0)*x1724)));
evalcond[6]=((((-0.866026442229025)*x1717))+x1727+new_r00);
evalcond[7]=((((0.250000205066586)*x1717))+new_r01+(((0.433013258970445)*x1718)));
evalcond[8]=((((-0.866026442229025)*x1718))+(((-0.49999820135573)*x1717))+new_r10);
evalcond[9]=((((0.250000205066586)*x1718))+new_r11+(((-0.433013258970445)*x1717)));
evalcond[10]=((((0.433013258970445)*x1731))+(((-0.433013258970445)*x1728))+(((0.250000205066586)*x1725))+(((0.250000205066586)*x1726)));
evalcond[11]=(((new_r10*x1719))+(((-1.0)*new_r00*x1723))+(((-1.0)*new_r10*x1724))+(((-1.0)*new_r00*x1730)));
evalcond[12]=(((new_r11*x1719))+(((-1.0)*new_r11*x1724))+(((-0.433010506600939)*x1722))+(((-0.75000087746404)*x1720)));
evalcond[13]=((((-0.49999820135573)*x1721))+(((-0.866026442229025)*x1722))+(((-0.866026442229025)*x1729))+(((0.49999820135573)*x1720)));
evalcond[14]=((1.0)+(((0.433013258970445)*x1720))+(((-0.433013258970445)*x1721))+(((0.250000205066586)*x1722))+(((0.250000205066586)*x1729)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x1728))+(((-0.866026442229025)*x1725))+(((-0.866026442229025)*x1726))+((new_r00*x1727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1732 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*new_r11))+(((1.33332787645226e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1732.valid){
continue;
}
CheckValue<IkReal> x1733=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1733.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1732.value)+(((1.5707963267949)*(x1733.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1734=IKsin(j2);
IkReal x1735=IKcos(j2);
IkReal x1736=((0.75000087746404)*x1734);
IkReal x1737=(new_r01*x1735);
IkReal x1738=(new_r11*x1734);
IkReal x1739=(new_r01*x1734);
IkReal x1740=((0.433010506600939)*x1734);
IkReal x1741=((0.433010506600939)*x1735);
IkReal x1742=(new_r10*x1735);
IkReal x1743=(new_r00*x1734);
IkReal x1744=((0.49999820135573)*x1735);
IkReal x1745=(new_r10*x1734);
IkReal x1746=(new_r11*x1735);
IkReal x1747=((0.75000087746404)*x1735);
IkReal x1748=(new_r00*x1735);
evalcond[0]=((-0.866026442229025)+x1742+x1743);
evalcond[1]=((0.250000205066586)+x1739+x1746);
evalcond[2]=((0.49999820135573)+x1748+(((-1.0)*x1745)));
evalcond[3]=((0.433013258970445)+x1737+(((-1.0)*x1738)));
evalcond[4]=((((-1.0)*x1747))+(((-1.0)*x1740)));
evalcond[5]=(x1736+(((-1.0)*x1741)));
evalcond[6]=(x1744+(((-0.866026442229025)*x1734))+new_r00);
evalcond[7]=((((0.433013258970445)*x1735))+(((0.250000205066586)*x1734))+new_r01);
evalcond[8]=((((-0.49999820135573)*x1734))+(((-0.866026442229025)*x1735))+new_r10);
evalcond[9]=((((-0.433013258970445)*x1734))+(((0.250000205066586)*x1735))+new_r11);
evalcond[10]=((((0.433013258970445)*x1748))+(((0.250000205066586)*x1742))+(((0.250000205066586)*x1743))+(((-0.433013258970445)*x1745)));
evalcond[11]=((((-1.0)*new_r00*x1740))+(((-1.0)*new_r00*x1747))+(((-1.0)*new_r10*x1741))+((new_r10*x1736)));
evalcond[12]=((((-0.433010506600939)*x1739))+((new_r11*x1736))+(((-1.0)*new_r11*x1741))+(((-0.75000087746404)*x1737)));
evalcond[13]=((((-0.49999820135573)*x1738))+(((-0.866026442229025)*x1746))+(((-0.866026442229025)*x1739))+(((0.49999820135573)*x1737)));
evalcond[14]=((1.0)+(((0.250000205066586)*x1739))+(((0.433013258970445)*x1737))+(((-0.433013258970445)*x1738))+(((0.250000205066586)*x1746)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x1742))+(((-0.866026442229025)*x1743))+((new_r00*x1744))+(((-0.49999820135573)*x1745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1749 = IKatan2WithCheck(IkReal(((((10825.2588795883)*sj0))+(((37499.810974959)*cj0)))),IkReal(((((64951.9831671769)*cj0))+(((18750.015379994)*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1749.valid){
continue;
}
CheckValue<IkReal> x1750=IKPowWithIntegerCheck(IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10)))),-1);
if(!x1750.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1749.value)+(((1.5707963267949)*(x1750.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1751=IKsin(j2);
IkReal x1752=IKcos(j2);
IkReal x1753=((1.0)*cj0);
IkReal x1754=((0.866026442229025)*cj0);
IkReal x1755=((0.49999820135573)*cj0);
IkReal x1756=((0.433013258970445)*sj0);
IkReal x1757=((0.866026442229025)*sj0);
IkReal x1758=((0.49999820135573)*sj0);
IkReal x1759=((0.75000087746404)*x1751);
IkReal x1760=(sj0*x1751);
IkReal x1761=(new_r01*x1752);
IkReal x1762=(new_r11*x1751);
IkReal x1763=((0.866026442229025)*x1751);
IkReal x1764=((0.250000205066586)*x1752);
IkReal x1765=((0.433010506600939)*x1751);
IkReal x1766=((0.433010506600939)*x1752);
IkReal x1767=((0.75000087746404)*x1752);
IkReal x1768=(new_r10*x1752);
IkReal x1769=(new_r10*x1751);
IkReal x1770=(new_r00*x1751);
IkReal x1771=(new_r01*x1751);
IkReal x1772=(cj0*x1751);
IkReal x1773=((0.433013258970445)*x1752);
IkReal x1774=(new_r00*x1752);
IkReal x1775=(new_r11*x1752);
evalcond[0]=((((-1.0)*x1765))+(((-1.0)*x1767)));
evalcond[1]=((((-1.0)*x1766))+x1759);
evalcond[2]=(x1768+x1770+x1754+(((0.250000205066586)*sj0)));
evalcond[3]=((((-0.250000205066586)*cj0))+x1775+x1771+x1757);
evalcond[4]=((((-1.0)*x1769))+x1774+x1756+(((-1.0)*x1755)));
evalcond[5]=((((-1.0)*x1762))+x1761+(((-0.433013258970445)*cj0))+(((-1.0)*x1758)));
evalcond[6]=((((-1.0)*new_r00*x1765))+(((-1.0)*new_r00*x1767))+((new_r10*x1759))+(((-1.0)*new_r10*x1766)));
evalcond[7]=((((-1.0)*new_r01*x1765))+((new_r11*x1759))+(((-1.0)*new_r11*x1766))+(((-0.75000087746404)*x1761)));
evalcond[8]=(sj0+((new_r00*x1773))+((new_r10*x1764))+(((0.250000205066586)*x1770))+(((-0.433013258970445)*x1769)));
evalcond[9]=(((x1752*x1756))+(((0.250000205066586)*x1760))+(((-1.0)*x1752*x1755))+new_r00+((x1751*x1754)));
evalcond[10]=((((-0.250000205066586)*x1772))+(((-1.0)*x1752*x1758))+(((-1.0)*cj0*x1773))+new_r01+((x1751*x1757)));
evalcond[11]=(((x1752*x1754))+((sj0*x1764))+(((-1.0)*x1751*x1756))+new_r10+((x1751*x1755)));
evalcond[12]=(((x1752*x1757))+(((-1.0)*cj0*x1764))+(((0.433013258970445)*x1772))+new_r11+((x1751*x1758)));
evalcond[13]=(((new_r11*x1764))+(((0.250000205066586)*x1771))+(((-0.433013258970445)*x1762))+(((-1.0)*x1753))+(((0.433013258970445)*x1761)));
evalcond[14]=((((0.49999820135573)*x1774))+(((-0.49999820135573)*x1769))+(((-1.0)*new_r00*x1763))+(((-1.0)*x1753))+(((-0.866026442229025)*x1768)));
evalcond[15]=((((-0.866026442229025)*x1775))+(((-1.0)*sj0))+(((-0.49999820135573)*x1762))+(((-1.0)*new_r01*x1763))+(((0.49999820135573)*x1761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1776=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01)))),-1);
if(!x1776.valid){
continue;
}
CheckValue<IkReal> x1777 = IKatan2WithCheck(IkReal(((((-18750.015379994)*cj0))+(((64951.9831671769)*sj0)))),IkReal(((((-37499.810974959)*sj0))+(((10825.2588795883)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1777.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1776.value)))+(x1777.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1778=IKsin(j2);
IkReal x1779=IKcos(j2);
IkReal x1780=((1.0)*cj0);
IkReal x1781=((0.866026442229025)*cj0);
IkReal x1782=((0.49999820135573)*cj0);
IkReal x1783=((0.433013258970445)*sj0);
IkReal x1784=((0.866026442229025)*sj0);
IkReal x1785=((0.49999820135573)*sj0);
IkReal x1786=((0.75000087746404)*x1778);
IkReal x1787=(sj0*x1778);
IkReal x1788=(new_r01*x1779);
IkReal x1789=(new_r11*x1778);
IkReal x1790=((0.866026442229025)*x1778);
IkReal x1791=((0.250000205066586)*x1779);
IkReal x1792=((0.433010506600939)*x1778);
IkReal x1793=((0.433010506600939)*x1779);
IkReal x1794=((0.75000087746404)*x1779);
IkReal x1795=(new_r10*x1779);
IkReal x1796=(new_r10*x1778);
IkReal x1797=(new_r00*x1778);
IkReal x1798=(new_r01*x1778);
IkReal x1799=(cj0*x1778);
IkReal x1800=((0.433013258970445)*x1779);
IkReal x1801=(new_r00*x1779);
IkReal x1802=(new_r11*x1779);
evalcond[0]=((((-1.0)*x1792))+(((-1.0)*x1794)));
evalcond[1]=((((-1.0)*x1793))+x1786);
evalcond[2]=(x1781+x1797+x1795+(((0.250000205066586)*sj0)));
evalcond[3]=((((-0.250000205066586)*cj0))+x1784+x1798+x1802);
evalcond[4]=((((-1.0)*x1782))+x1783+x1801+(((-1.0)*x1796)));
evalcond[5]=((((-1.0)*x1785))+x1788+(((-0.433013258970445)*cj0))+(((-1.0)*x1789)));
evalcond[6]=((((-1.0)*new_r10*x1793))+((new_r10*x1786))+(((-1.0)*new_r00*x1794))+(((-1.0)*new_r00*x1792)));
evalcond[7]=((((-1.0)*new_r01*x1792))+((new_r11*x1786))+(((-0.75000087746404)*x1788))+(((-1.0)*new_r11*x1793)));
evalcond[8]=(((new_r00*x1800))+(((-0.433013258970445)*x1796))+sj0+((new_r10*x1791))+(((0.250000205066586)*x1797)));
evalcond[9]=(((x1779*x1783))+((x1778*x1781))+(((-1.0)*x1779*x1782))+new_r00+(((0.250000205066586)*x1787)));
evalcond[10]=((((-0.250000205066586)*x1799))+(((-1.0)*cj0*x1800))+((x1778*x1784))+(((-1.0)*x1779*x1785))+new_r01);
evalcond[11]=(((sj0*x1791))+((x1779*x1781))+((x1778*x1782))+(((-1.0)*x1778*x1783))+new_r10);
evalcond[12]=((((-1.0)*cj0*x1791))+(((0.433013258970445)*x1799))+((x1779*x1784))+((x1778*x1785))+new_r11);
evalcond[13]=((((-1.0)*x1780))+(((-0.433013258970445)*x1789))+(((0.433013258970445)*x1788))+((new_r11*x1791))+(((0.250000205066586)*x1798)));
evalcond[14]=((((0.49999820135573)*x1801))+(((-1.0)*x1780))+(((-0.49999820135573)*x1796))+(((-1.0)*new_r00*x1790))+(((-0.866026442229025)*x1795)));
evalcond[15]=((((-1.0)*sj0))+(((-1.0)*new_r01*x1790))+(((-0.49999820135573)*x1789))+(((-0.866026442229025)*x1802))+(((0.49999820135573)*x1788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1803 = IKatan2WithCheck(IkReal(((((64951.9831671769)*cj0))+(((18750.015379994)*sj0)))),IkReal(((((-37499.810974959)*cj0))+(((-10825.2588795883)*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1803.valid){
continue;
}
CheckValue<IkReal> x1804=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00)))),-1);
if(!x1804.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1803.value)+(((1.5707963267949)*(x1804.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1805=IKsin(j2);
IkReal x1806=IKcos(j2);
IkReal x1807=((1.0)*cj0);
IkReal x1808=((0.866026442229025)*cj0);
IkReal x1809=((0.49999820135573)*cj0);
IkReal x1810=((0.433013258970445)*sj0);
IkReal x1811=((0.866026442229025)*sj0);
IkReal x1812=((0.49999820135573)*sj0);
IkReal x1813=((0.75000087746404)*x1805);
IkReal x1814=(sj0*x1805);
IkReal x1815=(new_r01*x1806);
IkReal x1816=(new_r11*x1805);
IkReal x1817=((0.866026442229025)*x1805);
IkReal x1818=((0.250000205066586)*x1806);
IkReal x1819=((0.433010506600939)*x1805);
IkReal x1820=((0.433010506600939)*x1806);
IkReal x1821=((0.75000087746404)*x1806);
IkReal x1822=(new_r10*x1806);
IkReal x1823=(new_r10*x1805);
IkReal x1824=(new_r00*x1805);
IkReal x1825=(new_r01*x1805);
IkReal x1826=(cj0*x1805);
IkReal x1827=((0.433013258970445)*x1806);
IkReal x1828=(new_r00*x1806);
IkReal x1829=(new_r11*x1806);
evalcond[0]=((((-1.0)*x1819))+(((-1.0)*x1821)));
evalcond[1]=((((-1.0)*x1820))+x1813);
evalcond[2]=((((0.250000205066586)*sj0))+x1824+x1822+x1808);
evalcond[3]=((((-0.250000205066586)*cj0))+x1829+x1825+x1811);
evalcond[4]=((((-1.0)*x1823))+(((-1.0)*x1809))+x1828+x1810);
evalcond[5]=((((-1.0)*x1812))+(((-0.433013258970445)*cj0))+x1815+(((-1.0)*x1816)));
evalcond[6]=(((new_r10*x1813))+(((-1.0)*new_r10*x1820))+(((-1.0)*new_r00*x1821))+(((-1.0)*new_r00*x1819)));
evalcond[7]=(((new_r11*x1813))+(((-1.0)*new_r01*x1819))+(((-1.0)*new_r11*x1820))+(((-0.75000087746404)*x1815)));
evalcond[8]=(sj0+((new_r10*x1818))+((new_r00*x1827))+(((-0.433013258970445)*x1823))+(((0.250000205066586)*x1824)));
evalcond[9]=((((-1.0)*x1806*x1809))+(((0.250000205066586)*x1814))+new_r00+((x1805*x1808))+((x1806*x1810)));
evalcond[10]=(((x1805*x1811))+(((-0.250000205066586)*x1826))+(((-1.0)*cj0*x1827))+(((-1.0)*x1806*x1812))+new_r01);
evalcond[11]=(((x1806*x1808))+(((-1.0)*x1805*x1810))+((sj0*x1818))+new_r10+((x1805*x1809)));
evalcond[12]=((((-1.0)*cj0*x1818))+((x1805*x1812))+(((0.433013258970445)*x1826))+new_r11+((x1806*x1811)));
evalcond[13]=((((-0.433013258970445)*x1816))+((new_r11*x1818))+(((-1.0)*x1807))+(((0.433013258970445)*x1815))+(((0.250000205066586)*x1825)));
evalcond[14]=((((-0.866026442229025)*x1822))+(((-1.0)*x1807))+(((0.49999820135573)*x1828))+(((-0.49999820135573)*x1823))+(((-1.0)*new_r00*x1817)));
evalcond[15]=((((-0.866026442229025)*x1829))+(((-1.0)*sj0))+(((-1.0)*new_r01*x1817))+(((-0.49999820135573)*x1816))+(((0.49999820135573)*x1815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
j0array[0]=3.14159140358624;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=6.28318405717603;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((0.866025066047432)*(IKcos(j0))))+(((-1.08253441393799e-6)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=(new_r10+(((-1.73206161520519)*new_r00)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=(new_r11+(((-1.73206161520519)*new_r01)));
j2eval[1]=5624995940.50689;
j2eval[2]=sj0;
j2eval[3]=IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j2eval[0]=((((-1.0)*new_r00))+(((-1.73206161520519)*new_r10)));
j2eval[1]=IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10))));
j2eval[2]=5624995940.50689;
j2eval[3]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1830=(new_r01*new_r10);
IkReal x1831=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x1830))+x1831);
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x1830))+(((5.33330713107669e+28)*x1831))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1832=(new_r00*new_r01);
IkReal x1833=(new_r10*new_r11);
j2eval[0]=(x1832+x1833);
j2eval[1]=((IKabs(((((-1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))))+(IKabs(((((-1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1832))+(((5.33330713107669e+28)*x1833))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1834=new_r10*new_r10;
IkReal x1835=new_r01*new_r01;
j2eval[0]=((1.0)+(((-1.0)*x1835))+x1834);
j2eval[1]=IKsign(((5.33330713107669e+28)+(((-5.33330713107669e+28)*x1835))+(((5.33330713107669e+28)*x1834))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1836.valid){
continue;
}
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r00))+(((2.30939270191783e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r10))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1836.value)))+(x1837.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1838=IKsin(j2);
IkReal x1839=IKcos(j2);
IkReal x1840=((0.75000087746404)*x1838);
IkReal x1841=(new_r01*x1839);
IkReal x1842=(new_r11*x1838);
IkReal x1843=(new_r01*x1838);
IkReal x1844=((0.433010506600939)*x1838);
IkReal x1845=((0.433010506600939)*x1839);
IkReal x1846=(new_r10*x1839);
IkReal x1847=(new_r00*x1838);
IkReal x1848=((0.49999820135573)*x1839);
IkReal x1849=(new_r10*x1838);
IkReal x1850=(new_r11*x1839);
IkReal x1851=((0.75000087746404)*x1839);
IkReal x1852=(new_r00*x1839);
evalcond[0]=((0.250000205066586)+x1847+x1846);
evalcond[1]=((-0.866026442229025)+x1850+x1843);
evalcond[2]=((0.433013258970445)+x1852+(((-1.0)*x1849)));
evalcond[3]=((0.49999820135573)+x1841+(((-1.0)*x1842)));
evalcond[4]=(x1851+x1844);
evalcond[5]=((((-1.0)*x1840))+x1845);
evalcond[6]=((((0.433013258970445)*x1839))+(((0.250000205066586)*x1838))+new_r00);
evalcond[7]=((((-0.866026442229025)*x1838))+x1848+new_r01);
evalcond[8]=((((-0.433013258970445)*x1838))+(((0.250000205066586)*x1839))+new_r10);
evalcond[9]=((((-0.866026442229025)*x1839))+(((-0.49999820135573)*x1838))+new_r11);
evalcond[10]=((((0.250000205066586)*x1843))+(((0.250000205066586)*x1850))+(((0.433013258970445)*x1841))+(((-0.433013258970445)*x1842)));
evalcond[11]=(((new_r00*x1851))+(((-1.0)*new_r10*x1840))+((new_r00*x1844))+((new_r10*x1845)));
evalcond[12]=(((new_r11*x1845))+(((-1.0)*new_r11*x1840))+(((0.433010506600939)*x1843))+(((0.75000087746404)*x1841)));
evalcond[13]=((((-1.0)*new_r00*x1848))+(((0.866026442229025)*x1846))+(((0.866026442229025)*x1847))+(((0.49999820135573)*x1849)));
evalcond[14]=((1.0)+(((0.433013258970445)*x1852))+(((0.250000205066586)*x1847))+(((0.250000205066586)*x1846))+(((-0.433013258970445)*x1849)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x1841))+(((0.866026442229025)*x1843))+(((0.866026442229025)*x1850))+(((0.49999820135573)*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1854.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1853.value)+(((1.5707963267949)*(x1854.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1855=IKsin(j2);
IkReal x1856=IKcos(j2);
IkReal x1857=((0.75000087746404)*x1855);
IkReal x1858=(new_r01*x1856);
IkReal x1859=(new_r11*x1855);
IkReal x1860=(new_r01*x1855);
IkReal x1861=((0.433010506600939)*x1855);
IkReal x1862=((0.433010506600939)*x1856);
IkReal x1863=(new_r10*x1856);
IkReal x1864=(new_r00*x1855);
IkReal x1865=((0.49999820135573)*x1856);
IkReal x1866=(new_r10*x1855);
IkReal x1867=(new_r11*x1856);
IkReal x1868=((0.75000087746404)*x1856);
IkReal x1869=(new_r00*x1856);
evalcond[0]=((0.250000205066586)+x1863+x1864);
evalcond[1]=((-0.866026442229025)+x1860+x1867);
evalcond[2]=((0.433013258970445)+x1869+(((-1.0)*x1866)));
evalcond[3]=((0.49999820135573)+(((-1.0)*x1859))+x1858);
evalcond[4]=(x1861+x1868);
evalcond[5]=(x1862+(((-1.0)*x1857)));
evalcond[6]=((((0.433013258970445)*x1856))+(((0.250000205066586)*x1855))+new_r00);
evalcond[7]=(x1865+new_r01+(((-0.866026442229025)*x1855)));
evalcond[8]=((((-0.433013258970445)*x1855))+(((0.250000205066586)*x1856))+new_r10);
evalcond[9]=(new_r11+(((-0.866026442229025)*x1856))+(((-0.49999820135573)*x1855)));
evalcond[10]=((((0.250000205066586)*x1867))+(((0.250000205066586)*x1860))+(((0.433013258970445)*x1858))+(((-0.433013258970445)*x1859)));
evalcond[11]=(((new_r10*x1862))+(((-1.0)*new_r10*x1857))+((new_r00*x1861))+((new_r00*x1868)));
evalcond[12]=((((0.75000087746404)*x1858))+((new_r11*x1862))+(((-1.0)*new_r11*x1857))+(((0.433010506600939)*x1860)));
evalcond[13]=((((-1.0)*new_r00*x1865))+(((0.49999820135573)*x1866))+(((0.866026442229025)*x1864))+(((0.866026442229025)*x1863)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x1866))+(((0.250000205066586)*x1864))+(((0.250000205066586)*x1863))+(((0.433013258970445)*x1869)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x1859))+(((-0.49999820135573)*x1858))+(((0.866026442229025)*x1867))+(((0.866026442229025)*x1860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
CheckValue<IkReal> x1871=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1871.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1870.value)+(((1.5707963267949)*(x1871.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1872=IKsin(j2);
IkReal x1873=IKcos(j2);
IkReal x1874=((0.75000087746404)*x1872);
IkReal x1875=(new_r01*x1873);
IkReal x1876=(new_r11*x1872);
IkReal x1877=(new_r01*x1872);
IkReal x1878=((0.433010506600939)*x1872);
IkReal x1879=((0.433010506600939)*x1873);
IkReal x1880=(new_r10*x1873);
IkReal x1881=(new_r00*x1872);
IkReal x1882=((0.49999820135573)*x1873);
IkReal x1883=(new_r10*x1872);
IkReal x1884=(new_r11*x1873);
IkReal x1885=((0.75000087746404)*x1873);
IkReal x1886=(new_r00*x1873);
evalcond[0]=((0.250000205066586)+x1881+x1880);
evalcond[1]=((-0.866026442229025)+x1877+x1884);
evalcond[2]=((0.433013258970445)+x1886+(((-1.0)*x1883)));
evalcond[3]=((0.49999820135573)+x1875+(((-1.0)*x1876)));
evalcond[4]=(x1878+x1885);
evalcond[5]=((((-1.0)*x1874))+x1879);
evalcond[6]=(new_r00+(((0.250000205066586)*x1872))+(((0.433013258970445)*x1873)));
evalcond[7]=((((-0.866026442229025)*x1872))+x1882+new_r01);
evalcond[8]=((((-0.433013258970445)*x1872))+new_r10+(((0.250000205066586)*x1873)));
evalcond[9]=((((-0.866026442229025)*x1873))+(((-0.49999820135573)*x1872))+new_r11);
evalcond[10]=((((0.250000205066586)*x1884))+(((0.250000205066586)*x1877))+(((0.433013258970445)*x1875))+(((-0.433013258970445)*x1876)));
evalcond[11]=(((new_r10*x1879))+(((-1.0)*new_r10*x1874))+((new_r00*x1885))+((new_r00*x1878)));
evalcond[12]=((((-1.0)*new_r11*x1874))+(((0.433010506600939)*x1877))+(((0.75000087746404)*x1875))+((new_r11*x1879)));
evalcond[13]=((((0.866026442229025)*x1880))+(((0.866026442229025)*x1881))+(((0.49999820135573)*x1883))+(((-1.0)*new_r00*x1882)));
evalcond[14]=((1.0)+(((0.433013258970445)*x1886))+(((0.250000205066586)*x1880))+(((0.250000205066586)*x1881))+(((-0.433013258970445)*x1883)));
evalcond[15]=((-1.0)+(((0.866026442229025)*x1884))+(((-0.49999820135573)*x1875))+(((0.866026442229025)*x1877))+(((0.49999820135573)*x1876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1887=(new_r01*new_r10);
IkReal x1888=(new_r00*new_r11);
j2eval[0]=(x1888+(((-1.0)*x1887)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x1887))+(((5.33330713107669e+28)*x1888))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))))+(IKabs(((((4.61878500004103e+28)*new_r10))+(((1.33332787645226e+28)*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1889=(new_r00*new_r01);
IkReal x1890=(new_r10*new_r11);
j2eval[0]=(x1890+x1889);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r11))+(((2.66664397281603e+28)*new_r00)))))+(IKabs(((((1.33332787645226e+28)*new_r01))+(((-2.66664397281603e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1889))+(((5.33330713107669e+28)*x1890))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1891=new_r10*new_r10;
IkReal x1892=new_r01*new_r01;
j2eval[0]=((1.0)+(((-1.0)*x1892))+x1891);
j2eval[1]=IKsign(((5.33330713107669e+28)+(((-5.33330713107669e+28)*x1892))+(((5.33330713107669e+28)*x1891))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1893=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1893.valid){
continue;
}
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r00))+(((-2.30939270191783e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r10))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1893.value)))+(x1894.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1895=IKsin(j2);
IkReal x1896=IKcos(j2);
IkReal x1897=((0.75000087746404)*x1895);
IkReal x1898=(new_r01*x1896);
IkReal x1899=(new_r11*x1895);
IkReal x1900=(new_r01*x1895);
IkReal x1901=((0.433010506600939)*x1895);
IkReal x1902=((0.433010506600939)*x1896);
IkReal x1903=(new_r10*x1896);
IkReal x1904=(new_r00*x1895);
IkReal x1905=((0.49999820135573)*x1896);
IkReal x1906=(new_r10*x1895);
IkReal x1907=(new_r11*x1896);
IkReal x1908=((0.75000087746404)*x1896);
IkReal x1909=(new_r00*x1896);
evalcond[0]=((-0.250000205066586)+x1904+x1903);
evalcond[1]=((0.866026442229025)+x1907+x1900);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x1906))+x1909);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x1899))+x1898);
evalcond[4]=(x1908+x1901);
evalcond[5]=(x1902+(((-1.0)*x1897)));
evalcond[6]=((((-0.250000205066586)*x1895))+new_r00+(((-0.433013258970445)*x1896)));
evalcond[7]=((((0.866026442229025)*x1895))+new_r01+(((-1.0)*x1905)));
evalcond[8]=((((0.433013258970445)*x1895))+(((-0.250000205066586)*x1896))+new_r10);
evalcond[9]=((((0.49999820135573)*x1895))+(((0.866026442229025)*x1896))+new_r11);
evalcond[10]=((((0.433013258970445)*x1898))+(((0.250000205066586)*x1900))+(((0.250000205066586)*x1907))+(((-0.433013258970445)*x1899)));
evalcond[11]=((((-1.0)*new_r10*x1897))+((new_r10*x1902))+((new_r00*x1908))+((new_r00*x1901)));
evalcond[12]=((((0.75000087746404)*x1898))+(((0.433010506600939)*x1900))+((new_r11*x1902))+(((-1.0)*new_r11*x1897)));
evalcond[13]=((((0.866026442229025)*x1903))+(((0.866026442229025)*x1904))+(((-1.0)*new_r00*x1905))+(((0.49999820135573)*x1906)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x1906))+(((0.433013258970445)*x1909))+(((0.250000205066586)*x1903))+(((0.250000205066586)*x1904)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x1898))+(((0.866026442229025)*x1900))+(((0.866026442229025)*x1907))+(((0.49999820135573)*x1899)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1910=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1910.valid){
continue;
}
CheckValue<IkReal> x1911 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((-2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1911.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1910.value)))+(x1911.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1912=IKsin(j2);
IkReal x1913=IKcos(j2);
IkReal x1914=((0.75000087746404)*x1912);
IkReal x1915=(new_r01*x1913);
IkReal x1916=(new_r11*x1912);
IkReal x1917=(new_r01*x1912);
IkReal x1918=((0.433010506600939)*x1912);
IkReal x1919=((0.433010506600939)*x1913);
IkReal x1920=(new_r10*x1913);
IkReal x1921=(new_r00*x1912);
IkReal x1922=((0.49999820135573)*x1913);
IkReal x1923=(new_r10*x1912);
IkReal x1924=(new_r11*x1913);
IkReal x1925=((0.75000087746404)*x1913);
IkReal x1926=(new_r00*x1913);
evalcond[0]=((-0.250000205066586)+x1920+x1921);
evalcond[1]=((0.866026442229025)+x1924+x1917);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x1923))+x1926);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x1916))+x1915);
evalcond[4]=(x1925+x1918);
evalcond[5]=(x1919+(((-1.0)*x1914)));
evalcond[6]=((((-0.250000205066586)*x1912))+(((-0.433013258970445)*x1913))+new_r00);
evalcond[7]=((((-1.0)*x1922))+(((0.866026442229025)*x1912))+new_r01);
evalcond[8]=((((0.433013258970445)*x1912))+(((-0.250000205066586)*x1913))+new_r10);
evalcond[9]=((((0.49999820135573)*x1912))+(((0.866026442229025)*x1913))+new_r11);
evalcond[10]=((((0.250000205066586)*x1924))+(((0.433013258970445)*x1915))+(((-0.433013258970445)*x1916))+(((0.250000205066586)*x1917)));
evalcond[11]=((((-1.0)*new_r10*x1914))+((new_r10*x1919))+((new_r00*x1925))+((new_r00*x1918)));
evalcond[12]=((((0.433010506600939)*x1917))+(((0.75000087746404)*x1915))+(((-1.0)*new_r11*x1914))+((new_r11*x1919)));
evalcond[13]=((((0.49999820135573)*x1923))+(((0.866026442229025)*x1921))+(((0.866026442229025)*x1920))+(((-1.0)*new_r00*x1922)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x1923))+(((0.250000205066586)*x1920))+(((0.250000205066586)*x1921))+(((0.433013258970445)*x1926)));
evalcond[15]=((1.0)+(((0.866026442229025)*x1924))+(((0.49999820135573)*x1916))+(((0.866026442229025)*x1917))+(((-0.49999820135573)*x1915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1927=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*new_r10))+(((1.33332787645226e+28)*new_r11)))),IkReal(((((-1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1928.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1927.value)))+(x1928.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1929=IKsin(j2);
IkReal x1930=IKcos(j2);
IkReal x1931=((0.75000087746404)*x1929);
IkReal x1932=(new_r01*x1930);
IkReal x1933=(new_r11*x1929);
IkReal x1934=(new_r01*x1929);
IkReal x1935=((0.433010506600939)*x1929);
IkReal x1936=((0.433010506600939)*x1930);
IkReal x1937=(new_r10*x1930);
IkReal x1938=(new_r00*x1929);
IkReal x1939=((0.49999820135573)*x1930);
IkReal x1940=(new_r10*x1929);
IkReal x1941=(new_r11*x1930);
IkReal x1942=((0.75000087746404)*x1930);
IkReal x1943=(new_r00*x1930);
evalcond[0]=((-0.250000205066586)+x1937+x1938);
evalcond[1]=((0.866026442229025)+x1934+x1941);
evalcond[2]=((-0.433013258970445)+x1943+(((-1.0)*x1940)));
evalcond[3]=((-0.49999820135573)+(((-1.0)*x1933))+x1932);
evalcond[4]=(x1935+x1942);
evalcond[5]=(x1936+(((-1.0)*x1931)));
evalcond[6]=((((-0.433013258970445)*x1930))+(((-0.250000205066586)*x1929))+new_r00);
evalcond[7]=(new_r01+(((0.866026442229025)*x1929))+(((-1.0)*x1939)));
evalcond[8]=((((-0.250000205066586)*x1930))+(((0.433013258970445)*x1929))+new_r10);
evalcond[9]=((((0.49999820135573)*x1929))+new_r11+(((0.866026442229025)*x1930)));
evalcond[10]=((((0.250000205066586)*x1941))+(((-0.433013258970445)*x1933))+(((0.433013258970445)*x1932))+(((0.250000205066586)*x1934)));
evalcond[11]=((((-1.0)*new_r10*x1931))+((new_r00*x1942))+((new_r10*x1936))+((new_r00*x1935)));
evalcond[12]=((((0.433010506600939)*x1934))+(((-1.0)*new_r11*x1931))+(((0.75000087746404)*x1932))+((new_r11*x1936)));
evalcond[13]=((((0.866026442229025)*x1937))+(((0.866026442229025)*x1938))+(((-1.0)*new_r00*x1939))+(((0.49999820135573)*x1940)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x1943))+(((0.250000205066586)*x1937))+(((0.250000205066586)*x1938))+(((-0.433013258970445)*x1940)));
evalcond[15]=((1.0)+(((0.866026442229025)*x1934))+(((0.49999820135573)*x1933))+(((0.866026442229025)*x1941))+(((-0.49999820135573)*x1932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1944=(new_r01*new_r10);
IkReal x1945=(new_r00*new_r11);
j2eval[0]=(x1945+(((-1.0)*x1944)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x1944))+(((5.33330713107669e+28)*x1945))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r10))+(((4.61878500004103e+28)*new_r11)))))+(IKabs(((((1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1946=(new_r00*new_r01);
IkReal x1947=(new_r10*new_r11);
j2eval[0]=(x1946+x1947);
j2eval[1]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((2.30939270191783e+28)*new_r00)))))+(IKabs(((((-2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x1947))+(((5.33330713107669e+28)*x1946))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1948=new_r10*new_r10;
IkReal x1949=new_r01*new_r01;
j2eval[0]=((1.0)+x1948+(((-1.0)*x1949)));
j2eval[1]=IKsign(((5.33330713107669e+28)+(((-5.33330713107669e+28)*x1949))+(((5.33330713107669e+28)*x1948))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x1950.valid){
continue;
}
CheckValue<IkReal> x1951 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1951.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1950.value)))+(x1951.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1952=IKsin(j2);
IkReal x1953=IKcos(j2);
IkReal x1954=((0.75000087746404)*x1952);
IkReal x1955=(new_r01*x1953);
IkReal x1956=(new_r11*x1952);
IkReal x1957=(new_r01*x1952);
IkReal x1958=((0.433010506600939)*x1952);
IkReal x1959=((0.433010506600939)*x1953);
IkReal x1960=(new_r10*x1953);
IkReal x1961=(new_r00*x1952);
IkReal x1962=((0.49999820135573)*x1953);
IkReal x1963=(new_r10*x1952);
IkReal x1964=(new_r11*x1953);
IkReal x1965=((0.75000087746404)*x1953);
IkReal x1966=(new_r00*x1953);
evalcond[0]=((-0.866026442229025)+x1960+x1961);
evalcond[1]=((-0.250000205066586)+x1964+x1957);
evalcond[2]=((0.49999820135573)+(((-1.0)*x1963))+x1966);
evalcond[3]=((-0.433013258970445)+x1955+(((-1.0)*x1956)));
evalcond[4]=(x1965+x1958);
evalcond[5]=((((-1.0)*x1954))+x1959);
evalcond[6]=((((-0.866026442229025)*x1952))+x1962+new_r00);
evalcond[7]=((((-0.250000205066586)*x1952))+(((-0.433013258970445)*x1953))+new_r01);
evalcond[8]=((((-0.866026442229025)*x1953))+new_r10+(((-0.49999820135573)*x1952)));
evalcond[9]=((((0.433013258970445)*x1952))+(((-0.250000205066586)*x1953))+new_r11);
evalcond[10]=((((0.433013258970445)*x1966))+(((-0.433013258970445)*x1963))+(((0.250000205066586)*x1960))+(((0.250000205066586)*x1961)));
evalcond[11]=(((new_r00*x1965))+((new_r10*x1959))+((new_r00*x1958))+(((-1.0)*new_r10*x1954)));
evalcond[12]=(((new_r11*x1959))+(((-1.0)*new_r11*x1954))+(((0.75000087746404)*x1955))+(((0.433010506600939)*x1957)));
evalcond[13]=((((0.866026442229025)*x1964))+(((0.49999820135573)*x1956))+(((0.866026442229025)*x1957))+(((-0.49999820135573)*x1955)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x1955))+(((-0.433013258970445)*x1956))+(((0.250000205066586)*x1964))+(((0.250000205066586)*x1957)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x1962))+(((0.866026442229025)*x1961))+(((0.866026442229025)*x1960))+(((0.49999820135573)*x1963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1967=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x1967.valid){
continue;
}
CheckValue<IkReal> x1968 = IKatan2WithCheck(IkReal(((((-2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1968.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1967.value)))+(x1968.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1969=IKsin(j2);
IkReal x1970=IKcos(j2);
IkReal x1971=((0.75000087746404)*x1969);
IkReal x1972=(new_r01*x1970);
IkReal x1973=(new_r11*x1969);
IkReal x1974=(new_r01*x1969);
IkReal x1975=((0.433010506600939)*x1969);
IkReal x1976=((0.433010506600939)*x1970);
IkReal x1977=(new_r10*x1970);
IkReal x1978=(new_r00*x1969);
IkReal x1979=((0.49999820135573)*x1970);
IkReal x1980=(new_r10*x1969);
IkReal x1981=(new_r11*x1970);
IkReal x1982=((0.75000087746404)*x1970);
IkReal x1983=(new_r00*x1970);
evalcond[0]=((-0.866026442229025)+x1978+x1977);
evalcond[1]=((-0.250000205066586)+x1981+x1974);
evalcond[2]=((0.49999820135573)+x1983+(((-1.0)*x1980)));
evalcond[3]=((-0.433013258970445)+(((-1.0)*x1973))+x1972);
evalcond[4]=(x1982+x1975);
evalcond[5]=((((-1.0)*x1971))+x1976);
evalcond[6]=((((-0.866026442229025)*x1969))+x1979+new_r00);
evalcond[7]=((((-0.433013258970445)*x1970))+(((-0.250000205066586)*x1969))+new_r01);
evalcond[8]=((((-0.49999820135573)*x1969))+(((-0.866026442229025)*x1970))+new_r10);
evalcond[9]=((((0.433013258970445)*x1969))+(((-0.250000205066586)*x1970))+new_r11);
evalcond[10]=((((0.433013258970445)*x1983))+(((-0.433013258970445)*x1980))+(((0.250000205066586)*x1978))+(((0.250000205066586)*x1977)));
evalcond[11]=(((new_r10*x1976))+(((-1.0)*new_r10*x1971))+((new_r00*x1982))+((new_r00*x1975)));
evalcond[12]=(((new_r11*x1976))+(((-1.0)*new_r11*x1971))+(((0.433010506600939)*x1974))+(((0.75000087746404)*x1972)));
evalcond[13]=((((-0.49999820135573)*x1972))+(((0.866026442229025)*x1974))+(((0.866026442229025)*x1981))+(((0.49999820135573)*x1973)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x1972))+(((-0.433013258970445)*x1973))+(((0.250000205066586)*x1981))+(((0.250000205066586)*x1974)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x1979))+(((0.866026442229025)*x1977))+(((0.866026442229025)*x1978))+(((0.49999820135573)*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1984 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r10))+(((4.61878500004103e+28)*new_r11)))),IkReal(((((1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1984.valid){
continue;
}
CheckValue<IkReal> x1985=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x1985.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1984.value)+(((1.5707963267949)*(x1985.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x1986=IKsin(j2);
IkReal x1987=IKcos(j2);
IkReal x1988=((0.75000087746404)*x1986);
IkReal x1989=(new_r01*x1987);
IkReal x1990=(new_r11*x1986);
IkReal x1991=(new_r01*x1986);
IkReal x1992=((0.433010506600939)*x1986);
IkReal x1993=((0.433010506600939)*x1987);
IkReal x1994=(new_r10*x1987);
IkReal x1995=(new_r00*x1986);
IkReal x1996=((0.49999820135573)*x1987);
IkReal x1997=(new_r10*x1986);
IkReal x1998=(new_r11*x1987);
IkReal x1999=((0.75000087746404)*x1987);
IkReal x2000=(new_r00*x1987);
evalcond[0]=((-0.866026442229025)+x1995+x1994);
evalcond[1]=((-0.250000205066586)+x1991+x1998);
evalcond[2]=((0.49999820135573)+x2000+(((-1.0)*x1997)));
evalcond[3]=((-0.433013258970445)+x1989+(((-1.0)*x1990)));
evalcond[4]=(x1992+x1999);
evalcond[5]=((((-1.0)*x1988))+x1993);
evalcond[6]=((((-0.866026442229025)*x1986))+x1996+new_r00);
evalcond[7]=((((-0.250000205066586)*x1986))+(((-0.433013258970445)*x1987))+new_r01);
evalcond[8]=((((-0.49999820135573)*x1986))+(((-0.866026442229025)*x1987))+new_r10);
evalcond[9]=((((-0.250000205066586)*x1987))+new_r11+(((0.433013258970445)*x1986)));
evalcond[10]=((((0.250000205066586)*x1995))+(((0.250000205066586)*x1994))+(((0.433013258970445)*x2000))+(((-0.433013258970445)*x1997)));
evalcond[11]=((((-1.0)*new_r10*x1988))+((new_r00*x1999))+((new_r00*x1992))+((new_r10*x1993)));
evalcond[12]=((((0.75000087746404)*x1989))+(((0.433010506600939)*x1991))+((new_r11*x1993))+(((-1.0)*new_r11*x1988)));
evalcond[13]=((((-0.49999820135573)*x1989))+(((0.866026442229025)*x1998))+(((0.866026442229025)*x1991))+(((0.49999820135573)*x1990)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x1989))+(((0.250000205066586)*x1991))+(((0.250000205066586)*x1998))+(((-0.433013258970445)*x1990)));
evalcond[15]=((-1.0)+(((0.866026442229025)*x1994))+(((0.866026442229025)*x1995))+(((-1.0)*new_r00*x1996))+(((0.49999820135573)*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2001=(new_r01*new_r10);
IkReal x2002=(new_r00*new_r11);
j2eval[0]=(x2002+(((-1.0)*x2001)));
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))))+(IKabs(((((-1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((-5.33330713107669e+28)*x2001))+(((5.33330713107669e+28)*x2002))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2003=(new_r00*new_r01);
IkReal x2004=(new_r10*new_r11);
j2eval[0]=(x2003+x2004);
j2eval[1]=((IKabs(((((2.30939270191783e+28)*new_r10))+(((-4.61878500004103e+28)*new_r01)))))+(IKabs(((((-4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x2003))+(((5.33330713107669e+28)*x2004))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2005=new_r01*new_r01;
IkReal x2006=new_r10*new_r10;
j2eval[0]=((-1.0)+x2005+(((-1.0)*x2006)));
j2eval[1]=IKsign(((-5.33330713107669e+28)+(((-5.33330713107669e+28)*x2006))+(((5.33330713107669e+28)*x2005))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2007 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2007.valid){
continue;
}
CheckValue<IkReal> x2008=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*(new_r10*new_r10)))+(((-5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x2008.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2007.value)+(((1.5707963267949)*(x2008.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2009=IKsin(j2);
IkReal x2010=IKcos(j2);
IkReal x2011=((0.75000087746404)*x2009);
IkReal x2012=(new_r01*x2010);
IkReal x2013=(new_r11*x2009);
IkReal x2014=(new_r01*x2009);
IkReal x2015=((0.433010506600939)*x2009);
IkReal x2016=((0.433010506600939)*x2010);
IkReal x2017=(new_r10*x2010);
IkReal x2018=(new_r00*x2009);
IkReal x2019=((0.49999820135573)*x2010);
IkReal x2020=(new_r10*x2009);
IkReal x2021=(new_r11*x2010);
IkReal x2022=((0.75000087746404)*x2010);
IkReal x2023=(new_r00*x2010);
evalcond[0]=((0.866026442229025)+x2018+x2017);
evalcond[1]=((0.250000205066586)+x2021+x2014);
evalcond[2]=((-0.49999820135573)+x2023+(((-1.0)*x2020)));
evalcond[3]=((0.433013258970445)+x2012+(((-1.0)*x2013)));
evalcond[4]=(x2022+x2015);
evalcond[5]=((((-1.0)*x2011))+x2016);
evalcond[6]=((((-1.0)*x2019))+(((0.866026442229025)*x2009))+new_r00);
evalcond[7]=(new_r01+(((0.433013258970445)*x2010))+(((0.250000205066586)*x2009)));
evalcond[8]=((((0.866026442229025)*x2010))+(((0.49999820135573)*x2009))+new_r10);
evalcond[9]=((((-0.433013258970445)*x2009))+(((0.250000205066586)*x2010))+new_r11);
evalcond[10]=((((-0.433013258970445)*x2020))+(((0.250000205066586)*x2017))+(((0.250000205066586)*x2018))+(((0.433013258970445)*x2023)));
evalcond[11]=(((new_r00*x2022))+((new_r00*x2015))+(((-1.0)*new_r10*x2011))+((new_r10*x2016)));
evalcond[12]=(((new_r11*x2016))+(((-1.0)*new_r11*x2011))+(((0.75000087746404)*x2012))+(((0.433010506600939)*x2014)));
evalcond[13]=((((-0.49999820135573)*x2012))+(((0.866026442229025)*x2021))+(((0.866026442229025)*x2014))+(((0.49999820135573)*x2013)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x2013))+(((0.250000205066586)*x2021))+(((0.433013258970445)*x2012))+(((0.250000205066586)*x2014)));
evalcond[15]=((1.0)+(((0.866026442229025)*x2017))+(((0.866026442229025)*x2018))+(((0.49999820135573)*x2020))+(((-1.0)*new_r00*x2019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2024=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x2024.valid){
continue;
}
CheckValue<IkReal> x2025 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((-4.61878500004103e+28)*new_r01)))),IkReal(((((-4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2025.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2024.value)))+(x2025.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2026=IKsin(j2);
IkReal x2027=IKcos(j2);
IkReal x2028=((0.75000087746404)*x2026);
IkReal x2029=(new_r01*x2027);
IkReal x2030=(new_r11*x2026);
IkReal x2031=(new_r01*x2026);
IkReal x2032=((0.433010506600939)*x2026);
IkReal x2033=((0.433010506600939)*x2027);
IkReal x2034=(new_r10*x2027);
IkReal x2035=(new_r00*x2026);
IkReal x2036=((0.49999820135573)*x2027);
IkReal x2037=(new_r10*x2026);
IkReal x2038=(new_r11*x2027);
IkReal x2039=((0.75000087746404)*x2027);
IkReal x2040=(new_r00*x2027);
evalcond[0]=((0.866026442229025)+x2035+x2034);
evalcond[1]=((0.250000205066586)+x2031+x2038);
evalcond[2]=((-0.49999820135573)+x2040+(((-1.0)*x2037)));
evalcond[3]=((0.433013258970445)+x2029+(((-1.0)*x2030)));
evalcond[4]=(x2032+x2039);
evalcond[5]=(x2033+(((-1.0)*x2028)));
evalcond[6]=((((0.866026442229025)*x2026))+(((-1.0)*x2036))+new_r00);
evalcond[7]=((((0.433013258970445)*x2027))+new_r01+(((0.250000205066586)*x2026)));
evalcond[8]=((((0.866026442229025)*x2027))+(((0.49999820135573)*x2026))+new_r10);
evalcond[9]=((((-0.433013258970445)*x2026))+new_r11+(((0.250000205066586)*x2027)));
evalcond[10]=((((-0.433013258970445)*x2037))+(((0.250000205066586)*x2035))+(((0.250000205066586)*x2034))+(((0.433013258970445)*x2040)));
evalcond[11]=(((new_r00*x2032))+((new_r00*x2039))+(((-1.0)*new_r10*x2028))+((new_r10*x2033)));
evalcond[12]=((((0.433010506600939)*x2031))+(((-1.0)*new_r11*x2028))+((new_r11*x2033))+(((0.75000087746404)*x2029)));
evalcond[13]=((((0.866026442229025)*x2031))+(((0.866026442229025)*x2038))+(((0.49999820135573)*x2030))+(((-0.49999820135573)*x2029)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x2030))+(((0.250000205066586)*x2031))+(((0.250000205066586)*x2038))+(((0.433013258970445)*x2029)));
evalcond[15]=((1.0)+(((0.866026442229025)*x2034))+(((0.866026442229025)*x2035))+(((-1.0)*new_r00*x2036))+(((0.49999820135573)*x2037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2041 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))),IkReal(((((-1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2041.valid){
continue;
}
CheckValue<IkReal> x2042=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x2042.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2041.value)+(((1.5707963267949)*(x2042.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2043=IKsin(j2);
IkReal x2044=IKcos(j2);
IkReal x2045=((0.75000087746404)*x2043);
IkReal x2046=(new_r01*x2044);
IkReal x2047=(new_r11*x2043);
IkReal x2048=(new_r01*x2043);
IkReal x2049=((0.433010506600939)*x2043);
IkReal x2050=((0.433010506600939)*x2044);
IkReal x2051=(new_r10*x2044);
IkReal x2052=(new_r00*x2043);
IkReal x2053=((0.49999820135573)*x2044);
IkReal x2054=(new_r10*x2043);
IkReal x2055=(new_r11*x2044);
IkReal x2056=((0.75000087746404)*x2044);
IkReal x2057=(new_r00*x2044);
evalcond[0]=((0.866026442229025)+x2051+x2052);
evalcond[1]=((0.250000205066586)+x2048+x2055);
evalcond[2]=((-0.49999820135573)+x2057+(((-1.0)*x2054)));
evalcond[3]=((0.433013258970445)+x2046+(((-1.0)*x2047)));
evalcond[4]=(x2049+x2056);
evalcond[5]=((((-1.0)*x2045))+x2050);
evalcond[6]=((((0.866026442229025)*x2043))+new_r00+(((-1.0)*x2053)));
evalcond[7]=((((0.433013258970445)*x2044))+(((0.250000205066586)*x2043))+new_r01);
evalcond[8]=((((0.49999820135573)*x2043))+(((0.866026442229025)*x2044))+new_r10);
evalcond[9]=((((0.250000205066586)*x2044))+(((-0.433013258970445)*x2043))+new_r11);
evalcond[10]=((((-0.433013258970445)*x2054))+(((0.250000205066586)*x2051))+(((0.250000205066586)*x2052))+(((0.433013258970445)*x2057)));
evalcond[11]=(((new_r00*x2056))+((new_r10*x2050))+(((-1.0)*new_r10*x2045))+((new_r00*x2049)));
evalcond[12]=(((new_r11*x2050))+(((0.75000087746404)*x2046))+(((-1.0)*new_r11*x2045))+(((0.433010506600939)*x2048)));
evalcond[13]=((((0.866026442229025)*x2055))+(((0.49999820135573)*x2047))+(((-0.49999820135573)*x2046))+(((0.866026442229025)*x2048)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x2047))+(((0.250000205066586)*x2048))+(((0.250000205066586)*x2055))+(((0.433013258970445)*x2046)));
evalcond[15]=((1.0)+(((0.866026442229025)*x2052))+(((0.866026442229025)*x2051))+(((-1.0)*new_r00*x2053))+(((0.49999820135573)*x2054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2058=IKPowWithIntegerCheck(IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10)))),-1);
if(!x2058.valid){
continue;
}
CheckValue<IkReal> x2059 = IKatan2WithCheck(IkReal(((((-37499.810974959)*cj0))+(((10825.2588795883)*sj0)))),IkReal(((((18750.015379994)*sj0))+(((-64951.9831671769)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2059.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2058.value)))+(x2059.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2060=IKcos(j2);
IkReal x2061=IKsin(j2);
IkReal x2062=((1.0)*cj0);
IkReal x2063=((0.866026442229025)*cj0);
IkReal x2064=((0.49999820135573)*cj0);
IkReal x2065=((0.433013258970445)*sj0);
IkReal x2066=((0.866026442229025)*sj0);
IkReal x2067=((0.49999820135573)*sj0);
IkReal x2068=((0.75000087746404)*x2061);
IkReal x2069=(sj0*x2061);
IkReal x2070=(new_r01*x2060);
IkReal x2071=(new_r11*x2061);
IkReal x2072=((0.866026442229025)*x2061);
IkReal x2073=((0.250000205066586)*x2060);
IkReal x2074=((0.433010506600939)*x2061);
IkReal x2075=((0.433010506600939)*x2060);
IkReal x2076=((0.75000087746404)*x2060);
IkReal x2077=(new_r10*x2060);
IkReal x2078=(new_r10*x2061);
IkReal x2079=(new_r00*x2061);
IkReal x2080=(new_r01*x2061);
IkReal x2081=(cj0*x2061);
IkReal x2082=((0.433013258970445)*x2060);
IkReal x2083=(new_r00*x2060);
IkReal x2084=(new_r11*x2060);
evalcond[0]=(x2076+x2074);
evalcond[1]=(x2075+(((-1.0)*x2068)));
evalcond[2]=(x2079+x2077+(((0.250000205066586)*sj0))+(((-1.0)*x2063)));
evalcond[3]=((((-0.250000205066586)*cj0))+x2080+x2084+(((-1.0)*x2066)));
evalcond[4]=(x2064+x2065+x2083+(((-1.0)*x2078)));
evalcond[5]=(x2067+x2070+(((-1.0)*x2071))+(((-0.433013258970445)*cj0)));
evalcond[6]=((((-1.0)*new_r10*x2068))+((new_r00*x2074))+((new_r00*x2076))+((new_r10*x2075)));
evalcond[7]=((((-1.0)*new_r11*x2068))+(((0.75000087746404)*x2070))+((new_r11*x2075))+((new_r01*x2074)));
evalcond[8]=((((-0.433013258970445)*x2078))+sj0+(((0.250000205066586)*x2079))+((new_r00*x2082))+((new_r10*x2073)));
evalcond[9]=((((0.250000205066586)*x2069))+(((-1.0)*x2061*x2063))+((x2060*x2065))+((x2060*x2064))+new_r00);
evalcond[10]=((((-1.0)*cj0*x2082))+(((-1.0)*x2061*x2066))+(((-0.250000205066586)*x2081))+((x2060*x2067))+new_r01);
evalcond[11]=((((-1.0)*x2061*x2064))+(((-1.0)*x2061*x2065))+((sj0*x2073))+new_r10+(((-1.0)*x2060*x2063)));
evalcond[12]=((((-1.0)*cj0*x2073))+(((0.433013258970445)*x2081))+(((-1.0)*x2061*x2067))+new_r11+(((-1.0)*x2060*x2066)));
evalcond[13]=((((-0.433013258970445)*x2071))+(((0.250000205066586)*x2080))+(((-1.0)*x2062))+((new_r11*x2073))+(((0.433013258970445)*x2070)));
evalcond[14]=((((0.49999820135573)*x2078))+(((-1.0)*x2062))+(((-0.49999820135573)*x2083))+((new_r00*x2072))+(((0.866026442229025)*x2077)));
evalcond[15]=((((-1.0)*sj0))+(((0.49999820135573)*x2071))+((new_r01*x2072))+(((-0.49999820135573)*x2070))+(((0.866026442229025)*x2084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2085=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01)))),-1);
if(!x2085.valid){
continue;
}
CheckValue<IkReal> x2086 = IKatan2WithCheck(IkReal(((((-18750.015379994)*cj0))+(((-64951.9831671769)*sj0)))),IkReal(((((37499.810974959)*sj0))+(((10825.2588795883)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2086.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2085.value)))+(x2086.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2087=IKcos(j2);
IkReal x2088=IKsin(j2);
IkReal x2089=((1.0)*cj0);
IkReal x2090=((0.866026442229025)*cj0);
IkReal x2091=((0.49999820135573)*cj0);
IkReal x2092=((0.433013258970445)*sj0);
IkReal x2093=((0.866026442229025)*sj0);
IkReal x2094=((0.49999820135573)*sj0);
IkReal x2095=((0.75000087746404)*x2088);
IkReal x2096=(sj0*x2088);
IkReal x2097=(new_r01*x2087);
IkReal x2098=(new_r11*x2088);
IkReal x2099=((0.866026442229025)*x2088);
IkReal x2100=((0.250000205066586)*x2087);
IkReal x2101=((0.433010506600939)*x2088);
IkReal x2102=((0.433010506600939)*x2087);
IkReal x2103=((0.75000087746404)*x2087);
IkReal x2104=(new_r10*x2087);
IkReal x2105=(new_r10*x2088);
IkReal x2106=(new_r00*x2088);
IkReal x2107=(new_r01*x2088);
IkReal x2108=(cj0*x2088);
IkReal x2109=((0.433013258970445)*x2087);
IkReal x2110=(new_r00*x2087);
IkReal x2111=(new_r11*x2087);
evalcond[0]=(x2103+x2101);
evalcond[1]=((((-1.0)*x2095))+x2102);
evalcond[2]=((((-1.0)*x2090))+(((0.250000205066586)*sj0))+x2106+x2104);
evalcond[3]=((((-1.0)*x2093))+(((-0.250000205066586)*cj0))+x2111+x2107);
evalcond[4]=(x2091+x2092+x2110+(((-1.0)*x2105)));
evalcond[5]=(x2094+x2097+(((-0.433013258970445)*cj0))+(((-1.0)*x2098)));
evalcond[6]=((((-1.0)*new_r10*x2095))+((new_r10*x2102))+((new_r00*x2101))+((new_r00*x2103)));
evalcond[7]=((((-1.0)*new_r11*x2095))+(((0.75000087746404)*x2097))+((new_r11*x2102))+((new_r01*x2101)));
evalcond[8]=(((new_r10*x2100))+sj0+(((-0.433013258970445)*x2105))+(((0.250000205066586)*x2106))+((new_r00*x2109)));
evalcond[9]=(((x2087*x2092))+((x2087*x2091))+(((-1.0)*x2088*x2090))+(((0.250000205066586)*x2096))+new_r00);
evalcond[10]=(((x2087*x2094))+(((-1.0)*x2088*x2093))+(((-0.250000205066586)*x2108))+(((-1.0)*cj0*x2109))+new_r01);
evalcond[11]=((((-1.0)*x2088*x2092))+(((-1.0)*x2088*x2091))+(((-1.0)*x2087*x2090))+new_r10+((sj0*x2100)));
evalcond[12]=((((0.433013258970445)*x2108))+(((-1.0)*x2088*x2094))+(((-1.0)*x2087*x2093))+(((-1.0)*cj0*x2100))+new_r11);
evalcond[13]=(((new_r11*x2100))+(((-1.0)*x2089))+(((-0.433013258970445)*x2098))+(((0.433013258970445)*x2097))+(((0.250000205066586)*x2107)));
evalcond[14]=((((-1.0)*x2089))+((new_r00*x2099))+(((-0.49999820135573)*x2110))+(((0.866026442229025)*x2104))+(((0.49999820135573)*x2105)));
evalcond[15]=((((-1.0)*sj0))+(((-0.49999820135573)*x2097))+((new_r01*x2099))+(((0.866026442229025)*x2111))+(((0.49999820135573)*x2098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2112=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00)))),-1);
if(!x2112.valid){
continue;
}
CheckValue<IkReal> x2113 = IKatan2WithCheck(IkReal(((((18750.015379994)*sj0))+(((-64951.9831671769)*cj0)))),IkReal(((((-10825.2588795883)*sj0))+(((37499.810974959)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2113.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2112.value)))+(x2113.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2114=IKcos(j2);
IkReal x2115=IKsin(j2);
IkReal x2116=((1.0)*cj0);
IkReal x2117=((0.866026442229025)*cj0);
IkReal x2118=((0.49999820135573)*cj0);
IkReal x2119=((0.433013258970445)*sj0);
IkReal x2120=((0.866026442229025)*sj0);
IkReal x2121=((0.49999820135573)*sj0);
IkReal x2122=((0.75000087746404)*x2115);
IkReal x2123=(sj0*x2115);
IkReal x2124=(new_r01*x2114);
IkReal x2125=(new_r11*x2115);
IkReal x2126=((0.866026442229025)*x2115);
IkReal x2127=((0.250000205066586)*x2114);
IkReal x2128=((0.433010506600939)*x2115);
IkReal x2129=((0.433010506600939)*x2114);
IkReal x2130=((0.75000087746404)*x2114);
IkReal x2131=(new_r10*x2114);
IkReal x2132=(new_r10*x2115);
IkReal x2133=(new_r00*x2115);
IkReal x2134=(new_r01*x2115);
IkReal x2135=(cj0*x2115);
IkReal x2136=((0.433013258970445)*x2114);
IkReal x2137=(new_r00*x2114);
IkReal x2138=(new_r11*x2114);
evalcond[0]=(x2128+x2130);
evalcond[1]=(x2129+(((-1.0)*x2122)));
evalcond[2]=((((0.250000205066586)*sj0))+x2133+x2131+(((-1.0)*x2117)));
evalcond[3]=((((-0.250000205066586)*cj0))+x2134+x2138+(((-1.0)*x2120)));
evalcond[4]=(x2118+x2119+x2137+(((-1.0)*x2132)));
evalcond[5]=(x2121+x2124+(((-1.0)*x2125))+(((-0.433013258970445)*cj0)));
evalcond[6]=((((-1.0)*new_r10*x2122))+((new_r00*x2128))+((new_r00*x2130))+((new_r10*x2129)));
evalcond[7]=((((0.75000087746404)*x2124))+(((-1.0)*new_r11*x2122))+((new_r01*x2128))+((new_r11*x2129)));
evalcond[8]=((((-0.433013258970445)*x2132))+sj0+((new_r00*x2136))+(((0.250000205066586)*x2133))+((new_r10*x2127)));
evalcond[9]=((((0.250000205066586)*x2123))+new_r00+((x2114*x2119))+((x2114*x2118))+(((-1.0)*x2115*x2117)));
evalcond[10]=(((x2114*x2121))+(((-1.0)*x2115*x2120))+(((-0.250000205066586)*x2135))+(((-1.0)*cj0*x2136))+new_r01);
evalcond[11]=((((-1.0)*x2114*x2117))+((sj0*x2127))+new_r10+(((-1.0)*x2115*x2119))+(((-1.0)*x2115*x2118)));
evalcond[12]=((((0.433013258970445)*x2135))+(((-1.0)*x2114*x2120))+(((-1.0)*x2115*x2121))+new_r11+(((-1.0)*cj0*x2127)));
evalcond[13]=((((-0.433013258970445)*x2125))+(((0.433013258970445)*x2124))+(((-1.0)*x2116))+((new_r11*x2127))+(((0.250000205066586)*x2134)));
evalcond[14]=((((0.49999820135573)*x2132))+(((-0.49999820135573)*x2137))+((new_r00*x2126))+(((-1.0)*x2116))+(((0.866026442229025)*x2131)));
evalcond[15]=((((-1.0)*sj0))+(((-0.49999820135573)*x2124))+((new_r01*x2126))+(((0.866026442229025)*x2138))+(((0.49999820135573)*x2125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
j0array[0]=-3.14159140358624;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=1.25000355805094e-6;
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((1.08253441393799e-6)*(IKsin(j0))))+(((0.866025066047432)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=(new_r10+(((-1.73206161520519)*new_r00)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=(new_r11+(((-1.73206161520519)*new_r01)));
j2eval[1]=5624995940.50689;
j2eval[2]=sj0;
j2eval[3]=IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j2eval[0]=((((-1.0)*new_r00))+(((-1.73206161520519)*new_r10)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2139=(new_r01*new_r10);
IkReal x2140=(new_r00*new_r11);
j2eval[0]=(x2140+(((-1.0)*x2139)));
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))))+(IKabs(((((-1.33332787645226e+28)*new_r11))+(((4.61878500004103e+28)*new_r10))))));
j2eval[2]=IKsign(((((-5.33330713107669e+28)*x2139))+(((5.33330713107669e+28)*x2140))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2141=(new_r00*new_r01);
IkReal x2142=(new_r10*new_r11);
j2eval[0]=((((-1.0)*x2141))+(((-1.0)*x2142)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x2142))+(((-5.33330713107669e+28)*x2141))));
j2eval[2]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2143=new_r10*new_r10;
IkReal x2144=new_r01*new_r01;
j2eval[0]=((1.0)+(((-1.0)*x2144))+x2143);
j2eval[1]=IKsign(((5.33330713107669e+28)+(((-5.33330713107669e+28)*x2144))+(((5.33330713107669e+28)*x2143))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2145=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x2145.valid){
continue;
}
CheckValue<IkReal> x2146 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r00))+(((2.30939270191783e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r10))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2146.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2145.value)))+(x2146.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2147=IKsin(j2);
IkReal x2148=IKcos(j2);
IkReal x2149=((0.75000087746404)*x2147);
IkReal x2150=(new_r01*x2148);
IkReal x2151=(new_r11*x2147);
IkReal x2152=(new_r01*x2147);
IkReal x2153=((0.433010506600939)*x2147);
IkReal x2154=((0.433010506600939)*x2148);
IkReal x2155=(new_r10*x2148);
IkReal x2156=(new_r00*x2147);
IkReal x2157=((0.49999820135573)*x2148);
IkReal x2158=(new_r10*x2147);
IkReal x2159=(new_r11*x2148);
IkReal x2160=((0.75000087746404)*x2148);
IkReal x2161=(new_r00*x2148);
evalcond[0]=((0.250000205066586)+x2155+x2156);
evalcond[1]=((0.866026442229025)+x2152+x2159);
evalcond[2]=((0.433013258970445)+x2161+(((-1.0)*x2158)));
evalcond[3]=((-0.49999820135573)+x2150+(((-1.0)*x2151)));
evalcond[4]=((((-1.0)*x2153))+(((-1.0)*x2160)));
evalcond[5]=(x2149+(((-1.0)*x2154)));
evalcond[6]=((((0.250000205066586)*x2147))+new_r00+(((0.433013258970445)*x2148)));
evalcond[7]=((((0.866026442229025)*x2147))+(((-1.0)*x2157))+new_r01);
evalcond[8]=((((-0.433013258970445)*x2147))+(((0.250000205066586)*x2148))+new_r10);
evalcond[9]=((((0.49999820135573)*x2147))+(((0.866026442229025)*x2148))+new_r11);
evalcond[10]=((((0.250000205066586)*x2159))+(((0.250000205066586)*x2152))+(((-0.433013258970445)*x2151))+(((0.433013258970445)*x2150)));
evalcond[11]=((((-1.0)*new_r00*x2160))+(((-1.0)*new_r00*x2153))+(((-1.0)*new_r10*x2154))+((new_r10*x2149)));
evalcond[12]=((((-0.75000087746404)*x2150))+(((-0.433010506600939)*x2152))+(((-1.0)*new_r11*x2154))+((new_r11*x2149)));
evalcond[13]=(((new_r00*x2157))+(((-0.866026442229025)*x2155))+(((-0.866026442229025)*x2156))+(((-0.49999820135573)*x2158)));
evalcond[14]=((1.0)+(((0.250000205066586)*x2155))+(((0.250000205066586)*x2156))+(((0.433013258970445)*x2161))+(((-0.433013258970445)*x2158)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x2150))+(((-0.866026442229025)*x2159))+(((-0.866026442229025)*x2152))+(((-0.49999820135573)*x2151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r10*new_r11))+(((-5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x2162.valid){
continue;
}
CheckValue<IkReal> x2163 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2163.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2162.value)))+(x2163.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2164=IKsin(j2);
IkReal x2165=IKcos(j2);
IkReal x2166=((0.75000087746404)*x2164);
IkReal x2167=(new_r01*x2165);
IkReal x2168=(new_r11*x2164);
IkReal x2169=(new_r01*x2164);
IkReal x2170=((0.433010506600939)*x2164);
IkReal x2171=((0.433010506600939)*x2165);
IkReal x2172=(new_r10*x2165);
IkReal x2173=(new_r00*x2164);
IkReal x2174=((0.49999820135573)*x2165);
IkReal x2175=(new_r10*x2164);
IkReal x2176=(new_r11*x2165);
IkReal x2177=((0.75000087746404)*x2165);
IkReal x2178=(new_r00*x2165);
evalcond[0]=((0.250000205066586)+x2172+x2173);
evalcond[1]=((0.866026442229025)+x2176+x2169);
evalcond[2]=((0.433013258970445)+x2178+(((-1.0)*x2175)));
evalcond[3]=((-0.49999820135573)+x2167+(((-1.0)*x2168)));
evalcond[4]=((((-1.0)*x2170))+(((-1.0)*x2177)));
evalcond[5]=(x2166+(((-1.0)*x2171)));
evalcond[6]=((((0.433013258970445)*x2165))+(((0.250000205066586)*x2164))+new_r00);
evalcond[7]=((((0.866026442229025)*x2164))+new_r01+(((-1.0)*x2174)));
evalcond[8]=((((-0.433013258970445)*x2164))+(((0.250000205066586)*x2165))+new_r10);
evalcond[9]=((((0.49999820135573)*x2164))+(((0.866026442229025)*x2165))+new_r11);
evalcond[10]=((((0.433013258970445)*x2167))+(((0.250000205066586)*x2176))+(((0.250000205066586)*x2169))+(((-0.433013258970445)*x2168)));
evalcond[11]=((((-1.0)*new_r10*x2171))+(((-1.0)*new_r00*x2177))+(((-1.0)*new_r00*x2170))+((new_r10*x2166)));
evalcond[12]=((((-1.0)*new_r11*x2171))+(((-0.433010506600939)*x2169))+(((-0.75000087746404)*x2167))+((new_r11*x2166)));
evalcond[13]=((((-0.866026442229025)*x2173))+(((-0.866026442229025)*x2172))+(((-0.49999820135573)*x2175))+((new_r00*x2174)));
evalcond[14]=((1.0)+(((0.433013258970445)*x2178))+(((0.250000205066586)*x2173))+(((0.250000205066586)*x2172))+(((-0.433013258970445)*x2175)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x2167))+(((-0.866026442229025)*x2169))+(((-0.866026442229025)*x2176))+(((-0.49999820135573)*x2168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2179 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r11))+(((4.61878500004103e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2179.valid){
continue;
}
CheckValue<IkReal> x2180=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x2180.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2179.value)+(((1.5707963267949)*(x2180.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2181=IKsin(j2);
IkReal x2182=IKcos(j2);
IkReal x2183=((0.75000087746404)*x2181);
IkReal x2184=(new_r01*x2182);
IkReal x2185=(new_r11*x2181);
IkReal x2186=(new_r01*x2181);
IkReal x2187=((0.433010506600939)*x2181);
IkReal x2188=((0.433010506600939)*x2182);
IkReal x2189=(new_r10*x2182);
IkReal x2190=(new_r00*x2181);
IkReal x2191=((0.49999820135573)*x2182);
IkReal x2192=(new_r10*x2181);
IkReal x2193=(new_r11*x2182);
IkReal x2194=((0.75000087746404)*x2182);
IkReal x2195=(new_r00*x2182);
evalcond[0]=((0.250000205066586)+x2190+x2189);
evalcond[1]=((0.866026442229025)+x2193+x2186);
evalcond[2]=((0.433013258970445)+(((-1.0)*x2192))+x2195);
evalcond[3]=((-0.49999820135573)+x2184+(((-1.0)*x2185)));
evalcond[4]=((((-1.0)*x2187))+(((-1.0)*x2194)));
evalcond[5]=(x2183+(((-1.0)*x2188)));
evalcond[6]=((((0.250000205066586)*x2181))+(((0.433013258970445)*x2182))+new_r00);
evalcond[7]=((((0.866026442229025)*x2181))+(((-1.0)*x2191))+new_r01);
evalcond[8]=((((-0.433013258970445)*x2181))+(((0.250000205066586)*x2182))+new_r10);
evalcond[9]=((((0.866026442229025)*x2182))+(((0.49999820135573)*x2181))+new_r11);
evalcond[10]=((((0.250000205066586)*x2186))+(((0.250000205066586)*x2193))+(((-0.433013258970445)*x2185))+(((0.433013258970445)*x2184)));
evalcond[11]=((((-1.0)*new_r10*x2188))+((new_r10*x2183))+(((-1.0)*new_r00*x2194))+(((-1.0)*new_r00*x2187)));
evalcond[12]=((((-0.433010506600939)*x2186))+(((-1.0)*new_r11*x2188))+((new_r11*x2183))+(((-0.75000087746404)*x2184)));
evalcond[13]=(((new_r00*x2191))+(((-0.866026442229025)*x2189))+(((-0.866026442229025)*x2190))+(((-0.49999820135573)*x2192)));
evalcond[14]=((1.0)+(((0.250000205066586)*x2189))+(((0.250000205066586)*x2190))+(((-0.433013258970445)*x2192))+(((0.433013258970445)*x2195)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x2184))+(((-0.866026442229025)*x2186))+(((-0.866026442229025)*x2193))+(((-0.49999820135573)*x2185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2196=(new_r01*new_r10);
IkReal x2197=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x2196))+x2197);
j2eval[1]=IKsign(((((5.33330713107669e+28)*x2197))+(((-5.33330713107669e+28)*x2196))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2198=(new_r00*new_r01);
IkReal x2199=(new_r10*new_r11);
j2eval[0]=(x2198+x2199);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x2198))+(((5.33330713107669e+28)*x2199))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2200=new_r10*new_r10;
IkReal x2201=new_r01*new_r01;
j2eval[0]=((1.0)+(((-1.0)*x2201))+x2200);
j2eval[1]=IKsign(((5.33330713107669e+28)+(((5.33330713107669e+28)*x2200))+(((-5.33330713107669e+28)*x2201))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2202=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x2202.valid){
continue;
}
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r00))+(((-2.30939270191783e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r10))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2202.value)))+(x2203.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2204=IKsin(j2);
IkReal x2205=IKcos(j2);
IkReal x2206=((0.75000087746404)*x2204);
IkReal x2207=(new_r01*x2205);
IkReal x2208=(new_r11*x2204);
IkReal x2209=(new_r01*x2204);
IkReal x2210=((0.433010506600939)*x2204);
IkReal x2211=((0.433010506600939)*x2205);
IkReal x2212=(new_r10*x2205);
IkReal x2213=(new_r00*x2204);
IkReal x2214=((0.49999820135573)*x2205);
IkReal x2215=(new_r10*x2204);
IkReal x2216=(new_r11*x2205);
IkReal x2217=((0.75000087746404)*x2205);
IkReal x2218=(new_r00*x2205);
evalcond[0]=((-0.250000205066586)+x2213+x2212);
evalcond[1]=((-0.866026442229025)+x2209+x2216);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x2215))+x2218);
evalcond[3]=((0.49999820135573)+(((-1.0)*x2208))+x2207);
evalcond[4]=((((-1.0)*x2217))+(((-1.0)*x2210)));
evalcond[5]=(x2206+(((-1.0)*x2211)));
evalcond[6]=((((-0.250000205066586)*x2204))+new_r00+(((-0.433013258970445)*x2205)));
evalcond[7]=(x2214+(((-0.866026442229025)*x2204))+new_r01);
evalcond[8]=((((0.433013258970445)*x2204))+(((-0.250000205066586)*x2205))+new_r10);
evalcond[9]=((((-0.866026442229025)*x2205))+(((-0.49999820135573)*x2204))+new_r11);
evalcond[10]=((((0.433013258970445)*x2207))+(((0.250000205066586)*x2216))+(((0.250000205066586)*x2209))+(((-0.433013258970445)*x2208)));
evalcond[11]=((((-1.0)*new_r10*x2211))+((new_r10*x2206))+(((-1.0)*new_r00*x2210))+(((-1.0)*new_r00*x2217)));
evalcond[12]=((((-1.0)*new_r11*x2211))+((new_r11*x2206))+(((-0.75000087746404)*x2207))+(((-0.433010506600939)*x2209)));
evalcond[13]=(((new_r00*x2214))+(((-0.49999820135573)*x2215))+(((-0.866026442229025)*x2213))+(((-0.866026442229025)*x2212)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x2218))+(((0.250000205066586)*x2213))+(((0.250000205066586)*x2212))+(((-0.433013258970445)*x2215)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x2208))+(((-0.866026442229025)*x2216))+(((0.49999820135573)*x2207))+(((-0.866026442229025)*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2219=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x2219.valid){
continue;
}
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2219.value)))+(x2220.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2221=IKsin(j2);
IkReal x2222=IKcos(j2);
IkReal x2223=((0.75000087746404)*x2221);
IkReal x2224=(new_r01*x2222);
IkReal x2225=(new_r11*x2221);
IkReal x2226=(new_r01*x2221);
IkReal x2227=((0.433010506600939)*x2221);
IkReal x2228=((0.433010506600939)*x2222);
IkReal x2229=(new_r10*x2222);
IkReal x2230=(new_r00*x2221);
IkReal x2231=((0.49999820135573)*x2222);
IkReal x2232=(new_r10*x2221);
IkReal x2233=(new_r11*x2222);
IkReal x2234=((0.75000087746404)*x2222);
IkReal x2235=(new_r00*x2222);
evalcond[0]=((-0.250000205066586)+x2229+x2230);
evalcond[1]=((-0.866026442229025)+x2226+x2233);
evalcond[2]=((-0.433013258970445)+x2235+(((-1.0)*x2232)));
evalcond[3]=((0.49999820135573)+x2224+(((-1.0)*x2225)));
evalcond[4]=((((-1.0)*x2234))+(((-1.0)*x2227)));
evalcond[5]=(x2223+(((-1.0)*x2228)));
evalcond[6]=((((-0.433013258970445)*x2222))+(((-0.250000205066586)*x2221))+new_r00);
evalcond[7]=(x2231+(((-0.866026442229025)*x2221))+new_r01);
evalcond[8]=((((0.433013258970445)*x2221))+(((-0.250000205066586)*x2222))+new_r10);
evalcond[9]=((((-0.49999820135573)*x2221))+(((-0.866026442229025)*x2222))+new_r11);
evalcond[10]=((((0.433013258970445)*x2224))+(((-0.433013258970445)*x2225))+(((0.250000205066586)*x2233))+(((0.250000205066586)*x2226)));
evalcond[11]=((((-1.0)*new_r00*x2227))+(((-1.0)*new_r00*x2234))+(((-1.0)*new_r10*x2228))+((new_r10*x2223)));
evalcond[12]=((((-0.433010506600939)*x2226))+(((-0.75000087746404)*x2224))+(((-1.0)*new_r11*x2228))+((new_r11*x2223)));
evalcond[13]=((((-0.866026442229025)*x2230))+(((-0.866026442229025)*x2229))+((new_r00*x2231))+(((-0.49999820135573)*x2232)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x2235))+(((-0.433013258970445)*x2232))+(((0.250000205066586)*x2230))+(((0.250000205066586)*x2229)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x2233))+(((0.49999820135573)*x2224))+(((-0.866026442229025)*x2226))+(((-0.49999820135573)*x2225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2236=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x2236.valid){
continue;
}
CheckValue<IkReal> x2237 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2237.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2236.value)))+(x2237.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2238=IKsin(j2);
IkReal x2239=IKcos(j2);
IkReal x2240=((0.75000087746404)*x2238);
IkReal x2241=(new_r01*x2239);
IkReal x2242=(new_r11*x2238);
IkReal x2243=(new_r01*x2238);
IkReal x2244=((0.433010506600939)*x2238);
IkReal x2245=((0.433010506600939)*x2239);
IkReal x2246=(new_r10*x2239);
IkReal x2247=(new_r00*x2238);
IkReal x2248=((0.49999820135573)*x2239);
IkReal x2249=(new_r10*x2238);
IkReal x2250=(new_r11*x2239);
IkReal x2251=((0.75000087746404)*x2239);
IkReal x2252=(new_r00*x2239);
evalcond[0]=((-0.250000205066586)+x2246+x2247);
evalcond[1]=((-0.866026442229025)+x2243+x2250);
evalcond[2]=((-0.433013258970445)+x2252+(((-1.0)*x2249)));
evalcond[3]=((0.49999820135573)+x2241+(((-1.0)*x2242)));
evalcond[4]=((((-1.0)*x2251))+(((-1.0)*x2244)));
evalcond[5]=(x2240+(((-1.0)*x2245)));
evalcond[6]=((((-0.433013258970445)*x2239))+new_r00+(((-0.250000205066586)*x2238)));
evalcond[7]=(x2248+new_r01+(((-0.866026442229025)*x2238)));
evalcond[8]=((((0.433013258970445)*x2238))+new_r10+(((-0.250000205066586)*x2239)));
evalcond[9]=(new_r11+(((-0.866026442229025)*x2239))+(((-0.49999820135573)*x2238)));
evalcond[10]=((((0.250000205066586)*x2243))+(((0.250000205066586)*x2250))+(((0.433013258970445)*x2241))+(((-0.433013258970445)*x2242)));
evalcond[11]=(((new_r10*x2240))+(((-1.0)*new_r00*x2251))+(((-1.0)*new_r10*x2245))+(((-1.0)*new_r00*x2244)));
evalcond[12]=((((-0.75000087746404)*x2241))+((new_r11*x2240))+(((-0.433010506600939)*x2243))+(((-1.0)*new_r11*x2245)));
evalcond[13]=((((-0.866026442229025)*x2246))+(((-0.866026442229025)*x2247))+(((-0.49999820135573)*x2249))+((new_r00*x2248)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x2246))+(((0.250000205066586)*x2247))+(((0.433013258970445)*x2252))+(((-0.433013258970445)*x2249)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x2243))+(((0.49999820135573)*x2241))+(((-0.49999820135573)*x2242))+(((-0.866026442229025)*x2250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2253=(new_r01*new_r10);
IkReal x2254=(new_r00*new_r11);
j2eval[0]=(x2254+(((-1.0)*x2253)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x2254))+(((-5.33330713107669e+28)*x2253))));
j2eval[2]=((IKabs(((((1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))))+(IKabs(((((-1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2255=(new_r00*new_r01);
IkReal x2256=(new_r10*new_r11);
j2eval[0]=((((-1.0)*x2255))+(((-1.0)*x2256)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x2255))+(((-5.33330713107669e+28)*x2256))));
j2eval[2]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))))+(IKabs(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2257=new_r01*new_r01;
IkReal x2258=new_r10*new_r10;
j2eval[0]=((-1.0)+x2257+(((-1.0)*x2258)));
j2eval[1]=IKsign(((-5.33330713107669e+28)+(((5.33330713107669e+28)*x2257))+(((-5.33330713107669e+28)*x2258))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
CheckValue<IkReal> x2260=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*(new_r10*new_r10)))+(((-5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x2260.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2259.value)+(((1.5707963267949)*(x2260.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2261=IKsin(j2);
IkReal x2262=IKcos(j2);
IkReal x2263=((0.75000087746404)*x2261);
IkReal x2264=(new_r01*x2262);
IkReal x2265=(new_r11*x2261);
IkReal x2266=(new_r01*x2261);
IkReal x2267=((0.433010506600939)*x2261);
IkReal x2268=((0.433010506600939)*x2262);
IkReal x2269=(new_r10*x2262);
IkReal x2270=(new_r00*x2261);
IkReal x2271=((0.49999820135573)*x2262);
IkReal x2272=(new_r10*x2261);
IkReal x2273=(new_r11*x2262);
IkReal x2274=((0.75000087746404)*x2262);
IkReal x2275=(new_r00*x2262);
evalcond[0]=((0.866026442229025)+x2269+x2270);
evalcond[1]=((-0.250000205066586)+x2266+x2273);
evalcond[2]=((-0.49999820135573)+x2275+(((-1.0)*x2272)));
evalcond[3]=((-0.433013258970445)+x2264+(((-1.0)*x2265)));
evalcond[4]=((((-1.0)*x2274))+(((-1.0)*x2267)));
evalcond[5]=(x2263+(((-1.0)*x2268)));
evalcond[6]=((((-1.0)*x2271))+(((0.866026442229025)*x2261))+new_r00);
evalcond[7]=((((-0.433013258970445)*x2262))+(((-0.250000205066586)*x2261))+new_r01);
evalcond[8]=((((0.49999820135573)*x2261))+(((0.866026442229025)*x2262))+new_r10);
evalcond[9]=((((0.433013258970445)*x2261))+(((-0.250000205066586)*x2262))+new_r11);
evalcond[10]=((((0.250000205066586)*x2269))+(((0.433013258970445)*x2275))+(((-0.433013258970445)*x2272))+(((0.250000205066586)*x2270)));
evalcond[11]=((((-1.0)*new_r10*x2268))+((new_r10*x2263))+(((-1.0)*new_r00*x2267))+(((-1.0)*new_r00*x2274)));
evalcond[12]=((((-1.0)*new_r11*x2268))+((new_r11*x2263))+(((-0.75000087746404)*x2264))+(((-0.433010506600939)*x2266)));
evalcond[13]=((((-0.866026442229025)*x2273))+(((0.49999820135573)*x2264))+(((-0.866026442229025)*x2266))+(((-0.49999820135573)*x2265)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x2266))+(((0.433013258970445)*x2264))+(((-0.433013258970445)*x2265))+(((0.250000205066586)*x2273)));
evalcond[15]=((-1.0)+((new_r00*x2271))+(((-0.866026442229025)*x2270))+(((-0.866026442229025)*x2269))+(((-0.49999820135573)*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r10*new_r11))+(((-5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x2276.valid){
continue;
}
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2276.value)))+(x2277.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2278=IKsin(j2);
IkReal x2279=IKcos(j2);
IkReal x2280=((0.75000087746404)*x2278);
IkReal x2281=(new_r01*x2279);
IkReal x2282=(new_r11*x2278);
IkReal x2283=(new_r01*x2278);
IkReal x2284=((0.433010506600939)*x2278);
IkReal x2285=((0.433010506600939)*x2279);
IkReal x2286=(new_r10*x2279);
IkReal x2287=(new_r00*x2278);
IkReal x2288=((0.49999820135573)*x2279);
IkReal x2289=(new_r10*x2278);
IkReal x2290=(new_r11*x2279);
IkReal x2291=((0.75000087746404)*x2279);
IkReal x2292=(new_r00*x2279);
evalcond[0]=((0.866026442229025)+x2286+x2287);
evalcond[1]=((-0.250000205066586)+x2283+x2290);
evalcond[2]=((-0.49999820135573)+x2292+(((-1.0)*x2289)));
evalcond[3]=((-0.433013258970445)+x2281+(((-1.0)*x2282)));
evalcond[4]=((((-1.0)*x2284))+(((-1.0)*x2291)));
evalcond[5]=(x2280+(((-1.0)*x2285)));
evalcond[6]=((((-1.0)*x2288))+new_r00+(((0.866026442229025)*x2278)));
evalcond[7]=((((-0.433013258970445)*x2279))+(((-0.250000205066586)*x2278))+new_r01);
evalcond[8]=((((0.49999820135573)*x2278))+new_r10+(((0.866026442229025)*x2279)));
evalcond[9]=((((0.433013258970445)*x2278))+(((-0.250000205066586)*x2279))+new_r11);
evalcond[10]=((((-0.433013258970445)*x2289))+(((0.250000205066586)*x2286))+(((0.250000205066586)*x2287))+(((0.433013258970445)*x2292)));
evalcond[11]=((((-1.0)*new_r00*x2291))+(((-1.0)*new_r10*x2285))+((new_r10*x2280))+(((-1.0)*new_r00*x2284)));
evalcond[12]=((((-0.433010506600939)*x2283))+(((-1.0)*new_r11*x2285))+((new_r11*x2280))+(((-0.75000087746404)*x2281)));
evalcond[13]=((((-0.866026442229025)*x2290))+(((-0.49999820135573)*x2282))+(((-0.866026442229025)*x2283))+(((0.49999820135573)*x2281)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x2282))+(((0.250000205066586)*x2283))+(((0.250000205066586)*x2290))+(((0.433013258970445)*x2281)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x2289))+(((-0.866026442229025)*x2286))+(((-0.866026442229025)*x2287))+((new_r00*x2288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2293 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))),IkReal(((((1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2293.valid){
continue;
}
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x2294.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2293.value)+(((1.5707963267949)*(x2294.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2295=IKsin(j2);
IkReal x2296=IKcos(j2);
IkReal x2297=((0.75000087746404)*x2295);
IkReal x2298=(new_r01*x2296);
IkReal x2299=(new_r11*x2295);
IkReal x2300=(new_r01*x2295);
IkReal x2301=((0.433010506600939)*x2295);
IkReal x2302=((0.433010506600939)*x2296);
IkReal x2303=(new_r10*x2296);
IkReal x2304=(new_r00*x2295);
IkReal x2305=((0.49999820135573)*x2296);
IkReal x2306=(new_r10*x2295);
IkReal x2307=(new_r11*x2296);
IkReal x2308=((0.75000087746404)*x2296);
IkReal x2309=(new_r00*x2296);
evalcond[0]=((0.866026442229025)+x2303+x2304);
evalcond[1]=((-0.250000205066586)+x2300+x2307);
evalcond[2]=((-0.49999820135573)+(((-1.0)*x2306))+x2309);
evalcond[3]=((-0.433013258970445)+x2298+(((-1.0)*x2299)));
evalcond[4]=((((-1.0)*x2308))+(((-1.0)*x2301)));
evalcond[5]=(x2297+(((-1.0)*x2302)));
evalcond[6]=((((0.866026442229025)*x2295))+(((-1.0)*x2305))+new_r00);
evalcond[7]=((((-0.433013258970445)*x2296))+new_r01+(((-0.250000205066586)*x2295)));
evalcond[8]=((((0.866026442229025)*x2296))+(((0.49999820135573)*x2295))+new_r10);
evalcond[9]=((((0.433013258970445)*x2295))+new_r11+(((-0.250000205066586)*x2296)));
evalcond[10]=((((-0.433013258970445)*x2306))+(((0.433013258970445)*x2309))+(((0.250000205066586)*x2303))+(((0.250000205066586)*x2304)));
evalcond[11]=(((new_r10*x2297))+(((-1.0)*new_r10*x2302))+(((-1.0)*new_r00*x2301))+(((-1.0)*new_r00*x2308)));
evalcond[12]=(((new_r11*x2297))+(((-0.75000087746404)*x2298))+(((-1.0)*new_r11*x2302))+(((-0.433010506600939)*x2300)));
evalcond[13]=((((0.49999820135573)*x2298))+(((-0.866026442229025)*x2300))+(((-0.866026442229025)*x2307))+(((-0.49999820135573)*x2299)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x2299))+(((0.433013258970445)*x2298))+(((0.250000205066586)*x2300))+(((0.250000205066586)*x2307)));
evalcond[15]=((-1.0)+((new_r00*x2305))+(((-0.49999820135573)*x2306))+(((-0.866026442229025)*x2303))+(((-0.866026442229025)*x2304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2310=(new_r01*new_r10);
IkReal x2311=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x2310))+x2311);
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x2310))+(((5.33330713107669e+28)*x2311))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))))+(IKabs(((((4.61878500004103e+28)*new_r11))+(((1.33332787645226e+28)*new_r10))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2312=(new_r00*new_r01);
IkReal x2313=(new_r10*new_r11);
j2eval[0]=(x2312+x2313);
j2eval[1]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))))+(IKabs(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x2313))+(((5.33330713107669e+28)*x2312))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2314=new_r10*new_r10;
IkReal x2315=new_r01*new_r01;
j2eval[0]=((1.0)+(((-1.0)*x2315))+x2314);
j2eval[1]=IKsign(((5.33330713107669e+28)+(((-5.33330713107669e+28)*x2315))+(((5.33330713107669e+28)*x2314))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2316=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x2316.valid){
continue;
}
CheckValue<IkReal> x2317 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2317.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2316.value)))+(x2317.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2318=IKsin(j2);
IkReal x2319=IKcos(j2);
IkReal x2320=((0.75000087746404)*x2318);
IkReal x2321=(new_r01*x2319);
IkReal x2322=(new_r11*x2318);
IkReal x2323=(new_r01*x2318);
IkReal x2324=((0.433010506600939)*x2318);
IkReal x2325=((0.433010506600939)*x2319);
IkReal x2326=(new_r10*x2319);
IkReal x2327=(new_r00*x2318);
IkReal x2328=((0.49999820135573)*x2319);
IkReal x2329=(new_r10*x2318);
IkReal x2330=(new_r11*x2319);
IkReal x2331=((0.75000087746404)*x2319);
IkReal x2332=(new_r00*x2319);
evalcond[0]=((-0.866026442229025)+x2327+x2326);
evalcond[1]=((0.250000205066586)+x2330+x2323);
evalcond[2]=((0.49999820135573)+x2332+(((-1.0)*x2329)));
evalcond[3]=((0.433013258970445)+x2321+(((-1.0)*x2322)));
evalcond[4]=((((-1.0)*x2331))+(((-1.0)*x2324)));
evalcond[5]=(x2320+(((-1.0)*x2325)));
evalcond[6]=(x2328+(((-0.866026442229025)*x2318))+new_r00);
evalcond[7]=((((0.433013258970445)*x2319))+(((0.250000205066586)*x2318))+new_r01);
evalcond[8]=((((-0.866026442229025)*x2319))+new_r10+(((-0.49999820135573)*x2318)));
evalcond[9]=((((0.250000205066586)*x2319))+(((-0.433013258970445)*x2318))+new_r11);
evalcond[10]=((((-0.433013258970445)*x2329))+(((0.250000205066586)*x2327))+(((0.250000205066586)*x2326))+(((0.433013258970445)*x2332)));
evalcond[11]=((((-1.0)*new_r00*x2324))+(((-1.0)*new_r00*x2331))+((new_r10*x2320))+(((-1.0)*new_r10*x2325)));
evalcond[12]=(((new_r11*x2320))+(((-1.0)*new_r11*x2325))+(((-0.75000087746404)*x2321))+(((-0.433010506600939)*x2323)));
evalcond[13]=((((-0.866026442229025)*x2323))+(((-0.866026442229025)*x2330))+(((0.49999820135573)*x2321))+(((-0.49999820135573)*x2322)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x2322))+(((0.250000205066586)*x2330))+(((0.250000205066586)*x2323))+(((0.433013258970445)*x2321)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x2327))+(((-0.866026442229025)*x2326))+(((-0.49999820135573)*x2329))+((new_r00*x2328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2333=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x2333.valid){
continue;
}
CheckValue<IkReal> x2334 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2334.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2333.value)))+(x2334.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2335=IKsin(j2);
IkReal x2336=IKcos(j2);
IkReal x2337=((0.75000087746404)*x2335);
IkReal x2338=(new_r01*x2336);
IkReal x2339=(new_r11*x2335);
IkReal x2340=(new_r01*x2335);
IkReal x2341=((0.433010506600939)*x2335);
IkReal x2342=((0.433010506600939)*x2336);
IkReal x2343=(new_r10*x2336);
IkReal x2344=(new_r00*x2335);
IkReal x2345=((0.49999820135573)*x2336);
IkReal x2346=(new_r10*x2335);
IkReal x2347=(new_r11*x2336);
IkReal x2348=((0.75000087746404)*x2336);
IkReal x2349=(new_r00*x2336);
evalcond[0]=((-0.866026442229025)+x2344+x2343);
evalcond[1]=((0.250000205066586)+x2347+x2340);
evalcond[2]=((0.49999820135573)+x2349+(((-1.0)*x2346)));
evalcond[3]=((0.433013258970445)+x2338+(((-1.0)*x2339)));
evalcond[4]=((((-1.0)*x2341))+(((-1.0)*x2348)));
evalcond[5]=(x2337+(((-1.0)*x2342)));
evalcond[6]=(x2345+(((-0.866026442229025)*x2335))+new_r00);
evalcond[7]=((((0.250000205066586)*x2335))+(((0.433013258970445)*x2336))+new_r01);
evalcond[8]=((((-0.866026442229025)*x2336))+new_r10+(((-0.49999820135573)*x2335)));
evalcond[9]=((((0.250000205066586)*x2336))+(((-0.433013258970445)*x2335))+new_r11);
evalcond[10]=((((-0.433013258970445)*x2346))+(((0.250000205066586)*x2344))+(((0.250000205066586)*x2343))+(((0.433013258970445)*x2349)));
evalcond[11]=((((-1.0)*new_r00*x2348))+(((-1.0)*new_r00*x2341))+(((-1.0)*new_r10*x2342))+((new_r10*x2337)));
evalcond[12]=((((-1.0)*new_r11*x2342))+(((-0.75000087746404)*x2338))+(((-0.433010506600939)*x2340))+((new_r11*x2337)));
evalcond[13]=((((-0.866026442229025)*x2347))+(((-0.866026442229025)*x2340))+(((0.49999820135573)*x2338))+(((-0.49999820135573)*x2339)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x2339))+(((0.250000205066586)*x2347))+(((0.250000205066586)*x2340))+(((0.433013258970445)*x2338)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x2346))+(((-0.866026442229025)*x2344))+(((-0.866026442229025)*x2343))+((new_r00*x2345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2350 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*new_r11))+(((1.33332787645226e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2350.valid){
continue;
}
CheckValue<IkReal> x2351=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x2351.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2350.value)+(((1.5707963267949)*(x2351.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2352=IKsin(j2);
IkReal x2353=IKcos(j2);
IkReal x2354=((0.75000087746404)*x2352);
IkReal x2355=(new_r01*x2353);
IkReal x2356=(new_r11*x2352);
IkReal x2357=(new_r01*x2352);
IkReal x2358=((0.433010506600939)*x2352);
IkReal x2359=((0.433010506600939)*x2353);
IkReal x2360=(new_r10*x2353);
IkReal x2361=(new_r00*x2352);
IkReal x2362=((0.49999820135573)*x2353);
IkReal x2363=(new_r10*x2352);
IkReal x2364=(new_r11*x2353);
IkReal x2365=((0.75000087746404)*x2353);
IkReal x2366=(new_r00*x2353);
evalcond[0]=((-0.866026442229025)+x2361+x2360);
evalcond[1]=((0.250000205066586)+x2364+x2357);
evalcond[2]=((0.49999820135573)+x2366+(((-1.0)*x2363)));
evalcond[3]=((0.433013258970445)+x2355+(((-1.0)*x2356)));
evalcond[4]=((((-1.0)*x2365))+(((-1.0)*x2358)));
evalcond[5]=(x2354+(((-1.0)*x2359)));
evalcond[6]=((((-0.866026442229025)*x2352))+x2362+new_r00);
evalcond[7]=((((0.250000205066586)*x2352))+(((0.433013258970445)*x2353))+new_r01);
evalcond[8]=((((-0.866026442229025)*x2353))+new_r10+(((-0.49999820135573)*x2352)));
evalcond[9]=((((0.250000205066586)*x2353))+new_r11+(((-0.433013258970445)*x2352)));
evalcond[10]=((((0.250000205066586)*x2361))+(((0.250000205066586)*x2360))+(((-0.433013258970445)*x2363))+(((0.433013258970445)*x2366)));
evalcond[11]=((((-1.0)*new_r00*x2358))+(((-1.0)*new_r10*x2359))+(((-1.0)*new_r00*x2365))+((new_r10*x2354)));
evalcond[12]=((((-1.0)*new_r11*x2359))+(((-0.433010506600939)*x2357))+((new_r11*x2354))+(((-0.75000087746404)*x2355)));
evalcond[13]=((((-0.866026442229025)*x2357))+(((-0.866026442229025)*x2364))+(((0.49999820135573)*x2355))+(((-0.49999820135573)*x2356)));
evalcond[14]=((1.0)+(((0.250000205066586)*x2364))+(((-0.433013258970445)*x2356))+(((0.250000205066586)*x2357))+(((0.433013258970445)*x2355)));
evalcond[15]=((1.0)+((new_r00*x2362))+(((-0.49999820135573)*x2363))+(((-0.866026442229025)*x2361))+(((-0.866026442229025)*x2360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2367 = IKatan2WithCheck(IkReal(((((10825.2588795883)*sj0))+(((37499.810974959)*cj0)))),IkReal(((((64951.9831671769)*cj0))+(((18750.015379994)*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2367.valid){
continue;
}
CheckValue<IkReal> x2368=IKPowWithIntegerCheck(IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10)))),-1);
if(!x2368.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2367.value)+(((1.5707963267949)*(x2368.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2369=IKsin(j2);
IkReal x2370=IKcos(j2);
IkReal x2371=((1.0)*cj0);
IkReal x2372=((0.866026442229025)*cj0);
IkReal x2373=((0.49999820135573)*cj0);
IkReal x2374=((0.433013258970445)*sj0);
IkReal x2375=((0.866026442229025)*sj0);
IkReal x2376=((0.49999820135573)*sj0);
IkReal x2377=((0.75000087746404)*x2369);
IkReal x2378=(sj0*x2369);
IkReal x2379=(new_r01*x2370);
IkReal x2380=(new_r11*x2369);
IkReal x2381=((0.866026442229025)*x2369);
IkReal x2382=((0.250000205066586)*x2370);
IkReal x2383=((0.433010506600939)*x2369);
IkReal x2384=((0.433010506600939)*x2370);
IkReal x2385=((0.75000087746404)*x2370);
IkReal x2386=(new_r10*x2370);
IkReal x2387=(new_r10*x2369);
IkReal x2388=(new_r00*x2369);
IkReal x2389=(new_r01*x2369);
IkReal x2390=(cj0*x2369);
IkReal x2391=((0.433013258970445)*x2370);
IkReal x2392=(new_r00*x2370);
IkReal x2393=(new_r11*x2370);
evalcond[0]=((((-1.0)*x2383))+(((-1.0)*x2385)));
evalcond[1]=(x2377+(((-1.0)*x2384)));
evalcond[2]=(x2386+x2388+x2372+(((0.250000205066586)*sj0)));
evalcond[3]=((((-0.250000205066586)*cj0))+x2393+x2389+x2375);
evalcond[4]=(x2392+x2374+(((-1.0)*x2373))+(((-1.0)*x2387)));
evalcond[5]=(x2379+(((-1.0)*x2376))+(((-1.0)*x2380))+(((-0.433013258970445)*cj0)));
evalcond[6]=((((-1.0)*new_r10*x2384))+((new_r10*x2377))+(((-1.0)*new_r00*x2385))+(((-1.0)*new_r00*x2383)));
evalcond[7]=((((-1.0)*new_r11*x2384))+(((-0.75000087746404)*x2379))+((new_r11*x2377))+(((-1.0)*new_r01*x2383)));
evalcond[8]=(((new_r10*x2382))+sj0+(((0.250000205066586)*x2388))+((new_r00*x2391))+(((-0.433013258970445)*x2387)));
evalcond[9]=((((0.250000205066586)*x2378))+((x2370*x2374))+(((-1.0)*x2370*x2373))+new_r00+((x2369*x2372)));
evalcond[10]=((((-0.250000205066586)*x2390))+(((-1.0)*cj0*x2391))+(((-1.0)*x2370*x2376))+new_r01+((x2369*x2375)));
evalcond[11]=(((x2370*x2372))+(((-1.0)*x2369*x2374))+new_r10+((sj0*x2382))+((x2369*x2373)));
evalcond[12]=(((x2370*x2375))+(((0.433013258970445)*x2390))+(((-1.0)*cj0*x2382))+new_r11+((x2369*x2376)));
evalcond[13]=(((new_r11*x2382))+(((-1.0)*x2371))+(((0.250000205066586)*x2389))+(((0.433013258970445)*x2379))+(((-0.433013258970445)*x2380)));
evalcond[14]=((((-1.0)*x2371))+(((-0.49999820135573)*x2387))+(((-0.866026442229025)*x2386))+(((-1.0)*new_r00*x2381))+(((0.49999820135573)*x2392)));
evalcond[15]=((((-1.0)*sj0))+(((-0.49999820135573)*x2380))+(((-0.866026442229025)*x2393))+(((0.49999820135573)*x2379))+(((-1.0)*new_r01*x2381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2394=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01)))),-1);
if(!x2394.valid){
continue;
}
CheckValue<IkReal> x2395 = IKatan2WithCheck(IkReal(((((-18750.015379994)*cj0))+(((64951.9831671769)*sj0)))),IkReal(((((-37499.810974959)*sj0))+(((10825.2588795883)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2395.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2394.value)))+(x2395.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2396=IKsin(j2);
IkReal x2397=IKcos(j2);
IkReal x2398=((1.0)*cj0);
IkReal x2399=((0.866026442229025)*cj0);
IkReal x2400=((0.49999820135573)*cj0);
IkReal x2401=((0.433013258970445)*sj0);
IkReal x2402=((0.866026442229025)*sj0);
IkReal x2403=((0.49999820135573)*sj0);
IkReal x2404=((0.75000087746404)*x2396);
IkReal x2405=(sj0*x2396);
IkReal x2406=(new_r01*x2397);
IkReal x2407=(new_r11*x2396);
IkReal x2408=((0.866026442229025)*x2396);
IkReal x2409=((0.250000205066586)*x2397);
IkReal x2410=((0.433010506600939)*x2396);
IkReal x2411=((0.433010506600939)*x2397);
IkReal x2412=((0.75000087746404)*x2397);
IkReal x2413=(new_r10*x2397);
IkReal x2414=(new_r10*x2396);
IkReal x2415=(new_r00*x2396);
IkReal x2416=(new_r01*x2396);
IkReal x2417=(cj0*x2396);
IkReal x2418=((0.433013258970445)*x2397);
IkReal x2419=(new_r00*x2397);
IkReal x2420=(new_r11*x2397);
evalcond[0]=((((-1.0)*x2412))+(((-1.0)*x2410)));
evalcond[1]=(x2404+(((-1.0)*x2411)));
evalcond[2]=(x2413+x2415+x2399+(((0.250000205066586)*sj0)));
evalcond[3]=((((-0.250000205066586)*cj0))+x2402+x2416+x2420);
evalcond[4]=(x2401+x2419+(((-1.0)*x2400))+(((-1.0)*x2414)));
evalcond[5]=((((-1.0)*x2407))+x2406+(((-1.0)*x2403))+(((-0.433013258970445)*cj0)));
evalcond[6]=((((-1.0)*new_r10*x2411))+(((-1.0)*new_r00*x2412))+(((-1.0)*new_r00*x2410))+((new_r10*x2404)));
evalcond[7]=((((-1.0)*new_r01*x2410))+(((-1.0)*new_r11*x2411))+(((-0.75000087746404)*x2406))+((new_r11*x2404)));
evalcond[8]=(sj0+(((-0.433013258970445)*x2414))+(((0.250000205066586)*x2415))+((new_r00*x2418))+((new_r10*x2409)));
evalcond[9]=((((-1.0)*x2397*x2400))+(((0.250000205066586)*x2405))+((x2397*x2401))+((x2396*x2399))+new_r00);
evalcond[10]=((((-1.0)*cj0*x2418))+(((-1.0)*x2397*x2403))+(((-0.250000205066586)*x2417))+((x2396*x2402))+new_r01);
evalcond[11]=((((-1.0)*x2396*x2401))+((x2396*x2400))+((x2397*x2399))+new_r10+((sj0*x2409)));
evalcond[12]=((((0.433013258970445)*x2417))+((x2397*x2402))+((x2396*x2403))+new_r11+(((-1.0)*cj0*x2409)));
evalcond[13]=((((-0.433013258970445)*x2407))+(((0.433013258970445)*x2406))+(((0.250000205066586)*x2416))+(((-1.0)*x2398))+((new_r11*x2409)));
evalcond[14]=((((0.49999820135573)*x2419))+(((-1.0)*x2398))+(((-0.49999820135573)*x2414))+(((-0.866026442229025)*x2413))+(((-1.0)*new_r00*x2408)));
evalcond[15]=((((-0.866026442229025)*x2420))+(((-1.0)*new_r01*x2408))+(((-1.0)*sj0))+(((-0.49999820135573)*x2407))+(((0.49999820135573)*x2406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x2421 = IKatan2WithCheck(IkReal(((((64951.9831671769)*cj0))+(((18750.015379994)*sj0)))),IkReal(((((-37499.810974959)*cj0))+(((-10825.2588795883)*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2421.valid){
continue;
}
CheckValue<IkReal> x2422=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00)))),-1);
if(!x2422.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2421.value)+(((1.5707963267949)*(x2422.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x2423=IKsin(j2);
IkReal x2424=IKcos(j2);
IkReal x2425=((1.0)*cj0);
IkReal x2426=((0.866026442229025)*cj0);
IkReal x2427=((0.49999820135573)*cj0);
IkReal x2428=((0.433013258970445)*sj0);
IkReal x2429=((0.866026442229025)*sj0);
IkReal x2430=((0.49999820135573)*sj0);
IkReal x2431=((0.75000087746404)*x2423);
IkReal x2432=(sj0*x2423);
IkReal x2433=(new_r01*x2424);
IkReal x2434=(new_r11*x2423);
IkReal x2435=((0.866026442229025)*x2423);
IkReal x2436=((0.250000205066586)*x2424);
IkReal x2437=((0.433010506600939)*x2423);
IkReal x2438=((0.433010506600939)*x2424);
IkReal x2439=((0.75000087746404)*x2424);
IkReal x2440=(new_r10*x2424);
IkReal x2441=(new_r10*x2423);
IkReal x2442=(new_r00*x2423);
IkReal x2443=(new_r01*x2423);
IkReal x2444=(cj0*x2423);
IkReal x2445=((0.433013258970445)*x2424);
IkReal x2446=(new_r00*x2424);
IkReal x2447=(new_r11*x2424);
evalcond[0]=((((-1.0)*x2439))+(((-1.0)*x2437)));
evalcond[1]=(x2431+(((-1.0)*x2438)));
evalcond[2]=(x2442+x2440+x2426+(((0.250000205066586)*sj0)));
evalcond[3]=((((-0.250000205066586)*cj0))+x2443+x2447+x2429);
evalcond[4]=(x2446+x2428+(((-1.0)*x2441))+(((-1.0)*x2427)));
evalcond[5]=((((-1.0)*x2434))+x2433+(((-1.0)*x2430))+(((-0.433013258970445)*cj0)));
evalcond[6]=((((-1.0)*new_r10*x2438))+((new_r10*x2431))+(((-1.0)*new_r00*x2437))+(((-1.0)*new_r00*x2439)));
evalcond[7]=((((-0.75000087746404)*x2433))+(((-1.0)*new_r11*x2438))+((new_r11*x2431))+(((-1.0)*new_r01*x2437)));
evalcond[8]=(sj0+(((-0.433013258970445)*x2441))+(((0.250000205066586)*x2442))+((new_r00*x2445))+((new_r10*x2436)));
evalcond[9]=(((x2423*x2426))+(((-1.0)*x2424*x2427))+(((0.250000205066586)*x2432))+((x2424*x2428))+new_r00);
evalcond[10]=(((x2423*x2429))+(((-0.250000205066586)*x2444))+(((-1.0)*cj0*x2445))+(((-1.0)*x2424*x2430))+new_r01);
evalcond[11]=((((-1.0)*x2423*x2428))+((x2423*x2427))+((x2424*x2426))+new_r10+((sj0*x2436)));
evalcond[12]=((((-1.0)*cj0*x2436))+(((0.433013258970445)*x2444))+((x2424*x2429))+((x2423*x2430))+new_r11);
evalcond[13]=((((-0.433013258970445)*x2434))+(((0.433013258970445)*x2433))+(((-1.0)*x2425))+(((0.250000205066586)*x2443))+((new_r11*x2436)));
evalcond[14]=((((-0.866026442229025)*x2440))+(((0.49999820135573)*x2446))+(((-1.0)*x2425))+(((-0.49999820135573)*x2441))+(((-1.0)*new_r00*x2435)));
evalcond[15]=((((-1.0)*sj0))+(((-0.866026442229025)*x2447))+(((-0.49999820135573)*x2434))+(((0.49999820135573)*x2433))+(((-1.0)*new_r01*x2435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x2448=(new_r10*sj1);
IkReal x2449=(cj1*new_r00);
IkReal x2450=(new_r00*sj1);
IkReal x2451=(cj1*new_r10);
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal(((((-0.866026442229025)*x2451))+(((0.49999820135573)*x2449))+(((0.75000087746404)*x2450))+(((0.433010506600939)*x2448)))),IkReal(((((-0.866026442229025)*x2449))+(((-0.75000087746404)*x2448))+(((0.433010506600939)*x2450))+(((-0.49999820135573)*x2451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
IkReal x2452=x2453.value;
j2array[0]=((-1.0)*x2452);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x2452)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x2454=IKcos(j2);
IkReal x2455=IKsin(j2);
IkReal x2456=((0.433010506600939)*sj1);
IkReal x2457=((0.866026442229025)*cj1);
IkReal x2458=((0.75000087746404)*sj1);
IkReal x2459=((0.49999820135573)*cj1);
IkReal x2460=(new_r11*x2454);
IkReal x2461=(new_r01*x2455);
IkReal x2462=(new_r11*x2455);
IkReal x2463=(x2454*x2459);
evalcond[0]=(x2463+((x2454*x2458))+((x2455*x2456))+(((-1.0)*x2455*x2457)));
evalcond[1]=((((-1.0)*x2454*x2457))+((x2454*x2456))+(((-1.0)*x2455*x2458))+(((-1.0)*x2455*x2459)));
evalcond[2]=((((-1.0)*x2457*x2460))+(((-1.0)*x2457*x2461))+((new_r01*x2463))+((x2456*x2461))+((x2456*x2460))+(((-1.0)*x2459*x2462))+(((-1.0)*x2458*x2462))+((new_r01*x2454*x2458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=(cj1+(((1.50000715088661)*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=((1.00000433017849)+(((-1.0)*(cj1*cj1)))+(((-2.00002336335164)*cj1*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.588000403282025)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-0.55469837;
cj1=0.83205151636979;
j1=-0.5880004;
j0eval[0]=4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-0.55469837;
cj1=0.83205151636979;
j1=-0.5880004;
j0eval[0]=-6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2464=(cj2*new_r10);
IkReal x2465=(new_r00*sj2);
if( IKabs(((((159539204.583919)*x2464))+(((159539204.583919)*x2465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-332106811.287032)*x2464))+(((-332106811.287032)*x2465)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x2464))+(((159539204.583919)*x2465))))+IKsqr(((((-332106811.287032)*x2464))+(((-332106811.287032)*x2465))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x2464))+(((159539204.583919)*x2465))), ((((-332106811.287032)*x2464))+(((-332106811.287032)*x2465))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2466=IKcos(j0);
IkReal x2467=IKsin(j0);
IkReal x2468=(cj2*new_r01);
IkReal x2469=(new_r01*sj2);
IkReal x2470=((0.901387554667582)*sj2);
IkReal x2471=(cj2*new_r00);
IkReal x2472=((0.433013258970445)*sj2);
IkReal x2473=((0.250000205066586)*cj2);
IkReal x2474=(new_r00*sj2);
IkReal x2475=((1.0)*sj2);
IkReal x2476=(cj2*new_r10);
IkReal x2477=(cj2*new_r11);
IkReal x2478=((1.0)*x2466);
IkReal x2479=((0.120096407259978)*x2467);
IkReal x2480=(cj2*x2466);
IkReal x2481=(sj2*x2466);
IkReal x2482=(cj2*x2467);
evalcond[0]=((((-0.41602564443501)*x2466))+(((-0.866025066047432)*x2467)));
evalcond[1]=((((-0.41602564443501)*x2467))+(((0.866025066047432)*x2466)));
evalcond[2]=(x2476+x2474+(((0.250000205066586)*x2467))+(((0.120096407259978)*x2466)));
evalcond[3]=(x2469+x2477+x2479+(((-0.250000205066586)*x2466)));
evalcond[4]=(x2471+(((0.433013258970445)*x2467))+(((-0.901387554667582)*x2466))+(((-1.0)*new_r10*x2475)));
evalcond[5]=(x2468+(((-0.901387554667582)*x2467))+(((-1.0)*new_r11*x2475))+(((-0.433013258970445)*x2466)));
evalcond[6]=(x2467+(((0.433013258970445)*x2471))+(((-1.0)*new_r10*x2472))+(((0.250000205066586)*x2474))+((new_r10*x2473)));
evalcond[7]=((((0.433013258970445)*x2468))+(((-1.0)*new_r11*x2472))+(((-1.0)*x2478))+((new_r11*x2473))+(((0.250000205066586)*x2469)));
evalcond[8]=((((0.120096407259978)*x2481))+(((0.433013258970445)*x2482))+(((-0.901387554667582)*x2480))+new_r00+(((0.250000205066586)*sj2*x2467)));
evalcond[9]=((((-0.433013258970445)*x2480))+(((-0.250000205066586)*x2481))+(((-0.901387554667582)*x2482))+((sj2*x2479))+new_r01);
evalcond[10]=((((-1.0)*x2467*x2472))+(((0.120096407259978)*x2480))+((x2467*x2473))+new_r10+((x2466*x2470)));
evalcond[11]=(((cj2*x2479))+((x2467*x2470))+(((-1.0)*x2466*x2473))+new_r11+((x2466*x2472)));
evalcond[12]=((((-0.120096407259978)*x2476))+(((-0.120096407259978)*x2474))+(((-1.0)*new_r10*x2470))+(((-1.0)*x2478))+(((0.901387554667582)*x2471)));
evalcond[13]=((((-0.120096407259978)*x2477))+(((-0.120096407259978)*x2469))+(((-1.0)*x2467))+(((-1.0)*new_r11*x2470))+(((0.901387554667582)*x2468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2483=(new_r01*sj2);
IkReal x2484=(cj2*new_r11);
if( IKabs(((((-1.56124975848881)*x2483))+(((-1.56124975848881)*x2484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x2483))+(((3.2499953868181)*x2484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56124975848881)*x2483))+(((-1.56124975848881)*x2484))))+IKsqr(((((3.2499953868181)*x2483))+(((3.2499953868181)*x2484))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56124975848881)*x2483))+(((-1.56124975848881)*x2484))), ((((3.2499953868181)*x2483))+(((3.2499953868181)*x2484))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2485=IKcos(j0);
IkReal x2486=IKsin(j0);
IkReal x2487=(cj2*new_r01);
IkReal x2488=(new_r01*sj2);
IkReal x2489=((0.901387554667582)*sj2);
IkReal x2490=(cj2*new_r00);
IkReal x2491=((0.433013258970445)*sj2);
IkReal x2492=((0.250000205066586)*cj2);
IkReal x2493=(new_r00*sj2);
IkReal x2494=((1.0)*sj2);
IkReal x2495=(cj2*new_r10);
IkReal x2496=(cj2*new_r11);
IkReal x2497=((1.0)*x2485);
IkReal x2498=((0.120096407259978)*x2486);
IkReal x2499=(cj2*x2485);
IkReal x2500=(sj2*x2485);
IkReal x2501=(cj2*x2486);
evalcond[0]=((((-0.866025066047432)*x2486))+(((-0.41602564443501)*x2485)));
evalcond[1]=((((-0.41602564443501)*x2486))+(((0.866025066047432)*x2485)));
evalcond[2]=(x2493+x2495+(((0.120096407259978)*x2485))+(((0.250000205066586)*x2486)));
evalcond[3]=(x2488+x2498+x2496+(((-0.250000205066586)*x2485)));
evalcond[4]=(x2490+(((0.433013258970445)*x2486))+(((-0.901387554667582)*x2485))+(((-1.0)*new_r10*x2494)));
evalcond[5]=(x2487+(((-0.433013258970445)*x2485))+(((-1.0)*new_r11*x2494))+(((-0.901387554667582)*x2486)));
evalcond[6]=(x2486+(((0.433013258970445)*x2490))+(((-1.0)*new_r10*x2491))+((new_r10*x2492))+(((0.250000205066586)*x2493)));
evalcond[7]=((((-1.0)*x2497))+(((0.433013258970445)*x2487))+(((-1.0)*new_r11*x2491))+((new_r11*x2492))+(((0.250000205066586)*x2488)));
evalcond[8]=((((0.120096407259978)*x2500))+(((0.433013258970445)*x2501))+(((0.250000205066586)*sj2*x2486))+(((-0.901387554667582)*x2499))+new_r00);
evalcond[9]=(((sj2*x2498))+(((-0.433013258970445)*x2499))+(((-0.250000205066586)*x2500))+(((-0.901387554667582)*x2501))+new_r01);
evalcond[10]=((((0.120096407259978)*x2499))+((x2485*x2489))+(((-1.0)*x2486*x2491))+new_r10+((x2486*x2492)));
evalcond[11]=(((x2485*x2491))+((cj2*x2498))+(((-1.0)*x2485*x2492))+((x2486*x2489))+new_r11);
evalcond[12]=((((0.901387554667582)*x2490))+(((-1.0)*x2497))+(((-1.0)*new_r10*x2489))+(((-0.120096407259978)*x2493))+(((-0.120096407259978)*x2495)));
evalcond[13]=((((0.901387554667582)*x2487))+(((-1.0)*x2486))+(((-1.0)*new_r11*x2489))+(((-0.120096407259978)*x2488))+(((-0.120096407259978)*x2496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.55359225030777)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2502=(cj2*new_r10);
IkReal x2503=(new_r00*sj2);
if( IKabs(((((159539204.583919)*x2502))+(((159539204.583919)*x2503)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((332106811.287032)*x2503))+(((332106811.287032)*x2502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x2502))+(((159539204.583919)*x2503))))+IKsqr(((((332106811.287032)*x2503))+(((332106811.287032)*x2502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x2502))+(((159539204.583919)*x2503))), ((((332106811.287032)*x2503))+(((332106811.287032)*x2502))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2504=IKcos(j0);
IkReal x2505=IKsin(j0);
IkReal x2506=(cj2*new_r01);
IkReal x2507=(new_r01*sj2);
IkReal x2508=((0.901387554667582)*sj2);
IkReal x2509=(cj2*new_r00);
IkReal x2510=((0.433013258970445)*sj2);
IkReal x2511=((0.250000205066586)*cj2);
IkReal x2512=(new_r00*sj2);
IkReal x2513=((1.0)*sj2);
IkReal x2514=(cj2*new_r10);
IkReal x2515=(cj2*new_r11);
IkReal x2516=((1.0)*x2504);
IkReal x2517=((0.120096407259978)*x2505);
IkReal x2518=(cj2*x2504);
IkReal x2519=(sj2*x2504);
IkReal x2520=(cj2*x2505);
evalcond[0]=((((-0.866025066047432)*x2505))+(((0.41602564443501)*x2504)));
evalcond[1]=((((0.866025066047432)*x2504))+(((0.41602564443501)*x2505)));
evalcond[2]=(x2514+x2512+(((0.250000205066586)*x2505))+(((-0.120096407259978)*x2504)));
evalcond[3]=(x2515+x2507+(((-1.0)*x2517))+(((-0.250000205066586)*x2504)));
evalcond[4]=(x2509+(((0.433013258970445)*x2505))+(((0.901387554667582)*x2504))+(((-1.0)*new_r10*x2513)));
evalcond[5]=(x2506+(((0.901387554667582)*x2505))+(((-1.0)*new_r11*x2513))+(((-0.433013258970445)*x2504)));
evalcond[6]=(x2505+(((0.433013258970445)*x2509))+(((0.250000205066586)*x2512))+((new_r10*x2511))+(((-1.0)*new_r10*x2510)));
evalcond[7]=((((-1.0)*x2516))+(((0.433013258970445)*x2506))+((new_r11*x2511))+(((-1.0)*new_r11*x2510))+(((0.250000205066586)*x2507)));
evalcond[8]=((((0.250000205066586)*sj2*x2505))+(((0.901387554667582)*x2518))+(((-0.120096407259978)*x2519))+(((0.433013258970445)*x2520))+new_r00);
evalcond[9]=((((-1.0)*sj2*x2517))+(((-0.433013258970445)*x2518))+(((0.901387554667582)*x2520))+(((-0.250000205066586)*x2519))+new_r01);
evalcond[10]=(((x2505*x2511))+(((-1.0)*x2504*x2508))+(((-0.120096407259978)*x2518))+(((-1.0)*x2505*x2510))+new_r10);
evalcond[11]=(((x2504*x2510))+(((-1.0)*cj2*x2517))+(((-1.0)*x2504*x2511))+new_r11+(((-1.0)*x2505*x2508)));
evalcond[12]=((((-1.0)*x2516))+((new_r10*x2508))+(((-0.901387554667582)*x2509))+(((0.120096407259978)*x2512))+(((0.120096407259978)*x2514)));
evalcond[13]=((((0.120096407259978)*x2507))+((new_r11*x2508))+(((-1.0)*x2505))+(((-0.901387554667582)*x2506))+(((0.120096407259978)*x2515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2521=(new_r01*sj2);
IkReal x2522=(cj2*new_r11);
if( IKabs(((((1.56124975848881)*x2522))+(((1.56124975848881)*x2521)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x2522))+(((3.2499953868181)*x2521)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.56124975848881)*x2522))+(((1.56124975848881)*x2521))))+IKsqr(((((3.2499953868181)*x2522))+(((3.2499953868181)*x2521))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.56124975848881)*x2522))+(((1.56124975848881)*x2521))), ((((3.2499953868181)*x2522))+(((3.2499953868181)*x2521))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2523=IKcos(j0);
IkReal x2524=IKsin(j0);
IkReal x2525=(cj2*new_r01);
IkReal x2526=(new_r01*sj2);
IkReal x2527=((0.901387554667582)*sj2);
IkReal x2528=(cj2*new_r00);
IkReal x2529=((0.433013258970445)*sj2);
IkReal x2530=((0.250000205066586)*cj2);
IkReal x2531=(new_r00*sj2);
IkReal x2532=((1.0)*sj2);
IkReal x2533=(cj2*new_r10);
IkReal x2534=(cj2*new_r11);
IkReal x2535=((1.0)*x2523);
IkReal x2536=((0.120096407259978)*x2524);
IkReal x2537=(cj2*x2523);
IkReal x2538=(sj2*x2523);
IkReal x2539=(cj2*x2524);
evalcond[0]=((((0.41602564443501)*x2523))+(((-0.866025066047432)*x2524)));
evalcond[1]=((((0.41602564443501)*x2524))+(((0.866025066047432)*x2523)));
evalcond[2]=(x2533+x2531+(((0.250000205066586)*x2524))+(((-0.120096407259978)*x2523)));
evalcond[3]=(x2526+x2534+(((-1.0)*x2536))+(((-0.250000205066586)*x2523)));
evalcond[4]=(x2528+(((-1.0)*new_r10*x2532))+(((0.901387554667582)*x2523))+(((0.433013258970445)*x2524)));
evalcond[5]=(x2525+(((0.901387554667582)*x2524))+(((-1.0)*new_r11*x2532))+(((-0.433013258970445)*x2523)));
evalcond[6]=(x2524+((new_r10*x2530))+(((0.433013258970445)*x2528))+(((0.250000205066586)*x2531))+(((-1.0)*new_r10*x2529)));
evalcond[7]=((((-1.0)*x2535))+((new_r11*x2530))+(((0.250000205066586)*x2526))+(((0.433013258970445)*x2525))+(((-1.0)*new_r11*x2529)));
evalcond[8]=((((0.901387554667582)*x2537))+(((0.433013258970445)*x2539))+(((-0.120096407259978)*x2538))+new_r00+(((0.250000205066586)*sj2*x2524)));
evalcond[9]=((((0.901387554667582)*x2539))+(((-1.0)*sj2*x2536))+(((-0.433013258970445)*x2537))+(((-0.250000205066586)*x2538))+new_r01);
evalcond[10]=((((-1.0)*x2524*x2529))+(((-1.0)*x2523*x2527))+(((-0.120096407259978)*x2537))+((x2524*x2530))+new_r10);
evalcond[11]=((((-1.0)*x2524*x2527))+(((-1.0)*cj2*x2536))+(((-1.0)*x2523*x2530))+new_r11+((x2523*x2529)));
evalcond[12]=((((-1.0)*x2535))+(((0.120096407259978)*x2533))+(((0.120096407259978)*x2531))+((new_r10*x2527))+(((-0.901387554667582)*x2528)));
evalcond[13]=((((0.120096407259978)*x2526))+(((-1.0)*x2524))+(((0.120096407259978)*x2534))+((new_r11*x2527))+(((-0.901387554667582)*x2525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2540=cj1*cj1;
IkReal x2541=(cj1*sj1);
IkReal x2542=(new_r01*sj2);
IkReal x2543=((5773502018908.78)*sj1);
IkReal x2544=((2.66666292511974e+18)*cj1);
IkReal x2545=(cj2*new_r11);
CheckValue<IkReal> x2546=IKPowWithIntegerCheck(((1.15469306414004e+18)+(((-2.30940310565252e+18)*x2541))+(((-1.15468806413462e+18)*x2540))),-1);
if(!x2546.valid){
continue;
}
CheckValue<IkReal> x2547=IKPowWithIntegerCheck(((1.15469036227374e+28)+(((-1.15468536228002e+28)*x2540))+(((-2.3093977018802e+28)*x2541))),-1);
if(!x2547.valid){
continue;
}
if( IKabs(((x2546.value)*(((((-1.0)*x2542*x2543))+(((-1.0)*x2542*x2544))+(((-1.0)*x2543*x2545))+(((-1.0)*x2544*x2545)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2547.value)*(((((4.61877766044193e+28)*x2542))+(((4.61877766044193e+28)*x2545)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2546.value)*(((((-1.0)*x2542*x2543))+(((-1.0)*x2542*x2544))+(((-1.0)*x2543*x2545))+(((-1.0)*x2544*x2545))))))+IKsqr(((x2547.value)*(((((4.61877766044193e+28)*x2542))+(((4.61877766044193e+28)*x2545))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2546.value)*(((((-1.0)*x2542*x2543))+(((-1.0)*x2542*x2544))+(((-1.0)*x2543*x2545))+(((-1.0)*x2544*x2545))))), ((x2547.value)*(((((4.61877766044193e+28)*x2542))+(((4.61877766044193e+28)*x2545))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2548=IKcos(j0);
IkReal x2549=IKsin(j0);
IkReal x2550=(cj2*new_r01);
IkReal x2551=((0.433010506600939)*cj1);
IkReal x2552=(new_r01*sj2);
IkReal x2553=((0.866026442229025)*sj1);
IkReal x2554=(new_r00*sj2);
IkReal x2555=(cj2*new_r00);
IkReal x2556=(new_r11*sj2);
IkReal x2557=((0.49999820135573)*sj1);
IkReal x2558=((0.75000087746404)*cj1);
IkReal x2559=(cj2*new_r10);
IkReal x2560=(new_r10*sj2);
IkReal x2561=((0.500000584976027)*cj1);
IkReal x2562=(cj2*new_r11);
IkReal x2563=((1.08253441393799e-6)*sj1);
IkReal x2564=((1.0)*x2548);
IkReal x2565=(cj2*x2548);
IkReal x2566=(sj2*x2548);
IkReal x2567=(cj2*x2549);
IkReal x2568=(sj2*x2549);
evalcond[0]=((((-1.0)*x2548*x2563))+(((-1.0)*x2548*x2561))+(((-0.866025066047432)*x2549)));
evalcond[1]=((((0.866025066047432)*x2548))+(((-1.0)*x2549*x2563))+(((-1.0)*x2549*x2561)));
evalcond[2]=(x2549+(((0.250000205066586)*x2554))+(((0.250000205066586)*x2559))+(((0.433013258970445)*x2555))+(((-0.433013258970445)*x2560)));
evalcond[3]=(x2554+x2559+(((-1.0)*x2548*x2551))+(((-1.0)*x2548*x2553))+(((0.250000205066586)*x2549)));
evalcond[4]=((((-1.0)*x2549*x2553))+(((-1.0)*x2549*x2551))+x2562+x2552+(((-0.250000205066586)*x2548)));
evalcond[5]=(x2555+(((-1.0)*x2560))+(((-1.0)*x2548*x2558))+((x2548*x2557))+(((0.433013258970445)*x2549)));
evalcond[6]=((((-1.0)*x2549*x2558))+x2550+(((-0.433013258970445)*x2548))+(((-1.0)*x2556))+((x2549*x2557)));
evalcond[7]=((((0.250000205066586)*x2552))+(((-1.0)*x2564))+(((0.433013258970445)*x2550))+(((0.250000205066586)*x2562))+(((-0.433013258970445)*x2556)));
evalcond[8]=(((x2557*x2565))+(((-1.0)*x2558*x2565))+(((-1.0)*x2551*x2566))+(((0.433013258970445)*x2567))+new_r00+(((0.250000205066586)*x2568))+(((-1.0)*x2553*x2566)));
evalcond[9]=((((-0.250000205066586)*x2566))+((x2557*x2567))+(((-1.0)*x2558*x2567))+(((-1.0)*x2551*x2568))+new_r01+(((-0.433013258970445)*x2565))+(((-1.0)*x2553*x2568)));
evalcond[10]=(((x2558*x2566))+(((-1.0)*x2557*x2566))+(((-1.0)*x2551*x2565))+new_r10+(((-0.433013258970445)*x2568))+(((0.250000205066586)*x2567))+(((-1.0)*x2553*x2565)));
evalcond[11]=((((-0.250000205066586)*x2565))+((x2558*x2568))+(((-1.0)*x2557*x2568))+(((-1.0)*x2551*x2567))+(((0.433013258970445)*x2566))+new_r11+(((-1.0)*x2553*x2567)));
evalcond[12]=(((x2551*x2554))+((x2551*x2559))+(((-1.0)*x2555*x2557))+((x2557*x2560))+(((-1.0)*x2558*x2560))+(((-1.0)*x2564))+((x2555*x2558))+((x2553*x2559))+((x2553*x2554)));
evalcond[13]=((((-1.0)*x2556*x2558))+((x2551*x2552))+((x2550*x2558))+((x2556*x2557))+(((-1.0)*x2549))+(((-1.0)*x2550*x2557))+((x2551*x2562))+((x2552*x2553))+((x2553*x2562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2569=(cj2*new_r10);
IkReal x2570=((1.15469770189828e+19)*cj1);
IkReal x2571=(new_r00*sj2);
IkReal x2572=((24999970751232.9)*sj1);
CheckValue<IkReal> x2573=IKPowWithIntegerCheck(((((1.73204655284742e+19)*sj1))+(((1.15469219718296e+19)*cj1))),-1);
if(!x2573.valid){
continue;
}
CheckValue<IkReal> x2574=IKPowWithIntegerCheck(((((577350201.890878)*sj1))+(((384898299.684519)*cj1))),-1);
if(!x2574.valid){
continue;
}
if( IKabs(((x2573.value)*(((((-1.0)*x2569*x2570))+(((-1.0)*x2569*x2572))+(((-1.0)*x2571*x2572))+(((-1.0)*x2570*x2571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2574.value)*(((((666665549.0)*x2571))+(((666665549.0)*x2569)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2573.value)*(((((-1.0)*x2569*x2570))+(((-1.0)*x2569*x2572))+(((-1.0)*x2571*x2572))+(((-1.0)*x2570*x2571))))))+IKsqr(((x2574.value)*(((((666665549.0)*x2571))+(((666665549.0)*x2569))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2573.value)*(((((-1.0)*x2569*x2570))+(((-1.0)*x2569*x2572))+(((-1.0)*x2571*x2572))+(((-1.0)*x2570*x2571))))), ((x2574.value)*(((((666665549.0)*x2571))+(((666665549.0)*x2569))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2575=IKcos(j0);
IkReal x2576=IKsin(j0);
IkReal x2577=(cj2*new_r01);
IkReal x2578=((0.433010506600939)*cj1);
IkReal x2579=(new_r01*sj2);
IkReal x2580=((0.866026442229025)*sj1);
IkReal x2581=(new_r00*sj2);
IkReal x2582=(cj2*new_r00);
IkReal x2583=(new_r11*sj2);
IkReal x2584=((0.49999820135573)*sj1);
IkReal x2585=((0.75000087746404)*cj1);
IkReal x2586=(cj2*new_r10);
IkReal x2587=(new_r10*sj2);
IkReal x2588=((0.500000584976027)*cj1);
IkReal x2589=(cj2*new_r11);
IkReal x2590=((1.08253441393799e-6)*sj1);
IkReal x2591=((1.0)*x2575);
IkReal x2592=(cj2*x2575);
IkReal x2593=(sj2*x2575);
IkReal x2594=(cj2*x2576);
IkReal x2595=(sj2*x2576);
evalcond[0]=((((-0.866025066047432)*x2576))+(((-1.0)*x2575*x2590))+(((-1.0)*x2575*x2588)));
evalcond[1]=((((0.866025066047432)*x2575))+(((-1.0)*x2576*x2588))+(((-1.0)*x2576*x2590)));
evalcond[2]=(x2576+(((0.433013258970445)*x2582))+(((-0.433013258970445)*x2587))+(((0.250000205066586)*x2586))+(((0.250000205066586)*x2581)));
evalcond[3]=((((-1.0)*x2575*x2578))+x2586+x2581+(((0.250000205066586)*x2576))+(((-1.0)*x2575*x2580)));
evalcond[4]=(x2589+x2579+(((-0.250000205066586)*x2575))+(((-1.0)*x2576*x2580))+(((-1.0)*x2576*x2578)));
evalcond[5]=(x2582+(((-1.0)*x2587))+((x2575*x2584))+(((0.433013258970445)*x2576))+(((-1.0)*x2575*x2585)));
evalcond[6]=(x2577+(((-0.433013258970445)*x2575))+(((-1.0)*x2583))+((x2576*x2584))+(((-1.0)*x2576*x2585)));
evalcond[7]=((((0.250000205066586)*x2579))+(((-1.0)*x2591))+(((0.433013258970445)*x2577))+(((-0.433013258970445)*x2583))+(((0.250000205066586)*x2589)));
evalcond[8]=((((-1.0)*x2580*x2593))+(((-1.0)*x2585*x2592))+(((-1.0)*x2578*x2593))+(((0.433013258970445)*x2594))+new_r00+(((0.250000205066586)*x2595))+((x2584*x2592)));
evalcond[9]=((((-1.0)*x2580*x2595))+(((-1.0)*x2585*x2594))+(((-0.250000205066586)*x2593))+(((-1.0)*x2578*x2595))+new_r01+(((-0.433013258970445)*x2592))+((x2584*x2594)));
evalcond[10]=((((-1.0)*x2580*x2592))+(((-1.0)*x2578*x2592))+(((-1.0)*x2584*x2593))+new_r10+(((-0.433013258970445)*x2595))+((x2585*x2593))+(((0.250000205066586)*x2594)));
evalcond[11]=((((-1.0)*x2580*x2594))+(((-0.250000205066586)*x2592))+(((-1.0)*x2578*x2594))+(((0.433013258970445)*x2593))+(((-1.0)*x2584*x2595))+new_r11+((x2585*x2595)));
evalcond[12]=(((x2584*x2587))+(((-1.0)*x2585*x2587))+((x2580*x2586))+((x2580*x2581))+(((-1.0)*x2591))+((x2578*x2581))+((x2578*x2586))+((x2582*x2585))+(((-1.0)*x2582*x2584)));
evalcond[13]=(((x2580*x2589))+(((-1.0)*x2576))+((x2578*x2579))+((x2579*x2580))+((x2577*x2585))+(((-1.0)*x2577*x2584))+((x2578*x2589))+(((-1.0)*x2583*x2585))+((x2583*x2584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
CheckValue<IkReal> x2597 = IKatan2WithCheck(IkReal(((((0.75000087746404)*sj1))+(((0.49999820135573)*cj1)))),IkReal(((((-0.866026442229025)*cj1))+(((0.433010506600939)*sj1)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2597.valid){
continue;
}
IkReal x2596=x2597.value;
j2array[0]=((-1.0)*x2596);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((3.14159265358979)+(((-1.0)*x2596)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x2598=IKsin(j2);
IkReal x2599=IKcos(j2);
IkReal x2600=((0.433010506600939)*sj1);
IkReal x2601=((0.866026442229025)*cj1);
IkReal x2602=((0.49999820135573)*cj1);
IkReal x2603=((0.75000087746404)*sj1);
IkReal x2604=(new_r11*x2599);
IkReal x2605=(new_r00*x2599);
IkReal x2606=(new_r10*x2599);
IkReal x2607=(new_r01*x2598);
IkReal x2608=(new_r00*x2598);
IkReal x2609=(new_r01*x2599);
IkReal x2610=(x2598*x2603);
evalcond[0]=((((-1.0)*x2598*x2602))+((x2599*x2600))+(((-1.0)*x2610))+(((-1.0)*x2599*x2601)));
evalcond[1]=(((x2603*x2605))+(((-1.0)*x2601*x2606))+(((-1.0)*x2601*x2608))+(((-1.0)*new_r10*x2610))+((x2602*x2605))+((x2600*x2606))+((x2600*x2608))+(((-1.0)*new_r10*x2598*x2602)));
evalcond[2]=(((x2603*x2609))+(((-1.0)*x2601*x2604))+(((-1.0)*x2601*x2607))+(((-1.0)*new_r11*x2610))+((x2602*x2609))+(((-1.0)*new_r11*x2598*x2602))+((x2600*x2604))+((x2600*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=(cj1+(((1.50000715088661)*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=((1.00000433017849)+(((-1.0)*(cj1*cj1)))+(((-2.00002336335164)*cj1*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.588000403282025)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-0.55469837;
cj1=0.83205151636979;
j1=-0.5880004;
j0eval[0]=4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-0.55469837;
cj1=0.83205151636979;
j1=-0.5880004;
j0eval[0]=-6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2611=(cj2*new_r10);
IkReal x2612=(new_r00*sj2);
if( IKabs(((((159539204.583919)*x2612))+(((159539204.583919)*x2611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-332106811.287032)*x2612))+(((-332106811.287032)*x2611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x2612))+(((159539204.583919)*x2611))))+IKsqr(((((-332106811.287032)*x2612))+(((-332106811.287032)*x2611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x2612))+(((159539204.583919)*x2611))), ((((-332106811.287032)*x2612))+(((-332106811.287032)*x2611))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2613=IKcos(j0);
IkReal x2614=IKsin(j0);
IkReal x2615=(cj2*new_r01);
IkReal x2616=(new_r01*sj2);
IkReal x2617=((0.901387554667582)*sj2);
IkReal x2618=(cj2*new_r00);
IkReal x2619=((0.433013258970445)*sj2);
IkReal x2620=((0.250000205066586)*cj2);
IkReal x2621=(new_r00*sj2);
IkReal x2622=((1.0)*sj2);
IkReal x2623=(cj2*new_r10);
IkReal x2624=(cj2*new_r11);
IkReal x2625=((1.0)*x2613);
IkReal x2626=((0.120096407259978)*x2614);
IkReal x2627=(cj2*x2613);
IkReal x2628=(sj2*x2613);
IkReal x2629=(cj2*x2614);
evalcond[0]=((((-0.866025066047432)*x2614))+(((-0.41602564443501)*x2613)));
evalcond[1]=((((0.866025066047432)*x2613))+(((-0.41602564443501)*x2614)));
evalcond[2]=((((0.120096407259978)*x2613))+x2623+x2621+(((0.250000205066586)*x2614)));
evalcond[3]=((((-0.250000205066586)*x2613))+x2616+x2626+x2624);
evalcond[4]=((((0.433013258970445)*x2614))+(((-0.901387554667582)*x2613))+(((-1.0)*new_r10*x2622))+x2618);
evalcond[5]=((((-0.901387554667582)*x2614))+(((-1.0)*new_r11*x2622))+(((-0.433013258970445)*x2613))+x2615);
evalcond[6]=((((0.250000205066586)*x2621))+(((-1.0)*new_r10*x2619))+((new_r10*x2620))+(((0.433013258970445)*x2618))+x2614);
evalcond[7]=((((0.250000205066586)*x2616))+((new_r11*x2620))+(((-1.0)*new_r11*x2619))+(((-1.0)*x2625))+(((0.433013258970445)*x2615)));
evalcond[8]=((((-0.901387554667582)*x2627))+(((0.250000205066586)*sj2*x2614))+(((0.433013258970445)*x2629))+(((0.120096407259978)*x2628))+new_r00);
evalcond[9]=((((-0.901387554667582)*x2629))+(((-0.250000205066586)*x2628))+(((-0.433013258970445)*x2627))+new_r01+((sj2*x2626)));
evalcond[10]=(((x2613*x2617))+((x2614*x2620))+(((0.120096407259978)*x2627))+new_r10+(((-1.0)*x2614*x2619)));
evalcond[11]=(((x2613*x2619))+((x2614*x2617))+((cj2*x2626))+(((-1.0)*x2613*x2620))+new_r11);
evalcond[12]=((((-1.0)*new_r10*x2617))+(((0.901387554667582)*x2618))+(((-1.0)*x2625))+(((-0.120096407259978)*x2621))+(((-0.120096407259978)*x2623)));
evalcond[13]=((((-1.0)*new_r11*x2617))+(((-1.0)*x2614))+(((0.901387554667582)*x2615))+(((-0.120096407259978)*x2616))+(((-0.120096407259978)*x2624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2630=(new_r01*sj2);
IkReal x2631=(cj2*new_r11);
if( IKabs(((((-1.56124975848881)*x2631))+(((-1.56124975848881)*x2630)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x2630))+(((3.2499953868181)*x2631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56124975848881)*x2631))+(((-1.56124975848881)*x2630))))+IKsqr(((((3.2499953868181)*x2630))+(((3.2499953868181)*x2631))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56124975848881)*x2631))+(((-1.56124975848881)*x2630))), ((((3.2499953868181)*x2630))+(((3.2499953868181)*x2631))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2632=IKcos(j0);
IkReal x2633=IKsin(j0);
IkReal x2634=(cj2*new_r01);
IkReal x2635=(new_r01*sj2);
IkReal x2636=((0.901387554667582)*sj2);
IkReal x2637=(cj2*new_r00);
IkReal x2638=((0.433013258970445)*sj2);
IkReal x2639=((0.250000205066586)*cj2);
IkReal x2640=(new_r00*sj2);
IkReal x2641=((1.0)*sj2);
IkReal x2642=(cj2*new_r10);
IkReal x2643=(cj2*new_r11);
IkReal x2644=((1.0)*x2632);
IkReal x2645=((0.120096407259978)*x2633);
IkReal x2646=(cj2*x2632);
IkReal x2647=(sj2*x2632);
IkReal x2648=(cj2*x2633);
evalcond[0]=((((-0.866025066047432)*x2633))+(((-0.41602564443501)*x2632)));
evalcond[1]=((((-0.41602564443501)*x2633))+(((0.866025066047432)*x2632)));
evalcond[2]=((((0.120096407259978)*x2632))+(((0.250000205066586)*x2633))+x2640+x2642);
evalcond[3]=((((-0.250000205066586)*x2632))+x2635+x2643+x2645);
evalcond[4]=((((-1.0)*new_r10*x2641))+(((-0.901387554667582)*x2632))+(((0.433013258970445)*x2633))+x2637);
evalcond[5]=((((-0.433013258970445)*x2632))+(((-1.0)*new_r11*x2641))+(((-0.901387554667582)*x2633))+x2634);
evalcond[6]=((((0.433013258970445)*x2637))+(((-1.0)*new_r10*x2638))+(((0.250000205066586)*x2640))+((new_r10*x2639))+x2633);
evalcond[7]=((((0.433013258970445)*x2634))+(((-1.0)*new_r11*x2638))+(((0.250000205066586)*x2635))+((new_r11*x2639))+(((-1.0)*x2644)));
evalcond[8]=((((0.433013258970445)*x2648))+(((0.250000205066586)*sj2*x2633))+(((-0.901387554667582)*x2646))+new_r00+(((0.120096407259978)*x2647)));
evalcond[9]=((((-0.433013258970445)*x2646))+(((-0.901387554667582)*x2648))+(((-0.250000205066586)*x2647))+new_r01+((sj2*x2645)));
evalcond[10]=(((x2632*x2636))+((x2633*x2639))+new_r10+(((-1.0)*x2633*x2638))+(((0.120096407259978)*x2646)));
evalcond[11]=((((-1.0)*x2632*x2639))+((x2632*x2638))+((x2633*x2636))+new_r11+((cj2*x2645)));
evalcond[12]=((((-0.120096407259978)*x2642))+(((-0.120096407259978)*x2640))+(((-1.0)*new_r10*x2636))+(((-1.0)*x2644))+(((0.901387554667582)*x2637)));
evalcond[13]=((((-0.120096407259978)*x2643))+(((-0.120096407259978)*x2635))+(((-1.0)*new_r11*x2636))+(((-1.0)*x2633))+(((0.901387554667582)*x2634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.55359225030777)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2649=(cj2*new_r10);
IkReal x2650=(new_r00*sj2);
if( IKabs(((((159539204.583919)*x2650))+(((159539204.583919)*x2649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((332106811.287032)*x2649))+(((332106811.287032)*x2650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x2650))+(((159539204.583919)*x2649))))+IKsqr(((((332106811.287032)*x2649))+(((332106811.287032)*x2650))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x2650))+(((159539204.583919)*x2649))), ((((332106811.287032)*x2649))+(((332106811.287032)*x2650))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2651=IKcos(j0);
IkReal x2652=IKsin(j0);
IkReal x2653=(cj2*new_r01);
IkReal x2654=(new_r01*sj2);
IkReal x2655=((0.901387554667582)*sj2);
IkReal x2656=(cj2*new_r00);
IkReal x2657=((0.433013258970445)*sj2);
IkReal x2658=((0.250000205066586)*cj2);
IkReal x2659=(new_r00*sj2);
IkReal x2660=((1.0)*sj2);
IkReal x2661=(cj2*new_r10);
IkReal x2662=(cj2*new_r11);
IkReal x2663=((1.0)*x2651);
IkReal x2664=((0.120096407259978)*x2652);
IkReal x2665=(cj2*x2651);
IkReal x2666=(sj2*x2651);
IkReal x2667=(cj2*x2652);
evalcond[0]=((((0.41602564443501)*x2651))+(((-0.866025066047432)*x2652)));
evalcond[1]=((((0.41602564443501)*x2652))+(((0.866025066047432)*x2651)));
evalcond[2]=((((-0.120096407259978)*x2651))+(((0.250000205066586)*x2652))+x2659+x2661);
evalcond[3]=((((-0.250000205066586)*x2651))+(((-1.0)*x2664))+x2654+x2662);
evalcond[4]=((((0.433013258970445)*x2652))+(((-1.0)*new_r10*x2660))+(((0.901387554667582)*x2651))+x2656);
evalcond[5]=((((-0.433013258970445)*x2651))+(((0.901387554667582)*x2652))+(((-1.0)*new_r11*x2660))+x2653);
evalcond[6]=((((0.433013258970445)*x2656))+(((-1.0)*new_r10*x2657))+((new_r10*x2658))+(((0.250000205066586)*x2659))+x2652);
evalcond[7]=((((0.433013258970445)*x2653))+(((-1.0)*new_r11*x2657))+((new_r11*x2658))+(((-1.0)*x2663))+(((0.250000205066586)*x2654)));
evalcond[8]=((((0.433013258970445)*x2667))+(((-0.120096407259978)*x2666))+(((0.250000205066586)*sj2*x2652))+(((0.901387554667582)*x2665))+new_r00);
evalcond[9]=((((-0.433013258970445)*x2665))+(((-0.250000205066586)*x2666))+(((0.901387554667582)*x2667))+(((-1.0)*sj2*x2664))+new_r01);
evalcond[10]=((((-1.0)*x2652*x2657))+(((-1.0)*x2651*x2655))+(((-0.120096407259978)*x2665))+((x2652*x2658))+new_r10);
evalcond[11]=((((-1.0)*x2652*x2655))+(((-1.0)*x2651*x2658))+(((-1.0)*cj2*x2664))+((x2651*x2657))+new_r11);
evalcond[12]=((((0.120096407259978)*x2661))+(((-0.901387554667582)*x2656))+((new_r10*x2655))+(((-1.0)*x2663))+(((0.120096407259978)*x2659)));
evalcond[13]=((((0.120096407259978)*x2662))+(((-0.901387554667582)*x2653))+((new_r11*x2655))+(((0.120096407259978)*x2654))+(((-1.0)*x2652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2668=(new_r01*sj2);
IkReal x2669=(cj2*new_r11);
if( IKabs(((((1.56124975848881)*x2668))+(((1.56124975848881)*x2669)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x2669))+(((3.2499953868181)*x2668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.56124975848881)*x2668))+(((1.56124975848881)*x2669))))+IKsqr(((((3.2499953868181)*x2669))+(((3.2499953868181)*x2668))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.56124975848881)*x2668))+(((1.56124975848881)*x2669))), ((((3.2499953868181)*x2669))+(((3.2499953868181)*x2668))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2670=IKcos(j0);
IkReal x2671=IKsin(j0);
IkReal x2672=(cj2*new_r01);
IkReal x2673=(new_r01*sj2);
IkReal x2674=((0.901387554667582)*sj2);
IkReal x2675=(cj2*new_r00);
IkReal x2676=((0.433013258970445)*sj2);
IkReal x2677=((0.250000205066586)*cj2);
IkReal x2678=(new_r00*sj2);
IkReal x2679=((1.0)*sj2);
IkReal x2680=(cj2*new_r10);
IkReal x2681=(cj2*new_r11);
IkReal x2682=((1.0)*x2670);
IkReal x2683=((0.120096407259978)*x2671);
IkReal x2684=(cj2*x2670);
IkReal x2685=(sj2*x2670);
IkReal x2686=(cj2*x2671);
evalcond[0]=((((-0.866025066047432)*x2671))+(((0.41602564443501)*x2670)));
evalcond[1]=((((0.41602564443501)*x2671))+(((0.866025066047432)*x2670)));
evalcond[2]=((((-0.120096407259978)*x2670))+(((0.250000205066586)*x2671))+x2678+x2680);
evalcond[3]=((((-1.0)*x2683))+(((-0.250000205066586)*x2670))+x2673+x2681);
evalcond[4]=((((0.433013258970445)*x2671))+(((-1.0)*new_r10*x2679))+(((0.901387554667582)*x2670))+x2675);
evalcond[5]=((((-1.0)*new_r11*x2679))+(((-0.433013258970445)*x2670))+(((0.901387554667582)*x2671))+x2672);
evalcond[6]=((((0.433013258970445)*x2675))+(((-1.0)*new_r10*x2676))+((new_r10*x2677))+(((0.250000205066586)*x2678))+x2671);
evalcond[7]=((((0.433013258970445)*x2672))+(((-1.0)*new_r11*x2676))+((new_r11*x2677))+(((-1.0)*x2682))+(((0.250000205066586)*x2673)));
evalcond[8]=((((0.433013258970445)*x2686))+(((0.250000205066586)*sj2*x2671))+(((-0.120096407259978)*x2685))+(((0.901387554667582)*x2684))+new_r00);
evalcond[9]=((((-1.0)*sj2*x2683))+(((0.901387554667582)*x2686))+(((-0.250000205066586)*x2685))+(((-0.433013258970445)*x2684))+new_r01);
evalcond[10]=((((-1.0)*x2670*x2674))+(((-0.120096407259978)*x2684))+(((-1.0)*x2671*x2676))+((x2671*x2677))+new_r10);
evalcond[11]=((((-1.0)*x2670*x2677))+(((-1.0)*cj2*x2683))+(((-1.0)*x2671*x2674))+((x2670*x2676))+new_r11);
evalcond[12]=((((0.120096407259978)*x2678))+(((-0.901387554667582)*x2675))+((new_r10*x2674))+(((-1.0)*x2682))+(((0.120096407259978)*x2680)));
evalcond[13]=((((0.120096407259978)*x2673))+(((-1.0)*x2671))+(((-0.901387554667582)*x2672))+((new_r11*x2674))+(((0.120096407259978)*x2681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2687=cj1*cj1;
IkReal x2688=(cj1*sj1);
IkReal x2689=(new_r01*sj2);
IkReal x2690=((5773502018908.78)*sj1);
IkReal x2691=((2.66666292511974e+18)*cj1);
IkReal x2692=(cj2*new_r11);
CheckValue<IkReal> x2693=IKPowWithIntegerCheck(((1.15469306414004e+18)+(((-2.30940310565252e+18)*x2688))+(((-1.15468806413462e+18)*x2687))),-1);
if(!x2693.valid){
continue;
}
CheckValue<IkReal> x2694=IKPowWithIntegerCheck(((1.15469036227374e+28)+(((-2.3093977018802e+28)*x2688))+(((-1.15468536228002e+28)*x2687))),-1);
if(!x2694.valid){
continue;
}
if( IKabs(((x2693.value)*(((((-1.0)*x2691*x2692))+(((-1.0)*x2689*x2690))+(((-1.0)*x2689*x2691))+(((-1.0)*x2690*x2692)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2694.value)*(((((4.61877766044193e+28)*x2692))+(((4.61877766044193e+28)*x2689)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2693.value)*(((((-1.0)*x2691*x2692))+(((-1.0)*x2689*x2690))+(((-1.0)*x2689*x2691))+(((-1.0)*x2690*x2692))))))+IKsqr(((x2694.value)*(((((4.61877766044193e+28)*x2692))+(((4.61877766044193e+28)*x2689))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2693.value)*(((((-1.0)*x2691*x2692))+(((-1.0)*x2689*x2690))+(((-1.0)*x2689*x2691))+(((-1.0)*x2690*x2692))))), ((x2694.value)*(((((4.61877766044193e+28)*x2692))+(((4.61877766044193e+28)*x2689))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2695=IKcos(j0);
IkReal x2696=IKsin(j0);
IkReal x2697=(cj2*new_r01);
IkReal x2698=((0.433010506600939)*cj1);
IkReal x2699=(new_r01*sj2);
IkReal x2700=((0.866026442229025)*sj1);
IkReal x2701=(new_r00*sj2);
IkReal x2702=(cj2*new_r00);
IkReal x2703=(new_r11*sj2);
IkReal x2704=((0.49999820135573)*sj1);
IkReal x2705=((0.75000087746404)*cj1);
IkReal x2706=(cj2*new_r10);
IkReal x2707=(new_r10*sj2);
IkReal x2708=((0.500000584976027)*cj1);
IkReal x2709=(cj2*new_r11);
IkReal x2710=((1.08253441393799e-6)*sj1);
IkReal x2711=((1.0)*x2695);
IkReal x2712=(cj2*x2695);
IkReal x2713=(sj2*x2695);
IkReal x2714=(cj2*x2696);
IkReal x2715=(sj2*x2696);
evalcond[0]=((((-1.0)*x2695*x2710))+(((-1.0)*x2695*x2708))+(((-0.866025066047432)*x2696)));
evalcond[1]=((((0.866025066047432)*x2695))+(((-1.0)*x2696*x2708))+(((-1.0)*x2696*x2710)));
evalcond[2]=((((-0.433013258970445)*x2707))+(((0.433013258970445)*x2702))+(((0.250000205066586)*x2706))+(((0.250000205066586)*x2701))+x2696);
evalcond[3]=(x2706+x2701+(((-1.0)*x2695*x2700))+(((0.250000205066586)*x2696))+(((-1.0)*x2695*x2698)));
evalcond[4]=(x2709+(((-0.250000205066586)*x2695))+(((-1.0)*x2696*x2698))+(((-1.0)*x2696*x2700))+x2699);
evalcond[5]=(x2702+((x2695*x2704))+(((0.433013258970445)*x2696))+(((-1.0)*x2695*x2705))+(((-1.0)*x2707)));
evalcond[6]=((((-1.0)*x2696*x2705))+((x2696*x2704))+(((-0.433013258970445)*x2695))+(((-1.0)*x2703))+x2697);
evalcond[7]=((((-1.0)*x2711))+(((0.433013258970445)*x2697))+(((-0.433013258970445)*x2703))+(((0.250000205066586)*x2699))+(((0.250000205066586)*x2709)));
evalcond[8]=((((0.433013258970445)*x2714))+(((-1.0)*x2698*x2713))+(((0.250000205066586)*x2715))+(((-1.0)*x2700*x2713))+new_r00+((x2704*x2712))+(((-1.0)*x2705*x2712)));
evalcond[9]=((((-0.250000205066586)*x2713))+(((-1.0)*x2698*x2715))+(((-1.0)*x2700*x2715))+new_r01+(((-0.433013258970445)*x2712))+((x2704*x2714))+(((-1.0)*x2705*x2714)));
evalcond[10]=((((-1.0)*x2704*x2713))+(((-1.0)*x2698*x2712))+(((0.250000205066586)*x2714))+(((-1.0)*x2700*x2712))+new_r10+(((-0.433013258970445)*x2715))+((x2705*x2713)));
evalcond[11]=((((-1.0)*x2704*x2715))+(((-0.250000205066586)*x2712))+(((0.433013258970445)*x2713))+(((-1.0)*x2698*x2714))+(((-1.0)*x2700*x2714))+new_r11+((x2705*x2715)));
evalcond[12]=((((-1.0)*x2702*x2704))+(((-1.0)*x2711))+((x2704*x2707))+((x2698*x2701))+((x2698*x2706))+(((-1.0)*x2705*x2707))+((x2700*x2701))+((x2700*x2706))+((x2702*x2705)));
evalcond[13]=((((-1.0)*x2697*x2704))+((x2699*x2700))+((x2698*x2709))+((x2697*x2705))+((x2698*x2699))+((x2700*x2709))+((x2703*x2704))+(((-1.0)*x2696))+(((-1.0)*x2703*x2705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2716=(cj2*new_r10);
IkReal x2717=((1.15469770189828e+19)*cj1);
IkReal x2718=(new_r00*sj2);
IkReal x2719=((24999970751232.9)*sj1);
CheckValue<IkReal> x2720=IKPowWithIntegerCheck(((((1.73204655284742e+19)*sj1))+(((1.15469219718296e+19)*cj1))),-1);
if(!x2720.valid){
continue;
}
CheckValue<IkReal> x2721=IKPowWithIntegerCheck(((((577350201.890878)*sj1))+(((384898299.684519)*cj1))),-1);
if(!x2721.valid){
continue;
}
if( IKabs(((x2720.value)*(((((-1.0)*x2718*x2719))+(((-1.0)*x2717*x2718))+(((-1.0)*x2716*x2719))+(((-1.0)*x2716*x2717)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2721.value)*(((((666665549.0)*x2718))+(((666665549.0)*x2716)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2720.value)*(((((-1.0)*x2718*x2719))+(((-1.0)*x2717*x2718))+(((-1.0)*x2716*x2719))+(((-1.0)*x2716*x2717))))))+IKsqr(((x2721.value)*(((((666665549.0)*x2718))+(((666665549.0)*x2716))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2720.value)*(((((-1.0)*x2718*x2719))+(((-1.0)*x2717*x2718))+(((-1.0)*x2716*x2719))+(((-1.0)*x2716*x2717))))), ((x2721.value)*(((((666665549.0)*x2718))+(((666665549.0)*x2716))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2722=IKcos(j0);
IkReal x2723=IKsin(j0);
IkReal x2724=(cj2*new_r01);
IkReal x2725=((0.433010506600939)*cj1);
IkReal x2726=(new_r01*sj2);
IkReal x2727=((0.866026442229025)*sj1);
IkReal x2728=(new_r00*sj2);
IkReal x2729=(cj2*new_r00);
IkReal x2730=(new_r11*sj2);
IkReal x2731=((0.49999820135573)*sj1);
IkReal x2732=((0.75000087746404)*cj1);
IkReal x2733=(cj2*new_r10);
IkReal x2734=(new_r10*sj2);
IkReal x2735=((0.500000584976027)*cj1);
IkReal x2736=(cj2*new_r11);
IkReal x2737=((1.08253441393799e-6)*sj1);
IkReal x2738=((1.0)*x2722);
IkReal x2739=(cj2*x2722);
IkReal x2740=(sj2*x2722);
IkReal x2741=(cj2*x2723);
IkReal x2742=(sj2*x2723);
evalcond[0]=((((-0.866025066047432)*x2723))+(((-1.0)*x2722*x2737))+(((-1.0)*x2722*x2735)));
evalcond[1]=((((-1.0)*x2723*x2737))+(((-1.0)*x2723*x2735))+(((0.866025066047432)*x2722)));
evalcond[2]=(x2723+(((0.250000205066586)*x2733))+(((0.250000205066586)*x2728))+(((-0.433013258970445)*x2734))+(((0.433013258970445)*x2729)));
evalcond[3]=(x2733+x2728+(((0.250000205066586)*x2723))+(((-1.0)*x2722*x2725))+(((-1.0)*x2722*x2727)));
evalcond[4]=(x2736+x2726+(((-0.250000205066586)*x2722))+(((-1.0)*x2723*x2725))+(((-1.0)*x2723*x2727)));
evalcond[5]=(x2729+(((-1.0)*x2734))+(((-1.0)*x2722*x2732))+((x2722*x2731))+(((0.433013258970445)*x2723)));
evalcond[6]=(x2724+(((-0.433013258970445)*x2722))+(((-1.0)*x2730))+(((-1.0)*x2723*x2732))+((x2723*x2731)));
evalcond[7]=((((0.250000205066586)*x2736))+(((0.250000205066586)*x2726))+(((-0.433013258970445)*x2730))+(((-1.0)*x2738))+(((0.433013258970445)*x2724)));
evalcond[8]=((((0.250000205066586)*x2742))+(((-1.0)*x2725*x2740))+((x2731*x2739))+(((0.433013258970445)*x2741))+(((-1.0)*x2727*x2740))+new_r00+(((-1.0)*x2732*x2739)));
evalcond[9]=(((x2731*x2741))+(((-1.0)*x2732*x2741))+(((-1.0)*x2725*x2742))+(((-0.250000205066586)*x2740))+(((-1.0)*x2727*x2742))+(((-0.433013258970445)*x2739))+new_r01);
evalcond[10]=((((-1.0)*x2727*x2739))+(((0.250000205066586)*x2741))+(((-1.0)*x2725*x2739))+(((-0.433013258970445)*x2742))+(((-1.0)*x2731*x2740))+new_r10+((x2732*x2740)));
evalcond[11]=((((-0.250000205066586)*x2739))+(((-1.0)*x2725*x2741))+(((0.433013258970445)*x2740))+(((-1.0)*x2727*x2741))+(((-1.0)*x2731*x2742))+new_r11+((x2732*x2742)));
evalcond[12]=(((x2725*x2733))+((x2731*x2734))+((x2727*x2728))+((x2725*x2728))+((x2727*x2733))+(((-1.0)*x2732*x2734))+(((-1.0)*x2738))+((x2729*x2732))+(((-1.0)*x2729*x2731)));
evalcond[13]=((((-1.0)*x2730*x2732))+(((-1.0)*x2724*x2731))+((x2725*x2736))+(((-1.0)*x2723))+((x2726*x2727))+((x2724*x2732))+((x2725*x2726))+((x2727*x2736))+((x2730*x2731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2744 = IKatan2WithCheck(IkReal(((((-1.08253441393799e-6)*sj1))+(((-0.500000584976027)*cj1)))),IkReal(-0.866025066047432),IKFAST_ATAN2_MAGTHRESH);
if(!x2744.valid){
continue;
}
IkReal x2743=x2744.value;
j0array[0]=((-1.0)*x2743);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x2743)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x2745=IKsin(j0);
evalcond[0]=((((0.866025066047432)*(IKcos(j0))))+(((-1.08253441393799e-6)*sj1*x2745))+(((-0.500000584976027)*cj1*x2745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=((IKabs((sj0+(((-1.73204060566914)*cj0*cj1))+(((-3.99999671893731)*new_r10))+(((-3.46410292742905)*cj0*sj1)))))+(((3.46411133595038e-19)*(IKabs(((2.30939270191783e+19)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=((IKabs(((((-3.46410292742905)*sj0*sj1))+(((-3.99999671893731)*new_r11))+(((-1.73204060566914)*cj1*sj0))+(((-1.0)*cj0)))))+(((3.46411133595038e-19)*(IKabs(((2.30939270191783e+19)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
{
IkReal j2eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j2eval[0]=((((2.00000467981095e-19)*(IKabs(((2.30939270191783e+19)*new_r10)))))+(IKabs((sj0+(((-1.73205060567263)*cj0*cj1))+(((-2.30939810567846)*new_r00))+(((1.15469489905356)*cj0*sj1))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2746=((2.30939810567846)*new_r00);
IkReal x2747=((1.15469489905356)*cj0*sj1);
IkReal x2748=((1.73205060567263)*cj0*cj1);
IkReal x2749=(x2747+sj0);
op[0]=(x2749+(((-1.0)*x2748))+(((-1.0)*x2746)));
op[1]=((-4.61879621135691)*new_r10);
op[2]=(x2746+x2749+(((-1.0)*x2748)));
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2750=((3.99999671893731)*new_r11);
IkReal x2751=((1.0)*cj0);
IkReal x2752=((3.46410292742905)*sj0*sj1);
IkReal x2753=((1.73204060566914)*cj1*sj0);
IkReal x2754=(x2752+x2753+x2751);
op[0]=((((-1.0)*x2750))+(((-1.0)*x2754)));
op[1]=((7.99999343787462)*new_r01);
op[2]=(x2750+(((-1.0)*x2754)));
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2755=((3.99999671893731)*new_r10);
IkReal x2756=((1.73204060566914)*cj0*cj1);
IkReal x2757=((3.46410292742905)*cj0*sj1);
IkReal x2758=(x2756+x2757);
op[0]=(sj0+(((-1.0)*x2755))+(((-1.0)*x2758)));
op[1]=((7.99999343787462)*new_r00);
op[2]=(x2755+sj0+(((-1.0)*x2758)));
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2759=(new_r12*sj1);
IkReal x2760=(cj1*new_r02);
IkReal x2761=(cj1*new_r12);
IkReal x2762=(new_r02*sj1);
CheckValue<IkReal> x2763 = IKatan2WithCheck(IkReal(((((0.866026442229025)*x2760))+(((-0.433010506600939)*x2762))+(((0.49999820135573)*x2761))+(((0.75000087746404)*x2759)))),IkReal(((((-0.433010506600939)*x2759))+(((0.866026442229025)*x2761))+(((-0.49999820135573)*x2760))+(((-0.75000087746404)*x2762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2763.valid){
continue;
}
CheckValue<IkReal> x2764=IKPowWithIntegerCheck(IKsign(((new_r12*new_r12)+(new_r02*new_r02))),-1);
if(!x2764.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2763.value)+(((1.5707963267949)*(x2764.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2765=IKcos(j2);
IkReal x2766=IKsin(j2);
IkReal x2767=((0.49999820135573)*cj1);
IkReal x2768=((0.500000584976027)*new_r22);
IkReal x2769=((0.866026442229025)*cj1);
IkReal x2770=((0.75000087746404)*cj1);
IkReal x2771=((0.433010506600939)*sj1);
IkReal x2772=((0.75000087746404)*sj1);
IkReal x2773=((0.866026442229025)*sj1);
IkReal x2774=((1.08253441393799e-6)*cj1);
IkReal x2775=((0.49999820135573)*sj1);
IkReal x2776=((0.433010506600939)*cj1);
IkReal x2777=((0.500000584976027)*sj1);
IkReal x2778=(new_r02*x2765);
IkReal x2779=(new_r12*x2765);
IkReal x2780=(new_r12*x2766);
IkReal x2781=(new_r10*x2765);
IkReal x2782=(new_r11*x2766);
IkReal x2783=(new_r01*x2766);
IkReal x2784=(new_r10*x2766);
IkReal x2785=(new_r01*x2765);
IkReal x2786=(new_r00*x2765);
IkReal x2787=(new_r02*x2766);
IkReal x2788=(new_r11*x2765);
IkReal x2789=(new_r00*x2766);
evalcond[0]=(x2779+x2771+x2787+(((-1.0)*x2769)));
evalcond[1]=(x2778+x2772+x2767+(((-1.0)*x2780)));
evalcond[2]=(((x2766*x2771))+((x2765*x2767))+((x2765*x2772))+new_r02+(((-1.0)*x2766*x2769)));
evalcond[3]=((((-1.0)*x2766*x2772))+((x2765*x2771))+new_r12+(((-1.0)*x2766*x2767))+(((-1.0)*x2765*x2769)));
evalcond[4]=((((0.250000205066586)*x2787))+(((0.433013258970445)*x2778))+(((-0.866025066047432)*new_r22))+(((-0.433013258970445)*x2780))+(((0.250000205066586)*x2779)));
evalcond[5]=(((cj1*x2768))+((x2770*x2778))+((x2776*x2787))+((x2773*x2787))+(((-1.0)*x2775*x2778))+((x2775*x2780))+((x2776*x2779))+(((-1.0)*x2770*x2780))+((x2773*x2779))+(((1.08253441393799e-6)*new_r22*sj1)));
evalcond[6]=(((x2767*x2786))+((x2772*x2786))+((new_r20*x2777))+(((-1.0)*x2769*x2789))+(((-1.0)*x2769*x2781))+((x2771*x2789))+((x2771*x2781))+(((-1.0)*x2767*x2784))+(((-1.0)*x2772*x2784))+(((-1.0)*new_r20*x2774)));
evalcond[7]=(((x2767*x2785))+((new_r21*x2777))+((x2772*x2785))+(((-1.0)*x2769*x2788))+(((-1.0)*x2769*x2783))+((x2771*x2788))+((x2771*x2783))+(((-1.0)*new_r21*x2774))+(((-1.0)*x2767*x2782))+(((-1.0)*x2772*x2782)));
evalcond[8]=((1.0)+(((-1.0)*new_r22*x2774))+((sj1*x2768))+(((-1.0)*x2769*x2779))+((x2771*x2779))+(((-1.0)*x2769*x2787))+((x2771*x2787))+((x2767*x2778))+(((-1.0)*x2767*x2780))+(((-1.0)*x2772*x2780))+((x2772*x2778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x2790=cj1*cj1;
IkReal x2791=((5.77348850949141e+22)*sj1);
IkReal x2792=(cj1*sj1);
IkReal x2793=((2.66665668539516e+28)*cj1);
j0eval[0]=((692817.270199286)+x2792+(((230939.810566763)*x2790)));
j0eval[1]=((IKabs((((new_r21*x2793))+((new_r21*x2791))+(((4.61877766044193e+28)*new_r20)))))+(IKabs(((((-4.61877766044193e+28)*new_r21))+((new_r20*x2791))+((new_r20*x2793))))));
j0eval[2]=IKsign(((3.99997722844887e+28)+(((1.33332990262156e+28)*x2790))+(((5.77349526419614e+22)*x2792))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x2794=cj1*cj1;
IkReal x2795=(cj1*sj1);
j0eval[0]=((-1.00000433017849)+x2794+(((2.00002336335164)*x2795)));
j0eval[1]=IKsign(((-1.15469036227374e+28)+(((1.15468536228002e+28)*x2794))+(((2.3093977018802e+28)*x2795))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((((-1.50000715088661)*sj1))+(((-1.0)*cj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.55359225030777)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=1847517.18792274;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=-6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=-4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2796=(cj2*new_r11);
IkReal x2797=(new_r01*sj2);
if( IKabs(((((1.56124975848881)*x2797))+(((1.56124975848881)*x2796))+(((0.938193991171943)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.450694540921035)*new_r20))+(((3.2499953868181)*x2796))+(((3.2499953868181)*x2797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.56124975848881)*x2797))+(((1.56124975848881)*x2796))+(((0.938193991171943)*new_r20))))+IKsqr(((((-0.450694540921035)*new_r20))+(((3.2499953868181)*x2796))+(((3.2499953868181)*x2797))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.56124975848881)*x2797))+(((1.56124975848881)*x2796))+(((0.938193991171943)*new_r20))), ((((-0.450694540921035)*new_r20))+(((3.2499953868181)*x2796))+(((3.2499953868181)*x2797))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2798=IKcos(j0);
IkReal x2799=IKsin(j0);
IkReal x2800=(cj2*new_r01);
IkReal x2801=(new_r01*sj2);
IkReal x2802=((0.901387554667582)*sj2);
IkReal x2803=(cj2*new_r00);
IkReal x2804=((0.433013258970445)*sj2);
IkReal x2805=((0.250000205066586)*cj2);
IkReal x2806=(new_r00*sj2);
IkReal x2807=((1.0)*sj2);
IkReal x2808=(cj2*new_r10);
IkReal x2809=(cj2*new_r11);
IkReal x2810=((1.0)*x2798);
IkReal x2811=((0.120096407259978)*x2799);
IkReal x2812=(cj2*x2798);
IkReal x2813=(sj2*x2798);
IkReal x2814=(cj2*x2799);
evalcond[0]=((((0.41602564443501)*x2798))+(((-0.866025066047432)*x2799))+new_r20);
evalcond[1]=((((0.41602564443501)*x2799))+(((0.866025066047432)*x2798))+new_r21);
evalcond[2]=((((-0.120096407259978)*x2798))+(((0.250000205066586)*x2799))+x2808+x2806);
evalcond[3]=((((-0.250000205066586)*x2798))+(((-1.0)*x2811))+x2809+x2801);
evalcond[4]=((((-1.0)*new_r10*x2807))+(((0.433013258970445)*x2799))+(((0.901387554667582)*x2798))+x2803);
evalcond[5]=((((-1.0)*new_r11*x2807))+(((0.901387554667582)*x2799))+(((-0.433013258970445)*x2798))+x2800);
evalcond[6]=(x2799+((new_r10*x2805))+(((0.250000205066586)*x2806))+(((-0.866025066047432)*new_r20))+(((0.433013258970445)*x2803))+(((-1.0)*new_r10*x2804)));
evalcond[7]=((((0.250000205066586)*x2801))+(((-1.0)*x2810))+(((-0.866025066047432)*new_r21))+(((0.433013258970445)*x2800))+(((-1.0)*new_r11*x2804))+((new_r11*x2805)));
evalcond[8]=((((-0.120096407259978)*x2813))+(((0.433013258970445)*x2814))+(((0.901387554667582)*x2812))+(((0.250000205066586)*sj2*x2799))+new_r00);
evalcond[9]=((((-0.250000205066586)*x2813))+(((-1.0)*sj2*x2811))+(((-0.433013258970445)*x2812))+(((0.901387554667582)*x2814))+new_r01);
evalcond[10]=((((-0.120096407259978)*x2812))+(((-1.0)*x2799*x2804))+((x2799*x2805))+(((-1.0)*x2798*x2802))+new_r10);
evalcond[11]=(((x2798*x2804))+(((-1.0)*x2799*x2802))+(((-1.0)*x2798*x2805))+(((-1.0)*cj2*x2811))+new_r11);
evalcond[12]=(((new_r10*x2802))+(((-0.41602564443501)*new_r20))+(((-0.901387554667582)*x2803))+(((-1.0)*x2810))+(((0.120096407259978)*x2808))+(((0.120096407259978)*x2806)));
evalcond[13]=((((-0.41602564443501)*new_r21))+(((-0.901387554667582)*x2800))+(((-1.0)*x2799))+((new_r11*x2802))+(((0.120096407259978)*x2809))+(((0.120096407259978)*x2801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2815=(new_r00*sj2);
IkReal x2816=(cj2*new_r10);
if( IKabs(((((159539204.583919)*x2816))+(((159539204.583919)*x2815))+(((46055058.2492671)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((332106811.287032)*x2816))+(((332106811.287032)*x2815))+(((95871094.4761737)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x2816))+(((159539204.583919)*x2815))+(((46055058.2492671)*new_r20))))+IKsqr(((((332106811.287032)*x2816))+(((332106811.287032)*x2815))+(((95871094.4761737)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x2816))+(((159539204.583919)*x2815))+(((46055058.2492671)*new_r20))), ((((332106811.287032)*x2816))+(((332106811.287032)*x2815))+(((95871094.4761737)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2817=IKcos(j0);
IkReal x2818=IKsin(j0);
IkReal x2819=(cj2*new_r01);
IkReal x2820=(new_r01*sj2);
IkReal x2821=((0.901387554667582)*sj2);
IkReal x2822=(cj2*new_r00);
IkReal x2823=((0.433013258970445)*sj2);
IkReal x2824=((0.250000205066586)*cj2);
IkReal x2825=(new_r00*sj2);
IkReal x2826=((1.0)*sj2);
IkReal x2827=(cj2*new_r10);
IkReal x2828=(cj2*new_r11);
IkReal x2829=((1.0)*x2817);
IkReal x2830=((0.120096407259978)*x2818);
IkReal x2831=(cj2*x2817);
IkReal x2832=(sj2*x2817);
IkReal x2833=(cj2*x2818);
evalcond[0]=((((-0.866025066047432)*x2818))+(((0.41602564443501)*x2817))+new_r20);
evalcond[1]=((((0.41602564443501)*x2818))+new_r21+(((0.866025066047432)*x2817)));
evalcond[2]=((((-0.120096407259978)*x2817))+(((0.250000205066586)*x2818))+x2825+x2827);
evalcond[3]=((((-1.0)*x2830))+(((-0.250000205066586)*x2817))+x2828+x2820);
evalcond[4]=((((0.433013258970445)*x2818))+(((-1.0)*new_r10*x2826))+(((0.901387554667582)*x2817))+x2822);
evalcond[5]=((((-1.0)*new_r11*x2826))+(((0.901387554667582)*x2818))+(((-0.433013258970445)*x2817))+x2819);
evalcond[6]=((((0.250000205066586)*x2825))+(((-1.0)*new_r10*x2823))+((new_r10*x2824))+(((0.433013258970445)*x2822))+(((-0.866025066047432)*new_r20))+x2818);
evalcond[7]=((((0.250000205066586)*x2820))+(((-1.0)*new_r11*x2823))+((new_r11*x2824))+(((0.433013258970445)*x2819))+(((-0.866025066047432)*new_r21))+(((-1.0)*x2829)));
evalcond[8]=((((0.901387554667582)*x2831))+(((0.250000205066586)*sj2*x2818))+(((-0.120096407259978)*x2832))+(((0.433013258970445)*x2833))+new_r00);
evalcond[9]=((((0.901387554667582)*x2833))+(((-1.0)*sj2*x2830))+(((-0.433013258970445)*x2831))+(((-0.250000205066586)*x2832))+new_r01);
evalcond[10]=(((x2818*x2824))+(((-1.0)*x2817*x2821))+(((-0.120096407259978)*x2831))+(((-1.0)*x2818*x2823))+new_r10);
evalcond[11]=(((x2817*x2823))+(((-1.0)*x2817*x2824))+(((-1.0)*x2818*x2821))+new_r11+(((-1.0)*cj2*x2830)));
evalcond[12]=((((-0.41602564443501)*new_r20))+((new_r10*x2821))+(((-0.901387554667582)*x2822))+(((-1.0)*x2829))+(((0.120096407259978)*x2827))+(((0.120096407259978)*x2825)));
evalcond[13]=((((-0.41602564443501)*new_r21))+(((-1.0)*x2818))+((new_r11*x2821))+(((0.120096407259978)*x2820))+(((0.120096407259978)*x2828))+(((-0.901387554667582)*x2819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.938193995582437)*new_r20))+(((-0.450694531739873)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.938193995582437)*new_r21))+(((-0.450694531739873)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.938193995582437)*new_r20))+(((-0.450694531739873)*new_r21))))+IKsqr(((((-0.938193995582437)*new_r21))+(((-0.450694531739873)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.938193995582437)*new_r20))+(((-0.450694531739873)*new_r21))), ((((-0.938193995582437)*new_r21))+(((-0.450694531739873)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2834=IKcos(j0);
IkReal x2835=IKsin(j0);
IkReal x2836=(cj2*new_r01);
IkReal x2837=(new_r01*sj2);
IkReal x2838=((0.901387554667582)*sj2);
IkReal x2839=(cj2*new_r00);
IkReal x2840=((0.433013258970445)*sj2);
IkReal x2841=((0.250000205066586)*cj2);
IkReal x2842=(new_r00*sj2);
IkReal x2843=((1.0)*sj2);
IkReal x2844=(cj2*new_r10);
IkReal x2845=(cj2*new_r11);
IkReal x2846=((1.0)*x2834);
IkReal x2847=((0.120096407259978)*x2835);
IkReal x2848=(cj2*x2834);
IkReal x2849=(sj2*x2834);
IkReal x2850=(cj2*x2835);
evalcond[0]=((((0.41602564443501)*x2834))+new_r20+(((-0.866025066047432)*x2835)));
evalcond[1]=((((0.866025066047432)*x2834))+(((0.41602564443501)*x2835))+new_r21);
evalcond[2]=((((-0.120096407259978)*x2834))+(((0.250000205066586)*x2835))+x2844+x2842);
evalcond[3]=((((-0.250000205066586)*x2834))+x2845+x2837+(((-1.0)*x2847)));
evalcond[4]=((((0.901387554667582)*x2834))+(((0.433013258970445)*x2835))+(((-1.0)*new_r10*x2843))+x2839);
evalcond[5]=((((0.901387554667582)*x2835))+(((-0.433013258970445)*x2834))+(((-1.0)*new_r11*x2843))+x2836);
evalcond[6]=(((new_r10*x2841))+(((0.250000205066586)*x2842))+(((-0.866025066047432)*new_r20))+(((-1.0)*new_r10*x2840))+(((0.433013258970445)*x2839))+x2835);
evalcond[7]=(((new_r11*x2841))+(((0.250000205066586)*x2837))+(((-0.866025066047432)*new_r21))+(((0.433013258970445)*x2836))+(((-1.0)*new_r11*x2840))+(((-1.0)*x2846)));
evalcond[8]=((((0.901387554667582)*x2848))+new_r00+(((-0.120096407259978)*x2849))+(((0.433013258970445)*x2850))+(((0.250000205066586)*sj2*x2835)));
evalcond[9]=((((-0.433013258970445)*x2848))+(((0.901387554667582)*x2850))+new_r01+(((-0.250000205066586)*x2849))+(((-1.0)*sj2*x2847)));
evalcond[10]=((((-1.0)*x2834*x2838))+(((-1.0)*x2835*x2840))+new_r10+(((-0.120096407259978)*x2848))+((x2835*x2841)));
evalcond[11]=((((-1.0)*x2835*x2838))+((x2834*x2840))+new_r11+(((-1.0)*x2834*x2841))+(((-1.0)*cj2*x2847)));
evalcond[12]=((((-0.41602564443501)*new_r20))+(((0.120096407259978)*x2844))+(((0.120096407259978)*x2842))+(((-0.901387554667582)*x2839))+(((-1.0)*x2846))+((new_r10*x2838)));
evalcond[13]=((((0.120096407259978)*x2837))+((new_r11*x2838))+(((-0.41602564443501)*new_r21))+(((-1.0)*x2835))+(((0.120096407259978)*x2845))+(((-0.901387554667582)*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.69518490389756)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=-0.55469837;
cj1=0.83205151636979;
j1=5.69518503997906;
j0eval[0]=1847517.18792274;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=-0.55469837;
cj1=0.83205151636979;
j1=5.69518503997906;
j0eval[0]=6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=-0.55469837;
cj1=0.83205151636979;
j1=5.69518503997906;
j0eval[0]=-4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2851=(cj2*new_r11);
IkReal x2852=(new_r01*sj2);
if( IKabs(((((0.938193991171943)*new_r20))+(((-1.56124975848881)*x2851))+(((-1.56124975848881)*x2852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x2852))+(((3.2499953868181)*x2851))+(((0.450694540921035)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.938193991171943)*new_r20))+(((-1.56124975848881)*x2851))+(((-1.56124975848881)*x2852))))+IKsqr(((((3.2499953868181)*x2852))+(((3.2499953868181)*x2851))+(((0.450694540921035)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.938193991171943)*new_r20))+(((-1.56124975848881)*x2851))+(((-1.56124975848881)*x2852))), ((((3.2499953868181)*x2852))+(((3.2499953868181)*x2851))+(((0.450694540921035)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2853=IKcos(j0);
IkReal x2854=IKsin(j0);
IkReal x2855=(cj2*new_r01);
IkReal x2856=(new_r01*sj2);
IkReal x2857=((0.901387554667582)*sj2);
IkReal x2858=(cj2*new_r00);
IkReal x2859=((0.433013258970445)*sj2);
IkReal x2860=((0.250000205066586)*cj2);
IkReal x2861=(new_r00*sj2);
IkReal x2862=((1.0)*sj2);
IkReal x2863=(cj2*new_r10);
IkReal x2864=(cj2*new_r11);
IkReal x2865=((1.0)*x2853);
IkReal x2866=((0.120096407259978)*x2854);
IkReal x2867=(cj2*x2853);
IkReal x2868=(sj2*x2853);
IkReal x2869=(cj2*x2854);
evalcond[0]=(new_r20+(((-0.41602564443501)*x2853))+(((-0.866025066047432)*x2854)));
evalcond[1]=((((0.866025066047432)*x2853))+new_r21+(((-0.41602564443501)*x2854)));
evalcond[2]=((((0.120096407259978)*x2853))+(((0.250000205066586)*x2854))+x2861+x2863);
evalcond[3]=(x2856+x2864+x2866+(((-0.250000205066586)*x2853)));
evalcond[4]=((((-1.0)*new_r10*x2862))+(((-0.901387554667582)*x2853))+(((0.433013258970445)*x2854))+x2858);
evalcond[5]=((((-1.0)*new_r11*x2862))+(((-0.433013258970445)*x2853))+(((-0.901387554667582)*x2854))+x2855);
evalcond[6]=((((0.250000205066586)*x2861))+(((-0.866025066047432)*new_r20))+((new_r10*x2860))+(((-1.0)*new_r10*x2859))+x2854+(((0.433013258970445)*x2858)));
evalcond[7]=((((0.250000205066586)*x2856))+(((-1.0)*x2865))+((new_r11*x2860))+(((-0.866025066047432)*new_r21))+(((-1.0)*new_r11*x2859))+(((0.433013258970445)*x2855)));
evalcond[8]=((((-0.901387554667582)*x2867))+(((0.433013258970445)*x2869))+(((0.120096407259978)*x2868))+new_r00+(((0.250000205066586)*sj2*x2854)));
evalcond[9]=(((sj2*x2866))+(((-0.901387554667582)*x2869))+(((-0.250000205066586)*x2868))+(((-0.433013258970445)*x2867))+new_r01);
evalcond[10]=(((x2854*x2860))+((x2853*x2857))+(((0.120096407259978)*x2867))+(((-1.0)*x2854*x2859))+new_r10);
evalcond[11]=((((-1.0)*x2853*x2860))+((x2853*x2859))+((cj2*x2866))+new_r11+((x2854*x2857)));
evalcond[12]=((((-0.120096407259978)*x2863))+(((-0.120096407259978)*x2861))+(((0.901387554667582)*x2858))+(((-1.0)*x2865))+(((-1.0)*new_r10*x2857))+(((0.41602564443501)*new_r20)));
evalcond[13]=((((-0.120096407259978)*x2864))+(((0.901387554667582)*x2855))+(((-1.0)*new_r11*x2857))+(((0.41602564443501)*new_r21))+(((-1.0)*x2854))+(((-0.120096407259978)*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2870=(new_r00*sj2);
IkReal x2871=(cj2*new_r10);
if( IKabs(((((46055058.2492671)*new_r20))+(((159539204.583919)*x2870))+(((159539204.583919)*x2871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-95871094.4761737)*new_r20))+(((-332106811.287032)*x2870))+(((-332106811.287032)*x2871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((46055058.2492671)*new_r20))+(((159539204.583919)*x2870))+(((159539204.583919)*x2871))))+IKsqr(((((-95871094.4761737)*new_r20))+(((-332106811.287032)*x2870))+(((-332106811.287032)*x2871))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((46055058.2492671)*new_r20))+(((159539204.583919)*x2870))+(((159539204.583919)*x2871))), ((((-95871094.4761737)*new_r20))+(((-332106811.287032)*x2870))+(((-332106811.287032)*x2871))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2872=IKcos(j0);
IkReal x2873=IKsin(j0);
IkReal x2874=(cj2*new_r01);
IkReal x2875=(new_r01*sj2);
IkReal x2876=((0.901387554667582)*sj2);
IkReal x2877=(cj2*new_r00);
IkReal x2878=((0.433013258970445)*sj2);
IkReal x2879=((0.250000205066586)*cj2);
IkReal x2880=(new_r00*sj2);
IkReal x2881=((1.0)*sj2);
IkReal x2882=(cj2*new_r10);
IkReal x2883=(cj2*new_r11);
IkReal x2884=((1.0)*x2872);
IkReal x2885=((0.120096407259978)*x2873);
IkReal x2886=(cj2*x2872);
IkReal x2887=(sj2*x2872);
IkReal x2888=(cj2*x2873);
evalcond[0]=((((-0.866025066047432)*x2873))+(((-0.41602564443501)*x2872))+new_r20);
evalcond[1]=((((-0.41602564443501)*x2873))+(((0.866025066047432)*x2872))+new_r21);
evalcond[2]=((((0.250000205066586)*x2873))+(((0.120096407259978)*x2872))+x2882+x2880);
evalcond[3]=((((-0.250000205066586)*x2872))+x2883+x2885+x2875);
evalcond[4]=((((-1.0)*new_r10*x2881))+(((0.433013258970445)*x2873))+(((-0.901387554667582)*x2872))+x2877);
evalcond[5]=((((-0.901387554667582)*x2873))+(((-1.0)*new_r11*x2881))+x2874+(((-0.433013258970445)*x2872)));
evalcond[6]=((((0.250000205066586)*x2880))+(((-1.0)*new_r10*x2878))+(((0.433013258970445)*x2877))+(((-0.866025066047432)*new_r20))+((new_r10*x2879))+x2873);
evalcond[7]=((((-1.0)*new_r11*x2878))+(((0.433013258970445)*x2874))+(((-0.866025066047432)*new_r21))+(((-1.0)*x2884))+((new_r11*x2879))+(((0.250000205066586)*x2875)));
evalcond[8]=((((0.250000205066586)*sj2*x2873))+(((0.433013258970445)*x2888))+(((0.120096407259978)*x2887))+new_r00+(((-0.901387554667582)*x2886)));
evalcond[9]=(((sj2*x2885))+(((-0.250000205066586)*x2887))+new_r01+(((-0.901387554667582)*x2888))+(((-0.433013258970445)*x2886)));
evalcond[10]=(((x2872*x2876))+((x2873*x2879))+(((0.120096407259978)*x2886))+(((-1.0)*x2873*x2878))+new_r10);
evalcond[11]=(((x2872*x2878))+((cj2*x2885))+((x2873*x2876))+(((-1.0)*x2872*x2879))+new_r11);
evalcond[12]=((((-0.120096407259978)*x2882))+(((-0.120096407259978)*x2880))+(((-1.0)*new_r10*x2876))+(((-1.0)*x2884))+(((0.901387554667582)*x2877))+(((0.41602564443501)*new_r20)));
evalcond[13]=((((-0.120096407259978)*x2883))+(((-0.120096407259978)*x2875))+(((-1.0)*x2873))+(((-1.0)*new_r11*x2876))+(((0.901387554667582)*x2874))+(((0.41602564443501)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.938193995582437)*new_r20))+(((0.450694531739873)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.938193995582437)*new_r21))+(((0.450694531739873)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.938193995582437)*new_r20))+(((0.450694531739873)*new_r21))))+IKsqr(((((-0.938193995582437)*new_r21))+(((0.450694531739873)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.938193995582437)*new_r20))+(((0.450694531739873)*new_r21))), ((((-0.938193995582437)*new_r21))+(((0.450694531739873)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2889=IKcos(j0);
IkReal x2890=IKsin(j0);
IkReal x2891=(cj2*new_r01);
IkReal x2892=(new_r01*sj2);
IkReal x2893=((0.901387554667582)*sj2);
IkReal x2894=(cj2*new_r00);
IkReal x2895=((0.433013258970445)*sj2);
IkReal x2896=((0.250000205066586)*cj2);
IkReal x2897=(new_r00*sj2);
IkReal x2898=((1.0)*sj2);
IkReal x2899=(cj2*new_r10);
IkReal x2900=(cj2*new_r11);
IkReal x2901=((1.0)*x2889);
IkReal x2902=((0.120096407259978)*x2890);
IkReal x2903=(cj2*x2889);
IkReal x2904=(sj2*x2889);
IkReal x2905=(cj2*x2890);
evalcond[0]=((((-0.41602564443501)*x2889))+(((-0.866025066047432)*x2890))+new_r20);
evalcond[1]=((((0.866025066047432)*x2889))+(((-0.41602564443501)*x2890))+new_r21);
evalcond[2]=((((0.250000205066586)*x2890))+(((0.120096407259978)*x2889))+x2899+x2897);
evalcond[3]=((((-0.250000205066586)*x2889))+x2892+x2902+x2900);
evalcond[4]=((((-1.0)*new_r10*x2898))+(((-0.901387554667582)*x2889))+x2894+(((0.433013258970445)*x2890)));
evalcond[5]=((((-1.0)*new_r11*x2898))+(((-0.433013258970445)*x2889))+x2891+(((-0.901387554667582)*x2890)));
evalcond[6]=((((-1.0)*new_r10*x2895))+(((0.433013258970445)*x2894))+((new_r10*x2896))+(((-0.866025066047432)*new_r20))+x2890+(((0.250000205066586)*x2897)));
evalcond[7]=((((-1.0)*new_r11*x2895))+(((0.433013258970445)*x2891))+((new_r11*x2896))+(((-1.0)*x2901))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x2892)));
evalcond[8]=((((0.120096407259978)*x2904))+(((0.250000205066586)*sj2*x2890))+(((-0.901387554667582)*x2903))+new_r00+(((0.433013258970445)*x2905)));
evalcond[9]=(((sj2*x2902))+(((-0.901387554667582)*x2905))+(((-0.433013258970445)*x2903))+new_r01+(((-0.250000205066586)*x2904)));
evalcond[10]=(((x2890*x2896))+(((0.120096407259978)*x2903))+(((-1.0)*x2890*x2895))+((x2889*x2893))+new_r10);
evalcond[11]=(((x2890*x2893))+((cj2*x2902))+(((-1.0)*x2889*x2896))+((x2889*x2895))+new_r11);
evalcond[12]=((((-1.0)*new_r10*x2893))+(((-0.120096407259978)*x2897))+(((-0.120096407259978)*x2899))+(((-1.0)*x2901))+(((0.901387554667582)*x2894))+(((0.41602564443501)*new_r20)));
evalcond[13]=((((-1.0)*new_r11*x2893))+(((-0.120096407259978)*x2892))+(((-0.120096407259978)*x2900))+(((0.901387554667582)*x2891))+(((-1.0)*x2890))+(((0.41602564443501)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=(cj1+(((1.50000715088661)*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=((1.00000433017849)+(((-1.0)*(cj1*cj1)))+(((-2.00002336335164)*cj1*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.588000403282025)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-0.55469837;
cj1=0.83205151636979;
j1=-0.5880004;
j0eval[0]=4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-0.55469837;
cj1=0.83205151636979;
j1=-0.5880004;
j0eval[0]=-6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2906=(cj2*new_r10);
IkReal x2907=(new_r00*sj2);
if( IKabs(((((159539204.583919)*x2907))+(((159539204.583919)*x2906)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-332106811.287032)*x2906))+(((-332106811.287032)*x2907)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x2907))+(((159539204.583919)*x2906))))+IKsqr(((((-332106811.287032)*x2906))+(((-332106811.287032)*x2907))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x2907))+(((159539204.583919)*x2906))), ((((-332106811.287032)*x2906))+(((-332106811.287032)*x2907))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2908=IKcos(j0);
IkReal x2909=IKsin(j0);
IkReal x2910=(cj2*new_r01);
IkReal x2911=(new_r01*sj2);
IkReal x2912=((0.901387554667582)*sj2);
IkReal x2913=(cj2*new_r00);
IkReal x2914=((0.433013258970445)*sj2);
IkReal x2915=((0.250000205066586)*cj2);
IkReal x2916=(new_r00*sj2);
IkReal x2917=((1.0)*sj2);
IkReal x2918=(cj2*new_r10);
IkReal x2919=(cj2*new_r11);
IkReal x2920=((1.0)*x2908);
IkReal x2921=((0.120096407259978)*x2909);
IkReal x2922=(cj2*x2908);
IkReal x2923=(sj2*x2908);
IkReal x2924=(cj2*x2909);
evalcond[0]=((((-0.41602564443501)*x2908))+(((-0.866025066047432)*x2909)));
evalcond[1]=((((0.866025066047432)*x2908))+(((-0.41602564443501)*x2909)));
evalcond[2]=((((0.120096407259978)*x2908))+(((0.250000205066586)*x2909))+x2916+x2918);
evalcond[3]=((((-0.250000205066586)*x2908))+x2911+x2919+x2921);
evalcond[4]=((((-1.0)*new_r10*x2917))+(((-0.901387554667582)*x2908))+(((0.433013258970445)*x2909))+x2913);
evalcond[5]=((((-1.0)*new_r11*x2917))+(((-0.433013258970445)*x2908))+(((-0.901387554667582)*x2909))+x2910);
evalcond[6]=(((new_r10*x2915))+(((-1.0)*new_r10*x2914))+(((0.250000205066586)*x2916))+x2909+(((0.433013258970445)*x2913)));
evalcond[7]=(((new_r11*x2915))+(((-1.0)*new_r11*x2914))+(((-1.0)*x2920))+(((0.250000205066586)*x2911))+(((0.433013258970445)*x2910)));
evalcond[8]=((((0.120096407259978)*x2923))+(((-0.901387554667582)*x2922))+(((0.433013258970445)*x2924))+new_r00+(((0.250000205066586)*sj2*x2909)));
evalcond[9]=(((sj2*x2921))+(((-0.250000205066586)*x2923))+(((-0.901387554667582)*x2924))+new_r01+(((-0.433013258970445)*x2922)));
evalcond[10]=((((0.120096407259978)*x2922))+((x2909*x2915))+(((-1.0)*x2909*x2914))+new_r10+((x2908*x2912)));
evalcond[11]=(((cj2*x2921))+((x2909*x2912))+(((-1.0)*x2908*x2915))+new_r11+((x2908*x2914)));
evalcond[12]=((((-1.0)*x2920))+(((-1.0)*new_r10*x2912))+(((0.901387554667582)*x2913))+(((-0.120096407259978)*x2916))+(((-0.120096407259978)*x2918)));
evalcond[13]=((((-1.0)*new_r11*x2912))+(((0.901387554667582)*x2910))+(((-0.120096407259978)*x2919))+(((-0.120096407259978)*x2911))+(((-1.0)*x2909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2925=(new_r01*sj2);
IkReal x2926=(cj2*new_r11);
if( IKabs(((((-1.56124975848881)*x2926))+(((-1.56124975848881)*x2925)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x2925))+(((3.2499953868181)*x2926)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56124975848881)*x2926))+(((-1.56124975848881)*x2925))))+IKsqr(((((3.2499953868181)*x2925))+(((3.2499953868181)*x2926))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56124975848881)*x2926))+(((-1.56124975848881)*x2925))), ((((3.2499953868181)*x2925))+(((3.2499953868181)*x2926))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2927=IKcos(j0);
IkReal x2928=IKsin(j0);
IkReal x2929=(cj2*new_r01);
IkReal x2930=(new_r01*sj2);
IkReal x2931=((0.901387554667582)*sj2);
IkReal x2932=(cj2*new_r00);
IkReal x2933=((0.433013258970445)*sj2);
IkReal x2934=((0.250000205066586)*cj2);
IkReal x2935=(new_r00*sj2);
IkReal x2936=((1.0)*sj2);
IkReal x2937=(cj2*new_r10);
IkReal x2938=(cj2*new_r11);
IkReal x2939=((1.0)*x2927);
IkReal x2940=((0.120096407259978)*x2928);
IkReal x2941=(cj2*x2927);
IkReal x2942=(sj2*x2927);
IkReal x2943=(cj2*x2928);
evalcond[0]=((((-0.41602564443501)*x2927))+(((-0.866025066047432)*x2928)));
evalcond[1]=((((0.866025066047432)*x2927))+(((-0.41602564443501)*x2928)));
evalcond[2]=((((0.120096407259978)*x2927))+x2937+x2935+(((0.250000205066586)*x2928)));
evalcond[3]=(x2938+x2930+x2940+(((-0.250000205066586)*x2927)));
evalcond[4]=((((0.433013258970445)*x2928))+(((-0.901387554667582)*x2927))+(((-1.0)*new_r10*x2936))+x2932);
evalcond[5]=((((-0.433013258970445)*x2927))+(((-0.901387554667582)*x2928))+(((-1.0)*new_r11*x2936))+x2929);
evalcond[6]=((((0.433013258970445)*x2932))+(((-1.0)*new_r10*x2933))+x2928+((new_r10*x2934))+(((0.250000205066586)*x2935)));
evalcond[7]=((((-1.0)*x2939))+(((0.433013258970445)*x2929))+((new_r11*x2934))+(((-1.0)*new_r11*x2933))+(((0.250000205066586)*x2930)));
evalcond[8]=((((-0.901387554667582)*x2941))+(((0.433013258970445)*x2943))+(((0.250000205066586)*sj2*x2928))+(((0.120096407259978)*x2942))+new_r00);
evalcond[9]=((((-0.901387554667582)*x2943))+(((-0.250000205066586)*x2942))+((sj2*x2940))+new_r01+(((-0.433013258970445)*x2941)));
evalcond[10]=(((x2928*x2934))+(((0.120096407259978)*x2941))+new_r10+((x2927*x2931))+(((-1.0)*x2928*x2933)));
evalcond[11]=(((x2928*x2931))+(((-1.0)*x2927*x2934))+new_r11+((cj2*x2940))+((x2927*x2933)));
evalcond[12]=((((-0.120096407259978)*x2935))+(((-0.120096407259978)*x2937))+(((-1.0)*x2939))+(((-1.0)*new_r10*x2931))+(((0.901387554667582)*x2932)));
evalcond[13]=((((0.901387554667582)*x2929))+(((-0.120096407259978)*x2930))+(((-0.120096407259978)*x2938))+(((-1.0)*new_r11*x2931))+(((-1.0)*x2928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.55359225030777)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2944=(cj2*new_r10);
IkReal x2945=(new_r00*sj2);
if( IKabs(((((159539204.583919)*x2945))+(((159539204.583919)*x2944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((332106811.287032)*x2945))+(((332106811.287032)*x2944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x2945))+(((159539204.583919)*x2944))))+IKsqr(((((332106811.287032)*x2945))+(((332106811.287032)*x2944))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x2945))+(((159539204.583919)*x2944))), ((((332106811.287032)*x2945))+(((332106811.287032)*x2944))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2946=IKcos(j0);
IkReal x2947=IKsin(j0);
IkReal x2948=(cj2*new_r01);
IkReal x2949=(new_r01*sj2);
IkReal x2950=((0.901387554667582)*sj2);
IkReal x2951=(cj2*new_r00);
IkReal x2952=((0.433013258970445)*sj2);
IkReal x2953=((0.250000205066586)*cj2);
IkReal x2954=(new_r00*sj2);
IkReal x2955=((1.0)*sj2);
IkReal x2956=(cj2*new_r10);
IkReal x2957=(cj2*new_r11);
IkReal x2958=((1.0)*x2946);
IkReal x2959=((0.120096407259978)*x2947);
IkReal x2960=(cj2*x2946);
IkReal x2961=(sj2*x2946);
IkReal x2962=(cj2*x2947);
evalcond[0]=((((-0.866025066047432)*x2947))+(((0.41602564443501)*x2946)));
evalcond[1]=((((0.866025066047432)*x2946))+(((0.41602564443501)*x2947)));
evalcond[2]=((((0.250000205066586)*x2947))+x2954+x2956+(((-0.120096407259978)*x2946)));
evalcond[3]=((((-1.0)*x2959))+(((-0.250000205066586)*x2946))+x2957+x2949);
evalcond[4]=((((-1.0)*new_r10*x2955))+(((0.433013258970445)*x2947))+(((0.901387554667582)*x2946))+x2951);
evalcond[5]=((((-1.0)*new_r11*x2955))+(((-0.433013258970445)*x2946))+(((0.901387554667582)*x2947))+x2948);
evalcond[6]=((((-1.0)*new_r10*x2952))+((new_r10*x2953))+(((0.250000205066586)*x2954))+(((0.433013258970445)*x2951))+x2947);
evalcond[7]=((((-1.0)*new_r11*x2952))+(((0.250000205066586)*x2949))+(((-1.0)*x2958))+(((0.433013258970445)*x2948))+((new_r11*x2953)));
evalcond[8]=((((-0.120096407259978)*x2961))+(((0.433013258970445)*x2962))+new_r00+(((0.250000205066586)*sj2*x2947))+(((0.901387554667582)*x2960)));
evalcond[9]=((((-0.433013258970445)*x2960))+(((-0.250000205066586)*x2961))+(((-1.0)*sj2*x2959))+new_r01+(((0.901387554667582)*x2962)));
evalcond[10]=((((-1.0)*x2947*x2952))+(((-0.120096407259978)*x2960))+((x2947*x2953))+new_r10+(((-1.0)*x2946*x2950)));
evalcond[11]=((((-1.0)*x2947*x2950))+((x2946*x2952))+(((-1.0)*cj2*x2959))+new_r11+(((-1.0)*x2946*x2953)));
evalcond[12]=(((new_r10*x2950))+(((0.120096407259978)*x2956))+(((0.120096407259978)*x2954))+(((-1.0)*x2958))+(((-0.901387554667582)*x2951)));
evalcond[13]=((((0.120096407259978)*x2957))+(((-1.0)*x2947))+(((-0.901387554667582)*x2948))+(((0.120096407259978)*x2949))+((new_r11*x2950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2963=(new_r01*sj2);
IkReal x2964=(cj2*new_r11);
if( IKabs(((((1.56124975848881)*x2963))+(((1.56124975848881)*x2964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x2964))+(((3.2499953868181)*x2963)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.56124975848881)*x2963))+(((1.56124975848881)*x2964))))+IKsqr(((((3.2499953868181)*x2964))+(((3.2499953868181)*x2963))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.56124975848881)*x2963))+(((1.56124975848881)*x2964))), ((((3.2499953868181)*x2964))+(((3.2499953868181)*x2963))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2965=IKcos(j0);
IkReal x2966=IKsin(j0);
IkReal x2967=(cj2*new_r01);
IkReal x2968=(new_r01*sj2);
IkReal x2969=((0.901387554667582)*sj2);
IkReal x2970=(cj2*new_r00);
IkReal x2971=((0.433013258970445)*sj2);
IkReal x2972=((0.250000205066586)*cj2);
IkReal x2973=(new_r00*sj2);
IkReal x2974=((1.0)*sj2);
IkReal x2975=(cj2*new_r10);
IkReal x2976=(cj2*new_r11);
IkReal x2977=((1.0)*x2965);
IkReal x2978=((0.120096407259978)*x2966);
IkReal x2979=(cj2*x2965);
IkReal x2980=(sj2*x2965);
IkReal x2981=(cj2*x2966);
evalcond[0]=((((-0.866025066047432)*x2966))+(((0.41602564443501)*x2965)));
evalcond[1]=((((0.866025066047432)*x2965))+(((0.41602564443501)*x2966)));
evalcond[2]=((((-0.120096407259978)*x2965))+(((0.250000205066586)*x2966))+x2973+x2975);
evalcond[3]=((((-1.0)*x2978))+(((-0.250000205066586)*x2965))+x2976+x2968);
evalcond[4]=((((0.433013258970445)*x2966))+(((-1.0)*new_r10*x2974))+x2970+(((0.901387554667582)*x2965)));
evalcond[5]=((((-0.433013258970445)*x2965))+(((-1.0)*new_r11*x2974))+x2967+(((0.901387554667582)*x2966)));
evalcond[6]=((((0.250000205066586)*x2973))+(((0.433013258970445)*x2970))+((new_r10*x2972))+(((-1.0)*new_r10*x2971))+x2966);
evalcond[7]=((((0.250000205066586)*x2968))+(((0.433013258970445)*x2967))+(((-1.0)*x2977))+(((-1.0)*new_r11*x2971))+((new_r11*x2972)));
evalcond[8]=((((0.433013258970445)*x2981))+(((0.901387554667582)*x2979))+(((0.250000205066586)*sj2*x2966))+new_r00+(((-0.120096407259978)*x2980)));
evalcond[9]=((((-0.250000205066586)*x2980))+(((0.901387554667582)*x2981))+new_r01+(((-1.0)*sj2*x2978))+(((-0.433013258970445)*x2979)));
evalcond[10]=((((-0.120096407259978)*x2979))+(((-1.0)*x2965*x2969))+((x2966*x2972))+new_r10+(((-1.0)*x2966*x2971)));
evalcond[11]=((((-1.0)*x2965*x2972))+(((-1.0)*x2966*x2969))+(((-1.0)*cj2*x2978))+new_r11+((x2965*x2971)));
evalcond[12]=((((-0.901387554667582)*x2970))+(((-1.0)*x2977))+(((0.120096407259978)*x2973))+(((0.120096407259978)*x2975))+((new_r10*x2969)));
evalcond[13]=((((-1.0)*x2966))+(((-0.901387554667582)*x2967))+(((0.120096407259978)*x2976))+(((0.120096407259978)*x2968))+((new_r11*x2969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2982=cj1*cj1;
IkReal x2983=(cj1*sj1);
IkReal x2984=(new_r01*sj2);
IkReal x2985=((5773502018908.78)*sj1);
IkReal x2986=((2.66666292511974e+18)*cj1);
IkReal x2987=(cj2*new_r11);
CheckValue<IkReal> x2988=IKPowWithIntegerCheck(((1.15469306414004e+18)+(((-1.15468806413462e+18)*x2982))+(((-2.30940310565252e+18)*x2983))),-1);
if(!x2988.valid){
continue;
}
CheckValue<IkReal> x2989=IKPowWithIntegerCheck(((1.15469036227374e+28)+(((-2.3093977018802e+28)*x2983))+(((-1.15468536228002e+28)*x2982))),-1);
if(!x2989.valid){
continue;
}
if( IKabs(((x2988.value)*(((((-1.0)*x2985*x2987))+(((-1.0)*x2984*x2986))+(((-1.0)*x2984*x2985))+(((-1.0)*x2986*x2987)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2989.value)*(((((4.61877766044193e+28)*x2984))+(((4.61877766044193e+28)*x2987)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2988.value)*(((((-1.0)*x2985*x2987))+(((-1.0)*x2984*x2986))+(((-1.0)*x2984*x2985))+(((-1.0)*x2986*x2987))))))+IKsqr(((x2989.value)*(((((4.61877766044193e+28)*x2984))+(((4.61877766044193e+28)*x2987))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2988.value)*(((((-1.0)*x2985*x2987))+(((-1.0)*x2984*x2986))+(((-1.0)*x2984*x2985))+(((-1.0)*x2986*x2987))))), ((x2989.value)*(((((4.61877766044193e+28)*x2984))+(((4.61877766044193e+28)*x2987))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x2990=IKcos(j0);
IkReal x2991=IKsin(j0);
IkReal x2992=(cj2*new_r01);
IkReal x2993=((0.433010506600939)*cj1);
IkReal x2994=(new_r01*sj2);
IkReal x2995=((0.866026442229025)*sj1);
IkReal x2996=(new_r00*sj2);
IkReal x2997=(cj2*new_r00);
IkReal x2998=(new_r11*sj2);
IkReal x2999=((0.49999820135573)*sj1);
IkReal x3000=((0.75000087746404)*cj1);
IkReal x3001=(cj2*new_r10);
IkReal x3002=(new_r10*sj2);
IkReal x3003=((0.500000584976027)*cj1);
IkReal x3004=(cj2*new_r11);
IkReal x3005=((1.08253441393799e-6)*sj1);
IkReal x3006=((1.0)*x2990);
IkReal x3007=(cj2*x2990);
IkReal x3008=(sj2*x2990);
IkReal x3009=(cj2*x2991);
IkReal x3010=(sj2*x2991);
evalcond[0]=((((-1.0)*x2990*x3005))+(((-1.0)*x2990*x3003))+(((-0.866025066047432)*x2991)));
evalcond[1]=((((-1.0)*x2991*x3005))+(((-1.0)*x2991*x3003))+(((0.866025066047432)*x2990)));
evalcond[2]=((((0.433013258970445)*x2997))+(((-0.433013258970445)*x3002))+x2991+(((0.250000205066586)*x3001))+(((0.250000205066586)*x2996)));
evalcond[3]=(x3001+(((0.250000205066586)*x2991))+(((-1.0)*x2990*x2993))+(((-1.0)*x2990*x2995))+x2996);
evalcond[4]=(x3004+(((-0.250000205066586)*x2990))+(((-1.0)*x2991*x2995))+(((-1.0)*x2991*x2993))+x2994);
evalcond[5]=(((x2990*x2999))+(((-1.0)*x3002))+(((-1.0)*x2990*x3000))+x2997+(((0.433013258970445)*x2991)));
evalcond[6]=((((-1.0)*x2991*x3000))+((x2991*x2999))+(((-1.0)*x2998))+(((-0.433013258970445)*x2990))+x2992);
evalcond[7]=((((0.433013258970445)*x2992))+(((-1.0)*x3006))+(((-0.433013258970445)*x2998))+(((0.250000205066586)*x3004))+(((0.250000205066586)*x2994)));
evalcond[8]=(((x2999*x3007))+(((-1.0)*x3000*x3007))+(((0.433013258970445)*x3009))+(((-1.0)*x2995*x3008))+(((-1.0)*x2993*x3008))+new_r00+(((0.250000205066586)*x3010)));
evalcond[9]=(((x2999*x3009))+(((-1.0)*x3000*x3009))+(((-0.433013258970445)*x3007))+(((-1.0)*x2995*x3010))+(((-1.0)*x2993*x3010))+(((-0.250000205066586)*x3008))+new_r01);
evalcond[10]=((((-0.433013258970445)*x3010))+((x3000*x3008))+(((-1.0)*x2995*x3007))+(((-1.0)*x2993*x3007))+new_r10+(((-1.0)*x2999*x3008))+(((0.250000205066586)*x3009)));
evalcond[11]=((((0.433013258970445)*x3008))+((x3000*x3010))+(((-1.0)*x2995*x3009))+(((-1.0)*x2993*x3009))+(((-0.250000205066586)*x3007))+new_r11+(((-1.0)*x2999*x3010)));
evalcond[12]=(((x2995*x2996))+((x2999*x3002))+(((-1.0)*x3000*x3002))+((x2993*x3001))+((x2995*x3001))+(((-1.0)*x3006))+(((-1.0)*x2997*x2999))+((x2993*x2996))+((x2997*x3000)));
evalcond[13]=((((-1.0)*x2992*x2999))+((x2993*x3004))+((x2995*x3004))+(((-1.0)*x2998*x3000))+((x2998*x2999))+((x2993*x2994))+(((-1.0)*x2991))+((x2994*x2995))+((x2992*x3000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3011=(cj2*new_r10);
IkReal x3012=((1.15469770189828e+19)*cj1);
IkReal x3013=(new_r00*sj2);
IkReal x3014=((24999970751232.9)*sj1);
CheckValue<IkReal> x3015=IKPowWithIntegerCheck(((((1.73204655284742e+19)*sj1))+(((1.15469219718296e+19)*cj1))),-1);
if(!x3015.valid){
continue;
}
CheckValue<IkReal> x3016=IKPowWithIntegerCheck(((((577350201.890878)*sj1))+(((384898299.684519)*cj1))),-1);
if(!x3016.valid){
continue;
}
if( IKabs(((x3015.value)*(((((-1.0)*x3011*x3014))+(((-1.0)*x3011*x3012))+(((-1.0)*x3012*x3013))+(((-1.0)*x3013*x3014)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3016.value)*(((((666665549.0)*x3013))+(((666665549.0)*x3011)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3015.value)*(((((-1.0)*x3011*x3014))+(((-1.0)*x3011*x3012))+(((-1.0)*x3012*x3013))+(((-1.0)*x3013*x3014))))))+IKsqr(((x3016.value)*(((((666665549.0)*x3013))+(((666665549.0)*x3011))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3015.value)*(((((-1.0)*x3011*x3014))+(((-1.0)*x3011*x3012))+(((-1.0)*x3012*x3013))+(((-1.0)*x3013*x3014))))), ((x3016.value)*(((((666665549.0)*x3013))+(((666665549.0)*x3011))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3017=IKcos(j0);
IkReal x3018=IKsin(j0);
IkReal x3019=(cj2*new_r01);
IkReal x3020=((0.433010506600939)*cj1);
IkReal x3021=(new_r01*sj2);
IkReal x3022=((0.866026442229025)*sj1);
IkReal x3023=(new_r00*sj2);
IkReal x3024=(cj2*new_r00);
IkReal x3025=(new_r11*sj2);
IkReal x3026=((0.49999820135573)*sj1);
IkReal x3027=((0.75000087746404)*cj1);
IkReal x3028=(cj2*new_r10);
IkReal x3029=(new_r10*sj2);
IkReal x3030=((0.500000584976027)*cj1);
IkReal x3031=(cj2*new_r11);
IkReal x3032=((1.08253441393799e-6)*sj1);
IkReal x3033=((1.0)*x3017);
IkReal x3034=(cj2*x3017);
IkReal x3035=(sj2*x3017);
IkReal x3036=(cj2*x3018);
IkReal x3037=(sj2*x3018);
evalcond[0]=((((-1.0)*x3017*x3032))+(((-1.0)*x3017*x3030))+(((-0.866025066047432)*x3018)));
evalcond[1]=((((-1.0)*x3018*x3032))+(((-1.0)*x3018*x3030))+(((0.866025066047432)*x3017)));
evalcond[2]=(x3018+(((0.250000205066586)*x3028))+(((0.250000205066586)*x3023))+(((-0.433013258970445)*x3029))+(((0.433013258970445)*x3024)));
evalcond[3]=((((0.250000205066586)*x3018))+x3028+x3023+(((-1.0)*x3017*x3020))+(((-1.0)*x3017*x3022)));
evalcond[4]=((((-1.0)*x3018*x3020))+(((-1.0)*x3018*x3022))+x3031+x3021+(((-0.250000205066586)*x3017)));
evalcond[5]=((((0.433013258970445)*x3018))+x3024+((x3017*x3026))+(((-1.0)*x3029))+(((-1.0)*x3017*x3027)));
evalcond[6]=((((-0.433013258970445)*x3017))+(((-1.0)*x3018*x3027))+x3019+(((-1.0)*x3025))+((x3018*x3026)));
evalcond[7]=((((0.433013258970445)*x3019))+(((0.250000205066586)*x3031))+(((-1.0)*x3033))+(((0.250000205066586)*x3021))+(((-0.433013258970445)*x3025)));
evalcond[8]=(((x3026*x3034))+(((0.250000205066586)*x3037))+(((-1.0)*x3020*x3035))+(((-1.0)*x3027*x3034))+new_r00+(((-1.0)*x3022*x3035))+(((0.433013258970445)*x3036)));
evalcond[9]=(((x3026*x3036))+(((-0.250000205066586)*x3035))+(((-1.0)*x3020*x3037))+(((-1.0)*x3027*x3036))+(((-0.433013258970445)*x3034))+new_r01+(((-1.0)*x3022*x3037)));
evalcond[10]=((((0.250000205066586)*x3036))+(((-1.0)*x3020*x3034))+(((-1.0)*x3026*x3035))+(((-0.433013258970445)*x3037))+new_r10+(((-1.0)*x3022*x3034))+((x3027*x3035)));
evalcond[11]=((((-0.250000205066586)*x3034))+(((-1.0)*x3020*x3036))+(((-1.0)*x3026*x3037))+new_r11+(((-1.0)*x3022*x3036))+(((0.433013258970445)*x3035))+((x3027*x3037)));
evalcond[12]=((((-1.0)*x3027*x3029))+((x3020*x3028))+((x3020*x3023))+(((-1.0)*x3033))+(((-1.0)*x3024*x3026))+((x3024*x3027))+((x3022*x3023))+((x3022*x3028))+((x3026*x3029)));
evalcond[13]=(((x3019*x3027))+(((-1.0)*x3019*x3026))+((x3022*x3031))+((x3021*x3022))+((x3020*x3021))+(((-1.0)*x3025*x3027))+((x3025*x3026))+((x3020*x3031))+(((-1.0)*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3038=(cj2*new_r10);
IkReal x3039=((1.15469770189828e+19)*cj1);
IkReal x3040=(new_r00*sj2);
IkReal x3041=((24999970751232.9)*sj1);
CheckValue<IkReal> x3042=IKPowWithIntegerCheck(((((-1.15469219718296e+19)*cj1))+(((-1.73204655284742e+19)*sj1))),-1);
if(!x3042.valid){
continue;
}
CheckValue<IkReal> x3043=IKPowWithIntegerCheck(((((577350201.890878)*sj1))+(((384898299.684519)*cj1))),-1);
if(!x3043.valid){
continue;
}
if( IKabs(((x3042.value)*((((x3038*x3039))+((x3039*x3040))+(((-1.99999514535157e+19)*new_r20*sj1))+(((-9.99991303797949e+18)*cj1*new_r20))+((x3040*x3041))+((x3038*x3041)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3043.value)*(((((666665549.0)*x3038))+(((666665549.0)*x3040))+(((192450000.0)*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3042.value)*((((x3038*x3039))+((x3039*x3040))+(((-1.99999514535157e+19)*new_r20*sj1))+(((-9.99991303797949e+18)*cj1*new_r20))+((x3040*x3041))+((x3038*x3041))))))+IKsqr(((x3043.value)*(((((666665549.0)*x3038))+(((666665549.0)*x3040))+(((192450000.0)*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3042.value)*((((x3038*x3039))+((x3039*x3040))+(((-1.99999514535157e+19)*new_r20*sj1))+(((-9.99991303797949e+18)*cj1*new_r20))+((x3040*x3041))+((x3038*x3041))))), ((x3043.value)*(((((666665549.0)*x3038))+(((666665549.0)*x3040))+(((192450000.0)*new_r20))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3044=IKcos(j0);
IkReal x3045=IKsin(j0);
IkReal x3046=(cj2*new_r01);
IkReal x3047=((0.433010506600939)*cj1);
IkReal x3048=(new_r01*sj2);
IkReal x3049=((0.866026442229025)*sj2);
IkReal x3050=(new_r00*sj2);
IkReal x3051=((0.49999820135573)*sj1);
IkReal x3052=(cj2*new_r00);
IkReal x3053=(new_r11*sj2);
IkReal x3054=((0.500000584976027)*cj1);
IkReal x3055=((0.866026442229025)*sj1);
IkReal x3056=(cj2*new_r10);
IkReal x3057=((0.75000087746404)*cj1);
IkReal x3058=(new_r10*sj2);
IkReal x3059=(cj2*new_r11);
IkReal x3060=((1.08253441393799e-6)*sj1);
IkReal x3061=((1.0)*x3044);
IkReal x3062=(cj2*x3044);
IkReal x3063=(sj1*x3044);
IkReal x3064=(sj1*x3045);
IkReal x3065=(sj2*x3044);
IkReal x3066=(cj2*x3045);
IkReal x3067=(sj2*x3045);
IkReal x3068=(x3045*x3057);
evalcond[0]=((((-0.866025066047432)*x3045))+(((-1.0)*x3044*x3060))+(((-1.0)*x3044*x3054))+new_r20);
evalcond[1]=((((0.866025066047432)*x3044))+(((-1.0)*x3045*x3054))+(((-1.0)*x3045*x3060))+new_r21);
evalcond[2]=(x3056+x3050+(((0.250000205066586)*x3045))+(((-1.0)*x3044*x3055))+(((-1.0)*x3044*x3047)));
evalcond[3]=((((-1.0)*x3045*x3047))+x3048+x3059+(((-1.0)*x3045*x3055))+(((-0.250000205066586)*x3044)));
evalcond[4]=(x3052+(((-1.0)*x3058))+((x3044*x3051))+(((-1.0)*x3044*x3057))+(((0.433013258970445)*x3045)));
evalcond[5]=(x3046+((x3045*x3051))+(((-1.0)*x3053))+(((-0.433013258970445)*x3044))+(((-1.0)*x3068)));
evalcond[6]=((((0.433013258970445)*x3052))+x3045+(((0.250000205066586)*x3056))+(((0.250000205066586)*x3050))+(((-0.433013258970445)*x3058))+(((-0.866025066047432)*new_r20)));
evalcond[7]=((((0.250000205066586)*x3059))+(((-1.0)*x3061))+(((-0.433013258970445)*x3053))+(((0.433013258970445)*x3046))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x3048)));
evalcond[8]=((((-1.0)*x3049*x3063))+(((0.250000205066586)*x3067))+(((0.433013258970445)*x3066))+(((-1.0)*x3047*x3065))+new_r00+((x3051*x3062))+(((-1.0)*x3057*x3062)));
evalcond[9]=((((-1.0)*x3049*x3064))+(((-1.0)*x3047*x3067))+(((-0.433013258970445)*x3062))+(((-0.250000205066586)*x3065))+new_r01+((x3051*x3066))+(((-1.0)*x3057*x3066)));
evalcond[10]=((((0.250000205066586)*x3066))+(((-1.0)*x3047*x3062))+(((-0.433013258970445)*x3067))+(((-1.0)*x3055*x3062))+((x3057*x3065))+(((-1.0)*x3051*x3065))+new_r10);
evalcond[11]=((((0.433013258970445)*x3065))+(((-1.0)*x3047*x3066))+(((-1.0)*x3055*x3066))+(((-0.250000205066586)*x3062))+((x3057*x3067))+(((-1.0)*x3051*x3067))+new_r11);
evalcond[12]=((((-1.0)*x3051*x3052))+((new_r20*x3060))+(((-1.0)*x3057*x3058))+(((-1.0)*x3061))+((x3051*x3058))+((x3052*x3057))+((new_r00*sj1*x3049))+((x3055*x3056))+((x3047*x3056))+((x3047*x3050))+((new_r20*x3054)));
evalcond[13]=(((x3048*x3055))+((x3047*x3048))+(((-1.0)*x3053*x3057))+((new_r21*x3054))+((x3051*x3053))+(((-1.0)*x3046*x3051))+(((-1.0)*x3045))+((x3055*x3059))+((x3047*x3059))+((new_r21*x3060))+((x3046*x3057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3069=(cj2*new_r11);
IkReal x3070=(new_r01*sj2);
IkReal x3071=((5.77348850949141e+22)*sj1);
IkReal x3072=((2.66665668539516e+28)*cj1);
CheckValue<IkReal> x3073 = IKatan2WithCheck(IkReal((((x3070*x3072))+((x3070*x3071))+((x3069*x3071))+((x3069*x3072))+(((-1.33332787645226e+28)*new_r20)))),IkReal(((((2.30937802268591e+28)*cj1*new_r20))+(((4.61878500004103e+28)*new_r20*sj1))+(((-4.61877766044193e+28)*x3070))+(((-4.61877766044193e+28)*x3069)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3073.valid){
continue;
}
CheckValue<IkReal> x3074=IKPowWithIntegerCheck(IKsign(((-1.15469036227374e+28)+(((1.15468536228002e+28)*(cj1*cj1)))+(((2.3093977018802e+28)*cj1*sj1)))),-1);
if(!x3074.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3073.value)+(((1.5707963267949)*(x3074.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3075=IKcos(j0);
IkReal x3076=IKsin(j0);
IkReal x3077=(cj2*new_r01);
IkReal x3078=((0.433010506600939)*cj1);
IkReal x3079=(new_r01*sj2);
IkReal x3080=((0.866026442229025)*sj2);
IkReal x3081=(new_r00*sj2);
IkReal x3082=((0.49999820135573)*sj1);
IkReal x3083=(cj2*new_r00);
IkReal x3084=(new_r11*sj2);
IkReal x3085=((0.500000584976027)*cj1);
IkReal x3086=((0.866026442229025)*sj1);
IkReal x3087=(cj2*new_r10);
IkReal x3088=((0.75000087746404)*cj1);
IkReal x3089=(new_r10*sj2);
IkReal x3090=(cj2*new_r11);
IkReal x3091=((1.08253441393799e-6)*sj1);
IkReal x3092=((1.0)*x3075);
IkReal x3093=(cj2*x3075);
IkReal x3094=(sj1*x3075);
IkReal x3095=(sj1*x3076);
IkReal x3096=(sj2*x3075);
IkReal x3097=(cj2*x3076);
IkReal x3098=(sj2*x3076);
IkReal x3099=(x3076*x3088);
evalcond[0]=((((-1.0)*x3075*x3091))+(((-1.0)*x3075*x3085))+(((-0.866025066047432)*x3076))+new_r20);
evalcond[1]=((((-1.0)*x3076*x3091))+(((-1.0)*x3076*x3085))+new_r21+(((0.866025066047432)*x3075)));
evalcond[2]=((((0.250000205066586)*x3076))+x3087+x3081+(((-1.0)*x3075*x3086))+(((-1.0)*x3075*x3078)));
evalcond[3]=(x3090+x3079+(((-1.0)*x3076*x3086))+(((-0.250000205066586)*x3075))+(((-1.0)*x3076*x3078)));
evalcond[4]=((((0.433013258970445)*x3076))+x3083+(((-1.0)*x3075*x3088))+(((-1.0)*x3089))+((x3075*x3082)));
evalcond[5]=((((-0.433013258970445)*x3075))+x3077+(((-1.0)*x3099))+(((-1.0)*x3084))+((x3076*x3082)));
evalcond[6]=(x3076+(((0.250000205066586)*x3087))+(((0.250000205066586)*x3081))+(((-0.866025066047432)*new_r20))+(((-0.433013258970445)*x3089))+(((0.433013258970445)*x3083)));
evalcond[7]=((((-1.0)*x3092))+(((0.433013258970445)*x3077))+(((-0.866025066047432)*new_r21))+(((-0.433013258970445)*x3084))+(((0.250000205066586)*x3090))+(((0.250000205066586)*x3079)));
evalcond[8]=((((-1.0)*x3078*x3096))+(((0.433013258970445)*x3097))+(((-1.0)*x3080*x3094))+((x3082*x3093))+(((-1.0)*x3088*x3093))+new_r00+(((0.250000205066586)*x3098)));
evalcond[9]=((((-1.0)*x3078*x3098))+(((-0.433013258970445)*x3093))+(((-1.0)*x3080*x3095))+((x3082*x3097))+(((-1.0)*x3088*x3097))+new_r01+(((-0.250000205066586)*x3096)));
evalcond[10]=((((-1.0)*x3078*x3093))+(((-0.433013258970445)*x3098))+(((-1.0)*x3082*x3096))+((x3088*x3096))+(((-1.0)*x3086*x3093))+new_r10+(((0.250000205066586)*x3097)));
evalcond[11]=((((-1.0)*x3078*x3097))+(((-1.0)*x3082*x3098))+((x3088*x3098))+(((0.433013258970445)*x3096))+(((-1.0)*x3086*x3097))+new_r11+(((-0.250000205066586)*x3093)));
evalcond[12]=(((new_r00*sj1*x3080))+(((-1.0)*x3092))+((x3083*x3088))+(((-1.0)*x3082*x3083))+((x3082*x3089))+((new_r20*x3091))+((new_r20*x3085))+((x3086*x3087))+(((-1.0)*x3088*x3089))+((x3078*x3087))+((x3078*x3081)));
evalcond[13]=((((-1.0)*x3076))+((x3086*x3090))+((x3082*x3084))+((x3078*x3079))+(((-1.0)*x3077*x3082))+((new_r21*x3085))+((new_r21*x3091))+((x3079*x3086))+(((-1.0)*x3084*x3088))+((x3078*x3090))+((x3077*x3088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3100=((5.77348850949141e+22)*sj1);
IkReal x3101=((2.66665668539516e+28)*cj1);
CheckValue<IkReal> x3102 = IKatan2WithCheck(IkReal(((((4.61877766044193e+28)*new_r20))+((new_r21*x3100))+((new_r21*x3101)))),IkReal(((((-4.61877766044193e+28)*new_r21))+((new_r20*x3101))+((new_r20*x3100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3102.valid){
continue;
}
CheckValue<IkReal> x3103=IKPowWithIntegerCheck(IKsign(((3.99997722844887e+28)+(((1.33332990262156e+28)*(cj1*cj1)))+(((5.77349526419614e+22)*cj1*sj1)))),-1);
if(!x3103.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3102.value)+(((1.5707963267949)*(x3103.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3104=IKcos(j0);
IkReal x3105=IKsin(j0);
IkReal x3106=(cj2*new_r01);
IkReal x3107=((0.433010506600939)*cj1);
IkReal x3108=(new_r01*sj2);
IkReal x3109=((0.866026442229025)*sj2);
IkReal x3110=(new_r00*sj2);
IkReal x3111=((0.49999820135573)*sj1);
IkReal x3112=(cj2*new_r00);
IkReal x3113=(new_r11*sj2);
IkReal x3114=((0.500000584976027)*cj1);
IkReal x3115=((0.866026442229025)*sj1);
IkReal x3116=(cj2*new_r10);
IkReal x3117=((0.75000087746404)*cj1);
IkReal x3118=(new_r10*sj2);
IkReal x3119=(cj2*new_r11);
IkReal x3120=((1.08253441393799e-6)*sj1);
IkReal x3121=((1.0)*x3104);
IkReal x3122=(cj2*x3104);
IkReal x3123=(sj1*x3104);
IkReal x3124=(sj1*x3105);
IkReal x3125=(sj2*x3104);
IkReal x3126=(cj2*x3105);
IkReal x3127=(sj2*x3105);
IkReal x3128=(x3105*x3117);
evalcond[0]=((((-1.0)*x3104*x3120))+(((-1.0)*x3104*x3114))+(((-0.866025066047432)*x3105))+new_r20);
evalcond[1]=((((0.866025066047432)*x3104))+(((-1.0)*x3105*x3120))+(((-1.0)*x3105*x3114))+new_r21);
evalcond[2]=(x3116+x3110+(((-1.0)*x3104*x3115))+(((0.250000205066586)*x3105))+(((-1.0)*x3104*x3107)));
evalcond[3]=(x3108+x3119+(((-0.250000205066586)*x3104))+(((-1.0)*x3105*x3115))+(((-1.0)*x3105*x3107)));
evalcond[4]=(x3112+(((0.433013258970445)*x3105))+(((-1.0)*x3118))+(((-1.0)*x3104*x3117))+((x3104*x3111)));
evalcond[5]=(x3106+(((-1.0)*x3113))+(((-0.433013258970445)*x3104))+(((-1.0)*x3128))+((x3105*x3111)));
evalcond[6]=(x3105+(((0.433013258970445)*x3112))+(((-0.433013258970445)*x3118))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x3110))+(((0.250000205066586)*x3116)));
evalcond[7]=((((0.433013258970445)*x3106))+(((-0.433013258970445)*x3113))+(((0.250000205066586)*x3108))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x3119))+(((-1.0)*x3121)));
evalcond[8]=((((-1.0)*x3109*x3123))+(((-1.0)*x3117*x3122))+(((0.433013258970445)*x3126))+(((-1.0)*x3107*x3125))+new_r00+((x3111*x3122))+(((0.250000205066586)*x3127)));
evalcond[9]=((((-1.0)*x3109*x3124))+(((-1.0)*x3117*x3126))+(((-0.433013258970445)*x3122))+(((-1.0)*x3107*x3127))+new_r01+((x3111*x3126))+(((-0.250000205066586)*x3125)));
evalcond[10]=((((-0.433013258970445)*x3127))+(((-1.0)*x3115*x3122))+(((-1.0)*x3111*x3125))+(((-1.0)*x3107*x3122))+new_r10+((x3117*x3125))+(((0.250000205066586)*x3126)));
evalcond[11]=((((0.433013258970445)*x3125))+(((-1.0)*x3115*x3126))+(((-1.0)*x3111*x3127))+(((-1.0)*x3107*x3126))+new_r11+(((-0.250000205066586)*x3122))+((x3117*x3127)));
evalcond[12]=(((new_r20*x3114))+(((-1.0)*x3117*x3118))+((x3112*x3117))+((x3107*x3116))+((x3107*x3110))+((x3111*x3118))+((new_r00*sj1*x3109))+((new_r20*x3120))+(((-1.0)*x3121))+(((-1.0)*x3111*x3112))+((x3115*x3116)));
evalcond[13]=((((-1.0)*x3113*x3117))+((x3107*x3108))+((new_r21*x3114))+((x3107*x3119))+((x3111*x3113))+(((-1.0)*x3105))+((new_r21*x3120))+((x3108*x3115))+(((-1.0)*x3106*x3111))+((x3106*x3117))+((x3115*x3119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x3129=cj1*cj1;
IkReal x3130=(cj1*sj1);
CheckValue<IkReal> x3131=IKPowWithIntegerCheck(IKsign(((((0.433010506600939)*new_r02*sj1))+(((-0.866026442229025)*cj1*new_r02))+(((0.49999820135573)*cj1*new_r12))+(((0.75000087746404)*new_r12*sj1)))),-1);
if(!x3131.valid){
continue;
}
CheckValue<IkReal> x3132 = IKatan2WithCheck(IkReal(((-0.187498098826801)+(((-0.562503699813062)*x3129))+(new_r12*new_r12)+(((0.749997096958797)*x3130)))),IkReal(((-0.324758259901852)+(((0.757769923342867)*x3129))+(((-1.0)*new_r02*new_r12))+(((0.433016117110227)*x3130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3132.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3131.value)))+(x3132.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x3133=IKcos(j2);
IkReal x3134=IKsin(j2);
IkReal x3135=((0.49999820135573)*cj1);
IkReal x3136=((0.500000584976027)*new_r22);
IkReal x3137=((0.866026442229025)*cj1);
IkReal x3138=((0.75000087746404)*cj1);
IkReal x3139=((0.433010506600939)*sj1);
IkReal x3140=((0.75000087746404)*sj1);
IkReal x3141=((0.866026442229025)*sj1);
IkReal x3142=((1.08253441393799e-6)*cj1);
IkReal x3143=((0.49999820135573)*sj1);
IkReal x3144=((0.433010506600939)*cj1);
IkReal x3145=((0.500000584976027)*sj1);
IkReal x3146=(new_r02*x3133);
IkReal x3147=(new_r12*x3133);
IkReal x3148=(new_r12*x3134);
IkReal x3149=(new_r10*x3133);
IkReal x3150=(new_r11*x3134);
IkReal x3151=(new_r01*x3134);
IkReal x3152=(new_r10*x3134);
IkReal x3153=(new_r01*x3133);
IkReal x3154=(new_r00*x3133);
IkReal x3155=(new_r02*x3134);
IkReal x3156=(new_r11*x3133);
IkReal x3157=(new_r00*x3134);
evalcond[0]=(x3147+x3155+x3139+(((-1.0)*x3137)));
evalcond[1]=(x3140+x3146+x3135+(((-1.0)*x3148)));
evalcond[2]=(((x3133*x3135))+((x3134*x3139))+(((-1.0)*x3134*x3137))+((x3133*x3140))+new_r02);
evalcond[3]=(((x3133*x3139))+(((-1.0)*x3133*x3137))+(((-1.0)*x3134*x3135))+(((-1.0)*x3134*x3140))+new_r12);
evalcond[4]=((((0.250000205066586)*x3147))+(((0.250000205066586)*x3155))+(((0.433013258970445)*x3146))+(((-0.866025066047432)*new_r22))+(((-0.433013258970445)*x3148)));
evalcond[5]=((((-1.0)*x3143*x3146))+((cj1*x3136))+((x3144*x3147))+((x3143*x3148))+((x3144*x3155))+(((-1.0)*x3138*x3148))+((x3141*x3155))+((x3138*x3146))+((x3141*x3147))+(((1.08253441393799e-6)*new_r22*sj1)));
evalcond[6]=(((new_r20*x3145))+((x3135*x3154))+(((-1.0)*x3140*x3152))+((x3139*x3157))+(((-1.0)*x3135*x3152))+(((-1.0)*x3137*x3157))+((x3139*x3149))+((x3140*x3154))+(((-1.0)*new_r20*x3142))+(((-1.0)*x3137*x3149)));
evalcond[7]=(((x3135*x3153))+(((-1.0)*x3140*x3150))+(((-1.0)*new_r21*x3142))+((x3139*x3151))+((x3139*x3156))+(((-1.0)*x3135*x3150))+(((-1.0)*x3137*x3151))+(((-1.0)*x3137*x3156))+((x3140*x3153))+((new_r21*x3145)));
evalcond[8]=((1.0)+(((-1.0)*x3140*x3148))+((x3135*x3146))+(((-1.0)*x3135*x3148))+((x3139*x3155))+(((-1.0)*x3137*x3155))+((x3139*x3147))+((x3140*x3146))+(((-1.0)*x3137*x3147))+((sj1*x3136))+(((-1.0)*new_r22*x3142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x3158=cj1*cj1;
IkReal x3159=((5.77348850949141e+22)*sj1);
IkReal x3160=(cj1*sj1);
IkReal x3161=((2.66665668539516e+28)*cj1);
j0eval[0]=((692817.270199286)+x3160+(((230939.810566763)*x3158)));
j0eval[1]=((IKabs(((((-4.61877766044193e+28)*new_r21))+((new_r20*x3161))+((new_r20*x3159)))))+(IKabs(((((4.61877766044193e+28)*new_r20))+((new_r21*x3161))+((new_r21*x3159))))));
j0eval[2]=IKsign(((3.99997722844887e+28)+(((1.33332990262156e+28)*x3158))+(((5.77349526419614e+22)*x3160))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x3162=cj1*cj1;
IkReal x3163=(cj1*sj1);
j0eval[0]=((-1.00000433017849)+x3162+(((2.00002336335164)*x3163)));
j0eval[1]=IKsign(((-1.15469036227374e+28)+(((2.3093977018802e+28)*x3163))+(((1.15468536228002e+28)*x3162))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((((-1.50000715088661)*sj1))+(((-1.0)*cj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.55359225030777)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=1847517.18792274;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=-6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=-4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3164=(cj2*new_r11);
IkReal x3165=(new_r01*sj2);
if( IKabs(((((1.56124975848881)*x3165))+(((1.56124975848881)*x3164))+(((0.938193991171943)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x3164))+(((3.2499953868181)*x3165))+(((-0.450694540921035)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.56124975848881)*x3165))+(((1.56124975848881)*x3164))+(((0.938193991171943)*new_r20))))+IKsqr(((((3.2499953868181)*x3164))+(((3.2499953868181)*x3165))+(((-0.450694540921035)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.56124975848881)*x3165))+(((1.56124975848881)*x3164))+(((0.938193991171943)*new_r20))), ((((3.2499953868181)*x3164))+(((3.2499953868181)*x3165))+(((-0.450694540921035)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3166=IKcos(j0);
IkReal x3167=IKsin(j0);
IkReal x3168=(cj2*new_r01);
IkReal x3169=(new_r01*sj2);
IkReal x3170=((0.901387554667582)*sj2);
IkReal x3171=(cj2*new_r00);
IkReal x3172=((0.433013258970445)*sj2);
IkReal x3173=((0.250000205066586)*cj2);
IkReal x3174=(new_r00*sj2);
IkReal x3175=((1.0)*sj2);
IkReal x3176=(cj2*new_r10);
IkReal x3177=(cj2*new_r11);
IkReal x3178=((1.0)*x3166);
IkReal x3179=((0.120096407259978)*x3167);
IkReal x3180=(cj2*x3166);
IkReal x3181=(sj2*x3166);
IkReal x3182=(cj2*x3167);
evalcond[0]=((((-0.866025066047432)*x3167))+(((0.41602564443501)*x3166))+new_r20);
evalcond[1]=((((0.41602564443501)*x3167))+(((0.866025066047432)*x3166))+new_r21);
evalcond[2]=(x3174+x3176+(((0.250000205066586)*x3167))+(((-0.120096407259978)*x3166)));
evalcond[3]=(x3169+x3177+(((-1.0)*x3179))+(((-0.250000205066586)*x3166)));
evalcond[4]=(x3171+(((0.433013258970445)*x3167))+(((-1.0)*new_r10*x3175))+(((0.901387554667582)*x3166)));
evalcond[5]=(x3168+(((-0.433013258970445)*x3166))+(((-1.0)*new_r11*x3175))+(((0.901387554667582)*x3167)));
evalcond[6]=(x3167+(((0.433013258970445)*x3171))+((new_r10*x3173))+(((-1.0)*new_r10*x3172))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x3174)));
evalcond[7]=((((0.250000205066586)*x3169))+(((-1.0)*x3178))+(((0.433013258970445)*x3168))+((new_r11*x3173))+(((-1.0)*new_r11*x3172))+(((-0.866025066047432)*new_r21)));
evalcond[8]=((((0.250000205066586)*sj2*x3167))+(((0.901387554667582)*x3180))+(((-0.120096407259978)*x3181))+new_r00+(((0.433013258970445)*x3182)));
evalcond[9]=((((-1.0)*sj2*x3179))+(((-0.433013258970445)*x3180))+(((0.901387554667582)*x3182))+(((-0.250000205066586)*x3181))+new_r01);
evalcond[10]=((((-1.0)*x3166*x3170))+(((-1.0)*x3167*x3172))+((x3167*x3173))+(((-0.120096407259978)*x3180))+new_r10);
evalcond[11]=(((x3166*x3172))+(((-1.0)*x3166*x3173))+(((-1.0)*x3167*x3170))+(((-1.0)*cj2*x3179))+new_r11);
evalcond[12]=((((-0.41602564443501)*new_r20))+(((-1.0)*x3178))+((new_r10*x3170))+(((0.120096407259978)*x3176))+(((0.120096407259978)*x3174))+(((-0.901387554667582)*x3171)));
evalcond[13]=((((-0.41602564443501)*new_r21))+(((-0.901387554667582)*x3168))+(((-1.0)*x3167))+((new_r11*x3170))+(((0.120096407259978)*x3177))+(((0.120096407259978)*x3169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3183=(new_r00*sj2);
IkReal x3184=(cj2*new_r10);
if( IKabs(((((46055058.2492671)*new_r20))+(((159539204.583919)*x3183))+(((159539204.583919)*x3184)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((332106811.287032)*x3183))+(((332106811.287032)*x3184))+(((95871094.4761737)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((46055058.2492671)*new_r20))+(((159539204.583919)*x3183))+(((159539204.583919)*x3184))))+IKsqr(((((332106811.287032)*x3183))+(((332106811.287032)*x3184))+(((95871094.4761737)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((46055058.2492671)*new_r20))+(((159539204.583919)*x3183))+(((159539204.583919)*x3184))), ((((332106811.287032)*x3183))+(((332106811.287032)*x3184))+(((95871094.4761737)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3185=IKcos(j0);
IkReal x3186=IKsin(j0);
IkReal x3187=(cj2*new_r01);
IkReal x3188=(new_r01*sj2);
IkReal x3189=((0.901387554667582)*sj2);
IkReal x3190=(cj2*new_r00);
IkReal x3191=((0.433013258970445)*sj2);
IkReal x3192=((0.250000205066586)*cj2);
IkReal x3193=(new_r00*sj2);
IkReal x3194=((1.0)*sj2);
IkReal x3195=(cj2*new_r10);
IkReal x3196=(cj2*new_r11);
IkReal x3197=((1.0)*x3185);
IkReal x3198=((0.120096407259978)*x3186);
IkReal x3199=(cj2*x3185);
IkReal x3200=(sj2*x3185);
IkReal x3201=(cj2*x3186);
evalcond[0]=((((-0.866025066047432)*x3186))+new_r20+(((0.41602564443501)*x3185)));
evalcond[1]=(new_r21+(((0.866025066047432)*x3185))+(((0.41602564443501)*x3186)));
evalcond[2]=(x3195+x3193+(((0.250000205066586)*x3186))+(((-0.120096407259978)*x3185)));
evalcond[3]=(x3188+x3196+(((-1.0)*x3198))+(((-0.250000205066586)*x3185)));
evalcond[4]=(x3190+(((-1.0)*new_r10*x3194))+(((0.901387554667582)*x3185))+(((0.433013258970445)*x3186)));
evalcond[5]=(x3187+(((-1.0)*new_r11*x3194))+(((-0.433013258970445)*x3185))+(((0.901387554667582)*x3186)));
evalcond[6]=(((new_r10*x3192))+x3186+(((-1.0)*new_r10*x3191))+(((0.250000205066586)*x3193))+(((-0.866025066047432)*new_r20))+(((0.433013258970445)*x3190)));
evalcond[7]=((((0.250000205066586)*x3188))+((new_r11*x3192))+(((-1.0)*new_r11*x3191))+(((-0.866025066047432)*new_r21))+(((-1.0)*x3197))+(((0.433013258970445)*x3187)));
evalcond[8]=((((-0.120096407259978)*x3200))+(((0.250000205066586)*sj2*x3186))+(((0.433013258970445)*x3201))+new_r00+(((0.901387554667582)*x3199)));
evalcond[9]=((((0.901387554667582)*x3201))+(((-1.0)*sj2*x3198))+(((-0.250000205066586)*x3200))+new_r01+(((-0.433013258970445)*x3199)));
evalcond[10]=((((-1.0)*x3185*x3189))+(((-1.0)*x3186*x3191))+new_r10+(((-0.120096407259978)*x3199))+((x3186*x3192)));
evalcond[11]=((((-1.0)*cj2*x3198))+(((-1.0)*x3185*x3192))+((x3185*x3191))+(((-1.0)*x3186*x3189))+new_r11);
evalcond[12]=((((-0.41602564443501)*new_r20))+(((-0.901387554667582)*x3190))+(((0.120096407259978)*x3195))+(((0.120096407259978)*x3193))+(((-1.0)*x3197))+((new_r10*x3189)));
evalcond[13]=((((-0.901387554667582)*x3187))+(((-0.41602564443501)*new_r21))+(((0.120096407259978)*x3188))+(((0.120096407259978)*x3196))+(((-1.0)*x3186))+((new_r11*x3189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.938193995582437)*new_r20))+(((-0.450694531739873)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.938193995582437)*new_r21))+(((-0.450694531739873)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.938193995582437)*new_r20))+(((-0.450694531739873)*new_r21))))+IKsqr(((((-0.938193995582437)*new_r21))+(((-0.450694531739873)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.938193995582437)*new_r20))+(((-0.450694531739873)*new_r21))), ((((-0.938193995582437)*new_r21))+(((-0.450694531739873)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3202=IKcos(j0);
IkReal x3203=IKsin(j0);
IkReal x3204=(cj2*new_r01);
IkReal x3205=(new_r01*sj2);
IkReal x3206=((0.901387554667582)*sj2);
IkReal x3207=(cj2*new_r00);
IkReal x3208=((0.433013258970445)*sj2);
IkReal x3209=((0.250000205066586)*cj2);
IkReal x3210=(new_r00*sj2);
IkReal x3211=((1.0)*sj2);
IkReal x3212=(cj2*new_r10);
IkReal x3213=(cj2*new_r11);
IkReal x3214=((1.0)*x3202);
IkReal x3215=((0.120096407259978)*x3203);
IkReal x3216=(cj2*x3202);
IkReal x3217=(sj2*x3202);
IkReal x3218=(cj2*x3203);
evalcond[0]=((((-0.866025066047432)*x3203))+(((0.41602564443501)*x3202))+new_r20);
evalcond[1]=((((0.866025066047432)*x3202))+(((0.41602564443501)*x3203))+new_r21);
evalcond[2]=((((-0.120096407259978)*x3202))+x3210+x3212+(((0.250000205066586)*x3203)));
evalcond[3]=(x3213+x3205+(((-0.250000205066586)*x3202))+(((-1.0)*x3215)));
evalcond[4]=(x3207+(((0.433013258970445)*x3203))+(((-1.0)*new_r10*x3211))+(((0.901387554667582)*x3202)));
evalcond[5]=(x3204+(((-1.0)*new_r11*x3211))+(((-0.433013258970445)*x3202))+(((0.901387554667582)*x3203)));
evalcond[6]=((((0.433013258970445)*x3207))+x3203+(((-0.866025066047432)*new_r20))+(((-1.0)*new_r10*x3208))+((new_r10*x3209))+(((0.250000205066586)*x3210)));
evalcond[7]=((((0.250000205066586)*x3205))+(((0.433013258970445)*x3204))+(((-0.866025066047432)*new_r21))+(((-1.0)*x3214))+(((-1.0)*new_r11*x3208))+((new_r11*x3209)));
evalcond[8]=((((-0.120096407259978)*x3217))+(((0.250000205066586)*sj2*x3203))+(((0.433013258970445)*x3218))+(((0.901387554667582)*x3216))+new_r00);
evalcond[9]=((((0.901387554667582)*x3218))+(((-0.433013258970445)*x3216))+(((-1.0)*sj2*x3215))+(((-0.250000205066586)*x3217))+new_r01);
evalcond[10]=((((-0.120096407259978)*x3216))+(((-1.0)*x3202*x3206))+(((-1.0)*x3203*x3208))+new_r10+((x3203*x3209)));
evalcond[11]=((((-1.0)*cj2*x3215))+(((-1.0)*x3202*x3209))+((x3202*x3208))+(((-1.0)*x3203*x3206))+new_r11);
evalcond[12]=((((-0.41602564443501)*new_r20))+(((-0.901387554667582)*x3207))+(((-1.0)*x3214))+((new_r10*x3206))+(((0.120096407259978)*x3210))+(((0.120096407259978)*x3212)));
evalcond[13]=((((-0.41602564443501)*new_r21))+(((0.120096407259978)*x3205))+(((-1.0)*x3203))+(((-0.901387554667582)*x3204))+((new_r11*x3206))+(((0.120096407259978)*x3213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-5.69518490389756)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
sj1=-0.55469837;
cj1=0.83205151636979;
j1=5.69518503997906;
j0eval[0]=1847517.18792274;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=-0.55469837;
cj1=0.83205151636979;
j1=5.69518503997906;
j0eval[0]=6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj1=-0.55469837;
cj1=0.83205151636979;
j1=5.69518503997906;
j0eval[0]=-4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3219=(cj2*new_r11);
IkReal x3220=(new_r01*sj2);
if( IKabs(((((0.938193991171943)*new_r20))+(((-1.56124975848881)*x3220))+(((-1.56124975848881)*x3219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x3219))+(((0.450694540921035)*new_r20))+(((3.2499953868181)*x3220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.938193991171943)*new_r20))+(((-1.56124975848881)*x3220))+(((-1.56124975848881)*x3219))))+IKsqr(((((3.2499953868181)*x3219))+(((0.450694540921035)*new_r20))+(((3.2499953868181)*x3220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.938193991171943)*new_r20))+(((-1.56124975848881)*x3220))+(((-1.56124975848881)*x3219))), ((((3.2499953868181)*x3219))+(((0.450694540921035)*new_r20))+(((3.2499953868181)*x3220))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3221=IKcos(j0);
IkReal x3222=IKsin(j0);
IkReal x3223=(cj2*new_r01);
IkReal x3224=(new_r01*sj2);
IkReal x3225=((0.901387554667582)*sj2);
IkReal x3226=(cj2*new_r00);
IkReal x3227=((0.433013258970445)*sj2);
IkReal x3228=((0.250000205066586)*cj2);
IkReal x3229=(new_r00*sj2);
IkReal x3230=((1.0)*sj2);
IkReal x3231=(cj2*new_r10);
IkReal x3232=(cj2*new_r11);
IkReal x3233=((1.0)*x3221);
IkReal x3234=((0.120096407259978)*x3222);
IkReal x3235=(cj2*x3221);
IkReal x3236=(sj2*x3221);
IkReal x3237=(cj2*x3222);
evalcond[0]=((((-0.41602564443501)*x3221))+(((-0.866025066047432)*x3222))+new_r20);
evalcond[1]=((((-0.41602564443501)*x3222))+(((0.866025066047432)*x3221))+new_r21);
evalcond[2]=((((0.250000205066586)*x3222))+x3231+x3229+(((0.120096407259978)*x3221)));
evalcond[3]=(x3232+x3234+x3224+(((-0.250000205066586)*x3221)));
evalcond[4]=((((-0.901387554667582)*x3221))+x3226+(((0.433013258970445)*x3222))+(((-1.0)*new_r10*x3230)));
evalcond[5]=((((-0.433013258970445)*x3221))+(((-0.901387554667582)*x3222))+x3223+(((-1.0)*new_r11*x3230)));
evalcond[6]=((((0.433013258970445)*x3226))+(((0.250000205066586)*x3229))+(((-1.0)*new_r10*x3227))+x3222+((new_r10*x3228))+(((-0.866025066047432)*new_r20)));
evalcond[7]=((((0.433013258970445)*x3223))+(((0.250000205066586)*x3224))+(((-1.0)*new_r11*x3227))+((new_r11*x3228))+(((-1.0)*x3233))+(((-0.866025066047432)*new_r21)));
evalcond[8]=((((0.120096407259978)*x3236))+(((0.433013258970445)*x3237))+(((0.250000205066586)*sj2*x3222))+(((-0.901387554667582)*x3235))+new_r00);
evalcond[9]=(((sj2*x3234))+(((-0.250000205066586)*x3236))+(((-0.901387554667582)*x3237))+(((-0.433013258970445)*x3235))+new_r01);
evalcond[10]=(((x3222*x3228))+(((0.120096407259978)*x3235))+((x3221*x3225))+new_r10+(((-1.0)*x3222*x3227)));
evalcond[11]=(((x3222*x3225))+((cj2*x3234))+((x3221*x3227))+(((-1.0)*x3221*x3228))+new_r11);
evalcond[12]=((((0.901387554667582)*x3226))+(((-0.120096407259978)*x3231))+(((-1.0)*new_r10*x3225))+(((-1.0)*x3233))+(((-0.120096407259978)*x3229))+(((0.41602564443501)*new_r20)));
evalcond[13]=((((0.901387554667582)*x3223))+(((-0.120096407259978)*x3232))+(((-1.0)*new_r11*x3225))+(((-1.0)*x3222))+(((-0.120096407259978)*x3224))+(((0.41602564443501)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3238=(new_r00*sj2);
IkReal x3239=(cj2*new_r10);
if( IKabs(((((46055058.2492671)*new_r20))+(((159539204.583919)*x3239))+(((159539204.583919)*x3238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-95871094.4761737)*new_r20))+(((-332106811.287032)*x3239))+(((-332106811.287032)*x3238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((46055058.2492671)*new_r20))+(((159539204.583919)*x3239))+(((159539204.583919)*x3238))))+IKsqr(((((-95871094.4761737)*new_r20))+(((-332106811.287032)*x3239))+(((-332106811.287032)*x3238))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((46055058.2492671)*new_r20))+(((159539204.583919)*x3239))+(((159539204.583919)*x3238))), ((((-95871094.4761737)*new_r20))+(((-332106811.287032)*x3239))+(((-332106811.287032)*x3238))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3240=IKcos(j0);
IkReal x3241=IKsin(j0);
IkReal x3242=(cj2*new_r01);
IkReal x3243=(new_r01*sj2);
IkReal x3244=((0.901387554667582)*sj2);
IkReal x3245=(cj2*new_r00);
IkReal x3246=((0.433013258970445)*sj2);
IkReal x3247=((0.250000205066586)*cj2);
IkReal x3248=(new_r00*sj2);
IkReal x3249=((1.0)*sj2);
IkReal x3250=(cj2*new_r10);
IkReal x3251=(cj2*new_r11);
IkReal x3252=((1.0)*x3240);
IkReal x3253=((0.120096407259978)*x3241);
IkReal x3254=(cj2*x3240);
IkReal x3255=(sj2*x3240);
IkReal x3256=(cj2*x3241);
evalcond[0]=((((-0.866025066047432)*x3241))+new_r20+(((-0.41602564443501)*x3240)));
evalcond[1]=((((0.866025066047432)*x3240))+new_r21+(((-0.41602564443501)*x3241)));
evalcond[2]=((((0.120096407259978)*x3240))+x3248+x3250+(((0.250000205066586)*x3241)));
evalcond[3]=(x3243+x3251+x3253+(((-0.250000205066586)*x3240)));
evalcond[4]=((((0.433013258970445)*x3241))+x3245+(((-1.0)*new_r10*x3249))+(((-0.901387554667582)*x3240)));
evalcond[5]=(x3242+(((-1.0)*new_r11*x3249))+(((-0.433013258970445)*x3240))+(((-0.901387554667582)*x3241)));
evalcond[6]=(x3241+(((0.433013258970445)*x3245))+(((-0.866025066047432)*new_r20))+(((-1.0)*new_r10*x3246))+(((0.250000205066586)*x3248))+((new_r10*x3247)));
evalcond[7]=((((-1.0)*new_r11*x3246))+(((0.433013258970445)*x3242))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x3243))+((new_r11*x3247))+(((-1.0)*x3252)));
evalcond[8]=((((0.433013258970445)*x3256))+(((0.250000205066586)*sj2*x3241))+(((-0.901387554667582)*x3254))+(((0.120096407259978)*x3255))+new_r00);
evalcond[9]=((((-0.901387554667582)*x3256))+(((-0.250000205066586)*x3255))+new_r01+(((-0.433013258970445)*x3254))+((sj2*x3253)));
evalcond[10]=(((x3241*x3247))+(((-1.0)*x3241*x3246))+(((0.120096407259978)*x3254))+new_r10+((x3240*x3244)));
evalcond[11]=(((cj2*x3253))+(((-1.0)*x3240*x3247))+((x3241*x3244))+new_r11+((x3240*x3246)));
evalcond[12]=((((-0.120096407259978)*x3248))+(((0.901387554667582)*x3245))+(((-1.0)*new_r10*x3244))+(((-0.120096407259978)*x3250))+(((0.41602564443501)*new_r20))+(((-1.0)*x3252)));
evalcond[13]=((((-1.0)*x3241))+(((-0.120096407259978)*x3243))+(((-1.0)*new_r11*x3244))+(((0.901387554667582)*x3242))+(((-0.120096407259978)*x3251))+(((0.41602564443501)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((0.938193995582437)*new_r20))+(((0.450694531739873)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.938193995582437)*new_r21))+(((0.450694531739873)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.938193995582437)*new_r20))+(((0.450694531739873)*new_r21))))+IKsqr(((((-0.938193995582437)*new_r21))+(((0.450694531739873)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((0.938193995582437)*new_r20))+(((0.450694531739873)*new_r21))), ((((-0.938193995582437)*new_r21))+(((0.450694531739873)*new_r20))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3257=IKcos(j0);
IkReal x3258=IKsin(j0);
IkReal x3259=(cj2*new_r01);
IkReal x3260=(new_r01*sj2);
IkReal x3261=((0.901387554667582)*sj2);
IkReal x3262=(cj2*new_r00);
IkReal x3263=((0.433013258970445)*sj2);
IkReal x3264=((0.250000205066586)*cj2);
IkReal x3265=(new_r00*sj2);
IkReal x3266=((1.0)*sj2);
IkReal x3267=(cj2*new_r10);
IkReal x3268=(cj2*new_r11);
IkReal x3269=((1.0)*x3257);
IkReal x3270=((0.120096407259978)*x3258);
IkReal x3271=(cj2*x3257);
IkReal x3272=(sj2*x3257);
IkReal x3273=(cj2*x3258);
evalcond[0]=((((-0.41602564443501)*x3257))+new_r20+(((-0.866025066047432)*x3258)));
evalcond[1]=((((0.866025066047432)*x3257))+(((-0.41602564443501)*x3258))+new_r21);
evalcond[2]=((((0.250000205066586)*x3258))+x3265+x3267+(((0.120096407259978)*x3257)));
evalcond[3]=(x3270+x3260+x3268+(((-0.250000205066586)*x3257)));
evalcond[4]=((((-0.901387554667582)*x3257))+x3262+(((0.433013258970445)*x3258))+(((-1.0)*new_r10*x3266)));
evalcond[5]=((((-0.433013258970445)*x3257))+(((-0.901387554667582)*x3258))+x3259+(((-1.0)*new_r11*x3266)));
evalcond[6]=(((new_r10*x3264))+x3258+(((0.433013258970445)*x3262))+(((-0.866025066047432)*new_r20))+(((-1.0)*new_r10*x3263))+(((0.250000205066586)*x3265)));
evalcond[7]=((((0.433013258970445)*x3259))+(((-1.0)*x3269))+(((-0.866025066047432)*new_r21))+(((-1.0)*new_r11*x3263))+(((0.250000205066586)*x3260))+((new_r11*x3264)));
evalcond[8]=((((0.120096407259978)*x3272))+(((0.433013258970445)*x3273))+(((0.250000205066586)*sj2*x3258))+(((-0.901387554667582)*x3271))+new_r00);
evalcond[9]=(((sj2*x3270))+(((-0.433013258970445)*x3271))+(((-0.901387554667582)*x3273))+new_r01+(((-0.250000205066586)*x3272)));
evalcond[10]=(((x3257*x3261))+(((0.120096407259978)*x3271))+((x3258*x3264))+new_r10+(((-1.0)*x3258*x3263)));
evalcond[11]=((((-1.0)*x3257*x3264))+((x3257*x3263))+((cj2*x3270))+((x3258*x3261))+new_r11);
evalcond[12]=((((-1.0)*x3269))+(((-0.120096407259978)*x3267))+(((-0.120096407259978)*x3265))+(((0.41602564443501)*new_r20))+(((0.901387554667582)*x3262))+(((-1.0)*new_r10*x3261)));
evalcond[13]=((((0.901387554667582)*x3259))+(((-0.120096407259978)*x3268))+(((-0.120096407259978)*x3260))+(((-1.0)*x3258))+(((-1.0)*new_r11*x3261))+(((0.41602564443501)*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=(cj1+(((1.50000715088661)*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j0eval[0]=((1.00000433017849)+(((-1.0)*(cj1*cj1)))+(((-2.00002336335164)*cj1*sj1)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.588000403282025)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-0.55469837;
cj1=0.83205151636979;
j1=-0.5880004;
j0eval[0]=4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=-0.55469837;
cj1=0.83205151636979;
j1=-0.5880004;
j0eval[0]=-6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3274=(cj2*new_r10);
IkReal x3275=(new_r00*sj2);
if( IKabs(((((159539204.583919)*x3275))+(((159539204.583919)*x3274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-332106811.287032)*x3275))+(((-332106811.287032)*x3274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x3275))+(((159539204.583919)*x3274))))+IKsqr(((((-332106811.287032)*x3275))+(((-332106811.287032)*x3274))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x3275))+(((159539204.583919)*x3274))), ((((-332106811.287032)*x3275))+(((-332106811.287032)*x3274))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3276=IKcos(j0);
IkReal x3277=IKsin(j0);
IkReal x3278=(cj2*new_r01);
IkReal x3279=(new_r01*sj2);
IkReal x3280=((0.901387554667582)*sj2);
IkReal x3281=(cj2*new_r00);
IkReal x3282=((0.433013258970445)*sj2);
IkReal x3283=((0.250000205066586)*cj2);
IkReal x3284=(new_r00*sj2);
IkReal x3285=((1.0)*sj2);
IkReal x3286=(cj2*new_r10);
IkReal x3287=(cj2*new_r11);
IkReal x3288=((1.0)*x3276);
IkReal x3289=((0.120096407259978)*x3277);
IkReal x3290=(cj2*x3276);
IkReal x3291=(sj2*x3276);
IkReal x3292=(cj2*x3277);
evalcond[0]=((((-0.866025066047432)*x3277))+(((-0.41602564443501)*x3276)));
evalcond[1]=((((-0.41602564443501)*x3277))+(((0.866025066047432)*x3276)));
evalcond[2]=(x3286+x3284+(((0.120096407259978)*x3276))+(((0.250000205066586)*x3277)));
evalcond[3]=(x3279+x3289+x3287+(((-0.250000205066586)*x3276)));
evalcond[4]=(x3281+(((-1.0)*new_r10*x3285))+(((-0.901387554667582)*x3276))+(((0.433013258970445)*x3277)));
evalcond[5]=((((-1.0)*new_r11*x3285))+x3278+(((-0.433013258970445)*x3276))+(((-0.901387554667582)*x3277)));
evalcond[6]=(((new_r10*x3283))+x3277+(((-1.0)*new_r10*x3282))+(((0.250000205066586)*x3284))+(((0.433013258970445)*x3281)));
evalcond[7]=((((0.250000205066586)*x3279))+((new_r11*x3283))+(((-1.0)*x3288))+(((-1.0)*new_r11*x3282))+(((0.433013258970445)*x3278)));
evalcond[8]=((((0.250000205066586)*sj2*x3277))+(((-0.901387554667582)*x3290))+(((0.120096407259978)*x3291))+new_r00+(((0.433013258970445)*x3292)));
evalcond[9]=(((sj2*x3289))+(((-0.250000205066586)*x3291))+(((-0.433013258970445)*x3290))+(((-0.901387554667582)*x3292))+new_r01);
evalcond[10]=((((-1.0)*x3277*x3282))+((x3276*x3280))+(((0.120096407259978)*x3290))+new_r10+((x3277*x3283)));
evalcond[11]=(((x3276*x3282))+(((-1.0)*x3276*x3283))+new_r11+((cj2*x3289))+((x3277*x3280)));
evalcond[12]=((((-1.0)*x3288))+(((-1.0)*new_r10*x3280))+(((-0.120096407259978)*x3284))+(((-0.120096407259978)*x3286))+(((0.901387554667582)*x3281)));
evalcond[13]=((((-1.0)*x3277))+(((-1.0)*new_r11*x3280))+(((-0.120096407259978)*x3279))+(((-0.120096407259978)*x3287))+(((0.901387554667582)*x3278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3293=(new_r01*sj2);
IkReal x3294=(cj2*new_r11);
if( IKabs(((((-1.56124975848881)*x3293))+(((-1.56124975848881)*x3294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x3293))+(((3.2499953868181)*x3294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.56124975848881)*x3293))+(((-1.56124975848881)*x3294))))+IKsqr(((((3.2499953868181)*x3293))+(((3.2499953868181)*x3294))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.56124975848881)*x3293))+(((-1.56124975848881)*x3294))), ((((3.2499953868181)*x3293))+(((3.2499953868181)*x3294))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3295=IKcos(j0);
IkReal x3296=IKsin(j0);
IkReal x3297=(cj2*new_r01);
IkReal x3298=(new_r01*sj2);
IkReal x3299=((0.901387554667582)*sj2);
IkReal x3300=(cj2*new_r00);
IkReal x3301=((0.433013258970445)*sj2);
IkReal x3302=((0.250000205066586)*cj2);
IkReal x3303=(new_r00*sj2);
IkReal x3304=((1.0)*sj2);
IkReal x3305=(cj2*new_r10);
IkReal x3306=(cj2*new_r11);
IkReal x3307=((1.0)*x3295);
IkReal x3308=((0.120096407259978)*x3296);
IkReal x3309=(cj2*x3295);
IkReal x3310=(sj2*x3295);
IkReal x3311=(cj2*x3296);
evalcond[0]=((((-0.41602564443501)*x3295))+(((-0.866025066047432)*x3296)));
evalcond[1]=((((0.866025066047432)*x3295))+(((-0.41602564443501)*x3296)));
evalcond[2]=((((0.250000205066586)*x3296))+x3305+x3303+(((0.120096407259978)*x3295)));
evalcond[3]=(x3308+x3306+(((-0.250000205066586)*x3295))+x3298);
evalcond[4]=((((-1.0)*new_r10*x3304))+(((-0.901387554667582)*x3295))+x3300+(((0.433013258970445)*x3296)));
evalcond[5]=((((-0.433013258970445)*x3295))+(((-1.0)*new_r11*x3304))+(((-0.901387554667582)*x3296))+x3297);
evalcond[6]=((((-1.0)*new_r10*x3301))+x3296+(((0.250000205066586)*x3303))+(((0.433013258970445)*x3300))+((new_r10*x3302)));
evalcond[7]=((((-1.0)*new_r11*x3301))+(((-1.0)*x3307))+((new_r11*x3302))+(((0.250000205066586)*x3298))+(((0.433013258970445)*x3297)));
evalcond[8]=((((0.120096407259978)*x3310))+(((-0.901387554667582)*x3309))+(((0.433013258970445)*x3311))+new_r00+(((0.250000205066586)*sj2*x3296)));
evalcond[9]=((((-0.901387554667582)*x3311))+((sj2*x3308))+(((-0.433013258970445)*x3309))+(((-0.250000205066586)*x3310))+new_r01);
evalcond[10]=((((0.120096407259978)*x3309))+((x3295*x3299))+((x3296*x3302))+(((-1.0)*x3296*x3301))+new_r10);
evalcond[11]=(((x3296*x3299))+((x3295*x3301))+((cj2*x3308))+new_r11+(((-1.0)*x3295*x3302)));
evalcond[12]=((((-1.0)*new_r10*x3299))+(((-1.0)*x3307))+(((-0.120096407259978)*x3305))+(((-0.120096407259978)*x3303))+(((0.901387554667582)*x3300)));
evalcond[13]=((((-1.0)*new_r11*x3299))+(((-0.120096407259978)*x3306))+(((-1.0)*x3296))+(((-0.120096407259978)*x3298))+(((0.901387554667582)*x3297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-2.55359225030777)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=4.00000718239066;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
sj1=0.55469837;
cj1=-0.83205151636979;
j1=2.55359224034819;
j0eval[0]=6.26807264388855e-9;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3312=(cj2*new_r10);
IkReal x3313=(new_r00*sj2);
if( IKabs(((((159539204.583919)*x3312))+(((159539204.583919)*x3313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((332106811.287032)*x3313))+(((332106811.287032)*x3312)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((159539204.583919)*x3312))+(((159539204.583919)*x3313))))+IKsqr(((((332106811.287032)*x3313))+(((332106811.287032)*x3312))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((159539204.583919)*x3312))+(((159539204.583919)*x3313))), ((((332106811.287032)*x3313))+(((332106811.287032)*x3312))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3314=IKcos(j0);
IkReal x3315=IKsin(j0);
IkReal x3316=(cj2*new_r01);
IkReal x3317=(new_r01*sj2);
IkReal x3318=((0.901387554667582)*sj2);
IkReal x3319=(cj2*new_r00);
IkReal x3320=((0.433013258970445)*sj2);
IkReal x3321=((0.250000205066586)*cj2);
IkReal x3322=(new_r00*sj2);
IkReal x3323=((1.0)*sj2);
IkReal x3324=(cj2*new_r10);
IkReal x3325=(cj2*new_r11);
IkReal x3326=((1.0)*x3314);
IkReal x3327=((0.120096407259978)*x3315);
IkReal x3328=(cj2*x3314);
IkReal x3329=(sj2*x3314);
IkReal x3330=(cj2*x3315);
evalcond[0]=((((-0.866025066047432)*x3315))+(((0.41602564443501)*x3314)));
evalcond[1]=((((0.866025066047432)*x3314))+(((0.41602564443501)*x3315)));
evalcond[2]=(x3322+x3324+(((-0.120096407259978)*x3314))+(((0.250000205066586)*x3315)));
evalcond[3]=((((-1.0)*x3327))+(((-0.250000205066586)*x3314))+x3325+x3317);
evalcond[4]=((((-1.0)*new_r10*x3323))+x3319+(((0.433013258970445)*x3315))+(((0.901387554667582)*x3314)));
evalcond[5]=((((-0.433013258970445)*x3314))+(((-1.0)*new_r11*x3323))+x3316+(((0.901387554667582)*x3315)));
evalcond[6]=(((new_r10*x3321))+(((-1.0)*new_r10*x3320))+x3315+(((0.433013258970445)*x3319))+(((0.250000205066586)*x3322)));
evalcond[7]=((((-1.0)*x3326))+((new_r11*x3321))+(((-1.0)*new_r11*x3320))+(((0.250000205066586)*x3317))+(((0.433013258970445)*x3316)));
evalcond[8]=((((-0.120096407259978)*x3329))+(((0.250000205066586)*sj2*x3315))+(((0.901387554667582)*x3328))+(((0.433013258970445)*x3330))+new_r00);
evalcond[9]=((((-0.250000205066586)*x3329))+(((-1.0)*sj2*x3327))+(((0.901387554667582)*x3330))+(((-0.433013258970445)*x3328))+new_r01);
evalcond[10]=((((-0.120096407259978)*x3328))+(((-1.0)*x3314*x3318))+(((-1.0)*x3315*x3320))+new_r10+((x3315*x3321)));
evalcond[11]=(((x3314*x3320))+(((-1.0)*cj2*x3327))+(((-1.0)*x3315*x3318))+new_r11+(((-1.0)*x3314*x3321)));
evalcond[12]=((((-1.0)*x3326))+(((-0.901387554667582)*x3319))+(((0.120096407259978)*x3322))+(((0.120096407259978)*x3324))+((new_r10*x3318)));
evalcond[13]=((((0.120096407259978)*x3317))+(((-0.901387554667582)*x3316))+(((0.120096407259978)*x3325))+((new_r11*x3318))+(((-1.0)*x3315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3331=(new_r01*sj2);
IkReal x3332=(cj2*new_r11);
if( IKabs(((((1.56124975848881)*x3332))+(((1.56124975848881)*x3331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((3.2499953868181)*x3331))+(((3.2499953868181)*x3332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.56124975848881)*x3332))+(((1.56124975848881)*x3331))))+IKsqr(((((3.2499953868181)*x3331))+(((3.2499953868181)*x3332))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.56124975848881)*x3332))+(((1.56124975848881)*x3331))), ((((3.2499953868181)*x3331))+(((3.2499953868181)*x3332))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3333=IKcos(j0);
IkReal x3334=IKsin(j0);
IkReal x3335=(cj2*new_r01);
IkReal x3336=(new_r01*sj2);
IkReal x3337=((0.901387554667582)*sj2);
IkReal x3338=(cj2*new_r00);
IkReal x3339=((0.433013258970445)*sj2);
IkReal x3340=((0.250000205066586)*cj2);
IkReal x3341=(new_r00*sj2);
IkReal x3342=((1.0)*sj2);
IkReal x3343=(cj2*new_r10);
IkReal x3344=(cj2*new_r11);
IkReal x3345=((1.0)*x3333);
IkReal x3346=((0.120096407259978)*x3334);
IkReal x3347=(cj2*x3333);
IkReal x3348=(sj2*x3333);
IkReal x3349=(cj2*x3334);
evalcond[0]=((((-0.866025066047432)*x3334))+(((0.41602564443501)*x3333)));
evalcond[1]=((((0.866025066047432)*x3333))+(((0.41602564443501)*x3334)));
evalcond[2]=(x3343+x3341+(((-0.120096407259978)*x3333))+(((0.250000205066586)*x3334)));
evalcond[3]=(x3344+x3336+(((-1.0)*x3346))+(((-0.250000205066586)*x3333)));
evalcond[4]=(x3338+(((0.433013258970445)*x3334))+(((-1.0)*new_r10*x3342))+(((0.901387554667582)*x3333)));
evalcond[5]=(x3335+(((-1.0)*new_r11*x3342))+(((0.901387554667582)*x3334))+(((-0.433013258970445)*x3333)));
evalcond[6]=(x3334+(((0.250000205066586)*x3341))+(((0.433013258970445)*x3338))+((new_r10*x3340))+(((-1.0)*new_r10*x3339)));
evalcond[7]=((((0.250000205066586)*x3336))+(((-1.0)*x3345))+(((0.433013258970445)*x3335))+((new_r11*x3340))+(((-1.0)*new_r11*x3339)));
evalcond[8]=((((0.433013258970445)*x3349))+(((-0.120096407259978)*x3348))+(((0.250000205066586)*sj2*x3334))+(((0.901387554667582)*x3347))+new_r00);
evalcond[9]=((((-0.250000205066586)*x3348))+(((-1.0)*sj2*x3346))+(((-0.433013258970445)*x3347))+(((0.901387554667582)*x3349))+new_r01);
evalcond[10]=(((x3334*x3340))+(((-0.120096407259978)*x3347))+(((-1.0)*x3334*x3339))+new_r10+(((-1.0)*x3333*x3337)));
evalcond[11]=(((x3333*x3339))+(((-1.0)*cj2*x3346))+(((-1.0)*x3334*x3337))+(((-1.0)*x3333*x3340))+new_r11);
evalcond[12]=((((-0.901387554667582)*x3338))+(((-1.0)*x3345))+(((0.120096407259978)*x3341))+(((0.120096407259978)*x3343))+((new_r10*x3337)));
evalcond[13]=((((-0.901387554667582)*x3335))+(((0.120096407259978)*x3344))+((new_r11*x3337))+(((-1.0)*x3334))+(((0.120096407259978)*x3336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3350=cj1*cj1;
IkReal x3351=(cj1*sj1);
IkReal x3352=(new_r01*sj2);
IkReal x3353=((5773502018908.78)*sj1);
IkReal x3354=((2.66666292511974e+18)*cj1);
IkReal x3355=(cj2*new_r11);
CheckValue<IkReal> x3356=IKPowWithIntegerCheck(((1.15469306414004e+18)+(((-2.30940310565252e+18)*x3351))+(((-1.15468806413462e+18)*x3350))),-1);
if(!x3356.valid){
continue;
}
CheckValue<IkReal> x3357=IKPowWithIntegerCheck(((1.15469036227374e+28)+(((-1.15468536228002e+28)*x3350))+(((-2.3093977018802e+28)*x3351))),-1);
if(!x3357.valid){
continue;
}
if( IKabs(((x3356.value)*(((((-1.0)*x3352*x3354))+(((-1.0)*x3352*x3353))+(((-1.0)*x3354*x3355))+(((-1.0)*x3353*x3355)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3357.value)*(((((4.61877766044193e+28)*x3352))+(((4.61877766044193e+28)*x3355)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3356.value)*(((((-1.0)*x3352*x3354))+(((-1.0)*x3352*x3353))+(((-1.0)*x3354*x3355))+(((-1.0)*x3353*x3355))))))+IKsqr(((x3357.value)*(((((4.61877766044193e+28)*x3352))+(((4.61877766044193e+28)*x3355))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3356.value)*(((((-1.0)*x3352*x3354))+(((-1.0)*x3352*x3353))+(((-1.0)*x3354*x3355))+(((-1.0)*x3353*x3355))))), ((x3357.value)*(((((4.61877766044193e+28)*x3352))+(((4.61877766044193e+28)*x3355))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3358=IKcos(j0);
IkReal x3359=IKsin(j0);
IkReal x3360=(cj2*new_r01);
IkReal x3361=((0.433010506600939)*cj1);
IkReal x3362=(new_r01*sj2);
IkReal x3363=((0.866026442229025)*sj1);
IkReal x3364=(new_r00*sj2);
IkReal x3365=(cj2*new_r00);
IkReal x3366=(new_r11*sj2);
IkReal x3367=((0.49999820135573)*sj1);
IkReal x3368=((0.75000087746404)*cj1);
IkReal x3369=(cj2*new_r10);
IkReal x3370=(new_r10*sj2);
IkReal x3371=((0.500000584976027)*cj1);
IkReal x3372=(cj2*new_r11);
IkReal x3373=((1.08253441393799e-6)*sj1);
IkReal x3374=((1.0)*x3358);
IkReal x3375=(cj2*x3358);
IkReal x3376=(sj2*x3358);
IkReal x3377=(cj2*x3359);
IkReal x3378=(sj2*x3359);
evalcond[0]=((((-0.866025066047432)*x3359))+(((-1.0)*x3358*x3373))+(((-1.0)*x3358*x3371)));
evalcond[1]=((((0.866025066047432)*x3358))+(((-1.0)*x3359*x3371))+(((-1.0)*x3359*x3373)));
evalcond[2]=((((0.433013258970445)*x3365))+(((0.250000205066586)*x3369))+(((0.250000205066586)*x3364))+x3359+(((-0.433013258970445)*x3370)));
evalcond[3]=((((0.250000205066586)*x3359))+x3369+x3364+(((-1.0)*x3358*x3363))+(((-1.0)*x3358*x3361)));
evalcond[4]=((((-1.0)*x3359*x3363))+(((-1.0)*x3359*x3361))+x3372+x3362+(((-0.250000205066586)*x3358)));
evalcond[5]=((((-1.0)*x3370))+x3365+((x3358*x3367))+(((0.433013258970445)*x3359))+(((-1.0)*x3358*x3368)));
evalcond[6]=((((-1.0)*x3359*x3368))+(((-0.433013258970445)*x3358))+x3360+(((-1.0)*x3366))+((x3359*x3367)));
evalcond[7]=((((-0.433013258970445)*x3366))+(((0.433013258970445)*x3360))+(((0.250000205066586)*x3362))+(((-1.0)*x3374))+(((0.250000205066586)*x3372)));
evalcond[8]=((((-1.0)*x3363*x3376))+(((0.433013258970445)*x3377))+(((-1.0)*x3361*x3376))+((x3367*x3375))+(((0.250000205066586)*x3378))+new_r00+(((-1.0)*x3368*x3375)));
evalcond[9]=((((-1.0)*x3363*x3378))+(((-0.250000205066586)*x3376))+(((-0.433013258970445)*x3375))+(((-1.0)*x3361*x3378))+((x3367*x3377))+new_r01+(((-1.0)*x3368*x3377)));
evalcond[10]=((((-1.0)*x3363*x3375))+(((-1.0)*x3367*x3376))+(((-0.433013258970445)*x3378))+((x3368*x3376))+(((-1.0)*x3361*x3375))+(((0.250000205066586)*x3377))+new_r10);
evalcond[11]=((((-1.0)*x3363*x3377))+(((-0.250000205066586)*x3375))+(((-1.0)*x3367*x3378))+(((0.433013258970445)*x3376))+((x3368*x3378))+(((-1.0)*x3361*x3377))+new_r11);
evalcond[12]=(((x3363*x3369))+((x3363*x3364))+((x3365*x3368))+(((-1.0)*x3374))+((x3361*x3364))+((x3361*x3369))+((x3367*x3370))+(((-1.0)*x3365*x3367))+(((-1.0)*x3368*x3370)));
evalcond[13]=((((-1.0)*x3360*x3367))+((x3362*x3363))+((x3363*x3372))+((x3361*x3372))+((x3360*x3368))+((x3361*x3362))+(((-1.0)*x3366*x3368))+((x3366*x3367))+(((-1.0)*x3359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3379=(cj2*new_r10);
IkReal x3380=((1.15469770189828e+19)*cj1);
IkReal x3381=(new_r00*sj2);
IkReal x3382=((24999970751232.9)*sj1);
CheckValue<IkReal> x3383=IKPowWithIntegerCheck(((((1.73204655284742e+19)*sj1))+(((1.15469219718296e+19)*cj1))),-1);
if(!x3383.valid){
continue;
}
CheckValue<IkReal> x3384=IKPowWithIntegerCheck(((((577350201.890878)*sj1))+(((384898299.684519)*cj1))),-1);
if(!x3384.valid){
continue;
}
if( IKabs(((x3383.value)*(((((-1.0)*x3380*x3381))+(((-1.0)*x3381*x3382))+(((-1.0)*x3379*x3382))+(((-1.0)*x3379*x3380)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3384.value)*(((((666665549.0)*x3381))+(((666665549.0)*x3379)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3383.value)*(((((-1.0)*x3380*x3381))+(((-1.0)*x3381*x3382))+(((-1.0)*x3379*x3382))+(((-1.0)*x3379*x3380))))))+IKsqr(((x3384.value)*(((((666665549.0)*x3381))+(((666665549.0)*x3379))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3383.value)*(((((-1.0)*x3380*x3381))+(((-1.0)*x3381*x3382))+(((-1.0)*x3379*x3382))+(((-1.0)*x3379*x3380))))), ((x3384.value)*(((((666665549.0)*x3381))+(((666665549.0)*x3379))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3385=IKcos(j0);
IkReal x3386=IKsin(j0);
IkReal x3387=(cj2*new_r01);
IkReal x3388=((0.433010506600939)*cj1);
IkReal x3389=(new_r01*sj2);
IkReal x3390=((0.866026442229025)*sj1);
IkReal x3391=(new_r00*sj2);
IkReal x3392=(cj2*new_r00);
IkReal x3393=(new_r11*sj2);
IkReal x3394=((0.49999820135573)*sj1);
IkReal x3395=((0.75000087746404)*cj1);
IkReal x3396=(cj2*new_r10);
IkReal x3397=(new_r10*sj2);
IkReal x3398=((0.500000584976027)*cj1);
IkReal x3399=(cj2*new_r11);
IkReal x3400=((1.08253441393799e-6)*sj1);
IkReal x3401=((1.0)*x3385);
IkReal x3402=(cj2*x3385);
IkReal x3403=(sj2*x3385);
IkReal x3404=(cj2*x3386);
IkReal x3405=(sj2*x3386);
evalcond[0]=((((-1.0)*x3385*x3398))+(((-0.866025066047432)*x3386))+(((-1.0)*x3385*x3400)));
evalcond[1]=((((-1.0)*x3386*x3400))+(((-1.0)*x3386*x3398))+(((0.866025066047432)*x3385)));
evalcond[2]=((((0.433013258970445)*x3392))+x3386+(((-0.433013258970445)*x3397))+(((0.250000205066586)*x3391))+(((0.250000205066586)*x3396)));
evalcond[3]=((((-1.0)*x3385*x3390))+x3391+x3396+(((-1.0)*x3385*x3388))+(((0.250000205066586)*x3386)));
evalcond[4]=(x3389+x3399+(((-1.0)*x3386*x3390))+(((-1.0)*x3386*x3388))+(((-0.250000205066586)*x3385)));
evalcond[5]=((((-1.0)*x3385*x3395))+x3392+(((0.433013258970445)*x3386))+(((-1.0)*x3397))+((x3385*x3394)));
evalcond[6]=(((x3386*x3394))+(((-0.433013258970445)*x3385))+x3387+(((-1.0)*x3393))+(((-1.0)*x3386*x3395)));
evalcond[7]=((((0.433013258970445)*x3387))+(((-0.433013258970445)*x3393))+(((0.250000205066586)*x3389))+(((0.250000205066586)*x3399))+(((-1.0)*x3401)));
evalcond[8]=((((0.250000205066586)*x3405))+((x3394*x3402))+(((-1.0)*x3395*x3402))+(((0.433013258970445)*x3404))+new_r00+(((-1.0)*x3388*x3403))+(((-1.0)*x3390*x3403)));
evalcond[9]=(((x3394*x3404))+(((-1.0)*x3395*x3404))+(((-0.433013258970445)*x3402))+new_r01+(((-0.250000205066586)*x3403))+(((-1.0)*x3388*x3405))+(((-1.0)*x3390*x3405)));
evalcond[10]=((((0.250000205066586)*x3404))+(((-1.0)*x3394*x3403))+((x3395*x3403))+(((-0.433013258970445)*x3405))+new_r10+(((-1.0)*x3388*x3402))+(((-1.0)*x3390*x3402)));
evalcond[11]=((((-1.0)*x3394*x3405))+((x3395*x3405))+(((0.433013258970445)*x3403))+new_r11+(((-0.250000205066586)*x3402))+(((-1.0)*x3388*x3404))+(((-1.0)*x3390*x3404)));
evalcond[12]=((((-1.0)*x3392*x3394))+((x3394*x3397))+(((-1.0)*x3395*x3397))+((x3388*x3391))+((x3388*x3396))+((x3390*x3391))+((x3390*x3396))+((x3392*x3395))+(((-1.0)*x3401)));
evalcond[13]=((((-1.0)*x3387*x3394))+(((-1.0)*x3386))+((x3389*x3390))+((x3387*x3395))+((x3388*x3399))+((x3390*x3399))+((x3393*x3394))+((x3388*x3389))+(((-1.0)*x3393*x3395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3406=(cj2*new_r10);
IkReal x3407=((1.15469770189828e+19)*cj1);
IkReal x3408=(new_r00*sj2);
IkReal x3409=((24999970751232.9)*sj1);
CheckValue<IkReal> x3410=IKPowWithIntegerCheck(((((-1.15469219718296e+19)*cj1))+(((-1.73204655284742e+19)*sj1))),-1);
if(!x3410.valid){
continue;
}
CheckValue<IkReal> x3411=IKPowWithIntegerCheck(((((577350201.890878)*sj1))+(((384898299.684519)*cj1))),-1);
if(!x3411.valid){
continue;
}
if( IKabs(((x3410.value)*((((x3408*x3409))+((x3406*x3409))+((x3406*x3407))+(((-1.99999514535157e+19)*new_r20*sj1))+(((-9.99991303797949e+18)*cj1*new_r20))+((x3407*x3408)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3411.value)*(((((192450000.0)*new_r20))+(((666665549.0)*x3408))+(((666665549.0)*x3406)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3410.value)*((((x3408*x3409))+((x3406*x3409))+((x3406*x3407))+(((-1.99999514535157e+19)*new_r20*sj1))+(((-9.99991303797949e+18)*cj1*new_r20))+((x3407*x3408))))))+IKsqr(((x3411.value)*(((((192450000.0)*new_r20))+(((666665549.0)*x3408))+(((666665549.0)*x3406))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3410.value)*((((x3408*x3409))+((x3406*x3409))+((x3406*x3407))+(((-1.99999514535157e+19)*new_r20*sj1))+(((-9.99991303797949e+18)*cj1*new_r20))+((x3407*x3408))))), ((x3411.value)*(((((192450000.0)*new_r20))+(((666665549.0)*x3408))+(((666665549.0)*x3406))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3412=IKcos(j0);
IkReal x3413=IKsin(j0);
IkReal x3414=(cj2*new_r01);
IkReal x3415=((0.433010506600939)*cj1);
IkReal x3416=(new_r01*sj2);
IkReal x3417=((0.866026442229025)*sj2);
IkReal x3418=(new_r00*sj2);
IkReal x3419=((0.49999820135573)*sj1);
IkReal x3420=(cj2*new_r00);
IkReal x3421=(new_r11*sj2);
IkReal x3422=((0.500000584976027)*cj1);
IkReal x3423=((0.866026442229025)*sj1);
IkReal x3424=(cj2*new_r10);
IkReal x3425=((0.75000087746404)*cj1);
IkReal x3426=(new_r10*sj2);
IkReal x3427=(cj2*new_r11);
IkReal x3428=((1.08253441393799e-6)*sj1);
IkReal x3429=((1.0)*x3412);
IkReal x3430=(cj2*x3412);
IkReal x3431=(sj1*x3412);
IkReal x3432=(sj1*x3413);
IkReal x3433=(sj2*x3412);
IkReal x3434=(cj2*x3413);
IkReal x3435=(sj2*x3413);
IkReal x3436=(x3413*x3425);
evalcond[0]=((((-1.0)*x3412*x3422))+(((-1.0)*x3412*x3428))+(((-0.866025066047432)*x3413))+new_r20);
evalcond[1]=((((-1.0)*x3413*x3428))+(((-1.0)*x3413*x3422))+(((0.866025066047432)*x3412))+new_r21);
evalcond[2]=((((0.250000205066586)*x3413))+(((-1.0)*x3412*x3415))+x3418+x3424+(((-1.0)*x3412*x3423)));
evalcond[3]=((((-0.250000205066586)*x3412))+x3416+x3427+(((-1.0)*x3413*x3423))+(((-1.0)*x3413*x3415)));
evalcond[4]=(x3420+(((-1.0)*x3412*x3425))+(((0.433013258970445)*x3413))+(((-1.0)*x3426))+((x3412*x3419)));
evalcond[5]=(x3414+(((-1.0)*x3436))+((x3413*x3419))+(((-1.0)*x3421))+(((-0.433013258970445)*x3412)));
evalcond[6]=((((0.433013258970445)*x3420))+(((0.250000205066586)*x3424))+x3413+(((-0.866025066047432)*new_r20))+(((-0.433013258970445)*x3426))+(((0.250000205066586)*x3418)));
evalcond[7]=((((0.250000205066586)*x3427))+(((-1.0)*x3429))+(((0.433013258970445)*x3414))+(((-0.866025066047432)*new_r21))+(((-0.433013258970445)*x3421))+(((0.250000205066586)*x3416)));
evalcond[8]=((((0.433013258970445)*x3434))+(((0.250000205066586)*x3435))+(((-1.0)*x3425*x3430))+(((-1.0)*x3417*x3431))+(((-1.0)*x3415*x3433))+new_r00+((x3419*x3430)));
evalcond[9]=((((-1.0)*x3425*x3434))+(((-0.250000205066586)*x3433))+(((-1.0)*x3417*x3432))+(((-1.0)*x3415*x3435))+new_r01+((x3419*x3434))+(((-0.433013258970445)*x3430)));
evalcond[10]=(((x3425*x3433))+(((0.250000205066586)*x3434))+(((-1.0)*x3415*x3430))+(((-1.0)*x3419*x3433))+(((-1.0)*x3423*x3430))+new_r10+(((-0.433013258970445)*x3435)));
evalcond[11]=(((x3425*x3435))+(((0.433013258970445)*x3433))+(((-0.250000205066586)*x3430))+(((-1.0)*x3415*x3434))+(((-1.0)*x3419*x3435))+(((-1.0)*x3423*x3434))+new_r11);
evalcond[12]=(((new_r00*sj1*x3417))+((x3415*x3424))+((x3420*x3425))+(((-1.0)*x3429))+(((-1.0)*x3425*x3426))+(((-1.0)*x3419*x3420))+((x3415*x3418))+((new_r20*x3428))+((new_r20*x3422))+((x3419*x3426))+((x3423*x3424)));
evalcond[13]=((((-1.0)*x3413))+((x3415*x3427))+((new_r21*x3428))+((new_r21*x3422))+(((-1.0)*x3414*x3419))+((x3414*x3425))+((x3415*x3416))+((x3419*x3421))+((x3416*x3423))+(((-1.0)*x3421*x3425))+((x3423*x3427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3437=(cj2*new_r11);
IkReal x3438=(new_r01*sj2);
IkReal x3439=((5.77348850949141e+22)*sj1);
IkReal x3440=((2.66665668539516e+28)*cj1);
CheckValue<IkReal> x3441=IKPowWithIntegerCheck(IKsign(((-1.15469036227374e+28)+(((1.15468536228002e+28)*(cj1*cj1)))+(((2.3093977018802e+28)*cj1*sj1)))),-1);
if(!x3441.valid){
continue;
}
CheckValue<IkReal> x3442 = IKatan2WithCheck(IkReal((((x3438*x3440))+((x3437*x3440))+((x3437*x3439))+((x3438*x3439))+(((-1.33332787645226e+28)*new_r20)))),IkReal(((((2.30937802268591e+28)*cj1*new_r20))+(((4.61878500004103e+28)*new_r20*sj1))+(((-4.61877766044193e+28)*x3438))+(((-4.61877766044193e+28)*x3437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3442.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3441.value)))+(x3442.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3443=IKcos(j0);
IkReal x3444=IKsin(j0);
IkReal x3445=(cj2*new_r01);
IkReal x3446=((0.433010506600939)*cj1);
IkReal x3447=(new_r01*sj2);
IkReal x3448=((0.866026442229025)*sj2);
IkReal x3449=(new_r00*sj2);
IkReal x3450=((0.49999820135573)*sj1);
IkReal x3451=(cj2*new_r00);
IkReal x3452=(new_r11*sj2);
IkReal x3453=((0.500000584976027)*cj1);
IkReal x3454=((0.866026442229025)*sj1);
IkReal x3455=(cj2*new_r10);
IkReal x3456=((0.75000087746404)*cj1);
IkReal x3457=(new_r10*sj2);
IkReal x3458=(cj2*new_r11);
IkReal x3459=((1.08253441393799e-6)*sj1);
IkReal x3460=((1.0)*x3443);
IkReal x3461=(cj2*x3443);
IkReal x3462=(sj1*x3443);
IkReal x3463=(sj1*x3444);
IkReal x3464=(sj2*x3443);
IkReal x3465=(cj2*x3444);
IkReal x3466=(sj2*x3444);
IkReal x3467=(x3444*x3456);
evalcond[0]=((((-0.866025066047432)*x3444))+(((-1.0)*x3443*x3459))+(((-1.0)*x3443*x3453))+new_r20);
evalcond[1]=((((0.866025066047432)*x3443))+new_r21+(((-1.0)*x3444*x3459))+(((-1.0)*x3444*x3453)));
evalcond[2]=(x3455+x3449+(((-1.0)*x3443*x3454))+(((-1.0)*x3443*x3446))+(((0.250000205066586)*x3444)));
evalcond[3]=((((-0.250000205066586)*x3443))+x3458+x3447+(((-1.0)*x3444*x3446))+(((-1.0)*x3444*x3454)));
evalcond[4]=((((0.433013258970445)*x3444))+x3451+(((-1.0)*x3457))+(((-1.0)*x3443*x3456))+((x3443*x3450)));
evalcond[5]=(((x3444*x3450))+x3445+(((-1.0)*x3452))+(((-1.0)*x3467))+(((-0.433013258970445)*x3443)));
evalcond[6]=((((0.250000205066586)*x3449))+(((0.250000205066586)*x3455))+(((0.433013258970445)*x3451))+x3444+(((-0.866025066047432)*new_r20))+(((-0.433013258970445)*x3457)));
evalcond[7]=((((0.250000205066586)*x3447))+(((0.250000205066586)*x3458))+(((0.433013258970445)*x3445))+(((-0.866025066047432)*new_r21))+(((-0.433013258970445)*x3452))+(((-1.0)*x3460)));
evalcond[8]=((((-1.0)*x3448*x3462))+(((-1.0)*x3446*x3464))+(((0.250000205066586)*x3466))+(((-1.0)*x3456*x3461))+new_r00+((x3450*x3461))+(((0.433013258970445)*x3465)));
evalcond[9]=((((-0.250000205066586)*x3464))+(((-1.0)*x3448*x3463))+(((-1.0)*x3446*x3466))+(((-1.0)*x3456*x3465))+new_r01+((x3450*x3465))+(((-0.433013258970445)*x3461)));
evalcond[10]=((((-1.0)*x3446*x3461))+((x3456*x3464))+(((-1.0)*x3450*x3464))+(((0.250000205066586)*x3465))+new_r10+(((-1.0)*x3454*x3461))+(((-0.433013258970445)*x3466)));
evalcond[11]=((((-0.250000205066586)*x3461))+(((-1.0)*x3446*x3465))+((x3456*x3466))+(((-1.0)*x3450*x3466))+new_r11+(((-1.0)*x3454*x3465))+(((0.433013258970445)*x3464)));
evalcond[12]=(((new_r20*x3459))+((new_r20*x3453))+((x3446*x3449))+((x3446*x3455))+(((-1.0)*x3450*x3451))+((x3454*x3455))+(((-1.0)*x3460))+((new_r00*sj1*x3448))+((x3451*x3456))+((x3450*x3457))+(((-1.0)*x3456*x3457)));
evalcond[13]=(((x3447*x3454))+((x3446*x3447))+(((-1.0)*x3444))+((x3446*x3458))+(((-1.0)*x3445*x3450))+((x3445*x3456))+((x3454*x3458))+((new_r21*x3453))+((new_r21*x3459))+(((-1.0)*x3452*x3456))+((x3450*x3452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3468=((5.77348850949141e+22)*sj1);
IkReal x3469=((2.66665668539516e+28)*cj1);
CheckValue<IkReal> x3470=IKPowWithIntegerCheck(IKsign(((3.99997722844887e+28)+(((1.33332990262156e+28)*(cj1*cj1)))+(((5.77349526419614e+22)*cj1*sj1)))),-1);
if(!x3470.valid){
continue;
}
CheckValue<IkReal> x3471 = IKatan2WithCheck(IkReal(((((4.61877766044193e+28)*new_r20))+((new_r21*x3469))+((new_r21*x3468)))),IkReal(((((-4.61877766044193e+28)*new_r21))+((new_r20*x3468))+((new_r20*x3469)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3471.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3470.value)))+(x3471.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[14];
IkReal x3472=IKcos(j0);
IkReal x3473=IKsin(j0);
IkReal x3474=(cj2*new_r01);
IkReal x3475=((0.433010506600939)*cj1);
IkReal x3476=(new_r01*sj2);
IkReal x3477=((0.866026442229025)*sj2);
IkReal x3478=(new_r00*sj2);
IkReal x3479=((0.49999820135573)*sj1);
IkReal x3480=(cj2*new_r00);
IkReal x3481=(new_r11*sj2);
IkReal x3482=((0.500000584976027)*cj1);
IkReal x3483=((0.866026442229025)*sj1);
IkReal x3484=(cj2*new_r10);
IkReal x3485=((0.75000087746404)*cj1);
IkReal x3486=(new_r10*sj2);
IkReal x3487=(cj2*new_r11);
IkReal x3488=((1.08253441393799e-6)*sj1);
IkReal x3489=((1.0)*x3472);
IkReal x3490=(cj2*x3472);
IkReal x3491=(sj1*x3472);
IkReal x3492=(sj1*x3473);
IkReal x3493=(sj2*x3472);
IkReal x3494=(cj2*x3473);
IkReal x3495=(sj2*x3473);
IkReal x3496=(x3473*x3485);
evalcond[0]=((((-0.866025066047432)*x3473))+(((-1.0)*x3472*x3482))+(((-1.0)*x3472*x3488))+new_r20);
evalcond[1]=((((0.866025066047432)*x3472))+(((-1.0)*x3473*x3488))+(((-1.0)*x3473*x3482))+new_r21);
evalcond[2]=((((-1.0)*x3472*x3475))+(((0.250000205066586)*x3473))+(((-1.0)*x3472*x3483))+x3484+x3478);
evalcond[3]=(x3487+x3476+(((-1.0)*x3473*x3483))+(((-1.0)*x3473*x3475))+(((-0.250000205066586)*x3472)));
evalcond[4]=((((0.433013258970445)*x3473))+(((-1.0)*x3472*x3485))+x3480+(((-1.0)*x3486))+((x3472*x3479)));
evalcond[5]=(((x3473*x3479))+(((-0.433013258970445)*x3472))+(((-1.0)*x3496))+x3474+(((-1.0)*x3481)));
evalcond[6]=((((-0.433013258970445)*x3486))+(((0.433013258970445)*x3480))+x3473+(((0.250000205066586)*x3478))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x3484)));
evalcond[7]=((((-0.433013258970445)*x3481))+(((0.250000205066586)*x3476))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x3487))+(((-1.0)*x3489))+(((0.433013258970445)*x3474)));
evalcond[8]=(((x3479*x3490))+(((0.250000205066586)*x3495))+new_r00+(((0.433013258970445)*x3494))+(((-1.0)*x3485*x3490))+(((-1.0)*x3477*x3491))+(((-1.0)*x3475*x3493)));
evalcond[9]=(((x3479*x3494))+(((-0.250000205066586)*x3493))+new_r01+(((-1.0)*x3485*x3494))+(((-0.433013258970445)*x3490))+(((-1.0)*x3477*x3492))+(((-1.0)*x3475*x3495)));
evalcond[10]=((((-1.0)*x3479*x3493))+(((-1.0)*x3483*x3490))+((x3485*x3493))+(((0.250000205066586)*x3494))+new_r10+(((-0.433013258970445)*x3495))+(((-1.0)*x3475*x3490)));
evalcond[11]=((((-1.0)*x3479*x3495))+(((-1.0)*x3483*x3494))+(((-0.250000205066586)*x3490))+((x3485*x3495))+new_r11+(((0.433013258970445)*x3493))+(((-1.0)*x3475*x3494)));
evalcond[12]=(((x3475*x3478))+((x3475*x3484))+(((-1.0)*x3485*x3486))+((x3479*x3486))+(((-1.0)*x3479*x3480))+((x3480*x3485))+((x3483*x3484))+((new_r00*sj1*x3477))+((new_r20*x3482))+((new_r20*x3488))+(((-1.0)*x3489)));
evalcond[13]=(((x3475*x3476))+((x3474*x3485))+((x3475*x3487))+(((-1.0)*x3481*x3485))+((x3476*x3483))+((x3479*x3481))+((x3483*x3487))+((new_r21*x3482))+((new_r21*x3488))+(((-1.0)*x3473))+(((-1.0)*x3474*x3479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3497=((5.77348850949141e+22)*sj1);
IkReal x3498=((2.66665668539516e+28)*cj1);
CheckValue<IkReal> x3499 = IKatan2WithCheck(IkReal((((new_r21*x3497))+((new_r21*x3498))+(((4.61877766044193e+28)*new_r20)))),IkReal(((((-4.61877766044193e+28)*new_r21))+((new_r20*x3498))+((new_r20*x3497)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3499.valid){
continue;
}
CheckValue<IkReal> x3500=IKPowWithIntegerCheck(IKsign(((3.99997722844887e+28)+(((1.33332990262156e+28)*(cj1*cj1)))+(((5.77349526419614e+22)*cj1*sj1)))),-1);
if(!x3500.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3499.value)+(((1.5707963267949)*(x3500.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3501=IKcos(j0);
IkReal x3502=IKsin(j0);
IkReal x3503=((0.500000584976027)*cj1);
IkReal x3504=((1.08253441393799e-6)*sj1);
evalcond[0]=((((-0.866025066047432)*x3502))+(((-1.0)*x3501*x3504))+(((-1.0)*x3501*x3503))+new_r20);
evalcond[1]=((((-1.0)*x3502*x3504))+(((-1.0)*x3502*x3503))+new_r21+(((0.866025066047432)*x3501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x3505=new_r12*new_r12;
IkReal x3506=cj1*cj1;
IkReal x3507=new_r02*new_r02;
IkReal x3508=sj1*sj1;
IkReal x3509=((1.33333437329057)*x3506);
IkReal x3510=(x3505+x3507);
j2eval[0]=x3510;
j2eval[1]=(((x3507*x3509))+((x3507*x3508))+((x3505*x3508))+((x3505*x3509)));
j2eval[2]=IKsign(x3510);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3511=(((new_r10*new_r12))+((new_r00*new_r02)));
j2eval[0]=x3511;
j2eval[1]=IKsign(x3511);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x3512=(((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)));
j2eval[0]=x3512;
j2eval[1]=IKsign(x3512);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r12*new_r12)+(new_r02*new_r02));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r12=0;
new_r02=0;
j2eval[0]=((IKabs((sj0+(((-1.73204060566914)*cj0*cj1))+(((-3.99999671893731)*new_r10))+(((-3.46410292742905)*cj0*sj1)))))+(((3.46411133595038e-19)*(IKabs(((2.30939270191783e+19)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
{
IkReal j2eval[1];
new_r12=0;
new_r02=0;
j2eval[0]=((IKabs(((((-3.46410292742905)*sj0*sj1))+(((-3.99999671893731)*new_r11))+(((-1.73204060566914)*cj1*sj0))+(((-1.0)*cj0)))))+(((3.46411133595038e-19)*(IKabs(((2.30939270191783e+19)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
{
IkReal j2eval[1];
new_r12=0;
new_r02=0;
j2eval[0]=((((2.00000467981095e-19)*(IKabs(((2.30939270191783e+19)*new_r10)))))+(IKabs((sj0+(((-1.73205060567263)*cj0*cj1))+(((-2.30939810567846)*new_r00))+(((1.15469489905356)*cj0*sj1))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3513=((2.30939810567846)*new_r00);
IkReal x3514=((1.15469489905356)*cj0*sj1);
IkReal x3515=((1.73205060567263)*cj0*cj1);
IkReal x3516=(sj0+x3514);
op[0]=((((-1.0)*x3513))+(((-1.0)*x3515))+x3516);
op[1]=((-4.61879621135691)*new_r10);
op[2]=((((-1.0)*x3515))+x3513+x3516);
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3517=((3.99999671893731)*new_r11);
IkReal x3518=((1.0)*cj0);
IkReal x3519=((3.46410292742905)*sj0*sj1);
IkReal x3520=((1.73204060566914)*cj1*sj0);
IkReal x3521=(x3519+x3518+x3520);
op[0]=((((-1.0)*x3521))+(((-1.0)*x3517)));
op[1]=((7.99999343787462)*new_r01);
op[2]=((((-1.0)*x3521))+x3517);
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x3522=((3.99999671893731)*new_r10);
IkReal x3523=((1.73204060566914)*cj0*cj1);
IkReal x3524=((3.46410292742905)*cj0*sj1);
IkReal x3525=(x3524+x3523);
op[0]=(sj0+(((-1.0)*x3525))+(((-1.0)*x3522)));
op[1]=((7.99999343787462)*new_r00);
op[2]=(sj0+(((-1.0)*x3525))+x3522);
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((6.14158329400386)+(IKabs(cj1))+(IKabs(((-1.0)+(IKsign(sj1)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
IkReal x3526=new_r02*new_r02;
j2eval[0]=((((1.73206161520519)*new_r02))+(((-1.0)*new_r12)));
j2eval[1]=((1.0)+(((-4.61883457642595)*new_r02*new_r12))+(((7.1111887620993)*x3526*(new_r12*new_r12)))+(((-2.66666874658427)*x3526))+(((7.1111887620993)*(x3526*x3526))));
j2eval[2]=IKsign(((((749998245075000.0)*new_r02))+(((-433008986799901.0)*new_r12))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
IkReal x3527=new_r12*new_r12;
j2eval[0]=((((1.73206161520519)*new_r12))+new_r02);
j2eval[1]=((1.0)+(((7.1111887620993)*(x3527*x3527)))+(((7.1111887620993)*x3527*(new_r02*new_r02)))+(((-2.66666874658427)*x3527))+(((4.61883457642595)*new_r02*new_r12)));
j2eval[2]=IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
IkReal x3528=new_r02*new_r02;
j2eval[0]=((((1.73206161520519)*new_r12))+new_r02);
j2eval[1]=((1.0)+(((1.5395923119446)*new_r02*new_r12))+(((2.37036667275206)*x3528*(new_r12*new_r12)))+(((-2.66666874658427)*x3528))+(((2.37036667275206)*(x3528*x3528))));
j2eval[2]=IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[4];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=(new_r10+(((-1.73206161520519)*new_r00)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=(new_r11+(((-1.73206161520519)*new_r01)));
j2eval[1]=5624995940.50689;
j2eval[2]=sj0;
j2eval[3]=IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((((-1.0)*new_r00))+(((-1.73206161520519)*new_r10)));
j2eval[1]=IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10))));
j2eval[2]=5624995940.50689;
j2eval[3]=cj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3529=(new_r01*new_r10);
IkReal x3530=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x3529))+x3530);
j2eval[1]=IKsign(((((5.33330713107669e+28)*x3530))+(((-5.33330713107669e+28)*x3529))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3531=(new_r00*new_r01);
IkReal x3532=(new_r10*new_r11);
j2eval[0]=(x3531+x3532);
j2eval[1]=((IKabs(((((-1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))))+(IKabs(((((-1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x3532))+(((5.33330713107669e+28)*x3531))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3533=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x3533.valid){
continue;
}
CheckValue<IkReal> x3534 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r00))+(((2.30939270191783e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r10))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3534.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3533.value)))+(x3534.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3535=IKsin(j2);
IkReal x3536=IKcos(j2);
IkReal x3537=((0.75000087746404)*x3535);
IkReal x3538=(new_r01*x3536);
IkReal x3539=(new_r11*x3535);
IkReal x3540=(new_r01*x3535);
IkReal x3541=((0.433010506600939)*x3535);
IkReal x3542=((0.433010506600939)*x3536);
IkReal x3543=(new_r10*x3536);
IkReal x3544=(new_r00*x3535);
IkReal x3545=((0.49999820135573)*x3536);
IkReal x3546=(new_r10*x3535);
IkReal x3547=(new_r11*x3536);
IkReal x3548=((0.75000087746404)*x3536);
IkReal x3549=(new_r00*x3536);
evalcond[0]=((0.250000205066586)+x3544+x3543);
evalcond[1]=((-0.866026442229025)+x3547+x3540);
evalcond[2]=((0.433013258970445)+x3549+(((-1.0)*x3546)));
evalcond[3]=((0.49999820135573)+x3538+(((-1.0)*x3539)));
evalcond[4]=(x3541+x3548);
evalcond[5]=(x3542+(((-1.0)*x3537)));
evalcond[6]=((((0.250000205066586)*x3535))+(((0.433013258970445)*x3536))+new_r00);
evalcond[7]=(x3545+(((-0.866026442229025)*x3535))+new_r01);
evalcond[8]=((((0.250000205066586)*x3536))+new_r10+(((-0.433013258970445)*x3535)));
evalcond[9]=((((-0.866026442229025)*x3536))+(((-0.49999820135573)*x3535))+new_r11);
evalcond[10]=((((0.250000205066586)*x3547))+(((0.250000205066586)*x3540))+(((-0.433013258970445)*x3539))+(((0.433013258970445)*x3538)));
evalcond[11]=((((-1.0)*new_r10*x3537))+((new_r10*x3542))+((new_r00*x3548))+((new_r00*x3541)));
evalcond[12]=((((0.433010506600939)*x3540))+(((0.75000087746404)*x3538))+((new_r11*x3542))+(((-1.0)*new_r11*x3537)));
evalcond[13]=((((0.866026442229025)*x3544))+(((0.866026442229025)*x3543))+(((-1.0)*new_r00*x3545))+(((0.49999820135573)*x3546)));
evalcond[14]=((1.0)+(((0.250000205066586)*x3544))+(((0.250000205066586)*x3543))+(((0.433013258970445)*x3549))+(((-0.433013258970445)*x3546)));
evalcond[15]=((-1.0)+(((0.866026442229025)*x3540))+(((0.866026442229025)*x3547))+(((-0.49999820135573)*x3538))+(((0.49999820135573)*x3539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3550 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3550.valid){
continue;
}
CheckValue<IkReal> x3551=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x3551.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3550.value)+(((1.5707963267949)*(x3551.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3552=IKsin(j2);
IkReal x3553=IKcos(j2);
IkReal x3554=((0.75000087746404)*x3552);
IkReal x3555=(new_r01*x3553);
IkReal x3556=(new_r11*x3552);
IkReal x3557=(new_r01*x3552);
IkReal x3558=((0.433010506600939)*x3552);
IkReal x3559=((0.433010506600939)*x3553);
IkReal x3560=(new_r10*x3553);
IkReal x3561=(new_r00*x3552);
IkReal x3562=((0.49999820135573)*x3553);
IkReal x3563=(new_r10*x3552);
IkReal x3564=(new_r11*x3553);
IkReal x3565=((0.75000087746404)*x3553);
IkReal x3566=(new_r00*x3553);
evalcond[0]=((0.250000205066586)+x3560+x3561);
evalcond[1]=((-0.866026442229025)+x3557+x3564);
evalcond[2]=((0.433013258970445)+x3566+(((-1.0)*x3563)));
evalcond[3]=((0.49999820135573)+x3555+(((-1.0)*x3556)));
evalcond[4]=(x3558+x3565);
evalcond[5]=(x3559+(((-1.0)*x3554)));
evalcond[6]=((((0.250000205066586)*x3552))+(((0.433013258970445)*x3553))+new_r00);
evalcond[7]=(x3562+(((-0.866026442229025)*x3552))+new_r01);
evalcond[8]=((((0.250000205066586)*x3553))+new_r10+(((-0.433013258970445)*x3552)));
evalcond[9]=((((-0.866026442229025)*x3553))+(((-0.49999820135573)*x3552))+new_r11);
evalcond[10]=((((0.250000205066586)*x3557))+(((0.250000205066586)*x3564))+(((0.433013258970445)*x3555))+(((-0.433013258970445)*x3556)));
evalcond[11]=(((new_r00*x3565))+(((-1.0)*new_r10*x3554))+((new_r10*x3559))+((new_r00*x3558)));
evalcond[12]=((((-1.0)*new_r11*x3554))+((new_r11*x3559))+(((0.433010506600939)*x3557))+(((0.75000087746404)*x3555)));
evalcond[13]=((((0.866026442229025)*x3560))+(((0.866026442229025)*x3561))+(((-1.0)*new_r00*x3562))+(((0.49999820135573)*x3563)));
evalcond[14]=((1.0)+(((0.250000205066586)*x3560))+(((0.250000205066586)*x3561))+(((0.433013258970445)*x3566))+(((-0.433013258970445)*x3563)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x3556))+(((0.866026442229025)*x3557))+(((0.866026442229025)*x3564))+(((-0.49999820135573)*x3555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
CheckValue<IkReal> x3568=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x3568.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3567.value)+(((1.5707963267949)*(x3568.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3569=IKsin(j2);
IkReal x3570=IKcos(j2);
IkReal x3571=((0.75000087746404)*x3569);
IkReal x3572=(new_r01*x3570);
IkReal x3573=(new_r11*x3569);
IkReal x3574=(new_r01*x3569);
IkReal x3575=((0.433010506600939)*x3569);
IkReal x3576=((0.433010506600939)*x3570);
IkReal x3577=(new_r10*x3570);
IkReal x3578=(new_r00*x3569);
IkReal x3579=((0.49999820135573)*x3570);
IkReal x3580=(new_r10*x3569);
IkReal x3581=(new_r11*x3570);
IkReal x3582=((0.75000087746404)*x3570);
IkReal x3583=(new_r00*x3570);
evalcond[0]=((0.250000205066586)+x3578+x3577);
evalcond[1]=((-0.866026442229025)+x3574+x3581);
evalcond[2]=((0.433013258970445)+x3583+(((-1.0)*x3580)));
evalcond[3]=((0.49999820135573)+x3572+(((-1.0)*x3573)));
evalcond[4]=(x3575+x3582);
evalcond[5]=(x3576+(((-1.0)*x3571)));
evalcond[6]=((((0.433013258970445)*x3570))+(((0.250000205066586)*x3569))+new_r00);
evalcond[7]=(x3579+(((-0.866026442229025)*x3569))+new_r01);
evalcond[8]=((((0.250000205066586)*x3570))+new_r10+(((-0.433013258970445)*x3569)));
evalcond[9]=((((-0.49999820135573)*x3569))+(((-0.866026442229025)*x3570))+new_r11);
evalcond[10]=((((0.250000205066586)*x3581))+(((0.433013258970445)*x3572))+(((0.250000205066586)*x3574))+(((-0.433013258970445)*x3573)));
evalcond[11]=(((new_r10*x3576))+((new_r00*x3582))+(((-1.0)*new_r10*x3571))+((new_r00*x3575)));
evalcond[12]=(((new_r11*x3576))+(((0.75000087746404)*x3572))+(((0.433010506600939)*x3574))+(((-1.0)*new_r11*x3571)));
evalcond[13]=((((0.866026442229025)*x3578))+(((0.866026442229025)*x3577))+(((0.49999820135573)*x3580))+(((-1.0)*new_r00*x3579)));
evalcond[14]=((1.0)+(((0.433013258970445)*x3583))+(((0.250000205066586)*x3578))+(((0.250000205066586)*x3577))+(((-0.433013258970445)*x3580)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x3572))+(((0.866026442229025)*x3574))+(((0.866026442229025)*x3581))+(((0.49999820135573)*x3573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3584=(new_r01*new_r10);
IkReal x3585=(new_r00*new_r11);
j2eval[0]=(x3585+(((-1.0)*x3584)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x3585))+(((-5.33330713107669e+28)*x3584))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))))+(IKabs(((((4.61878500004103e+28)*new_r10))+(((1.33332787645226e+28)*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3586=(new_r00*new_r01);
IkReal x3587=(new_r10*new_r11);
j2eval[0]=(x3586+x3587);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r11))+(((2.66664397281603e+28)*new_r00)))))+(IKabs(((((1.33332787645226e+28)*new_r01))+(((-2.66664397281603e+28)*new_r10))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x3587))+(((5.33330713107669e+28)*x3586))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3588=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x3588.valid){
continue;
}
CheckValue<IkReal> x3589 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r00))+(((-2.30939270191783e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r10))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3589.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3588.value)))+(x3589.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3590=IKsin(j2);
IkReal x3591=IKcos(j2);
IkReal x3592=((0.75000087746404)*x3590);
IkReal x3593=(new_r01*x3591);
IkReal x3594=(new_r11*x3590);
IkReal x3595=(new_r01*x3590);
IkReal x3596=((0.433010506600939)*x3590);
IkReal x3597=((0.433010506600939)*x3591);
IkReal x3598=(new_r10*x3591);
IkReal x3599=(new_r00*x3590);
IkReal x3600=((0.49999820135573)*x3591);
IkReal x3601=(new_r10*x3590);
IkReal x3602=(new_r11*x3591);
IkReal x3603=((0.75000087746404)*x3591);
IkReal x3604=(new_r00*x3591);
evalcond[0]=((-0.250000205066586)+x3599+x3598);
evalcond[1]=((0.866026442229025)+x3595+x3602);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x3601))+x3604);
evalcond[3]=((-0.49999820135573)+x3593+(((-1.0)*x3594)));
evalcond[4]=(x3596+x3603);
evalcond[5]=(x3597+(((-1.0)*x3592)));
evalcond[6]=((((-0.433013258970445)*x3591))+new_r00+(((-0.250000205066586)*x3590)));
evalcond[7]=((((0.866026442229025)*x3590))+(((-1.0)*x3600))+new_r01);
evalcond[8]=((((0.433013258970445)*x3590))+new_r10+(((-0.250000205066586)*x3591)));
evalcond[9]=((((0.49999820135573)*x3590))+(((0.866026442229025)*x3591))+new_r11);
evalcond[10]=((((-0.433013258970445)*x3594))+(((0.250000205066586)*x3595))+(((0.250000205066586)*x3602))+(((0.433013258970445)*x3593)));
evalcond[11]=(((new_r10*x3597))+((new_r00*x3596))+((new_r00*x3603))+(((-1.0)*new_r10*x3592)));
evalcond[12]=((((-1.0)*new_r11*x3592))+((new_r11*x3597))+(((0.433010506600939)*x3595))+(((0.75000087746404)*x3593)));
evalcond[13]=((((-1.0)*new_r00*x3600))+(((0.866026442229025)*x3598))+(((0.866026442229025)*x3599))+(((0.49999820135573)*x3601)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x3601))+(((0.433013258970445)*x3604))+(((0.250000205066586)*x3598))+(((0.250000205066586)*x3599)));
evalcond[15]=((1.0)+(((0.49999820135573)*x3594))+(((0.866026442229025)*x3595))+(((0.866026442229025)*x3602))+(((-0.49999820135573)*x3593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3605=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x3605.valid){
continue;
}
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((-2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3605.value)))+(x3606.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3607=IKsin(j2);
IkReal x3608=IKcos(j2);
IkReal x3609=((0.75000087746404)*x3607);
IkReal x3610=(new_r01*x3608);
IkReal x3611=(new_r11*x3607);
IkReal x3612=(new_r01*x3607);
IkReal x3613=((0.433010506600939)*x3607);
IkReal x3614=((0.433010506600939)*x3608);
IkReal x3615=(new_r10*x3608);
IkReal x3616=(new_r00*x3607);
IkReal x3617=((0.49999820135573)*x3608);
IkReal x3618=(new_r10*x3607);
IkReal x3619=(new_r11*x3608);
IkReal x3620=((0.75000087746404)*x3608);
IkReal x3621=(new_r00*x3608);
evalcond[0]=((-0.250000205066586)+x3615+x3616);
evalcond[1]=((0.866026442229025)+x3612+x3619);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x3618))+x3621);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x3611))+x3610);
evalcond[4]=(x3620+x3613);
evalcond[5]=(x3614+(((-1.0)*x3609)));
evalcond[6]=((((-0.250000205066586)*x3607))+new_r00+(((-0.433013258970445)*x3608)));
evalcond[7]=((((0.866026442229025)*x3607))+(((-1.0)*x3617))+new_r01);
evalcond[8]=((((-0.250000205066586)*x3608))+(((0.433013258970445)*x3607))+new_r10);
evalcond[9]=((((0.866026442229025)*x3608))+(((0.49999820135573)*x3607))+new_r11);
evalcond[10]=((((-0.433013258970445)*x3611))+(((0.433013258970445)*x3610))+(((0.250000205066586)*x3612))+(((0.250000205066586)*x3619)));
evalcond[11]=(((new_r10*x3614))+(((-1.0)*new_r10*x3609))+((new_r00*x3620))+((new_r00*x3613)));
evalcond[12]=(((new_r11*x3614))+(((0.75000087746404)*x3610))+(((-1.0)*new_r11*x3609))+(((0.433010506600939)*x3612)));
evalcond[13]=((((-1.0)*new_r00*x3617))+(((0.49999820135573)*x3618))+(((0.866026442229025)*x3616))+(((0.866026442229025)*x3615)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x3618))+(((0.250000205066586)*x3615))+(((0.250000205066586)*x3616))+(((0.433013258970445)*x3621)));
evalcond[15]=((1.0)+(((0.49999820135573)*x3611))+(((0.866026442229025)*x3612))+(((0.866026442229025)*x3619))+(((-0.49999820135573)*x3610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x3622.valid){
continue;
}
CheckValue<IkReal> x3623 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*new_r10))+(((1.33332787645226e+28)*new_r11)))),IkReal(((((-1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3623.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3622.value)))+(x3623.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3624=IKsin(j2);
IkReal x3625=IKcos(j2);
IkReal x3626=((0.75000087746404)*x3624);
IkReal x3627=(new_r01*x3625);
IkReal x3628=(new_r11*x3624);
IkReal x3629=(new_r01*x3624);
IkReal x3630=((0.433010506600939)*x3624);
IkReal x3631=((0.433010506600939)*x3625);
IkReal x3632=(new_r10*x3625);
IkReal x3633=(new_r00*x3624);
IkReal x3634=((0.49999820135573)*x3625);
IkReal x3635=(new_r10*x3624);
IkReal x3636=(new_r11*x3625);
IkReal x3637=((0.75000087746404)*x3625);
IkReal x3638=(new_r00*x3625);
evalcond[0]=((-0.250000205066586)+x3632+x3633);
evalcond[1]=((0.866026442229025)+x3629+x3636);
evalcond[2]=((-0.433013258970445)+x3638+(((-1.0)*x3635)));
evalcond[3]=((-0.49999820135573)+x3627+(((-1.0)*x3628)));
evalcond[4]=(x3637+x3630);
evalcond[5]=((((-1.0)*x3626))+x3631);
evalcond[6]=((((-0.433013258970445)*x3625))+(((-0.250000205066586)*x3624))+new_r00);
evalcond[7]=((((0.866026442229025)*x3624))+(((-1.0)*x3634))+new_r01);
evalcond[8]=((((0.433013258970445)*x3624))+(((-0.250000205066586)*x3625))+new_r10);
evalcond[9]=((((0.866026442229025)*x3625))+new_r11+(((0.49999820135573)*x3624)));
evalcond[10]=((((0.250000205066586)*x3629))+(((0.250000205066586)*x3636))+(((0.433013258970445)*x3627))+(((-0.433013258970445)*x3628)));
evalcond[11]=(((new_r00*x3630))+((new_r00*x3637))+(((-1.0)*new_r10*x3626))+((new_r10*x3631)));
evalcond[12]=((((-1.0)*new_r11*x3626))+((new_r11*x3631))+(((0.433010506600939)*x3629))+(((0.75000087746404)*x3627)));
evalcond[13]=((((-1.0)*new_r00*x3634))+(((0.49999820135573)*x3635))+(((0.866026442229025)*x3633))+(((0.866026442229025)*x3632)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x3638))+(((-0.433013258970445)*x3635))+(((0.250000205066586)*x3633))+(((0.250000205066586)*x3632)));
evalcond[15]=((1.0)+(((0.866026442229025)*x3629))+(((-0.49999820135573)*x3627))+(((0.866026442229025)*x3636))+(((0.49999820135573)*x3628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3639=(new_r01*new_r10);
IkReal x3640=(new_r00*new_r11);
j2eval[0]=(x3640+(((-1.0)*x3639)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x3639))+(((5.33330713107669e+28)*x3640))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r10))+(((4.61878500004103e+28)*new_r11)))))+(IKabs(((((1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3641=(new_r00*new_r01);
IkReal x3642=(new_r10*new_r11);
j2eval[0]=(x3642+x3641);
j2eval[1]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((2.30939270191783e+28)*new_r00)))))+(IKabs(((((-2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x3642))+(((5.33330713107669e+28)*x3641))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x3643.valid){
continue;
}
CheckValue<IkReal> x3644 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3644.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3643.value)))+(x3644.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3645=IKsin(j2);
IkReal x3646=IKcos(j2);
IkReal x3647=((0.75000087746404)*x3645);
IkReal x3648=(new_r01*x3646);
IkReal x3649=(new_r11*x3645);
IkReal x3650=(new_r01*x3645);
IkReal x3651=((0.433010506600939)*x3645);
IkReal x3652=((0.433010506600939)*x3646);
IkReal x3653=(new_r10*x3646);
IkReal x3654=(new_r00*x3645);
IkReal x3655=((0.49999820135573)*x3646);
IkReal x3656=(new_r10*x3645);
IkReal x3657=(new_r11*x3646);
IkReal x3658=((0.75000087746404)*x3646);
IkReal x3659=(new_r00*x3646);
evalcond[0]=((-0.866026442229025)+x3654+x3653);
evalcond[1]=((-0.250000205066586)+x3657+x3650);
evalcond[2]=((0.49999820135573)+x3659+(((-1.0)*x3656)));
evalcond[3]=((-0.433013258970445)+x3648+(((-1.0)*x3649)));
evalcond[4]=(x3658+x3651);
evalcond[5]=(x3652+(((-1.0)*x3647)));
evalcond[6]=((((-0.866026442229025)*x3645))+x3655+new_r00);
evalcond[7]=((((-0.433013258970445)*x3646))+new_r01+(((-0.250000205066586)*x3645)));
evalcond[8]=((((-0.49999820135573)*x3645))+(((-0.866026442229025)*x3646))+new_r10);
evalcond[9]=(new_r11+(((-0.250000205066586)*x3646))+(((0.433013258970445)*x3645)));
evalcond[10]=((((0.433013258970445)*x3659))+(((0.250000205066586)*x3654))+(((0.250000205066586)*x3653))+(((-0.433013258970445)*x3656)));
evalcond[11]=((((-1.0)*new_r10*x3647))+((new_r10*x3652))+((new_r00*x3658))+((new_r00*x3651)));
evalcond[12]=((((-1.0)*new_r11*x3647))+(((0.433010506600939)*x3650))+((new_r11*x3652))+(((0.75000087746404)*x3648)));
evalcond[13]=((((-0.49999820135573)*x3648))+(((0.49999820135573)*x3649))+(((0.866026442229025)*x3650))+(((0.866026442229025)*x3657)));
evalcond[14]=((-1.0)+(((-0.433013258970445)*x3649))+(((0.433013258970445)*x3648))+(((0.250000205066586)*x3657))+(((0.250000205066586)*x3650)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x3655))+(((0.49999820135573)*x3656))+(((0.866026442229025)*x3654))+(((0.866026442229025)*x3653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3660=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x3660.valid){
continue;
}
CheckValue<IkReal> x3661 = IKatan2WithCheck(IkReal(((((-2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3661.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3660.value)))+(x3661.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3662=IKsin(j2);
IkReal x3663=IKcos(j2);
IkReal x3664=((0.75000087746404)*x3662);
IkReal x3665=(new_r01*x3663);
IkReal x3666=(new_r11*x3662);
IkReal x3667=(new_r01*x3662);
IkReal x3668=((0.433010506600939)*x3662);
IkReal x3669=((0.433010506600939)*x3663);
IkReal x3670=(new_r10*x3663);
IkReal x3671=(new_r00*x3662);
IkReal x3672=((0.49999820135573)*x3663);
IkReal x3673=(new_r10*x3662);
IkReal x3674=(new_r11*x3663);
IkReal x3675=((0.75000087746404)*x3663);
IkReal x3676=(new_r00*x3663);
evalcond[0]=((-0.866026442229025)+x3670+x3671);
evalcond[1]=((-0.250000205066586)+x3667+x3674);
evalcond[2]=((0.49999820135573)+x3676+(((-1.0)*x3673)));
evalcond[3]=((-0.433013258970445)+(((-1.0)*x3666))+x3665);
evalcond[4]=(x3668+x3675);
evalcond[5]=((((-1.0)*x3664))+x3669);
evalcond[6]=(x3672+(((-0.866026442229025)*x3662))+new_r00);
evalcond[7]=((((-0.433013258970445)*x3663))+(((-0.250000205066586)*x3662))+new_r01);
evalcond[8]=((((-0.49999820135573)*x3662))+(((-0.866026442229025)*x3663))+new_r10);
evalcond[9]=((((-0.250000205066586)*x3663))+new_r11+(((0.433013258970445)*x3662)));
evalcond[10]=((((0.250000205066586)*x3670))+(((0.250000205066586)*x3671))+(((-0.433013258970445)*x3673))+(((0.433013258970445)*x3676)));
evalcond[11]=(((new_r10*x3669))+((new_r00*x3668))+((new_r00*x3675))+(((-1.0)*new_r10*x3664)));
evalcond[12]=(((new_r11*x3669))+(((0.433010506600939)*x3667))+(((0.75000087746404)*x3665))+(((-1.0)*new_r11*x3664)));
evalcond[13]=((((0.49999820135573)*x3666))+(((-0.49999820135573)*x3665))+(((0.866026442229025)*x3667))+(((0.866026442229025)*x3674)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x3674))+(((-0.433013258970445)*x3666))+(((0.250000205066586)*x3667))+(((0.433013258970445)*x3665)));
evalcond[15]=((-1.0)+(((-1.0)*new_r00*x3672))+(((0.49999820135573)*x3673))+(((0.866026442229025)*x3671))+(((0.866026442229025)*x3670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3677 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r10))+(((4.61878500004103e+28)*new_r11)))),IkReal(((((1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3677.valid){
continue;
}
CheckValue<IkReal> x3678=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x3678.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3677.value)+(((1.5707963267949)*(x3678.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3679=IKsin(j2);
IkReal x3680=IKcos(j2);
IkReal x3681=((0.75000087746404)*x3679);
IkReal x3682=(new_r01*x3680);
IkReal x3683=(new_r11*x3679);
IkReal x3684=(new_r01*x3679);
IkReal x3685=((0.433010506600939)*x3679);
IkReal x3686=((0.433010506600939)*x3680);
IkReal x3687=(new_r10*x3680);
IkReal x3688=(new_r00*x3679);
IkReal x3689=((0.49999820135573)*x3680);
IkReal x3690=(new_r10*x3679);
IkReal x3691=(new_r11*x3680);
IkReal x3692=((0.75000087746404)*x3680);
IkReal x3693=(new_r00*x3680);
evalcond[0]=((-0.866026442229025)+x3688+x3687);
evalcond[1]=((-0.250000205066586)+x3691+x3684);
evalcond[2]=((0.49999820135573)+x3693+(((-1.0)*x3690)));
evalcond[3]=((-0.433013258970445)+x3682+(((-1.0)*x3683)));
evalcond[4]=(x3692+x3685);
evalcond[5]=((((-1.0)*x3681))+x3686);
evalcond[6]=((((-0.866026442229025)*x3679))+x3689+new_r00);
evalcond[7]=((((-0.433013258970445)*x3680))+new_r01+(((-0.250000205066586)*x3679)));
evalcond[8]=((((-0.866026442229025)*x3680))+(((-0.49999820135573)*x3679))+new_r10);
evalcond[9]=((((0.433013258970445)*x3679))+(((-0.250000205066586)*x3680))+new_r11);
evalcond[10]=((((0.250000205066586)*x3688))+(((0.250000205066586)*x3687))+(((0.433013258970445)*x3693))+(((-0.433013258970445)*x3690)));
evalcond[11]=(((new_r00*x3692))+((new_r00*x3685))+((new_r10*x3686))+(((-1.0)*new_r10*x3681)));
evalcond[12]=((((0.433010506600939)*x3684))+((new_r11*x3686))+(((0.75000087746404)*x3682))+(((-1.0)*new_r11*x3681)));
evalcond[13]=((((-0.49999820135573)*x3682))+(((0.866026442229025)*x3691))+(((0.49999820135573)*x3683))+(((0.866026442229025)*x3684)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x3682))+(((0.250000205066586)*x3684))+(((-0.433013258970445)*x3683))+(((0.250000205066586)*x3691)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x3690))+(((-1.0)*new_r00*x3689))+(((0.866026442229025)*x3688))+(((0.866026442229025)*x3687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3694=(new_r01*new_r10);
IkReal x3695=(new_r00*new_r11);
j2eval[0]=(x3695+(((-1.0)*x3694)));
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))))+(IKabs(((((-1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((-5.33330713107669e+28)*x3694))+(((5.33330713107669e+28)*x3695))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3696=(new_r00*new_r01);
IkReal x3697=(new_r10*new_r11);
j2eval[0]=(x3696+x3697);
j2eval[1]=((IKabs(((((2.30939270191783e+28)*new_r10))+(((-4.61878500004103e+28)*new_r01)))))+(IKabs(((((-4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x3697))+(((5.33330713107669e+28)*x3696))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=1.0;
cj1=0;
j1=1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=-1.0;
j2eval[1]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
CheckValue<IkReal> x3699=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*(new_r10*new_r10)))+(((-5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x3699.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3698.value)+(((1.5707963267949)*(x3699.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3700=IKsin(j2);
IkReal x3701=IKcos(j2);
IkReal x3702=((0.75000087746404)*x3700);
IkReal x3703=(new_r01*x3701);
IkReal x3704=(new_r11*x3700);
IkReal x3705=(new_r01*x3700);
IkReal x3706=((0.433010506600939)*x3700);
IkReal x3707=((0.433010506600939)*x3701);
IkReal x3708=(new_r10*x3701);
IkReal x3709=(new_r00*x3700);
IkReal x3710=((0.49999820135573)*x3701);
IkReal x3711=(new_r10*x3700);
IkReal x3712=(new_r11*x3701);
IkReal x3713=((0.75000087746404)*x3701);
IkReal x3714=(new_r00*x3701);
evalcond[0]=((0.866026442229025)+x3708+x3709);
evalcond[1]=((0.250000205066586)+x3705+x3712);
evalcond[2]=((-0.49999820135573)+x3714+(((-1.0)*x3711)));
evalcond[3]=((0.433013258970445)+x3703+(((-1.0)*x3704)));
evalcond[4]=(x3706+x3713);
evalcond[5]=((((-1.0)*x3702))+x3707);
evalcond[6]=((((-1.0)*x3710))+(((0.866026442229025)*x3700))+new_r00);
evalcond[7]=((((0.250000205066586)*x3700))+(((0.433013258970445)*x3701))+new_r01);
evalcond[8]=((((0.49999820135573)*x3700))+(((0.866026442229025)*x3701))+new_r10);
evalcond[9]=((((-0.433013258970445)*x3700))+(((0.250000205066586)*x3701))+new_r11);
evalcond[10]=((((-0.433013258970445)*x3711))+(((0.433013258970445)*x3714))+(((0.250000205066586)*x3708))+(((0.250000205066586)*x3709)));
evalcond[11]=(((new_r00*x3706))+((new_r00*x3713))+((new_r10*x3707))+(((-1.0)*new_r10*x3702)));
evalcond[12]=((((0.433010506600939)*x3705))+((new_r11*x3707))+(((0.75000087746404)*x3703))+(((-1.0)*new_r11*x3702)));
evalcond[13]=((((0.866026442229025)*x3705))+(((0.49999820135573)*x3704))+(((0.866026442229025)*x3712))+(((-0.49999820135573)*x3703)));
evalcond[14]=((1.0)+(((0.250000205066586)*x3712))+(((0.433013258970445)*x3703))+(((-0.433013258970445)*x3704))+(((0.250000205066586)*x3705)));
evalcond[15]=((1.0)+(((0.866026442229025)*x3709))+(((0.866026442229025)*x3708))+(((-1.0)*new_r00*x3710))+(((0.49999820135573)*x3711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3715=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x3715.valid){
continue;
}
CheckValue<IkReal> x3716 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((-4.61878500004103e+28)*new_r01)))),IkReal(((((-4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3716.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3715.value)))+(x3716.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3717=IKsin(j2);
IkReal x3718=IKcos(j2);
IkReal x3719=((0.75000087746404)*x3717);
IkReal x3720=(new_r01*x3718);
IkReal x3721=(new_r11*x3717);
IkReal x3722=(new_r01*x3717);
IkReal x3723=((0.433010506600939)*x3717);
IkReal x3724=((0.433010506600939)*x3718);
IkReal x3725=(new_r10*x3718);
IkReal x3726=(new_r00*x3717);
IkReal x3727=((0.49999820135573)*x3718);
IkReal x3728=(new_r10*x3717);
IkReal x3729=(new_r11*x3718);
IkReal x3730=((0.75000087746404)*x3718);
IkReal x3731=(new_r00*x3718);
evalcond[0]=((0.866026442229025)+x3725+x3726);
evalcond[1]=((0.250000205066586)+x3729+x3722);
evalcond[2]=((-0.49999820135573)+x3731+(((-1.0)*x3728)));
evalcond[3]=((0.433013258970445)+x3720+(((-1.0)*x3721)));
evalcond[4]=(x3723+x3730);
evalcond[5]=((((-1.0)*x3719))+x3724);
evalcond[6]=((((-1.0)*x3727))+(((0.866026442229025)*x3717))+new_r00);
evalcond[7]=((((0.433013258970445)*x3718))+(((0.250000205066586)*x3717))+new_r01);
evalcond[8]=((((0.866026442229025)*x3718))+new_r10+(((0.49999820135573)*x3717)));
evalcond[9]=((((-0.433013258970445)*x3717))+(((0.250000205066586)*x3718))+new_r11);
evalcond[10]=((((0.433013258970445)*x3731))+(((-0.433013258970445)*x3728))+(((0.250000205066586)*x3725))+(((0.250000205066586)*x3726)));
evalcond[11]=(((new_r00*x3730))+((new_r00*x3723))+((new_r10*x3724))+(((-1.0)*new_r10*x3719)));
evalcond[12]=((((0.75000087746404)*x3720))+((new_r11*x3724))+(((0.433010506600939)*x3722))+(((-1.0)*new_r11*x3719)));
evalcond[13]=((((-0.49999820135573)*x3720))+(((0.49999820135573)*x3721))+(((0.866026442229025)*x3729))+(((0.866026442229025)*x3722)));
evalcond[14]=((1.0)+(((0.433013258970445)*x3720))+(((-0.433013258970445)*x3721))+(((0.250000205066586)*x3729))+(((0.250000205066586)*x3722)));
evalcond[15]=((1.0)+(((-1.0)*new_r00*x3727))+(((0.49999820135573)*x3728))+(((0.866026442229025)*x3726))+(((0.866026442229025)*x3725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))),IkReal(((((-1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
CheckValue<IkReal> x3733=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x3733.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3732.value)+(((1.5707963267949)*(x3733.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3734=IKsin(j2);
IkReal x3735=IKcos(j2);
IkReal x3736=((0.75000087746404)*x3734);
IkReal x3737=(new_r01*x3735);
IkReal x3738=(new_r11*x3734);
IkReal x3739=(new_r01*x3734);
IkReal x3740=((0.433010506600939)*x3734);
IkReal x3741=((0.433010506600939)*x3735);
IkReal x3742=(new_r10*x3735);
IkReal x3743=(new_r00*x3734);
IkReal x3744=((0.49999820135573)*x3735);
IkReal x3745=(new_r10*x3734);
IkReal x3746=(new_r11*x3735);
IkReal x3747=((0.75000087746404)*x3735);
IkReal x3748=(new_r00*x3735);
evalcond[0]=((0.866026442229025)+x3742+x3743);
evalcond[1]=((0.250000205066586)+x3746+x3739);
evalcond[2]=((-0.49999820135573)+x3748+(((-1.0)*x3745)));
evalcond[3]=((0.433013258970445)+x3737+(((-1.0)*x3738)));
evalcond[4]=(x3747+x3740);
evalcond[5]=((((-1.0)*x3736))+x3741);
evalcond[6]=((((-1.0)*x3744))+(((0.866026442229025)*x3734))+new_r00);
evalcond[7]=((((0.433013258970445)*x3735))+(((0.250000205066586)*x3734))+new_r01);
evalcond[8]=((((0.866026442229025)*x3735))+(((0.49999820135573)*x3734))+new_r10);
evalcond[9]=((((-0.433013258970445)*x3734))+(((0.250000205066586)*x3735))+new_r11);
evalcond[10]=((((0.433013258970445)*x3748))+(((-0.433013258970445)*x3745))+(((0.250000205066586)*x3742))+(((0.250000205066586)*x3743)));
evalcond[11]=(((new_r00*x3740))+((new_r00*x3747))+(((-1.0)*new_r10*x3736))+((new_r10*x3741)));
evalcond[12]=((((0.433010506600939)*x3739))+(((0.75000087746404)*x3737))+((new_r11*x3741))+(((-1.0)*new_r11*x3736)));
evalcond[13]=((((0.866026442229025)*x3739))+(((-0.49999820135573)*x3737))+(((0.49999820135573)*x3738))+(((0.866026442229025)*x3746)));
evalcond[14]=((1.0)+(((0.433013258970445)*x3737))+(((0.250000205066586)*x3746))+(((-0.433013258970445)*x3738))+(((0.250000205066586)*x3739)));
evalcond[15]=((1.0)+(((-1.0)*new_r00*x3744))+(((0.866026442229025)*x3743))+(((0.866026442229025)*x3742))+(((0.49999820135573)*x3745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3749=IKPowWithIntegerCheck(IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10)))),-1);
if(!x3749.valid){
continue;
}
CheckValue<IkReal> x3750 = IKatan2WithCheck(IkReal(((((-37499.810974959)*cj0))+(((10825.2588795883)*sj0)))),IkReal(((((18750.015379994)*sj0))+(((-64951.9831671769)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3750.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3749.value)))+(x3750.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3751=IKcos(j2);
IkReal x3752=IKsin(j2);
IkReal x3753=((1.0)*cj0);
IkReal x3754=((0.866026442229025)*cj0);
IkReal x3755=((0.49999820135573)*cj0);
IkReal x3756=((0.433013258970445)*sj0);
IkReal x3757=((0.866026442229025)*sj0);
IkReal x3758=((0.49999820135573)*sj0);
IkReal x3759=((0.75000087746404)*x3752);
IkReal x3760=(sj0*x3752);
IkReal x3761=(new_r01*x3751);
IkReal x3762=(new_r11*x3752);
IkReal x3763=((0.866026442229025)*x3752);
IkReal x3764=((0.250000205066586)*x3751);
IkReal x3765=((0.433010506600939)*x3752);
IkReal x3766=((0.433010506600939)*x3751);
IkReal x3767=((0.75000087746404)*x3751);
IkReal x3768=(new_r10*x3751);
IkReal x3769=(new_r10*x3752);
IkReal x3770=(new_r00*x3752);
IkReal x3771=(new_r01*x3752);
IkReal x3772=(cj0*x3752);
IkReal x3773=((0.433013258970445)*x3751);
IkReal x3774=(new_r00*x3751);
IkReal x3775=(new_r11*x3751);
evalcond[0]=(x3765+x3767);
evalcond[1]=((((-1.0)*x3759))+x3766);
evalcond[2]=((((0.250000205066586)*sj0))+(((-1.0)*x3754))+x3768+x3770);
evalcond[3]=((((-0.250000205066586)*cj0))+(((-1.0)*x3757))+x3771+x3775);
evalcond[4]=((((-1.0)*x3769))+x3774+x3755+x3756);
evalcond[5]=((((-1.0)*x3762))+x3761+x3758+(((-0.433013258970445)*cj0)));
evalcond[6]=(((new_r10*x3766))+(((-1.0)*new_r10*x3759))+((new_r00*x3765))+((new_r00*x3767)));
evalcond[7]=(((new_r11*x3766))+(((0.75000087746404)*x3761))+((new_r01*x3765))+(((-1.0)*new_r11*x3759)));
evalcond[8]=(((new_r10*x3764))+sj0+(((0.250000205066586)*x3770))+(((-0.433013258970445)*x3769))+((new_r00*x3773)));
evalcond[9]=((((-1.0)*x3752*x3754))+((x3751*x3755))+((x3751*x3756))+(((0.250000205066586)*x3760))+new_r00);
evalcond[10]=((((-1.0)*x3752*x3757))+((x3751*x3758))+(((-1.0)*cj0*x3773))+new_r01+(((-0.250000205066586)*x3772)));
evalcond[11]=((((-1.0)*x3752*x3755))+(((-1.0)*x3752*x3756))+(((-1.0)*x3751*x3754))+((sj0*x3764))+new_r10);
evalcond[12]=((((-1.0)*x3752*x3758))+(((-1.0)*cj0*x3764))+(((-1.0)*x3751*x3757))+(((0.433013258970445)*x3772))+new_r11);
evalcond[13]=(((new_r11*x3764))+(((-1.0)*x3753))+(((0.250000205066586)*x3771))+(((-0.433013258970445)*x3762))+(((0.433013258970445)*x3761)));
evalcond[14]=((((-1.0)*x3753))+(((0.49999820135573)*x3769))+(((0.866026442229025)*x3768))+(((-0.49999820135573)*x3774))+((new_r00*x3763)));
evalcond[15]=((((-1.0)*sj0))+(((0.49999820135573)*x3762))+(((0.866026442229025)*x3775))+(((-0.49999820135573)*x3761))+((new_r01*x3763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3776=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01)))),-1);
if(!x3776.valid){
continue;
}
CheckValue<IkReal> x3777 = IKatan2WithCheck(IkReal(((((-18750.015379994)*cj0))+(((-64951.9831671769)*sj0)))),IkReal(((((37499.810974959)*sj0))+(((10825.2588795883)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3777.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3776.value)))+(x3777.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3778=IKcos(j2);
IkReal x3779=IKsin(j2);
IkReal x3780=((1.0)*cj0);
IkReal x3781=((0.866026442229025)*cj0);
IkReal x3782=((0.49999820135573)*cj0);
IkReal x3783=((0.433013258970445)*sj0);
IkReal x3784=((0.866026442229025)*sj0);
IkReal x3785=((0.49999820135573)*sj0);
IkReal x3786=((0.75000087746404)*x3779);
IkReal x3787=(sj0*x3779);
IkReal x3788=(new_r01*x3778);
IkReal x3789=(new_r11*x3779);
IkReal x3790=((0.866026442229025)*x3779);
IkReal x3791=((0.250000205066586)*x3778);
IkReal x3792=((0.433010506600939)*x3779);
IkReal x3793=((0.433010506600939)*x3778);
IkReal x3794=((0.75000087746404)*x3778);
IkReal x3795=(new_r10*x3778);
IkReal x3796=(new_r10*x3779);
IkReal x3797=(new_r00*x3779);
IkReal x3798=(new_r01*x3779);
IkReal x3799=(cj0*x3779);
IkReal x3800=((0.433013258970445)*x3778);
IkReal x3801=(new_r00*x3778);
IkReal x3802=(new_r11*x3778);
evalcond[0]=(x3794+x3792);
evalcond[1]=((((-1.0)*x3786))+x3793);
evalcond[2]=((((0.250000205066586)*sj0))+(((-1.0)*x3781))+x3795+x3797);
evalcond[3]=((((-0.250000205066586)*cj0))+(((-1.0)*x3784))+x3798+x3802);
evalcond[4]=((((-1.0)*x3796))+x3782+x3783+x3801);
evalcond[5]=((((-1.0)*x3789))+x3785+x3788+(((-0.433013258970445)*cj0)));
evalcond[6]=((((-1.0)*new_r10*x3786))+((new_r00*x3792))+((new_r00*x3794))+((new_r10*x3793)));
evalcond[7]=((((-1.0)*new_r11*x3786))+((new_r01*x3792))+((new_r11*x3793))+(((0.75000087746404)*x3788)));
evalcond[8]=(sj0+((new_r00*x3800))+(((-0.433013258970445)*x3796))+(((0.250000205066586)*x3797))+((new_r10*x3791)));
evalcond[9]=((((-1.0)*x3779*x3781))+(((0.250000205066586)*x3787))+((x3778*x3783))+((x3778*x3782))+new_r00);
evalcond[10]=((((-1.0)*x3779*x3784))+(((-0.250000205066586)*x3799))+((x3778*x3785))+new_r01+(((-1.0)*cj0*x3800)));
evalcond[11]=((((-1.0)*x3778*x3781))+(((-1.0)*x3779*x3783))+(((-1.0)*x3779*x3782))+((sj0*x3791))+new_r10);
evalcond[12]=((((-1.0)*x3778*x3784))+(((-1.0)*x3779*x3785))+(((-1.0)*cj0*x3791))+new_r11+(((0.433013258970445)*x3799)));
evalcond[13]=((((-1.0)*x3780))+(((-0.433013258970445)*x3789))+(((0.250000205066586)*x3798))+(((0.433013258970445)*x3788))+((new_r11*x3791)));
evalcond[14]=((((-0.49999820135573)*x3801))+(((-1.0)*x3780))+(((0.866026442229025)*x3795))+(((0.49999820135573)*x3796))+((new_r00*x3790)));
evalcond[15]=((((-1.0)*sj0))+(((0.49999820135573)*x3789))+(((0.866026442229025)*x3802))+(((-0.49999820135573)*x3788))+((new_r01*x3790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3803=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00)))),-1);
if(!x3803.valid){
continue;
}
CheckValue<IkReal> x3804 = IKatan2WithCheck(IkReal(((((18750.015379994)*sj0))+(((-64951.9831671769)*cj0)))),IkReal(((((-10825.2588795883)*sj0))+(((37499.810974959)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3804.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3803.value)))+(x3804.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3805=IKcos(j2);
IkReal x3806=IKsin(j2);
IkReal x3807=((1.0)*cj0);
IkReal x3808=((0.866026442229025)*cj0);
IkReal x3809=((0.49999820135573)*cj0);
IkReal x3810=((0.433013258970445)*sj0);
IkReal x3811=((0.866026442229025)*sj0);
IkReal x3812=((0.49999820135573)*sj0);
IkReal x3813=((0.75000087746404)*x3806);
IkReal x3814=(sj0*x3806);
IkReal x3815=(new_r01*x3805);
IkReal x3816=(new_r11*x3806);
IkReal x3817=((0.866026442229025)*x3806);
IkReal x3818=((0.250000205066586)*x3805);
IkReal x3819=((0.433010506600939)*x3806);
IkReal x3820=((0.433010506600939)*x3805);
IkReal x3821=((0.75000087746404)*x3805);
IkReal x3822=(new_r10*x3805);
IkReal x3823=(new_r10*x3806);
IkReal x3824=(new_r00*x3806);
IkReal x3825=(new_r01*x3806);
IkReal x3826=(cj0*x3806);
IkReal x3827=((0.433013258970445)*x3805);
IkReal x3828=(new_r00*x3805);
IkReal x3829=(new_r11*x3805);
evalcond[0]=(x3821+x3819);
evalcond[1]=((((-1.0)*x3813))+x3820);
evalcond[2]=((((0.250000205066586)*sj0))+(((-1.0)*x3808))+x3824+x3822);
evalcond[3]=((((-0.250000205066586)*cj0))+(((-1.0)*x3811))+x3825+x3829);
evalcond[4]=((((-1.0)*x3823))+x3828+x3810+x3809);
evalcond[5]=((((-1.0)*x3816))+(((-0.433013258970445)*cj0))+x3812+x3815);
evalcond[6]=(((new_r00*x3819))+((new_r00*x3821))+((new_r10*x3820))+(((-1.0)*new_r10*x3813)));
evalcond[7]=(((new_r11*x3820))+((new_r01*x3819))+(((-1.0)*new_r11*x3813))+(((0.75000087746404)*x3815)));
evalcond[8]=(((new_r00*x3827))+sj0+((new_r10*x3818))+(((0.250000205066586)*x3824))+(((-0.433013258970445)*x3823)));
evalcond[9]=(((x3805*x3810))+((x3805*x3809))+(((0.250000205066586)*x3814))+(((-1.0)*x3806*x3808))+new_r00);
evalcond[10]=(((x3805*x3812))+(((-0.250000205066586)*x3826))+(((-1.0)*cj0*x3827))+new_r01+(((-1.0)*x3806*x3811)));
evalcond[11]=((((-1.0)*x3805*x3808))+((sj0*x3818))+(((-1.0)*x3806*x3809))+new_r10+(((-1.0)*x3806*x3810)));
evalcond[12]=((((0.433013258970445)*x3826))+(((-1.0)*cj0*x3818))+new_r11+(((-1.0)*x3805*x3811))+(((-1.0)*x3806*x3812)));
evalcond[13]=((((0.433013258970445)*x3815))+((new_r11*x3818))+(((-1.0)*x3807))+(((0.250000205066586)*x3825))+(((-0.433013258970445)*x3816)));
evalcond[14]=(((new_r00*x3817))+(((0.866026442229025)*x3822))+(((-1.0)*x3807))+(((-0.49999820135573)*x3828))+(((0.49999820135573)*x3823)));
evalcond[15]=((((-1.0)*sj0))+((new_r01*x3817))+(((0.866026442229025)*x3829))+(((-0.49999820135573)*x3815))+(((0.49999820135573)*x3816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3830=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02)))),-1);
if(!x3830.valid){
continue;
}
CheckValue<IkReal> x3831 = IKatan2WithCheck(IkReal(((562499341902740.0)+(((-999996490152053.0)*(new_r02*new_r02))))),IkReal(((-324757120049741.0)+(((-999996490152053.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3831.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3830.value)))+(x3831.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x3832=IKcos(j2);
IkReal x3833=IKsin(j2);
IkReal x3834=((1.0)*cj0);
IkReal x3835=((0.866026442229025)*cj0);
IkReal x3836=((0.49999820135573)*cj0);
IkReal x3837=((0.866026442229025)*sj0);
IkReal x3838=((0.49999820135573)*sj0);
IkReal x3839=((0.75000087746404)*x3833);
IkReal x3840=(sj0*x3833);
IkReal x3841=((0.433013258970445)*x3832);
IkReal x3842=((1.0)*x3833);
IkReal x3843=((0.866026442229025)*x3833);
IkReal x3844=((0.433010506600939)*x3833);
IkReal x3845=((0.250000205066586)*x3832);
IkReal x3846=(new_r02*x3832);
IkReal x3847=(new_r01*x3832);
IkReal x3848=(new_r12*x3832);
IkReal x3849=(new_r00*x3833);
IkReal x3850=(new_r10*x3832);
IkReal x3851=(new_r01*x3833);
IkReal x3852=((0.433010506600939)*x3832);
IkReal x3853=(cj0*x3833);
IkReal x3854=((0.433013258970445)*x3833);
IkReal x3855=((0.75000087746404)*x3832);
IkReal x3856=((0.49999820135573)*x3833);
IkReal x3857=(new_r00*x3832);
IkReal x3858=(new_r02*x3833);
IkReal x3859=(new_r11*x3832);
evalcond[0]=((0.433010506600939)+x3858+x3848);
evalcond[1]=((0.75000087746404)+(((-1.0)*new_r12*x3842))+x3846);
evalcond[2]=(x3855+x3844+new_r02);
evalcond[3]=(x3852+new_r12+(((-1.0)*x3839)));
evalcond[4]=((((0.250000205066586)*sj0))+x3850+x3849+(((-1.0)*x3835)));
evalcond[5]=((((-0.250000205066586)*cj0))+x3851+x3859+(((-1.0)*x3837)));
evalcond[6]=((((0.433013258970445)*sj0))+x3857+x3836+(((-1.0)*new_r10*x3842)));
evalcond[7]=((((-0.433013258970445)*cj0))+x3847+x3838+(((-1.0)*new_r11*x3842)));
evalcond[8]=((((-1.0)*x3833*x3835))+(((0.250000205066586)*x3840))+((x3832*x3836))+new_r00+((sj0*x3841)));
evalcond[9]=((((-0.250000205066586)*x3853))+(((-1.0)*x3833*x3837))+(((-1.0)*cj0*x3841))+((x3832*x3838))+new_r01);
evalcond[10]=((((-1.0)*x3832*x3835))+(((-1.0)*x3833*x3836))+(((-0.433013258970445)*x3840))+new_r10+((sj0*x3845)));
evalcond[11]=((((-1.0)*x3832*x3837))+(((0.433013258970445)*x3853))+(((-1.0)*x3833*x3838))+(((-1.0)*cj0*x3845))+new_r11);
evalcond[12]=((0.749999415023631)+(((0.75000087746404)*x3846))+(((-1.0)*new_r12*x3839))+(((0.433010506600939)*x3848))+((new_r02*x3844)));
evalcond[13]=((0.433013039627618)+(((0.250000205066586)*x3858))+((new_r02*x3841))+(((-1.0)*new_r12*x3854))+((new_r12*x3845)));
evalcond[14]=((-5.41267840225675e-7)+(((0.866026442229025)*x3848))+((new_r02*x3843))+(((-0.49999820135573)*x3846))+((new_r12*x3856)));
evalcond[15]=((((0.500000584976027)*new_r20))+((new_r00*x3855))+(((-1.0)*new_r10*x3839))+(((0.433010506600939)*x3850))+((new_r00*x3844)));
evalcond[16]=((((0.75000087746404)*x3847))+(((0.500000584976027)*new_r21))+(((-1.0)*new_r11*x3839))+((new_r01*x3844))+((new_r11*x3852)));
evalcond[17]=(sj0+((new_r00*x3841))+(((0.250000205066586)*x3849))+(((-0.866025066047432)*new_r20))+((new_r10*x3845))+(((-1.0)*new_r10*x3854)));
evalcond[18]=((((0.250000205066586)*x3851))+((new_r01*x3841))+(((-0.866025066047432)*new_r21))+(((-1.0)*new_r11*x3854))+((new_r11*x3845))+(((-1.0)*x3834)));
evalcond[19]=((((1.08253441393799e-6)*new_r20))+((new_r00*x3843))+((new_r10*x3856))+(((-0.49999820135573)*x3857))+(((-1.0)*x3834))+(((0.866026442229025)*x3850)));
evalcond[20]=((((-1.0)*sj0))+(((1.08253441393799e-6)*new_r21))+((new_r01*x3843))+((new_r11*x3856))+(((-0.49999820135573)*x3847))+(((0.866026442229025)*x3859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3860 = IKatan2WithCheck(IkReal(((-187497440736984.0)+(((999996490152053.0)*(new_r12*new_r12))))),IkReal(((-324757120049741.0)+(((-999996490152053.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3860.valid){
continue;
}
CheckValue<IkReal> x3861=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02)))),-1);
if(!x3861.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3860.value)+(((1.5707963267949)*(x3861.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x3862=IKcos(j2);
IkReal x3863=IKsin(j2);
IkReal x3864=((1.0)*cj0);
IkReal x3865=((0.866026442229025)*cj0);
IkReal x3866=((0.49999820135573)*cj0);
IkReal x3867=((0.866026442229025)*sj0);
IkReal x3868=((0.49999820135573)*sj0);
IkReal x3869=((0.75000087746404)*x3863);
IkReal x3870=(sj0*x3863);
IkReal x3871=((0.433013258970445)*x3862);
IkReal x3872=((1.0)*x3863);
IkReal x3873=((0.866026442229025)*x3863);
IkReal x3874=((0.433010506600939)*x3863);
IkReal x3875=((0.250000205066586)*x3862);
IkReal x3876=(new_r02*x3862);
IkReal x3877=(new_r01*x3862);
IkReal x3878=(new_r12*x3862);
IkReal x3879=(new_r00*x3863);
IkReal x3880=(new_r10*x3862);
IkReal x3881=(new_r01*x3863);
IkReal x3882=((0.433010506600939)*x3862);
IkReal x3883=(cj0*x3863);
IkReal x3884=((0.433013258970445)*x3863);
IkReal x3885=((0.75000087746404)*x3862);
IkReal x3886=((0.49999820135573)*x3863);
IkReal x3887=(new_r00*x3862);
IkReal x3888=(new_r02*x3863);
IkReal x3889=(new_r11*x3862);
evalcond[0]=((0.433010506600939)+x3878+x3888);
evalcond[1]=((0.75000087746404)+(((-1.0)*new_r12*x3872))+x3876);
evalcond[2]=(x3874+x3885+new_r02);
evalcond[3]=((((-1.0)*x3869))+x3882+new_r12);
evalcond[4]=((((-1.0)*x3865))+(((0.250000205066586)*sj0))+x3879+x3880);
evalcond[5]=((((-0.250000205066586)*cj0))+(((-1.0)*x3867))+x3881+x3889);
evalcond[6]=((((-1.0)*new_r10*x3872))+(((0.433013258970445)*sj0))+x3866+x3887);
evalcond[7]=((((-1.0)*new_r11*x3872))+(((-0.433013258970445)*cj0))+x3868+x3877);
evalcond[8]=((((-1.0)*x3863*x3865))+((sj0*x3871))+((x3862*x3866))+new_r00+(((0.250000205066586)*x3870)));
evalcond[9]=((((-1.0)*cj0*x3871))+(((-1.0)*x3863*x3867))+(((-0.250000205066586)*x3883))+((x3862*x3868))+new_r01);
evalcond[10]=((((-0.433013258970445)*x3870))+(((-1.0)*x3863*x3866))+((sj0*x3875))+new_r10+(((-1.0)*x3862*x3865)));
evalcond[11]=((((-1.0)*cj0*x3875))+(((0.433013258970445)*x3883))+(((-1.0)*x3863*x3868))+new_r11+(((-1.0)*x3862*x3867)));
evalcond[12]=((0.749999415023631)+(((0.75000087746404)*x3876))+(((0.433010506600939)*x3878))+(((-1.0)*new_r12*x3869))+((new_r02*x3874)));
evalcond[13]=((0.433013039627618)+((new_r12*x3875))+(((0.250000205066586)*x3888))+(((-1.0)*new_r12*x3884))+((new_r02*x3871)));
evalcond[14]=((-5.41267840225675e-7)+(((0.866026442229025)*x3878))+((new_r12*x3886))+(((-0.49999820135573)*x3876))+((new_r02*x3873)));
evalcond[15]=((((0.500000584976027)*new_r20))+((new_r00*x3874))+(((-1.0)*new_r10*x3869))+(((0.433010506600939)*x3880))+((new_r00*x3885)));
evalcond[16]=((((0.500000584976027)*new_r21))+(((0.75000087746404)*x3877))+((new_r01*x3874))+((new_r11*x3882))+(((-1.0)*new_r11*x3869)));
evalcond[17]=(sj0+((new_r00*x3871))+(((-0.866025066047432)*new_r20))+((new_r10*x3875))+(((-1.0)*new_r10*x3884))+(((0.250000205066586)*x3879)));
evalcond[18]=((((-1.0)*x3864))+((new_r01*x3871))+(((0.250000205066586)*x3881))+(((-0.866025066047432)*new_r21))+((new_r11*x3875))+(((-1.0)*new_r11*x3884)));
evalcond[19]=((((0.866026442229025)*x3880))+(((-0.49999820135573)*x3887))+(((-1.0)*x3864))+(((1.08253441393799e-6)*new_r20))+((new_r10*x3886))+((new_r00*x3873)));
evalcond[20]=((((0.866026442229025)*x3889))+(((-1.0)*sj0))+(((1.08253441393799e-6)*new_r21))+((new_r01*x3873))+((new_r11*x3886))+(((-0.49999820135573)*x3877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r02))+(((-433008986799901.0)*new_r12)))),-1);
if(!x3890.valid){
continue;
}
CheckValue<IkReal> x3891 = IKatan2WithCheck(IkReal(((-324757120049741.0)+(((999996490152053.0)*new_r02*new_r12)))),IkReal(((187497440736984.0)+(((-999996490152053.0)*(new_r02*new_r02))))),IKFAST_ATAN2_MAGTHRESH);
if(!x3891.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3890.value)))+(x3891.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x3892=IKcos(j2);
IkReal x3893=IKsin(j2);
IkReal x3894=((1.0)*cj0);
IkReal x3895=((0.866026442229025)*cj0);
IkReal x3896=((0.49999820135573)*cj0);
IkReal x3897=((0.866026442229025)*sj0);
IkReal x3898=((0.49999820135573)*sj0);
IkReal x3899=((0.75000087746404)*x3893);
IkReal x3900=(sj0*x3893);
IkReal x3901=((0.433013258970445)*x3892);
IkReal x3902=((1.0)*x3893);
IkReal x3903=((0.866026442229025)*x3893);
IkReal x3904=((0.433010506600939)*x3893);
IkReal x3905=((0.250000205066586)*x3892);
IkReal x3906=(new_r02*x3892);
IkReal x3907=(new_r01*x3892);
IkReal x3908=(new_r12*x3892);
IkReal x3909=(new_r00*x3893);
IkReal x3910=(new_r10*x3892);
IkReal x3911=(new_r01*x3893);
IkReal x3912=((0.433010506600939)*x3892);
IkReal x3913=(cj0*x3893);
IkReal x3914=((0.433013258970445)*x3893);
IkReal x3915=((0.75000087746404)*x3892);
IkReal x3916=((0.49999820135573)*x3893);
IkReal x3917=(new_r00*x3892);
IkReal x3918=(new_r02*x3893);
IkReal x3919=(new_r11*x3892);
evalcond[0]=((0.433010506600939)+x3908+x3918);
evalcond[1]=((0.75000087746404)+x3906+(((-1.0)*new_r12*x3902)));
evalcond[2]=(x3904+x3915+new_r02);
evalcond[3]=(x3912+(((-1.0)*x3899))+new_r12);
evalcond[4]=((((0.250000205066586)*sj0))+x3909+x3910+(((-1.0)*x3895)));
evalcond[5]=((((-0.250000205066586)*cj0))+x3911+x3919+(((-1.0)*x3897)));
evalcond[6]=((((0.433013258970445)*sj0))+(((-1.0)*new_r10*x3902))+x3917+x3896);
evalcond[7]=((((-1.0)*new_r11*x3902))+x3907+(((-0.433013258970445)*cj0))+x3898);
evalcond[8]=(((sj0*x3901))+(((-1.0)*x3893*x3895))+((x3892*x3896))+new_r00+(((0.250000205066586)*x3900)));
evalcond[9]=((((-1.0)*cj0*x3901))+(((-0.250000205066586)*x3913))+(((-1.0)*x3893*x3897))+((x3892*x3898))+new_r01);
evalcond[10]=(((sj0*x3905))+(((-1.0)*x3893*x3896))+(((-1.0)*x3892*x3895))+(((-0.433013258970445)*x3900))+new_r10);
evalcond[11]=((((-1.0)*cj0*x3905))+(((0.433013258970445)*x3913))+(((-1.0)*x3893*x3898))+(((-1.0)*x3892*x3897))+new_r11);
evalcond[12]=((0.749999415023631)+(((0.75000087746404)*x3906))+(((-1.0)*new_r12*x3899))+(((0.433010506600939)*x3908))+((new_r02*x3904)));
evalcond[13]=((0.433013039627618)+(((0.250000205066586)*x3918))+(((-1.0)*new_r12*x3914))+((new_r12*x3905))+((new_r02*x3901)));
evalcond[14]=((-5.41267840225675e-7)+(((0.866026442229025)*x3908))+(((-0.49999820135573)*x3906))+((new_r12*x3916))+((new_r02*x3903)));
evalcond[15]=((((0.500000584976027)*new_r20))+((new_r00*x3904))+((new_r00*x3915))+(((-1.0)*new_r10*x3899))+(((0.433010506600939)*x3910)));
evalcond[16]=(((new_r11*x3912))+(((0.75000087746404)*x3907))+(((0.500000584976027)*new_r21))+((new_r01*x3904))+(((-1.0)*new_r11*x3899)));
evalcond[17]=(sj0+((new_r00*x3901))+(((-1.0)*new_r10*x3914))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x3909))+((new_r10*x3905)));
evalcond[18]=((((0.250000205066586)*x3911))+((new_r01*x3901))+(((-0.866025066047432)*new_r21))+(((-1.0)*new_r11*x3914))+(((-1.0)*x3894))+((new_r11*x3905)));
evalcond[19]=(((new_r00*x3903))+(((1.08253441393799e-6)*new_r20))+(((0.866026442229025)*x3910))+(((-0.49999820135573)*x3917))+(((-1.0)*x3894))+((new_r10*x3916)));
evalcond[20]=(((new_r11*x3916))+(((-1.0)*sj0))+(((1.08253441393799e-6)*new_r21))+((new_r01*x3903))+(((0.866026442229025)*x3919))+(((-0.49999820135573)*x3907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((6.14158329400386)+(IKabs(((1.0)+(IKsign(sj1)))))+(IKabs(cj1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
IkReal x3920=new_r02*new_r02;
j2eval[0]=((((1.73206161520519)*new_r02))+(((-1.0)*new_r12)));
j2eval[1]=((1.0)+(((-4.61883457642595)*new_r02*new_r12))+(((7.1111887620993)*x3920*(new_r12*new_r12)))+(((7.1111887620993)*(x3920*x3920)))+(((-2.66666874658427)*x3920)));
j2eval[2]=IKsign(((((749998245075000.0)*new_r02))+(((-433008986799901.0)*new_r12))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
IkReal x3921=new_r12*new_r12;
j2eval[0]=((((1.73206161520519)*new_r12))+new_r02);
j2eval[1]=((1.0)+(((7.1111887620993)*x3921*(new_r02*new_r02)))+(((4.61883457642595)*new_r02*new_r12))+(((7.1111887620993)*(x3921*x3921)))+(((-2.66666874658427)*x3921)));
j2eval[2]=IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
IkReal x3922=new_r02*new_r02;
j2eval[0]=((((1.73206161520519)*new_r12))+new_r02);
j2eval[1]=((1.0)+(((1.5395923119446)*new_r02*new_r12))+(((2.37036667275206)*(x3922*x3922)))+(((2.37036667275206)*x3922*(new_r12*new_r12)))+(((-2.66666874658427)*x3922)));
j2eval[2]=IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[4];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=(new_r10+(((-1.73206161520519)*new_r00)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=(new_r11+(((-1.73206161520519)*new_r01)));
j2eval[1]=5624995940.50689;
j2eval[2]=sj0;
j2eval[3]=IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal j2eval[4];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((((-1.0)*new_r00))+(((-1.73206161520519)*new_r10)));
j2eval[1]=5624995940.50689;
j2eval[2]=cj0;
j2eval[3]=IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  || IKabs(j2eval[3]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3923=(new_r01*new_r10);
IkReal x3924=(new_r00*new_r11);
j2eval[0]=((((-1.0)*x3923))+x3924);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))))+(IKabs(((((-1.33332787645226e+28)*new_r11))+(((4.61878500004103e+28)*new_r10))))));
j2eval[2]=IKsign(((((-5.33330713107669e+28)*x3923))+(((5.33330713107669e+28)*x3924))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3925=(new_r00*new_r01);
IkReal x3926=(new_r10*new_r11);
j2eval[0]=((((-1.0)*x3926))+(((-1.0)*x3925)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x3925))+(((-5.33330713107669e+28)*x3926))));
j2eval[2]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3927=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x3927.valid){
continue;
}
CheckValue<IkReal> x3928 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r00))+(((2.30939270191783e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r10))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3928.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3927.value)))+(x3928.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3929=IKsin(j2);
IkReal x3930=IKcos(j2);
IkReal x3931=((0.75000087746404)*x3929);
IkReal x3932=(new_r01*x3930);
IkReal x3933=(new_r11*x3929);
IkReal x3934=(new_r01*x3929);
IkReal x3935=((0.433010506600939)*x3929);
IkReal x3936=((0.433010506600939)*x3930);
IkReal x3937=(new_r10*x3930);
IkReal x3938=(new_r00*x3929);
IkReal x3939=((0.49999820135573)*x3930);
IkReal x3940=(new_r10*x3929);
IkReal x3941=(new_r11*x3930);
IkReal x3942=((0.75000087746404)*x3930);
IkReal x3943=(new_r00*x3930);
evalcond[0]=((0.250000205066586)+x3938+x3937);
evalcond[1]=((0.866026442229025)+x3934+x3941);
evalcond[2]=((0.433013258970445)+(((-1.0)*x3940))+x3943);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x3933))+x3932);
evalcond[4]=((((-1.0)*x3942))+(((-1.0)*x3935)));
evalcond[5]=(x3931+(((-1.0)*x3936)));
evalcond[6]=((((0.250000205066586)*x3929))+(((0.433013258970445)*x3930))+new_r00);
evalcond[7]=((((0.866026442229025)*x3929))+(((-1.0)*x3939))+new_r01);
evalcond[8]=((((-0.433013258970445)*x3929))+new_r10+(((0.250000205066586)*x3930)));
evalcond[9]=((((0.866026442229025)*x3930))+new_r11+(((0.49999820135573)*x3929)));
evalcond[10]=((((0.433013258970445)*x3932))+(((0.250000205066586)*x3941))+(((-0.433013258970445)*x3933))+(((0.250000205066586)*x3934)));
evalcond[11]=(((new_r10*x3931))+(((-1.0)*new_r00*x3935))+(((-1.0)*new_r00*x3942))+(((-1.0)*new_r10*x3936)));
evalcond[12]=(((new_r11*x3931))+(((-0.75000087746404)*x3932))+(((-0.433010506600939)*x3934))+(((-1.0)*new_r11*x3936)));
evalcond[13]=((((-0.49999820135573)*x3940))+(((-0.866026442229025)*x3938))+(((-0.866026442229025)*x3937))+((new_r00*x3939)));
evalcond[14]=((1.0)+(((0.433013258970445)*x3943))+(((-0.433013258970445)*x3940))+(((0.250000205066586)*x3938))+(((0.250000205066586)*x3937)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x3932))+(((-0.49999820135573)*x3933))+(((-0.866026442229025)*x3941))+(((-0.866026442229025)*x3934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3944=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r10*new_r11))+(((-5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x3944.valid){
continue;
}
CheckValue<IkReal> x3945 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3945.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3944.value)))+(x3945.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3946=IKsin(j2);
IkReal x3947=IKcos(j2);
IkReal x3948=((0.75000087746404)*x3946);
IkReal x3949=(new_r01*x3947);
IkReal x3950=(new_r11*x3946);
IkReal x3951=(new_r01*x3946);
IkReal x3952=((0.433010506600939)*x3946);
IkReal x3953=((0.433010506600939)*x3947);
IkReal x3954=(new_r10*x3947);
IkReal x3955=(new_r00*x3946);
IkReal x3956=((0.49999820135573)*x3947);
IkReal x3957=(new_r10*x3946);
IkReal x3958=(new_r11*x3947);
IkReal x3959=((0.75000087746404)*x3947);
IkReal x3960=(new_r00*x3947);
evalcond[0]=((0.250000205066586)+x3955+x3954);
evalcond[1]=((0.866026442229025)+x3958+x3951);
evalcond[2]=((0.433013258970445)+(((-1.0)*x3957))+x3960);
evalcond[3]=((-0.49999820135573)+(((-1.0)*x3950))+x3949);
evalcond[4]=((((-1.0)*x3959))+(((-1.0)*x3952)));
evalcond[5]=(x3948+(((-1.0)*x3953)));
evalcond[6]=((((0.433013258970445)*x3947))+(((0.250000205066586)*x3946))+new_r00);
evalcond[7]=((((0.866026442229025)*x3946))+(((-1.0)*x3956))+new_r01);
evalcond[8]=((((0.250000205066586)*x3947))+new_r10+(((-0.433013258970445)*x3946)));
evalcond[9]=((((0.49999820135573)*x3946))+(((0.866026442229025)*x3947))+new_r11);
evalcond[10]=((((0.433013258970445)*x3949))+(((-0.433013258970445)*x3950))+(((0.250000205066586)*x3958))+(((0.250000205066586)*x3951)));
evalcond[11]=((((-1.0)*new_r00*x3952))+(((-1.0)*new_r00*x3959))+((new_r10*x3948))+(((-1.0)*new_r10*x3953)));
evalcond[12]=(((new_r11*x3948))+(((-0.433010506600939)*x3951))+(((-0.75000087746404)*x3949))+(((-1.0)*new_r11*x3953)));
evalcond[13]=((((-0.49999820135573)*x3957))+(((-0.866026442229025)*x3955))+(((-0.866026442229025)*x3954))+((new_r00*x3956)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x3957))+(((0.250000205066586)*x3955))+(((0.250000205066586)*x3954))+(((0.433013258970445)*x3960)));
evalcond[15]=((-1.0)+(((0.49999820135573)*x3949))+(((-0.49999820135573)*x3950))+(((-0.866026442229025)*x3958))+(((-0.866026442229025)*x3951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3961 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r11))+(((4.61878500004103e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r01))+(((-4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3961.valid){
continue;
}
CheckValue<IkReal> x3962=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x3962.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x3961.value)+(((1.5707963267949)*(x3962.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3963=IKsin(j2);
IkReal x3964=IKcos(j2);
IkReal x3965=((0.75000087746404)*x3963);
IkReal x3966=(new_r01*x3964);
IkReal x3967=(new_r11*x3963);
IkReal x3968=(new_r01*x3963);
IkReal x3969=((0.433010506600939)*x3963);
IkReal x3970=((0.433010506600939)*x3964);
IkReal x3971=(new_r10*x3964);
IkReal x3972=(new_r00*x3963);
IkReal x3973=((0.49999820135573)*x3964);
IkReal x3974=(new_r10*x3963);
IkReal x3975=(new_r11*x3964);
IkReal x3976=((0.75000087746404)*x3964);
IkReal x3977=(new_r00*x3964);
evalcond[0]=((0.250000205066586)+x3971+x3972);
evalcond[1]=((0.866026442229025)+x3968+x3975);
evalcond[2]=((0.433013258970445)+x3977+(((-1.0)*x3974)));
evalcond[3]=((-0.49999820135573)+x3966+(((-1.0)*x3967)));
evalcond[4]=((((-1.0)*x3976))+(((-1.0)*x3969)));
evalcond[5]=((((-1.0)*x3970))+x3965);
evalcond[6]=((((0.250000205066586)*x3963))+new_r00+(((0.433013258970445)*x3964)));
evalcond[7]=((((-1.0)*x3973))+(((0.866026442229025)*x3963))+new_r01);
evalcond[8]=((((0.250000205066586)*x3964))+(((-0.433013258970445)*x3963))+new_r10);
evalcond[9]=((((0.49999820135573)*x3963))+(((0.866026442229025)*x3964))+new_r11);
evalcond[10]=((((0.250000205066586)*x3975))+(((-0.433013258970445)*x3967))+(((0.250000205066586)*x3968))+(((0.433013258970445)*x3966)));
evalcond[11]=((((-1.0)*new_r10*x3970))+(((-1.0)*new_r00*x3969))+(((-1.0)*new_r00*x3976))+((new_r10*x3965)));
evalcond[12]=((((-1.0)*new_r11*x3970))+(((-0.433010506600939)*x3968))+((new_r11*x3965))+(((-0.75000087746404)*x3966)));
evalcond[13]=((((-0.49999820135573)*x3974))+((new_r00*x3973))+(((-0.866026442229025)*x3972))+(((-0.866026442229025)*x3971)));
evalcond[14]=((1.0)+(((-0.433013258970445)*x3974))+(((0.250000205066586)*x3972))+(((0.250000205066586)*x3971))+(((0.433013258970445)*x3977)));
evalcond[15]=((-1.0)+(((-0.866026442229025)*x3968))+(((-0.49999820135573)*x3967))+(((0.49999820135573)*x3966))+(((-0.866026442229025)*x3975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3978=(new_r01*new_r10);
IkReal x3979=(new_r00*new_r11);
j2eval[0]=(x3979+(((-1.0)*x3978)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x3978))+(((5.33330713107669e+28)*x3979))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3980=(new_r00*new_r01);
IkReal x3981=(new_r10*new_r11);
j2eval[0]=(x3980+x3981);
j2eval[1]=((IKabs(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))))+(IKabs(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x3980))+(((5.33330713107669e+28)*x3981))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3982=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x3982.valid){
continue;
}
CheckValue<IkReal> x3983 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r00))+(((-2.30939270191783e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r10))+(((2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3983.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3982.value)))+(x3983.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x3984=IKsin(j2);
IkReal x3985=IKcos(j2);
IkReal x3986=((0.75000087746404)*x3984);
IkReal x3987=(new_r01*x3985);
IkReal x3988=(new_r11*x3984);
IkReal x3989=(new_r01*x3984);
IkReal x3990=((0.433010506600939)*x3984);
IkReal x3991=((0.433010506600939)*x3985);
IkReal x3992=(new_r10*x3985);
IkReal x3993=(new_r00*x3984);
IkReal x3994=((0.49999820135573)*x3985);
IkReal x3995=(new_r10*x3984);
IkReal x3996=(new_r11*x3985);
IkReal x3997=((0.75000087746404)*x3985);
IkReal x3998=(new_r00*x3985);
evalcond[0]=((-0.250000205066586)+x3993+x3992);
evalcond[1]=((-0.866026442229025)+x3996+x3989);
evalcond[2]=((-0.433013258970445)+x3998+(((-1.0)*x3995)));
evalcond[3]=((0.49999820135573)+x3987+(((-1.0)*x3988)));
evalcond[4]=((((-1.0)*x3997))+(((-1.0)*x3990)));
evalcond[5]=((((-1.0)*x3991))+x3986);
evalcond[6]=((((-0.433013258970445)*x3985))+(((-0.250000205066586)*x3984))+new_r00);
evalcond[7]=(x3994+new_r01+(((-0.866026442229025)*x3984)));
evalcond[8]=((((-0.250000205066586)*x3985))+new_r10+(((0.433013258970445)*x3984)));
evalcond[9]=((((-0.49999820135573)*x3984))+new_r11+(((-0.866026442229025)*x3985)));
evalcond[10]=((((0.250000205066586)*x3996))+(((-0.433013258970445)*x3988))+(((0.433013258970445)*x3987))+(((0.250000205066586)*x3989)));
evalcond[11]=(((new_r10*x3986))+(((-1.0)*new_r00*x3990))+(((-1.0)*new_r00*x3997))+(((-1.0)*new_r10*x3991)));
evalcond[12]=(((new_r11*x3986))+(((-0.433010506600939)*x3989))+(((-0.75000087746404)*x3987))+(((-1.0)*new_r11*x3991)));
evalcond[13]=((((-0.49999820135573)*x3995))+((new_r00*x3994))+(((-0.866026442229025)*x3993))+(((-0.866026442229025)*x3992)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x3993))+(((0.250000205066586)*x3992))+(((-0.433013258970445)*x3995))+(((0.433013258970445)*x3998)));
evalcond[15]=((1.0)+(((0.49999820135573)*x3987))+(((-0.49999820135573)*x3988))+(((-0.866026442229025)*x3989))+(((-0.866026442229025)*x3996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x3999=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x3999.valid){
continue;
}
CheckValue<IkReal> x4000 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r01))+(((2.66664397281603e+28)*new_r10)))),IkReal(((((1.33332787645226e+28)*new_r11))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4000.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3999.value)))+(x4000.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4001=IKsin(j2);
IkReal x4002=IKcos(j2);
IkReal x4003=((0.75000087746404)*x4001);
IkReal x4004=(new_r01*x4002);
IkReal x4005=(new_r11*x4001);
IkReal x4006=(new_r01*x4001);
IkReal x4007=((0.433010506600939)*x4001);
IkReal x4008=((0.433010506600939)*x4002);
IkReal x4009=(new_r10*x4002);
IkReal x4010=(new_r00*x4001);
IkReal x4011=((0.49999820135573)*x4002);
IkReal x4012=(new_r10*x4001);
IkReal x4013=(new_r11*x4002);
IkReal x4014=((0.75000087746404)*x4002);
IkReal x4015=(new_r00*x4002);
evalcond[0]=((-0.250000205066586)+x4009+x4010);
evalcond[1]=((-0.866026442229025)+x4006+x4013);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x4012))+x4015);
evalcond[3]=((0.49999820135573)+(((-1.0)*x4005))+x4004);
evalcond[4]=((((-1.0)*x4007))+(((-1.0)*x4014)));
evalcond[5]=((((-1.0)*x4008))+x4003);
evalcond[6]=((((-0.433013258970445)*x4002))+(((-0.250000205066586)*x4001))+new_r00);
evalcond[7]=(x4011+(((-0.866026442229025)*x4001))+new_r01);
evalcond[8]=((((-0.250000205066586)*x4002))+(((0.433013258970445)*x4001))+new_r10);
evalcond[9]=((((-0.49999820135573)*x4001))+(((-0.866026442229025)*x4002))+new_r11);
evalcond[10]=((((0.250000205066586)*x4006))+(((0.250000205066586)*x4013))+(((-0.433013258970445)*x4005))+(((0.433013258970445)*x4004)));
evalcond[11]=((((-1.0)*new_r10*x4008))+((new_r10*x4003))+(((-1.0)*new_r00*x4007))+(((-1.0)*new_r00*x4014)));
evalcond[12]=(((new_r11*x4003))+(((-0.433010506600939)*x4006))+(((-0.75000087746404)*x4004))+(((-1.0)*new_r11*x4008)));
evalcond[13]=((((-0.49999820135573)*x4012))+((new_r00*x4011))+(((-0.866026442229025)*x4010))+(((-0.866026442229025)*x4009)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x4009))+(((0.250000205066586)*x4010))+(((-0.433013258970445)*x4012))+(((0.433013258970445)*x4015)));
evalcond[15]=((1.0)+(((-0.49999820135573)*x4005))+(((0.49999820135573)*x4004))+(((-0.866026442229025)*x4013))+(((-0.866026442229025)*x4006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4016=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x4016.valid){
continue;
}
CheckValue<IkReal> x4017 = IKatan2WithCheck(IkReal(((((1.33332787645226e+28)*new_r11))+(((-4.61878500004103e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r01))+(((4.61878500004103e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4017.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4016.value)))+(x4017.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4018=IKsin(j2);
IkReal x4019=IKcos(j2);
IkReal x4020=((0.75000087746404)*x4018);
IkReal x4021=(new_r01*x4019);
IkReal x4022=(new_r11*x4018);
IkReal x4023=(new_r01*x4018);
IkReal x4024=((0.433010506600939)*x4018);
IkReal x4025=((0.433010506600939)*x4019);
IkReal x4026=(new_r10*x4019);
IkReal x4027=(new_r00*x4018);
IkReal x4028=((0.49999820135573)*x4019);
IkReal x4029=(new_r10*x4018);
IkReal x4030=(new_r11*x4019);
IkReal x4031=((0.75000087746404)*x4019);
IkReal x4032=(new_r00*x4019);
evalcond[0]=((-0.250000205066586)+x4026+x4027);
evalcond[1]=((-0.866026442229025)+x4023+x4030);
evalcond[2]=((-0.433013258970445)+(((-1.0)*x4029))+x4032);
evalcond[3]=((0.49999820135573)+(((-1.0)*x4022))+x4021);
evalcond[4]=((((-1.0)*x4024))+(((-1.0)*x4031)));
evalcond[5]=((((-1.0)*x4025))+x4020);
evalcond[6]=((((-0.250000205066586)*x4018))+(((-0.433013258970445)*x4019))+new_r00);
evalcond[7]=(x4028+new_r01+(((-0.866026442229025)*x4018)));
evalcond[8]=((((-0.250000205066586)*x4019))+(((0.433013258970445)*x4018))+new_r10);
evalcond[9]=((((-0.49999820135573)*x4018))+new_r11+(((-0.866026442229025)*x4019)));
evalcond[10]=((((0.250000205066586)*x4023))+(((-0.433013258970445)*x4022))+(((0.250000205066586)*x4030))+(((0.433013258970445)*x4021)));
evalcond[11]=((((-1.0)*new_r00*x4024))+(((-1.0)*new_r00*x4031))+(((-1.0)*new_r10*x4025))+((new_r10*x4020)));
evalcond[12]=((((-0.433010506600939)*x4023))+(((-1.0)*new_r11*x4025))+((new_r11*x4020))+(((-0.75000087746404)*x4021)));
evalcond[13]=(((new_r00*x4028))+(((-0.866026442229025)*x4026))+(((-0.866026442229025)*x4027))+(((-0.49999820135573)*x4029)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x4026))+(((0.250000205066586)*x4027))+(((-0.433013258970445)*x4029))+(((0.433013258970445)*x4032)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x4023))+(((-0.49999820135573)*x4022))+(((-0.866026442229025)*x4030))+(((0.49999820135573)*x4021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4033=(new_r01*new_r10);
IkReal x4034=(new_r00*new_r11);
j2eval[0]=(x4034+(((-1.0)*x4033)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x4034))+(((-5.33330713107669e+28)*x4033))));
j2eval[2]=((IKabs(((((1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))))+(IKabs(((((-1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4035=(new_r00*new_r01);
IkReal x4036=(new_r10*new_r11);
j2eval[0]=((((-1.0)*x4036))+(((-1.0)*x4035)));
j2eval[1]=IKsign(((((-5.33330713107669e+28)*x4036))+(((-5.33330713107669e+28)*x4035))));
j2eval[2]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))))+(IKabs(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=1.0;
j0=0;
j2eval[0]=-1.0;
j2eval[1]=-1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4037 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4037.valid){
continue;
}
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*(new_r10*new_r10)))+(((-5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x4038.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4037.value)+(((1.5707963267949)*(x4038.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4039=IKsin(j2);
IkReal x4040=IKcos(j2);
IkReal x4041=((0.75000087746404)*x4039);
IkReal x4042=(new_r01*x4040);
IkReal x4043=(new_r11*x4039);
IkReal x4044=(new_r01*x4039);
IkReal x4045=((0.433010506600939)*x4039);
IkReal x4046=((0.433010506600939)*x4040);
IkReal x4047=(new_r10*x4040);
IkReal x4048=(new_r00*x4039);
IkReal x4049=((0.49999820135573)*x4040);
IkReal x4050=(new_r10*x4039);
IkReal x4051=(new_r11*x4040);
IkReal x4052=((0.75000087746404)*x4040);
IkReal x4053=(new_r00*x4040);
evalcond[0]=((0.866026442229025)+x4047+x4048);
evalcond[1]=((-0.250000205066586)+x4044+x4051);
evalcond[2]=((-0.49999820135573)+x4053+(((-1.0)*x4050)));
evalcond[3]=((-0.433013258970445)+x4042+(((-1.0)*x4043)));
evalcond[4]=((((-1.0)*x4052))+(((-1.0)*x4045)));
evalcond[5]=(x4041+(((-1.0)*x4046)));
evalcond[6]=((((0.866026442229025)*x4039))+new_r00+(((-1.0)*x4049)));
evalcond[7]=((((-0.433013258970445)*x4040))+new_r01+(((-0.250000205066586)*x4039)));
evalcond[8]=((((0.866026442229025)*x4040))+new_r10+(((0.49999820135573)*x4039)));
evalcond[9]=((((-0.250000205066586)*x4040))+(((0.433013258970445)*x4039))+new_r11);
evalcond[10]=((((0.433013258970445)*x4053))+(((0.250000205066586)*x4047))+(((0.250000205066586)*x4048))+(((-0.433013258970445)*x4050)));
evalcond[11]=((((-1.0)*new_r00*x4052))+(((-1.0)*new_r00*x4045))+(((-1.0)*new_r10*x4046))+((new_r10*x4041)));
evalcond[12]=((((-0.433010506600939)*x4044))+(((-0.75000087746404)*x4042))+(((-1.0)*new_r11*x4046))+((new_r11*x4041)));
evalcond[13]=((((0.49999820135573)*x4042))+(((-0.866026442229025)*x4051))+(((-0.49999820135573)*x4043))+(((-0.866026442229025)*x4044)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x4042))+(((0.250000205066586)*x4044))+(((0.250000205066586)*x4051))+(((-0.433013258970445)*x4043)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x4050))+((new_r00*x4049))+(((-0.866026442229025)*x4047))+(((-0.866026442229025)*x4048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4054=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r10*new_r11))+(((-5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x4054.valid){
continue;
}
CheckValue<IkReal> x4055 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4055.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4054.value)))+(x4055.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4056=IKsin(j2);
IkReal x4057=IKcos(j2);
IkReal x4058=((0.75000087746404)*x4056);
IkReal x4059=(new_r01*x4057);
IkReal x4060=(new_r11*x4056);
IkReal x4061=(new_r01*x4056);
IkReal x4062=((0.433010506600939)*x4056);
IkReal x4063=((0.433010506600939)*x4057);
IkReal x4064=(new_r10*x4057);
IkReal x4065=(new_r00*x4056);
IkReal x4066=((0.49999820135573)*x4057);
IkReal x4067=(new_r10*x4056);
IkReal x4068=(new_r11*x4057);
IkReal x4069=((0.75000087746404)*x4057);
IkReal x4070=(new_r00*x4057);
evalcond[0]=((0.866026442229025)+x4064+x4065);
evalcond[1]=((-0.250000205066586)+x4061+x4068);
evalcond[2]=((-0.49999820135573)+x4070+(((-1.0)*x4067)));
evalcond[3]=((-0.433013258970445)+x4059+(((-1.0)*x4060)));
evalcond[4]=((((-1.0)*x4069))+(((-1.0)*x4062)));
evalcond[5]=(x4058+(((-1.0)*x4063)));
evalcond[6]=((((0.866026442229025)*x4056))+(((-1.0)*x4066))+new_r00);
evalcond[7]=((((-0.433013258970445)*x4057))+new_r01+(((-0.250000205066586)*x4056)));
evalcond[8]=((((0.866026442229025)*x4057))+new_r10+(((0.49999820135573)*x4056)));
evalcond[9]=((((0.433013258970445)*x4056))+new_r11+(((-0.250000205066586)*x4057)));
evalcond[10]=((((0.250000205066586)*x4064))+(((0.250000205066586)*x4065))+(((-0.433013258970445)*x4067))+(((0.433013258970445)*x4070)));
evalcond[11]=((((-1.0)*new_r00*x4062))+(((-1.0)*new_r00*x4069))+(((-1.0)*new_r10*x4063))+((new_r10*x4058)));
evalcond[12]=((((-0.75000087746404)*x4059))+(((-1.0)*new_r11*x4063))+((new_r11*x4058))+(((-0.433010506600939)*x4061)));
evalcond[13]=((((-0.49999820135573)*x4060))+(((-0.866026442229025)*x4061))+(((-0.866026442229025)*x4068))+(((0.49999820135573)*x4059)));
evalcond[14]=((-1.0)+(((0.433013258970445)*x4059))+(((0.250000205066586)*x4061))+(((0.250000205066586)*x4068))+(((-0.433013258970445)*x4060)));
evalcond[15]=((-1.0)+(((-0.49999820135573)*x4067))+(((-0.866026442229025)*x4064))+(((-0.866026442229025)*x4065))+((new_r00*x4066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal(((((-1.33332787645226e+28)*new_r10))+(((-4.61878500004103e+28)*new_r11)))),IkReal(((((1.33332787645226e+28)*new_r00))+(((4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x4072.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4071.value)+(((1.5707963267949)*(x4072.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4073=IKsin(j2);
IkReal x4074=IKcos(j2);
IkReal x4075=((0.75000087746404)*x4073);
IkReal x4076=(new_r01*x4074);
IkReal x4077=(new_r11*x4073);
IkReal x4078=(new_r01*x4073);
IkReal x4079=((0.433010506600939)*x4073);
IkReal x4080=((0.433010506600939)*x4074);
IkReal x4081=(new_r10*x4074);
IkReal x4082=(new_r00*x4073);
IkReal x4083=((0.49999820135573)*x4074);
IkReal x4084=(new_r10*x4073);
IkReal x4085=(new_r11*x4074);
IkReal x4086=((0.75000087746404)*x4074);
IkReal x4087=(new_r00*x4074);
evalcond[0]=((0.866026442229025)+x4081+x4082);
evalcond[1]=((-0.250000205066586)+x4078+x4085);
evalcond[2]=((-0.49999820135573)+x4087+(((-1.0)*x4084)));
evalcond[3]=((-0.433013258970445)+(((-1.0)*x4077))+x4076);
evalcond[4]=((((-1.0)*x4086))+(((-1.0)*x4079)));
evalcond[5]=((((-1.0)*x4080))+x4075);
evalcond[6]=((((0.866026442229025)*x4073))+(((-1.0)*x4083))+new_r00);
evalcond[7]=((((-0.433013258970445)*x4074))+(((-0.250000205066586)*x4073))+new_r01);
evalcond[8]=((((0.866026442229025)*x4074))+(((0.49999820135573)*x4073))+new_r10);
evalcond[9]=((((-0.250000205066586)*x4074))+(((0.433013258970445)*x4073))+new_r11);
evalcond[10]=((((0.433013258970445)*x4087))+(((-0.433013258970445)*x4084))+(((0.250000205066586)*x4082))+(((0.250000205066586)*x4081)));
evalcond[11]=(((new_r10*x4075))+(((-1.0)*new_r10*x4080))+(((-1.0)*new_r00*x4079))+(((-1.0)*new_r00*x4086)));
evalcond[12]=(((new_r11*x4075))+(((-0.433010506600939)*x4078))+(((-1.0)*new_r11*x4080))+(((-0.75000087746404)*x4076)));
evalcond[13]=((((-0.866026442229025)*x4078))+(((-0.49999820135573)*x4077))+(((0.49999820135573)*x4076))+(((-0.866026442229025)*x4085)));
evalcond[14]=((-1.0)+(((0.250000205066586)*x4078))+(((-0.433013258970445)*x4077))+(((0.250000205066586)*x4085))+(((0.433013258970445)*x4076)));
evalcond[15]=((-1.0)+((new_r00*x4083))+(((-0.49999820135573)*x4084))+(((-0.866026442229025)*x4082))+(((-0.866026442229025)*x4081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4088=(new_r01*new_r10);
IkReal x4089=(new_r00*new_r11);
j2eval[0]=(x4089+(((-1.0)*x4088)));
j2eval[1]=IKsign(((((5.33330713107669e+28)*x4089))+(((-5.33330713107669e+28)*x4088))));
j2eval[2]=((IKabs(((((-1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))))+(IKabs(((((4.61878500004103e+28)*new_r11))+(((1.33332787645226e+28)*new_r10))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4090=(new_r00*new_r01);
IkReal x4091=(new_r10*new_r11);
j2eval[0]=(x4091+x4090);
j2eval[1]=((IKabs(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))))+(IKabs(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01))))));
j2eval[2]=IKsign(((((5.33330713107669e+28)*x4091))+(((5.33330713107669e+28)*x4090))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
sj1=-1.0;
cj1=0;
j1=-1.57079633263667;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j2eval[0]=1.0;
j2eval[1]=1.0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4092=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*(new_r10*new_r10)))+(((5.33330713107669e+28)*(new_r00*new_r00))))),-1);
if(!x4092.valid){
continue;
}
CheckValue<IkReal> x4093 = IKatan2WithCheck(IkReal(((((2.66664397281603e+28)*new_r10))+(((4.61878500004103e+28)*new_r00)))),IkReal(((((4.61878500004103e+28)*new_r10))+(((-2.66664397281603e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4093.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4092.value)))+(x4093.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4094=IKsin(j2);
IkReal x4095=IKcos(j2);
IkReal x4096=((0.75000087746404)*x4094);
IkReal x4097=(new_r01*x4095);
IkReal x4098=(new_r11*x4094);
IkReal x4099=(new_r01*x4094);
IkReal x4100=((0.433010506600939)*x4094);
IkReal x4101=((0.433010506600939)*x4095);
IkReal x4102=(new_r10*x4095);
IkReal x4103=(new_r00*x4094);
IkReal x4104=((0.49999820135573)*x4095);
IkReal x4105=(new_r10*x4094);
IkReal x4106=(new_r11*x4095);
IkReal x4107=((0.75000087746404)*x4095);
IkReal x4108=(new_r00*x4095);
evalcond[0]=((-0.866026442229025)+x4103+x4102);
evalcond[1]=((0.250000205066586)+x4099+x4106);
evalcond[2]=((0.49999820135573)+(((-1.0)*x4105))+x4108);
evalcond[3]=((0.433013258970445)+x4097+(((-1.0)*x4098)));
evalcond[4]=((((-1.0)*x4100))+(((-1.0)*x4107)));
evalcond[5]=(x4096+(((-1.0)*x4101)));
evalcond[6]=((((-0.866026442229025)*x4094))+x4104+new_r00);
evalcond[7]=((((0.250000205066586)*x4094))+(((0.433013258970445)*x4095))+new_r01);
evalcond[8]=((((-0.866026442229025)*x4095))+(((-0.49999820135573)*x4094))+new_r10);
evalcond[9]=((((0.250000205066586)*x4095))+(((-0.433013258970445)*x4094))+new_r11);
evalcond[10]=((((0.250000205066586)*x4102))+(((0.250000205066586)*x4103))+(((0.433013258970445)*x4108))+(((-0.433013258970445)*x4105)));
evalcond[11]=(((new_r10*x4096))+(((-1.0)*new_r10*x4101))+(((-1.0)*new_r00*x4100))+(((-1.0)*new_r00*x4107)));
evalcond[12]=(((new_r11*x4096))+(((-0.433010506600939)*x4099))+(((-0.75000087746404)*x4097))+(((-1.0)*new_r11*x4101)));
evalcond[13]=((((-0.866026442229025)*x4106))+(((-0.49999820135573)*x4098))+(((-0.866026442229025)*x4099))+(((0.49999820135573)*x4097)));
evalcond[14]=((1.0)+(((0.250000205066586)*x4099))+(((0.433013258970445)*x4097))+(((0.250000205066586)*x4106))+(((-0.433013258970445)*x4098)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x4102))+(((-0.866026442229025)*x4103))+((new_r00*x4104))+(((-0.49999820135573)*x4105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4109=IKPowWithIntegerCheck(IKsign(((((5.33330713107669e+28)*new_r10*new_r11))+(((5.33330713107669e+28)*new_r00*new_r01)))),-1);
if(!x4109.valid){
continue;
}
CheckValue<IkReal> x4110 = IKatan2WithCheck(IkReal(((((2.30939270191783e+28)*new_r10))+(((4.61878500004103e+28)*new_r01)))),IkReal(((((4.61878500004103e+28)*new_r11))+(((-2.30939270191783e+28)*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4110.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4109.value)))+(x4110.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4111=IKsin(j2);
IkReal x4112=IKcos(j2);
IkReal x4113=((0.75000087746404)*x4111);
IkReal x4114=(new_r01*x4112);
IkReal x4115=(new_r11*x4111);
IkReal x4116=(new_r01*x4111);
IkReal x4117=((0.433010506600939)*x4111);
IkReal x4118=((0.433010506600939)*x4112);
IkReal x4119=(new_r10*x4112);
IkReal x4120=(new_r00*x4111);
IkReal x4121=((0.49999820135573)*x4112);
IkReal x4122=(new_r10*x4111);
IkReal x4123=(new_r11*x4112);
IkReal x4124=((0.75000087746404)*x4112);
IkReal x4125=(new_r00*x4112);
evalcond[0]=((-0.866026442229025)+x4120+x4119);
evalcond[1]=((0.250000205066586)+x4123+x4116);
evalcond[2]=((0.49999820135573)+x4125+(((-1.0)*x4122)));
evalcond[3]=((0.433013258970445)+x4114+(((-1.0)*x4115)));
evalcond[4]=((((-1.0)*x4124))+(((-1.0)*x4117)));
evalcond[5]=((((-1.0)*x4118))+x4113);
evalcond[6]=(x4121+(((-0.866026442229025)*x4111))+new_r00);
evalcond[7]=((((0.250000205066586)*x4111))+(((0.433013258970445)*x4112))+new_r01);
evalcond[8]=((((-0.49999820135573)*x4111))+(((-0.866026442229025)*x4112))+new_r10);
evalcond[9]=((((0.250000205066586)*x4112))+new_r11+(((-0.433013258970445)*x4111)));
evalcond[10]=((((0.250000205066586)*x4119))+(((0.250000205066586)*x4120))+(((0.433013258970445)*x4125))+(((-0.433013258970445)*x4122)));
evalcond[11]=(((new_r10*x4113))+(((-1.0)*new_r00*x4124))+(((-1.0)*new_r00*x4117))+(((-1.0)*new_r10*x4118)));
evalcond[12]=((((-1.0)*new_r11*x4118))+((new_r11*x4113))+(((-0.433010506600939)*x4116))+(((-0.75000087746404)*x4114)));
evalcond[13]=((((-0.49999820135573)*x4115))+(((-0.866026442229025)*x4116))+(((-0.866026442229025)*x4123))+(((0.49999820135573)*x4114)));
evalcond[14]=((1.0)+(((0.250000205066586)*x4116))+(((0.250000205066586)*x4123))+(((0.433013258970445)*x4114))+(((-0.433013258970445)*x4115)));
evalcond[15]=((1.0)+((new_r00*x4121))+(((-0.49999820135573)*x4122))+(((-0.866026442229025)*x4119))+(((-0.866026442229025)*x4120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4126 = IKatan2WithCheck(IkReal(((((4.61878500004103e+28)*new_r11))+(((1.33332787645226e+28)*new_r10)))),IkReal(((((-1.33332787645226e+28)*new_r00))+(((-4.61878500004103e+28)*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4126.valid){
continue;
}
CheckValue<IkReal> x4127=IKPowWithIntegerCheck(IKsign(((((-5.33330713107669e+28)*new_r01*new_r10))+(((5.33330713107669e+28)*new_r00*new_r11)))),-1);
if(!x4127.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4126.value)+(((1.5707963267949)*(x4127.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4128=IKsin(j2);
IkReal x4129=IKcos(j2);
IkReal x4130=((0.75000087746404)*x4128);
IkReal x4131=(new_r01*x4129);
IkReal x4132=(new_r11*x4128);
IkReal x4133=(new_r01*x4128);
IkReal x4134=((0.433010506600939)*x4128);
IkReal x4135=((0.433010506600939)*x4129);
IkReal x4136=(new_r10*x4129);
IkReal x4137=(new_r00*x4128);
IkReal x4138=((0.49999820135573)*x4129);
IkReal x4139=(new_r10*x4128);
IkReal x4140=(new_r11*x4129);
IkReal x4141=((0.75000087746404)*x4129);
IkReal x4142=(new_r00*x4129);
evalcond[0]=((-0.866026442229025)+x4136+x4137);
evalcond[1]=((0.250000205066586)+x4140+x4133);
evalcond[2]=((0.49999820135573)+(((-1.0)*x4139))+x4142);
evalcond[3]=((0.433013258970445)+(((-1.0)*x4132))+x4131);
evalcond[4]=((((-1.0)*x4134))+(((-1.0)*x4141)));
evalcond[5]=(x4130+(((-1.0)*x4135)));
evalcond[6]=(x4138+(((-0.866026442229025)*x4128))+new_r00);
evalcond[7]=((((0.433013258970445)*x4129))+(((0.250000205066586)*x4128))+new_r01);
evalcond[8]=((((-0.49999820135573)*x4128))+(((-0.866026442229025)*x4129))+new_r10);
evalcond[9]=((((0.250000205066586)*x4129))+new_r11+(((-0.433013258970445)*x4128)));
evalcond[10]=((((-0.433013258970445)*x4139))+(((0.433013258970445)*x4142))+(((0.250000205066586)*x4136))+(((0.250000205066586)*x4137)));
evalcond[11]=((((-1.0)*new_r00*x4141))+(((-1.0)*new_r10*x4135))+((new_r10*x4130))+(((-1.0)*new_r00*x4134)));
evalcond[12]=((((-0.75000087746404)*x4131))+(((-1.0)*new_r11*x4135))+((new_r11*x4130))+(((-0.433010506600939)*x4133)));
evalcond[13]=((((-0.866026442229025)*x4133))+(((-0.866026442229025)*x4140))+(((0.49999820135573)*x4131))+(((-0.49999820135573)*x4132)));
evalcond[14]=((1.0)+(((0.433013258970445)*x4131))+(((-0.433013258970445)*x4132))+(((0.250000205066586)*x4140))+(((0.250000205066586)*x4133)));
evalcond[15]=((1.0)+(((-0.866026442229025)*x4136))+(((-0.866026442229025)*x4137))+((new_r00*x4138))+(((-0.49999820135573)*x4139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4143 = IKatan2WithCheck(IkReal(((((10825.2588795883)*sj0))+(((37499.810974959)*cj0)))),IkReal(((((64951.9831671769)*cj0))+(((18750.015379994)*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4143.valid){
continue;
}
CheckValue<IkReal> x4144=IKPowWithIntegerCheck(IKsign(((((-43301.0)*new_r00))+(((-75000.0)*new_r10)))),-1);
if(!x4144.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4143.value)+(((1.5707963267949)*(x4144.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4145=IKsin(j2);
IkReal x4146=IKcos(j2);
IkReal x4147=((1.0)*cj0);
IkReal x4148=((0.866026442229025)*cj0);
IkReal x4149=((0.49999820135573)*cj0);
IkReal x4150=((0.433013258970445)*sj0);
IkReal x4151=((0.866026442229025)*sj0);
IkReal x4152=((0.49999820135573)*sj0);
IkReal x4153=((0.75000087746404)*x4145);
IkReal x4154=(sj0*x4145);
IkReal x4155=(new_r01*x4146);
IkReal x4156=(new_r11*x4145);
IkReal x4157=((0.866026442229025)*x4145);
IkReal x4158=((0.250000205066586)*x4146);
IkReal x4159=((0.433010506600939)*x4145);
IkReal x4160=((0.433010506600939)*x4146);
IkReal x4161=((0.75000087746404)*x4146);
IkReal x4162=(new_r10*x4146);
IkReal x4163=(new_r10*x4145);
IkReal x4164=(new_r00*x4145);
IkReal x4165=(new_r01*x4145);
IkReal x4166=(cj0*x4145);
IkReal x4167=((0.433013258970445)*x4146);
IkReal x4168=(new_r00*x4146);
IkReal x4169=(new_r11*x4146);
evalcond[0]=((((-1.0)*x4161))+(((-1.0)*x4159)));
evalcond[1]=((((-1.0)*x4160))+x4153);
evalcond[2]=((((0.250000205066586)*sj0))+x4164+x4162+x4148);
evalcond[3]=((((-0.250000205066586)*cj0))+x4165+x4169+x4151);
evalcond[4]=((((-1.0)*x4163))+x4168+x4150+(((-1.0)*x4149)));
evalcond[5]=((((-1.0)*x4156))+(((-0.433013258970445)*cj0))+x4155+(((-1.0)*x4152)));
evalcond[6]=(((new_r10*x4153))+(((-1.0)*new_r00*x4161))+(((-1.0)*new_r10*x4160))+(((-1.0)*new_r00*x4159)));
evalcond[7]=((((-0.75000087746404)*x4155))+((new_r11*x4153))+(((-1.0)*new_r11*x4160))+(((-1.0)*new_r01*x4159)));
evalcond[8]=((((-0.433013258970445)*x4163))+sj0+((new_r00*x4167))+(((0.250000205066586)*x4164))+((new_r10*x4158)));
evalcond[9]=(((x4145*x4148))+(((-1.0)*x4146*x4149))+(((0.250000205066586)*x4154))+new_r00+((x4146*x4150)));
evalcond[10]=(((x4145*x4151))+(((-1.0)*x4146*x4152))+new_r01+(((-0.250000205066586)*x4166))+(((-1.0)*cj0*x4167)));
evalcond[11]=(((x4145*x4149))+((sj0*x4158))+(((-1.0)*x4145*x4150))+new_r10+((x4146*x4148)));
evalcond[12]=(((x4145*x4152))+(((-1.0)*cj0*x4158))+(((0.433013258970445)*x4166))+new_r11+((x4146*x4151)));
evalcond[13]=((((-0.433013258970445)*x4156))+(((0.250000205066586)*x4165))+(((0.433013258970445)*x4155))+((new_r11*x4158))+(((-1.0)*x4147)));
evalcond[14]=((((0.49999820135573)*x4168))+(((-0.49999820135573)*x4163))+(((-1.0)*x4147))+(((-0.866026442229025)*x4162))+(((-1.0)*new_r00*x4157)));
evalcond[15]=((((-1.0)*sj0))+(((0.49999820135573)*x4155))+(((-1.0)*new_r01*x4157))+(((-0.49999820135573)*x4156))+(((-0.866026442229025)*x4169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4170=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r11))+(((-75000.0)*new_r01)))),-1);
if(!x4170.valid){
continue;
}
CheckValue<IkReal> x4171 = IKatan2WithCheck(IkReal(((((-18750.015379994)*cj0))+(((64951.9831671769)*sj0)))),IkReal(((((-37499.810974959)*sj0))+(((10825.2588795883)*cj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4171.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4170.value)))+(x4171.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4172=IKsin(j2);
IkReal x4173=IKcos(j2);
IkReal x4174=((1.0)*cj0);
IkReal x4175=((0.866026442229025)*cj0);
IkReal x4176=((0.49999820135573)*cj0);
IkReal x4177=((0.433013258970445)*sj0);
IkReal x4178=((0.866026442229025)*sj0);
IkReal x4179=((0.49999820135573)*sj0);
IkReal x4180=((0.75000087746404)*x4172);
IkReal x4181=(sj0*x4172);
IkReal x4182=(new_r01*x4173);
IkReal x4183=(new_r11*x4172);
IkReal x4184=((0.866026442229025)*x4172);
IkReal x4185=((0.250000205066586)*x4173);
IkReal x4186=((0.433010506600939)*x4172);
IkReal x4187=((0.433010506600939)*x4173);
IkReal x4188=((0.75000087746404)*x4173);
IkReal x4189=(new_r10*x4173);
IkReal x4190=(new_r10*x4172);
IkReal x4191=(new_r00*x4172);
IkReal x4192=(new_r01*x4172);
IkReal x4193=(cj0*x4172);
IkReal x4194=((0.433013258970445)*x4173);
IkReal x4195=(new_r00*x4173);
IkReal x4196=(new_r11*x4173);
evalcond[0]=((((-1.0)*x4186))+(((-1.0)*x4188)));
evalcond[1]=((((-1.0)*x4187))+x4180);
evalcond[2]=((((0.250000205066586)*sj0))+x4191+x4189+x4175);
evalcond[3]=((((-0.250000205066586)*cj0))+x4196+x4192+x4178);
evalcond[4]=((((-1.0)*x4176))+(((-1.0)*x4190))+x4195+x4177);
evalcond[5]=((((-1.0)*x4179))+(((-1.0)*x4183))+(((-0.433013258970445)*cj0))+x4182);
evalcond[6]=((((-1.0)*new_r00*x4188))+(((-1.0)*new_r00*x4186))+((new_r10*x4180))+(((-1.0)*new_r10*x4187)));
evalcond[7]=(((new_r11*x4180))+(((-1.0)*new_r11*x4187))+(((-0.75000087746404)*x4182))+(((-1.0)*new_r01*x4186)));
evalcond[8]=(sj0+((new_r10*x4185))+(((-0.433013258970445)*x4190))+((new_r00*x4194))+(((0.250000205066586)*x4191)));
evalcond[9]=(((x4173*x4177))+(((-1.0)*x4173*x4176))+((x4172*x4175))+new_r00+(((0.250000205066586)*x4181)));
evalcond[10]=((((-1.0)*cj0*x4194))+(((-0.250000205066586)*x4193))+(((-1.0)*x4173*x4179))+((x4172*x4178))+new_r01);
evalcond[11]=(((x4173*x4175))+((sj0*x4185))+(((-1.0)*x4172*x4177))+((x4172*x4176))+new_r10);
evalcond[12]=(((x4173*x4178))+(((-1.0)*cj0*x4185))+(((0.433013258970445)*x4193))+((x4172*x4179))+new_r11);
evalcond[13]=((((-1.0)*x4174))+((new_r11*x4185))+(((0.433013258970445)*x4182))+(((-0.433013258970445)*x4183))+(((0.250000205066586)*x4192)));
evalcond[14]=((((-1.0)*new_r00*x4184))+(((-0.49999820135573)*x4190))+(((-1.0)*x4174))+(((-0.866026442229025)*x4189))+(((0.49999820135573)*x4195)));
evalcond[15]=((((-1.0)*sj0))+(((-0.49999820135573)*x4183))+(((-0.866026442229025)*x4196))+(((-1.0)*new_r01*x4184))+(((0.49999820135573)*x4182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4197 = IKatan2WithCheck(IkReal(((((64951.9831671769)*cj0))+(((18750.015379994)*sj0)))),IkReal(((((-37499.810974959)*cj0))+(((-10825.2588795883)*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4197.valid){
continue;
}
CheckValue<IkReal> x4198=IKPowWithIntegerCheck(IKsign(((((43301.0)*new_r10))+(((-75000.0)*new_r00)))),-1);
if(!x4198.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4197.value)+(((1.5707963267949)*(x4198.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[16];
IkReal x4199=IKsin(j2);
IkReal x4200=IKcos(j2);
IkReal x4201=((1.0)*cj0);
IkReal x4202=((0.866026442229025)*cj0);
IkReal x4203=((0.49999820135573)*cj0);
IkReal x4204=((0.433013258970445)*sj0);
IkReal x4205=((0.866026442229025)*sj0);
IkReal x4206=((0.49999820135573)*sj0);
IkReal x4207=((0.75000087746404)*x4199);
IkReal x4208=(sj0*x4199);
IkReal x4209=(new_r01*x4200);
IkReal x4210=(new_r11*x4199);
IkReal x4211=((0.866026442229025)*x4199);
IkReal x4212=((0.250000205066586)*x4200);
IkReal x4213=((0.433010506600939)*x4199);
IkReal x4214=((0.433010506600939)*x4200);
IkReal x4215=((0.75000087746404)*x4200);
IkReal x4216=(new_r10*x4200);
IkReal x4217=(new_r10*x4199);
IkReal x4218=(new_r00*x4199);
IkReal x4219=(new_r01*x4199);
IkReal x4220=(cj0*x4199);
IkReal x4221=((0.433013258970445)*x4200);
IkReal x4222=(new_r00*x4200);
IkReal x4223=(new_r11*x4200);
evalcond[0]=((((-1.0)*x4215))+(((-1.0)*x4213)));
evalcond[1]=(x4207+(((-1.0)*x4214)));
evalcond[2]=((((0.250000205066586)*sj0))+x4216+x4218+x4202);
evalcond[3]=((((-0.250000205066586)*cj0))+x4219+x4223+x4205);
evalcond[4]=((((-1.0)*x4203))+x4222+x4204+(((-1.0)*x4217)));
evalcond[5]=((((-1.0)*x4206))+(((-0.433013258970445)*cj0))+x4209+(((-1.0)*x4210)));
evalcond[6]=((((-1.0)*new_r10*x4214))+(((-1.0)*new_r00*x4213))+(((-1.0)*new_r00*x4215))+((new_r10*x4207)));
evalcond[7]=((((-1.0)*new_r11*x4214))+(((-1.0)*new_r01*x4213))+(((-0.75000087746404)*x4209))+((new_r11*x4207)));
evalcond[8]=(sj0+((new_r10*x4212))+(((-0.433013258970445)*x4217))+((new_r00*x4221))+(((0.250000205066586)*x4218)));
evalcond[9]=(((x4199*x4202))+((x4200*x4204))+new_r00+(((0.250000205066586)*x4208))+(((-1.0)*x4200*x4203)));
evalcond[10]=((((-0.250000205066586)*x4220))+((x4199*x4205))+(((-1.0)*cj0*x4221))+new_r01+(((-1.0)*x4200*x4206)));
evalcond[11]=(((x4199*x4203))+((sj0*x4212))+(((-1.0)*x4199*x4204))+((x4200*x4202))+new_r10);
evalcond[12]=(((x4199*x4206))+(((-1.0)*cj0*x4212))+((x4200*x4205))+(((0.433013258970445)*x4220))+new_r11);
evalcond[13]=((((0.433013258970445)*x4209))+((new_r11*x4212))+(((-0.433013258970445)*x4210))+(((-1.0)*x4201))+(((0.250000205066586)*x4219)));
evalcond[14]=((((0.49999820135573)*x4222))+(((-1.0)*x4201))+(((-0.866026442229025)*x4216))+(((-1.0)*new_r00*x4211))+(((-0.49999820135573)*x4217)));
evalcond[15]=((((-1.0)*sj0))+(((-1.0)*new_r01*x4211))+(((-0.866026442229025)*x4223))+(((-0.49999820135573)*x4210))+(((0.49999820135573)*x4209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4224 = IKatan2WithCheck(IkReal(((-562499341902740.0)+(((999996490152053.0)*(new_r02*new_r02))))),IkReal(((324757120049741.0)+(((999996490152053.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4224.valid){
continue;
}
CheckValue<IkReal> x4225=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02)))),-1);
if(!x4225.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4224.value)+(((1.5707963267949)*(x4225.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x4226=IKcos(j2);
IkReal x4227=IKsin(j2);
IkReal x4228=((1.0)*cj0);
IkReal x4229=((0.866026442229025)*cj0);
IkReal x4230=((0.49999820135573)*cj0);
IkReal x4231=((0.866026442229025)*sj0);
IkReal x4232=((0.49999820135573)*sj0);
IkReal x4233=((0.75000087746404)*x4227);
IkReal x4234=(sj0*x4227);
IkReal x4235=((0.433013258970445)*x4226);
IkReal x4236=((1.0)*x4227);
IkReal x4237=((0.866026442229025)*x4227);
IkReal x4238=((0.433010506600939)*x4227);
IkReal x4239=((0.250000205066586)*x4226);
IkReal x4240=(new_r02*x4226);
IkReal x4241=(new_r01*x4226);
IkReal x4242=(new_r12*x4226);
IkReal x4243=(new_r00*x4227);
IkReal x4244=(new_r10*x4226);
IkReal x4245=(new_r01*x4227);
IkReal x4246=((0.433010506600939)*x4226);
IkReal x4247=(cj0*x4227);
IkReal x4248=((0.433013258970445)*x4227);
IkReal x4249=((0.75000087746404)*x4226);
IkReal x4250=((0.49999820135573)*x4227);
IkReal x4251=(new_r00*x4226);
IkReal x4252=(new_r02*x4227);
IkReal x4253=(new_r11*x4226);
evalcond[0]=((-0.433010506600939)+x4252+x4242);
evalcond[1]=((-0.75000087746404)+(((-1.0)*new_r12*x4236))+x4240);
evalcond[2]=((((-1.0)*x4238))+(((-1.0)*x4249))+new_r02);
evalcond[3]=((((-1.0)*x4246))+x4233+new_r12);
evalcond[4]=((((0.250000205066586)*sj0))+x4244+x4243+x4229);
evalcond[5]=((((-0.250000205066586)*cj0))+x4253+x4245+x4231);
evalcond[6]=((((-1.0)*x4230))+(((-1.0)*new_r10*x4236))+(((0.433013258970445)*sj0))+x4251);
evalcond[7]=((((-1.0)*x4232))+(((-1.0)*new_r11*x4236))+(((-0.433013258970445)*cj0))+x4241);
evalcond[8]=((((0.250000205066586)*x4234))+(((-1.0)*x4226*x4230))+((x4227*x4229))+((sj0*x4235))+new_r00);
evalcond[9]=((((-1.0)*x4226*x4232))+(((-0.250000205066586)*x4247))+(((-1.0)*cj0*x4235))+((x4227*x4231))+new_r01);
evalcond[10]=(((sj0*x4239))+((x4227*x4230))+((x4226*x4229))+(((-0.433013258970445)*x4234))+new_r10);
evalcond[11]=((((-1.0)*cj0*x4239))+((x4227*x4232))+((x4226*x4231))+new_r11+(((0.433013258970445)*x4247)));
evalcond[12]=((0.749999415023631)+(((-0.433010506600939)*x4242))+(((-1.0)*new_r02*x4238))+(((-0.75000087746404)*x4240))+((new_r12*x4233)));
evalcond[13]=((-0.433013039627618)+(((0.250000205066586)*x4252))+((new_r02*x4235))+(((-1.0)*new_r12*x4248))+((new_r12*x4239)));
evalcond[14]=((-5.41267840225675e-7)+(((-1.0)*new_r12*x4250))+(((0.49999820135573)*x4240))+(((-1.0)*new_r02*x4237))+(((-0.866026442229025)*x4242)));
evalcond[15]=(((new_r10*x4233))+(((-0.433010506600939)*x4244))+(((-1.0)*new_r00*x4238))+(((-0.500000584976027)*new_r20))+(((-1.0)*new_r00*x4249)));
evalcond[16]=(((new_r11*x4233))+(((-0.500000584976027)*new_r21))+(((-1.0)*new_r01*x4238))+(((-0.75000087746404)*x4241))+(((-1.0)*new_r11*x4246)));
evalcond[17]=(((new_r10*x4239))+(((0.250000205066586)*x4243))+sj0+((new_r00*x4235))+(((-0.866025066047432)*new_r20))+(((-1.0)*new_r10*x4248)));
evalcond[18]=(((new_r11*x4239))+(((-1.0)*x4228))+(((0.250000205066586)*x4245))+((new_r01*x4235))+(((-0.866025066047432)*new_r21))+(((-1.0)*new_r11*x4248)));
evalcond[19]=((((-1.0)*x4228))+(((-1.08253441393799e-6)*new_r20))+(((-1.0)*new_r00*x4237))+(((-1.0)*new_r10*x4250))+(((0.49999820135573)*x4251))+(((-0.866026442229025)*x4244)));
evalcond[20]=((((-1.0)*sj0))+(((-1.08253441393799e-6)*new_r21))+(((0.49999820135573)*x4241))+(((-0.866026442229025)*x4253))+(((-1.0)*new_r11*x4250))+(((-1.0)*new_r01*x4237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4254 = IKatan2WithCheck(IkReal(((187497440736984.0)+(((-999996490152053.0)*(new_r12*new_r12))))),IkReal(((324757120049741.0)+(((999996490152053.0)*new_r02*new_r12)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4254.valid){
continue;
}
CheckValue<IkReal> x4255=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r12))+(((433008986799901.0)*new_r02)))),-1);
if(!x4255.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4254.value)+(((1.5707963267949)*(x4255.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x4256=IKcos(j2);
IkReal x4257=IKsin(j2);
IkReal x4258=((1.0)*cj0);
IkReal x4259=((0.866026442229025)*cj0);
IkReal x4260=((0.49999820135573)*cj0);
IkReal x4261=((0.866026442229025)*sj0);
IkReal x4262=((0.49999820135573)*sj0);
IkReal x4263=((0.75000087746404)*x4257);
IkReal x4264=(sj0*x4257);
IkReal x4265=((0.433013258970445)*x4256);
IkReal x4266=((1.0)*x4257);
IkReal x4267=((0.866026442229025)*x4257);
IkReal x4268=((0.433010506600939)*x4257);
IkReal x4269=((0.250000205066586)*x4256);
IkReal x4270=(new_r02*x4256);
IkReal x4271=(new_r01*x4256);
IkReal x4272=(new_r12*x4256);
IkReal x4273=(new_r00*x4257);
IkReal x4274=(new_r10*x4256);
IkReal x4275=(new_r01*x4257);
IkReal x4276=((0.433010506600939)*x4256);
IkReal x4277=(cj0*x4257);
IkReal x4278=((0.433013258970445)*x4257);
IkReal x4279=((0.75000087746404)*x4256);
IkReal x4280=((0.49999820135573)*x4257);
IkReal x4281=(new_r00*x4256);
IkReal x4282=(new_r02*x4257);
IkReal x4283=(new_r11*x4256);
evalcond[0]=((-0.433010506600939)+x4282+x4272);
evalcond[1]=((-0.75000087746404)+(((-1.0)*new_r12*x4266))+x4270);
evalcond[2]=(new_r02+(((-1.0)*x4279))+(((-1.0)*x4268)));
evalcond[3]=(x4263+new_r12+(((-1.0)*x4276)));
evalcond[4]=((((0.250000205066586)*sj0))+x4259+x4273+x4274);
evalcond[5]=((((-0.250000205066586)*cj0))+x4283+x4261+x4275);
evalcond[6]=((((-1.0)*new_r10*x4266))+(((0.433013258970445)*sj0))+x4281+(((-1.0)*x4260)));
evalcond[7]=((((-1.0)*new_r11*x4266))+(((-0.433013258970445)*cj0))+x4271+(((-1.0)*x4262)));
evalcond[8]=((((-1.0)*x4256*x4260))+((sj0*x4265))+new_r00+((x4257*x4259))+(((0.250000205066586)*x4264)));
evalcond[9]=((((-1.0)*x4256*x4262))+(((-0.250000205066586)*x4277))+((x4257*x4261))+(((-1.0)*cj0*x4265))+new_r01);
evalcond[10]=(((x4257*x4260))+(((-0.433013258970445)*x4264))+((x4256*x4259))+((sj0*x4269))+new_r10);
evalcond[11]=(((x4256*x4261))+((x4257*x4262))+(((-1.0)*cj0*x4269))+new_r11+(((0.433013258970445)*x4277)));
evalcond[12]=((0.749999415023631)+(((-0.433010506600939)*x4272))+((new_r12*x4263))+(((-0.75000087746404)*x4270))+(((-1.0)*new_r02*x4268)));
evalcond[13]=((-0.433013039627618)+((new_r12*x4269))+(((-1.0)*new_r12*x4278))+((new_r02*x4265))+(((0.250000205066586)*x4282)));
evalcond[14]=((-5.41267840225675e-7)+(((-0.866026442229025)*x4272))+(((-1.0)*new_r12*x4280))+(((-1.0)*new_r02*x4267))+(((0.49999820135573)*x4270)));
evalcond[15]=((((-0.433010506600939)*x4274))+((new_r10*x4263))+(((-0.500000584976027)*new_r20))+(((-1.0)*new_r00*x4268))+(((-1.0)*new_r00*x4279)));
evalcond[16]=((((-1.0)*new_r11*x4276))+(((-0.75000087746404)*x4271))+(((-0.500000584976027)*new_r21))+((new_r11*x4263))+(((-1.0)*new_r01*x4268)));
evalcond[17]=(sj0+((new_r00*x4265))+((new_r10*x4269))+(((-1.0)*new_r10*x4278))+(((-0.866025066047432)*new_r20))+(((0.250000205066586)*x4273)));
evalcond[18]=(((new_r01*x4265))+(((-1.0)*new_r11*x4278))+((new_r11*x4269))+(((-1.0)*x4258))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x4275)));
evalcond[19]=((((-1.0)*new_r10*x4280))+(((-1.08253441393799e-6)*new_r20))+(((-0.866026442229025)*x4274))+(((-1.0)*x4258))+(((-1.0)*new_r00*x4267))+(((0.49999820135573)*x4281)));
evalcond[20]=((((-1.0)*sj0))+(((-1.0)*new_r11*x4280))+(((-1.08253441393799e-6)*new_r21))+(((-0.866026442229025)*x4283))+(((-1.0)*new_r01*x4267))+(((0.49999820135573)*x4271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x4284=IKPowWithIntegerCheck(IKsign(((((749998245075000.0)*new_r02))+(((-433008986799901.0)*new_r12)))),-1);
if(!x4284.valid){
continue;
}
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal(((324757120049741.0)+(((-999996490152053.0)*new_r02*new_r12)))),IkReal(((-187497440736984.0)+(((999996490152053.0)*(new_r02*new_r02))))),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4284.value)))+(x4285.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x4286=IKcos(j2);
IkReal x4287=IKsin(j2);
IkReal x4288=((1.0)*cj0);
IkReal x4289=((0.866026442229025)*cj0);
IkReal x4290=((0.49999820135573)*cj0);
IkReal x4291=((0.866026442229025)*sj0);
IkReal x4292=((0.49999820135573)*sj0);
IkReal x4293=((0.75000087746404)*x4287);
IkReal x4294=(sj0*x4287);
IkReal x4295=((0.433013258970445)*x4286);
IkReal x4296=((1.0)*x4287);
IkReal x4297=((0.866026442229025)*x4287);
IkReal x4298=((0.433010506600939)*x4287);
IkReal x4299=((0.250000205066586)*x4286);
IkReal x4300=(new_r02*x4286);
IkReal x4301=(new_r01*x4286);
IkReal x4302=(new_r12*x4286);
IkReal x4303=(new_r00*x4287);
IkReal x4304=(new_r10*x4286);
IkReal x4305=(new_r01*x4287);
IkReal x4306=((0.433010506600939)*x4286);
IkReal x4307=(cj0*x4287);
IkReal x4308=((0.433013258970445)*x4287);
IkReal x4309=((0.75000087746404)*x4286);
IkReal x4310=((0.49999820135573)*x4287);
IkReal x4311=(new_r00*x4286);
IkReal x4312=(new_r02*x4287);
IkReal x4313=(new_r11*x4286);
evalcond[0]=((-0.433010506600939)+x4312+x4302);
evalcond[1]=((-0.75000087746404)+(((-1.0)*new_r12*x4296))+x4300);
evalcond[2]=((((-1.0)*x4298))+new_r02+(((-1.0)*x4309)));
evalcond[3]=(x4293+new_r12+(((-1.0)*x4306)));
evalcond[4]=((((0.250000205066586)*sj0))+x4289+x4303+x4304);
evalcond[5]=((((-0.250000205066586)*cj0))+x4291+x4313+x4305);
evalcond[6]=((((-1.0)*x4290))+(((0.433013258970445)*sj0))+(((-1.0)*new_r10*x4296))+x4311);
evalcond[7]=((((-1.0)*x4292))+(((-1.0)*new_r11*x4296))+(((-0.433013258970445)*cj0))+x4301);
evalcond[8]=(((sj0*x4295))+(((0.250000205066586)*x4294))+((x4287*x4289))+(((-1.0)*x4286*x4290))+new_r00);
evalcond[9]=((((-0.250000205066586)*x4307))+(((-1.0)*x4286*x4292))+(((-1.0)*cj0*x4295))+new_r01+((x4287*x4291)));
evalcond[10]=(((sj0*x4299))+((x4286*x4289))+new_r10+(((-0.433013258970445)*x4294))+((x4287*x4290)));
evalcond[11]=((((-1.0)*cj0*x4299))+new_r11+((x4286*x4291))+(((0.433013258970445)*x4307))+((x4287*x4292)));
evalcond[12]=((0.749999415023631)+(((-1.0)*new_r02*x4298))+((new_r12*x4293))+(((-0.433010506600939)*x4302))+(((-0.75000087746404)*x4300)));
evalcond[13]=((-0.433013039627618)+(((-1.0)*new_r12*x4308))+((new_r12*x4299))+(((0.250000205066586)*x4312))+((new_r02*x4295)));
evalcond[14]=((-5.41267840225675e-7)+(((-1.0)*new_r02*x4297))+(((0.49999820135573)*x4300))+(((-0.866026442229025)*x4302))+(((-1.0)*new_r12*x4310)));
evalcond[15]=((((-0.433010506600939)*x4304))+(((-0.500000584976027)*new_r20))+(((-1.0)*new_r00*x4298))+(((-1.0)*new_r00*x4309))+((new_r10*x4293)));
evalcond[16]=((((-1.0)*new_r01*x4298))+(((-0.500000584976027)*new_r21))+(((-0.75000087746404)*x4301))+(((-1.0)*new_r11*x4306))+((new_r11*x4293)));
evalcond[17]=(sj0+((new_r00*x4295))+(((0.250000205066586)*x4303))+(((-0.866025066047432)*new_r20))+(((-1.0)*new_r10*x4308))+((new_r10*x4299)));
evalcond[18]=((((-1.0)*x4288))+((new_r01*x4295))+(((0.250000205066586)*x4305))+(((-0.866025066047432)*new_r21))+(((-1.0)*new_r11*x4308))+((new_r11*x4299)));
evalcond[19]=((((-1.0)*x4288))+(((-1.0)*new_r10*x4310))+(((0.49999820135573)*x4311))+(((-1.08253441393799e-6)*new_r20))+(((-1.0)*new_r00*x4297))+(((-0.866026442229025)*x4304)));
evalcond[20]=((((-0.866026442229025)*x4313))+(((-1.0)*sj0))+(((-1.08253441393799e-6)*new_r21))+(((-1.0)*new_r01*x4297))+(((0.49999820135573)*x4301))+(((-1.0)*new_r11*x4310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs((sj0+(((-1.73204060566914)*cj0*cj1))+(((-3.99999671893731)*new_r10))+(((-3.46410292742905)*cj0*sj1)))))+(((3.46411133595038e-19)*(IKabs(((2.30939270191783e+19)*new_r00))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((IKabs(((((-3.46410292742905)*sj0*sj1))+(((-3.99999671893731)*new_r11))+(((-1.73204060566914)*cj1*sj0))+(((-1.0)*cj0)))))+(((3.46411133595038e-19)*(IKabs(((2.30939270191783e+19)*new_r01))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
{
IkReal j2eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j2eval[0]=((((2.00000467981095e-19)*(IKabs(((2.30939270191783e+19)*new_r10)))))+(IKabs((sj0+(((-1.73205060567263)*cj0*cj1))+(((-2.30939810567846)*new_r00))+(((1.15469489905356)*cj0*sj1))))));
if( IKabs(j2eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j2]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x4314=((2.30939810567846)*new_r00);
IkReal x4315=((1.15469489905356)*cj0*sj1);
IkReal x4316=((1.73205060567263)*cj0*cj1);
IkReal x4317=(sj0+x4315);
op[0]=((((-1.0)*x4316))+(((-1.0)*x4314))+x4317);
op[1]=((-4.61879621135691)*new_r10);
op[2]=((((-1.0)*x4316))+x4314+x4317);
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x4318=((3.99999671893731)*new_r11);
IkReal x4319=((1.0)*cj0);
IkReal x4320=((3.46410292742905)*sj0*sj1);
IkReal x4321=((1.73204060566914)*cj1*sj0);
IkReal x4322=(x4321+x4320+x4319);
op[0]=((((-1.0)*x4322))+(((-1.0)*x4318)));
op[1]=((7.99999343787462)*new_r01);
op[2]=((((-1.0)*x4322))+x4318);
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x4323=((3.99999671893731)*new_r10);
IkReal x4324=((1.73204060566914)*cj0*cj1);
IkReal x4325=((3.46410292742905)*cj0*sj1);
IkReal x4326=(x4325+x4324);
op[0]=(sj0+(((-1.0)*x4326))+(((-1.0)*x4323)));
op[1]=((7.99999343787462)*new_r00);
op[2]=(sj0+(((-1.0)*x4326))+x4323);
polyroots2(op,zeror,numroots);
IkReal j2array[2], cj2array[2], sj2array[2], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[2]={true,true};
_nj2 = 2;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4327=(cj0*new_r02);
IkReal x4328=((0.866026442229025)*sj1);
IkReal x4329=((0.250000205066586)*sj0);
IkReal x4330=((0.433010506600939)*sj1);
IkReal x4331=((0.433010506600939)*cj1);
IkReal x4332=(cj0*new_r12);
IkReal x4333=((0.866026442229025)*cj1);
CheckValue<IkReal> x4334 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x4333))+((new_r10*x4330))+(((-1.0)*new_r12*x4329))+((x4331*x4332))+((x4328*x4332)))),IkReal((((new_r02*x4329))+(((-1.0)*new_r00*x4330))+(((-1.0)*x4327*x4331))+((new_r00*x4333))+(((-1.0)*x4327*x4328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4334.valid){
continue;
}
CheckValue<IkReal> x4335=IKPowWithIntegerCheck(IKsign((((new_r00*new_r12))+(((-1.0)*new_r02*new_r10)))),-1);
if(!x4335.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4334.value)+(((1.5707963267949)*(x4335.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x4336=IKcos(j2);
IkReal x4337=IKsin(j2);
IkReal x4338=((1.0)*cj0);
IkReal x4339=((0.433010506600939)*new_r01);
IkReal x4340=((0.75000087746404)*cj1);
IkReal x4341=((0.49999820135573)*sj1);
IkReal x4342=((0.866026442229025)*sj1);
IkReal x4343=((0.433010506600939)*new_r11);
IkReal x4344=((0.433010506600939)*sj0);
IkReal x4345=((0.433010506600939)*sj1);
IkReal x4346=((0.500000584976027)*sj1);
IkReal x4347=((0.75000087746404)*new_r10);
IkReal x4348=((0.433010506600939)*new_r12);
IkReal x4349=((0.49999820135573)*cj1);
IkReal x4350=((0.75000087746404)*sj1);
IkReal x4351=((0.500000584976027)*cj1);
IkReal x4352=((0.866026442229025)*cj1);
IkReal x4353=((1.08253441393799e-6)*cj1);
IkReal x4354=((0.433010506600939)*cj1);
IkReal x4355=((1.08253441393799e-6)*sj1);
IkReal x4356=(cj1*x4337);
IkReal x4357=(new_r02*x4336);
IkReal x4358=(sj0*x4337);
IkReal x4359=(new_r00*x4337);
IkReal x4360=(new_r11*x4337);
IkReal x4361=(new_r01*x4336);
IkReal x4362=(new_r10*x4336);
IkReal x4363=(new_r01*x4337);
IkReal x4364=(cj0*x4336);
IkReal x4365=(cj0*x4337);
IkReal x4366=(sj1*x4336);
IkReal x4367=(cj1*x4336);
IkReal x4368=(new_r02*x4337);
IkReal x4369=(new_r11*x4336);
IkReal x4370=(sj0*x4336);
IkReal x4371=(new_r12*x4336);
IkReal x4372=(new_r12*x4337);
IkReal x4373=(new_r10*x4337);
IkReal x4374=(sj1*x4337);
IkReal x4375=(new_r00*x4336);
evalcond[0]=((((-1.0)*x4352))+x4371+x4368+x4345);
evalcond[1]=((((-1.0)*x4372))+x4357+x4350+x4349);
evalcond[2]=((((-1.0)*cj0*x4342))+(((-1.0)*cj0*x4354))+(((0.250000205066586)*sj0))+x4362+x4359);
evalcond[3]=((((-0.250000205066586)*cj0))+(((-1.0)*sj0*x4342))+x4363+x4369+(((-1.0)*cj1*x4344)));
evalcond[4]=((((-1.0)*cj0*x4340))+(((0.433013258970445)*sj0))+(((-1.0)*x4373))+x4375+((cj0*x4341)));
evalcond[5]=((((-1.0)*sj0*x4340))+(((-0.433013258970445)*cj0))+(((-1.0)*x4360))+x4361+((sj0*x4341)));
evalcond[6]=(((x4336*x4350))+((x4337*x4345))+((x4336*x4349))+new_r02+(((-1.0)*x4337*x4352)));
evalcond[7]=(((x4336*x4345))+(((-1.0)*x4336*x4352))+new_r12+(((-1.0)*x4337*x4349))+(((-1.0)*x4337*x4350)));
evalcond[8]=((((0.250000205066586)*x4371))+(((0.250000205066586)*x4368))+(((-0.866025066047432)*new_r22))+(((0.433013258970445)*x4357))+(((-0.433013258970445)*x4372)));
evalcond[9]=(sj0+(((0.250000205066586)*x4362))+(((-0.866025066047432)*new_r20))+(((-0.433013258970445)*x4373))+(((0.250000205066586)*x4359))+(((0.433013258970445)*x4375)));
evalcond[10]=((((0.250000205066586)*x4363))+(((0.250000205066586)*x4369))+(((-1.0)*x4338))+(((-0.866025066047432)*new_r21))+(((0.433013258970445)*x4361))+(((-0.433013258970445)*x4360)));
evalcond[11]=((((-1.0)*x4354*x4365))+(((-1.0)*x4340*x4364))+(((-1.0)*x4342*x4365))+(((0.250000205066586)*x4358))+new_r00+((x4341*x4364))+(((0.433013258970445)*x4370)));
evalcond[12]=(((x4341*x4370))+(((-1.0)*x4344*x4356))+(((-0.250000205066586)*x4365))+(((-1.0)*x4342*x4358))+(((-1.0)*x4340*x4370))+new_r01+(((-0.433013258970445)*x4364)));
evalcond[13]=((((0.250000205066586)*x4370))+(((-0.433013258970445)*x4358))+(((-1.0)*x4354*x4364))+(((-1.0)*x4341*x4365))+(((-1.0)*x4342*x4364))+new_r10+((x4340*x4365)));
evalcond[14]=((((-0.250000205066586)*x4364))+(((-1.0)*x4341*x4358))+((x4340*x4358))+new_r11+(((-1.0)*x4342*x4370))+(((0.433013258970445)*x4365))+(((-1.0)*x4344*x4367)));
evalcond[15]=(((x4341*x4372))+((x4354*x4368))+(((-1.0)*x4341*x4357))+((new_r22*x4351))+((new_r22*x4355))+((x4348*x4367))+((x4340*x4357))+((x4342*x4368))+(((-1.0)*x4340*x4372))+((x4342*x4371)));
evalcond[16]=((((-1.0)*x4349*x4373))+(((-1.0)*new_r20*x4353))+((x4349*x4375))+((x4350*x4375))+(((-1.0)*x4347*x4374))+((x4345*x4362))+((new_r20*x4346))+(((-1.0)*x4352*x4359))+(((-1.0)*x4352*x4362))+((x4345*x4359)));
evalcond[17]=(((x4349*x4361))+(((-1.0)*new_r21*x4353))+((x4350*x4361))+((x4339*x4374))+(((-1.0)*x4352*x4363))+(((-1.0)*x4352*x4369))+((new_r21*x4346))+((x4343*x4366))+(((-1.0)*x4349*x4360))+(((-1.0)*x4350*x4360)));
evalcond[18]=((1.0)+(((-1.0)*x4350*x4372))+((x4350*x4357))+(((-1.0)*new_r22*x4353))+(((-1.0)*x4349*x4372))+((x4345*x4368))+((new_r22*x4346))+((x4345*x4371))+(((-1.0)*x4352*x4368))+((x4349*x4357))+(((-1.0)*x4352*x4371)));
evalcond[19]=(((x4340*x4375))+((x4341*x4373))+((x4354*x4362))+((x4342*x4359))+(((-1.0)*x4338))+((new_r20*x4351))+((new_r20*x4355))+((x4342*x4362))+((x4354*x4359))+(((-1.0)*x4341*x4375))+(((-1.0)*x4340*x4373)));
evalcond[20]=((((-1.0)*sj0))+((x4339*x4356))+(((-1.0)*x4340*x4360))+(((-1.0)*x4341*x4361))+((x4342*x4369))+((x4342*x4363))+((x4343*x4367))+((new_r21*x4351))+((new_r21*x4355))+((x4341*x4360))+((x4340*x4361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4376=((0.433010506600939)*sj1);
IkReal x4377=((0.866026442229025)*cj1);
IkReal x4378=((0.433013258970445)*sj0);
IkReal x4379=((0.49999820135573)*cj0*sj1);
IkReal x4380=((0.75000087746404)*cj0*cj1);
CheckValue<IkReal> x4381 = IKatan2WithCheck(IkReal((((new_r12*x4379))+((new_r12*x4378))+(((-1.0)*new_r12*x4380))+((new_r00*x4377))+(((-1.0)*new_r00*x4376)))),IkReal((((new_r10*x4377))+((new_r02*x4380))+(((-1.0)*new_r02*x4379))+(((-1.0)*new_r02*x4378))+(((-1.0)*new_r10*x4376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4381.valid){
continue;
}
CheckValue<IkReal> x4382=IKPowWithIntegerCheck(IKsign((((new_r10*new_r12))+((new_r00*new_r02)))),-1);
if(!x4382.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4381.value)+(((1.5707963267949)*(x4382.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x4383=IKcos(j2);
IkReal x4384=IKsin(j2);
IkReal x4385=((1.0)*cj0);
IkReal x4386=((0.433010506600939)*new_r01);
IkReal x4387=((0.75000087746404)*cj1);
IkReal x4388=((0.49999820135573)*sj1);
IkReal x4389=((0.866026442229025)*sj1);
IkReal x4390=((0.433010506600939)*new_r11);
IkReal x4391=((0.433010506600939)*sj0);
IkReal x4392=((0.433010506600939)*sj1);
IkReal x4393=((0.500000584976027)*sj1);
IkReal x4394=((0.75000087746404)*new_r10);
IkReal x4395=((0.433010506600939)*new_r12);
IkReal x4396=((0.49999820135573)*cj1);
IkReal x4397=((0.75000087746404)*sj1);
IkReal x4398=((0.500000584976027)*cj1);
IkReal x4399=((0.866026442229025)*cj1);
IkReal x4400=((1.08253441393799e-6)*cj1);
IkReal x4401=((0.433010506600939)*cj1);
IkReal x4402=((1.08253441393799e-6)*sj1);
IkReal x4403=(cj1*x4384);
IkReal x4404=(new_r02*x4383);
IkReal x4405=(sj0*x4384);
IkReal x4406=(new_r00*x4384);
IkReal x4407=(new_r11*x4384);
IkReal x4408=(new_r01*x4383);
IkReal x4409=(new_r10*x4383);
IkReal x4410=(new_r01*x4384);
IkReal x4411=(cj0*x4383);
IkReal x4412=(cj0*x4384);
IkReal x4413=(sj1*x4383);
IkReal x4414=(cj1*x4383);
IkReal x4415=(new_r02*x4384);
IkReal x4416=(new_r11*x4383);
IkReal x4417=(sj0*x4383);
IkReal x4418=(new_r12*x4383);
IkReal x4419=(new_r12*x4384);
IkReal x4420=(new_r10*x4384);
IkReal x4421=(sj1*x4384);
IkReal x4422=(new_r00*x4383);
evalcond[0]=((((-1.0)*x4399))+x4418+x4415+x4392);
evalcond[1]=(x4404+(((-1.0)*x4419))+x4396+x4397);
evalcond[2]=((((-1.0)*cj0*x4389))+x4409+x4406+(((0.250000205066586)*sj0))+(((-1.0)*cj0*x4401)));
evalcond[3]=((((-0.250000205066586)*cj0))+x4416+x4410+(((-1.0)*cj1*x4391))+(((-1.0)*sj0*x4389)));
evalcond[4]=((((-1.0)*cj0*x4387))+x4422+(((0.433013258970445)*sj0))+(((-1.0)*x4420))+((cj0*x4388)));
evalcond[5]=(x4408+(((-1.0)*x4407))+(((-0.433013258970445)*cj0))+((sj0*x4388))+(((-1.0)*sj0*x4387)));
evalcond[6]=(((x4383*x4397))+((x4383*x4396))+((x4384*x4392))+(((-1.0)*x4384*x4399))+new_r02);
evalcond[7]=(((x4383*x4392))+(((-1.0)*x4384*x4396))+(((-1.0)*x4384*x4397))+new_r12+(((-1.0)*x4383*x4399)));
evalcond[8]=((((0.250000205066586)*x4418))+(((0.250000205066586)*x4415))+(((0.433013258970445)*x4404))+(((-0.433013258970445)*x4419))+(((-0.866025066047432)*new_r22)));
evalcond[9]=(sj0+(((0.433013258970445)*x4422))+(((0.250000205066586)*x4406))+(((0.250000205066586)*x4409))+(((-0.433013258970445)*x4420))+(((-0.866025066047432)*new_r20)));
evalcond[10]=((((0.250000205066586)*x4416))+(((0.250000205066586)*x4410))+(((0.433013258970445)*x4408))+(((-0.433013258970445)*x4407))+(((-0.866025066047432)*new_r21))+(((-1.0)*x4385)));
evalcond[11]=((((0.250000205066586)*x4405))+(((-1.0)*x4389*x4412))+(((-1.0)*x4401*x4412))+(((0.433013258970445)*x4417))+((x4388*x4411))+(((-1.0)*x4387*x4411))+new_r00);
evalcond[12]=((((-1.0)*x4389*x4405))+((x4388*x4417))+(((-0.433013258970445)*x4411))+(((-0.250000205066586)*x4412))+(((-1.0)*x4387*x4417))+new_r01+(((-1.0)*x4391*x4403)));
evalcond[13]=((((0.250000205066586)*x4417))+(((-1.0)*x4388*x4412))+(((-1.0)*x4389*x4411))+(((-1.0)*x4401*x4411))+(((-0.433013258970445)*x4405))+((x4387*x4412))+new_r10);
evalcond[14]=((((-1.0)*x4391*x4414))+(((-1.0)*x4388*x4405))+(((-1.0)*x4389*x4417))+(((0.433013258970445)*x4412))+((x4387*x4405))+(((-0.250000205066586)*x4411))+new_r11);
evalcond[15]=(((x4401*x4415))+(((-1.0)*x4388*x4404))+((x4388*x4419))+((new_r22*x4398))+((x4389*x4415))+((x4389*x4418))+((x4387*x4404))+((x4395*x4414))+(((-1.0)*x4387*x4419))+((new_r22*x4402)));
evalcond[16]=(((x4397*x4422))+((x4396*x4422))+((new_r20*x4393))+(((-1.0)*x4399*x4409))+(((-1.0)*x4399*x4406))+(((-1.0)*x4396*x4420))+(((-1.0)*x4394*x4421))+((x4392*x4409))+((x4392*x4406))+(((-1.0)*new_r20*x4400)));
evalcond[17]=((((-1.0)*new_r21*x4400))+((x4390*x4413))+(((-1.0)*x4396*x4407))+(((-1.0)*x4399*x4416))+(((-1.0)*x4399*x4410))+((x4386*x4421))+((new_r21*x4393))+((x4396*x4408))+(((-1.0)*x4397*x4407))+((x4397*x4408)));
evalcond[18]=((1.0)+(((-1.0)*x4396*x4419))+((new_r22*x4393))+(((-1.0)*new_r22*x4400))+(((-1.0)*x4399*x4415))+(((-1.0)*x4399*x4418))+((x4396*x4404))+((x4392*x4415))+((x4392*x4418))+(((-1.0)*x4397*x4419))+((x4397*x4404)));
evalcond[19]=(((new_r20*x4402))+((x4387*x4422))+((x4388*x4420))+((x4401*x4409))+((x4401*x4406))+(((-1.0)*x4387*x4420))+((x4389*x4406))+((x4389*x4409))+((new_r20*x4398))+(((-1.0)*x4388*x4422))+(((-1.0)*x4385)));
evalcond[20]=((((-1.0)*sj0))+((x4390*x4414))+((x4388*x4407))+(((-1.0)*x4388*x4408))+((x4389*x4416))+((x4389*x4410))+((x4387*x4408))+((new_r21*x4398))+((new_r21*x4402))+((x4386*x4403))+(((-1.0)*x4387*x4407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x4423=(new_r12*sj1);
IkReal x4424=(cj1*new_r02);
IkReal x4425=(cj1*new_r12);
IkReal x4426=(new_r02*sj1);
CheckValue<IkReal> x4427 = IKatan2WithCheck(IkReal(((((0.866026442229025)*x4424))+(((0.49999820135573)*x4425))+(((0.75000087746404)*x4423))+(((-0.433010506600939)*x4426)))),IkReal(((((-0.49999820135573)*x4424))+(((0.866026442229025)*x4425))+(((-0.75000087746404)*x4426))+(((-0.433010506600939)*x4423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4427.valid){
continue;
}
CheckValue<IkReal> x4428=IKPowWithIntegerCheck(IKsign(((new_r12*new_r12)+(new_r02*new_r02))),-1);
if(!x4428.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x4427.value)+(((1.5707963267949)*(x4428.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[21];
IkReal x4429=IKcos(j2);
IkReal x4430=IKsin(j2);
IkReal x4431=((1.0)*cj0);
IkReal x4432=((0.433010506600939)*new_r01);
IkReal x4433=((0.75000087746404)*cj1);
IkReal x4434=((0.49999820135573)*sj1);
IkReal x4435=((0.866026442229025)*sj1);
IkReal x4436=((0.433010506600939)*new_r11);
IkReal x4437=((0.433010506600939)*sj0);
IkReal x4438=((0.433010506600939)*sj1);
IkReal x4439=((0.500000584976027)*sj1);
IkReal x4440=((0.75000087746404)*new_r10);
IkReal x4441=((0.433010506600939)*new_r12);
IkReal x4442=((0.49999820135573)*cj1);
IkReal x4443=((0.75000087746404)*sj1);
IkReal x4444=((0.500000584976027)*cj1);
IkReal x4445=((0.866026442229025)*cj1);
IkReal x4446=((1.08253441393799e-6)*cj1);
IkReal x4447=((0.433010506600939)*cj1);
IkReal x4448=((1.08253441393799e-6)*sj1);
IkReal x4449=(cj1*x4430);
IkReal x4450=(new_r02*x4429);
IkReal x4451=(sj0*x4430);
IkReal x4452=(new_r00*x4430);
IkReal x4453=(new_r11*x4430);
IkReal x4454=(new_r01*x4429);
IkReal x4455=(new_r10*x4429);
IkReal x4456=(new_r01*x4430);
IkReal x4457=(cj0*x4429);
IkReal x4458=(cj0*x4430);
IkReal x4459=(sj1*x4429);
IkReal x4460=(cj1*x4429);
IkReal x4461=(new_r02*x4430);
IkReal x4462=(new_r11*x4429);
IkReal x4463=(sj0*x4429);
IkReal x4464=(new_r12*x4429);
IkReal x4465=(new_r12*x4430);
IkReal x4466=(new_r10*x4430);
IkReal x4467=(sj1*x4430);
IkReal x4468=(new_r00*x4429);
evalcond[0]=(x4438+x4464+x4461+(((-1.0)*x4445)));
evalcond[1]=(x4442+x4443+x4450+(((-1.0)*x4465)));
evalcond[2]=(x4452+x4455+(((-1.0)*cj0*x4447))+(((0.250000205066586)*sj0))+(((-1.0)*cj0*x4435)));
evalcond[3]=((((-0.250000205066586)*cj0))+(((-1.0)*sj0*x4435))+x4456+x4462+(((-1.0)*cj1*x4437)));
evalcond[4]=(x4468+(((-1.0)*x4466))+((cj0*x4434))+(((0.433013258970445)*sj0))+(((-1.0)*cj0*x4433)));
evalcond[5]=((((-1.0)*sj0*x4433))+x4454+(((-1.0)*x4453))+(((-0.433013258970445)*cj0))+((sj0*x4434)));
evalcond[6]=(((x4429*x4442))+((x4429*x4443))+(((-1.0)*x4430*x4445))+((x4430*x4438))+new_r02);
evalcond[7]=(((x4429*x4438))+(((-1.0)*x4430*x4442))+(((-1.0)*x4430*x4443))+(((-1.0)*x4429*x4445))+new_r12);
evalcond[8]=((((0.250000205066586)*x4461))+(((0.250000205066586)*x4464))+(((-0.433013258970445)*x4465))+(((0.433013258970445)*x4450))+(((-0.866025066047432)*new_r22)));
evalcond[9]=(sj0+(((-0.433013258970445)*x4466))+(((-0.866025066047432)*new_r20))+(((0.433013258970445)*x4468))+(((0.250000205066586)*x4455))+(((0.250000205066586)*x4452)));
evalcond[10]=((((-0.433013258970445)*x4453))+(((-1.0)*x4431))+(((0.250000205066586)*x4462))+(((0.433013258970445)*x4454))+(((-0.866025066047432)*new_r21))+(((0.250000205066586)*x4456)));
evalcond[11]=((((-1.0)*x4433*x4457))+(((-1.0)*x4435*x4458))+((x4434*x4457))+(((-1.0)*x4447*x4458))+(((0.433013258970445)*x4463))+new_r00+(((0.250000205066586)*x4451)));
evalcond[12]=((((-1.0)*x4433*x4463))+(((-0.433013258970445)*x4457))+(((-1.0)*x4435*x4451))+((x4434*x4463))+new_r01+(((-1.0)*x4437*x4449))+(((-0.250000205066586)*x4458)));
evalcond[13]=((((-1.0)*x4434*x4458))+(((-0.433013258970445)*x4451))+(((0.250000205066586)*x4463))+(((-1.0)*x4435*x4457))+(((-1.0)*x4447*x4457))+new_r10+((x4433*x4458)));
evalcond[14]=((((-1.0)*x4435*x4463))+(((-1.0)*x4434*x4451))+(((-1.0)*x4437*x4460))+(((0.433013258970445)*x4458))+new_r11+(((-0.250000205066586)*x4457))+((x4433*x4451)));
evalcond[15]=(((new_r22*x4448))+((new_r22*x4444))+(((-1.0)*x4434*x4450))+(((-1.0)*x4433*x4465))+((x4435*x4464))+((x4435*x4461))+((x4447*x4461))+((x4434*x4465))+((x4441*x4460))+((x4433*x4450)));
evalcond[16]=(((new_r20*x4439))+(((-1.0)*new_r20*x4446))+(((-1.0)*x4440*x4467))+(((-1.0)*x4442*x4466))+((x4438*x4455))+((x4438*x4452))+((x4443*x4468))+((x4442*x4468))+(((-1.0)*x4445*x4452))+(((-1.0)*x4445*x4455)));
evalcond[17]=((((-1.0)*x4443*x4453))+(((-1.0)*x4445*x4462))+((x4442*x4454))+(((-1.0)*new_r21*x4446))+((new_r21*x4439))+((x4436*x4459))+(((-1.0)*x4442*x4453))+((x4443*x4454))+((x4432*x4467))+(((-1.0)*x4445*x4456)));
evalcond[18]=((1.0)+(((-1.0)*x4443*x4465))+((x4438*x4461))+((x4438*x4464))+((new_r22*x4439))+(((-1.0)*new_r22*x4446))+(((-1.0)*x4445*x4464))+(((-1.0)*x4445*x4461))+((x4442*x4450))+(((-1.0)*x4442*x4465))+((x4443*x4450)));
evalcond[19]=((((-1.0)*x4433*x4466))+((x4435*x4452))+((x4435*x4455))+(((-1.0)*x4431))+((new_r20*x4444))+((new_r20*x4448))+(((-1.0)*x4434*x4468))+((x4434*x4466))+((x4433*x4468))+((x4447*x4452))+((x4447*x4455)));
evalcond[20]=((((-1.0)*x4434*x4454))+(((-1.0)*sj0))+((x4435*x4456))+((x4435*x4462))+((new_r21*x4444))+((new_r21*x4448))+(((-1.0)*x4433*x4453))+((x4434*x4453))+((x4436*x4460))+((x4432*x4449))+((x4433*x4454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[18]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[19]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[20]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - KUKA_R800_fixed_q3 (b9b18eac503776bc25dd6b837bdffd4b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
