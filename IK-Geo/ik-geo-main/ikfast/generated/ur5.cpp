/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-03-03 19:03:52.006227
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((0.3922)*x2);
x13=((1.0)*x5);
x14=((0.0946)*x4);
x15=((1.0)*x2);
x16=((1.0)*x6);
x17=((0.0823)*x5);
x18=((0.0946)*x2);
x19=((0.0823)*x6);
x20=((1.0)*x4);
x21=(x0*x1);
x22=(x1*x9);
x23=(x3*x4);
x24=(x3*x9);
x25=(x0*x3);
x26=(x1*x4);
x27=(x0*x7);
x28=(x0*x8);
x29=(x8*x9);
x30=(x20*x25);
x31=(x20*x24);
x32=((((-1.0)*x1*x15))+x23);
x33=(((x1*x20))+((x15*x3)));
x34=((-1.0)*x33);
x35=(x32*x6);
x36=((((-1.0)*x30))+((x2*x21)));
x37=((((-1.0)*x31))+((x2*x22)));
x38=((((-1.0)*x15*x21))+x30);
x39=((((-1.0)*x15*x22))+x31);
x40=((((-1.0)*x15*x25))+(((-1.0)*x20*x21)));
x41=((((-1.0)*x15*x24))+(((-1.0)*x20*x22)));
x42=(x38*x6);
x43=(x39*x6);
x44=(x41*x5);
x45=(((x34*x5))+x35);
x46=(x45*x8);
x47=(((x40*x6))+((x36*x5)));
x48=(((x41*x6))+((x37*x5)));
x49=(x48*x8);
x50=(((x7*x9))+((x47*x8)));
eerot[0]=(((x10*x50))+((x11*((x42+((x40*x5)))))));
eerot[1]=(((x47*x7))+(((-1.0)*x29)));
eerot[2]=(((x11*x50))+((x10*(((((-1.0)*x16*x38))+(((-1.0)*x13*x40)))))));
IkReal x51=((1.0)*x18);
eetrans[0]=((((-0.0823)*x29))+(((-0.3922)*x0*x23))+((x5*(((((-1.0)*x25*x51))+(((-1.0)*x14*x21))))))+(((-0.1091)*x9))+((x12*x21))+((x7*((((x19*x40))+((x17*x36))))))+((x6*((((x14*x25))+(((-1.0)*x21*x51))))))+(((0.425)*x21)));
eerot[3]=(((x11*((x44+x43))))+((x10*(((((-1.0)*x27))+x49)))));
eerot[4]=(x28+((x48*x7)));
eerot[5]=(((x11*(((((-1.0)*x27))+x49))))+((x10*(((((-1.0)*x43))+(((-1.0)*x44)))))));
IkReal x52=((1.0)*x18);
eetrans[1]=(((x5*(((((-1.0)*x24*x52))+(((-1.0)*x14*x22))))))+(((-0.3922)*x23*x9))+(((0.1091)*x0))+((x7*((((x19*x41))+((x17*x37))))))+((x12*x22))+(((0.0823)*x28))+(((0.425)*x22))+((x6*((((x14*x24))+(((-1.0)*x22*x52)))))));
eerot[6]=(((x10*x46))+((x11*((((x32*x5))+((x33*x6)))))));
eerot[7]=(x45*x7);
eerot[8]=(((x10*(((((-1.0)*x16*x33))+(((-1.0)*x13*x32))))))+((x11*x46)));
eetrans[2]=((0.089159)+((x7*((((x19*x32))+((x17*x34))))))+(((-1.0)*x12*x3))+((x5*(((((-1.0)*x1*x18))+((x14*x3))))))+(((-0.425)*x3))+(((-0.3922)*x26))+((x6*((((x18*x3))+((x1*x14)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=(px+(((-0.0823)*r01)));
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=((((-0.0823)*r11))+py);
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.089159)+pz+(((-0.0823)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*px);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x55))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x53))+((py*r00)));
rxp1_0=((((-1.0)*r21*x55))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=((((-1.0)*r11*x53))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x55)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x54)));
rxp2_2=((((-1.0)*r12*x53))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x56=((0.0946)*r20);
IkReal x57=((0.0946)*r21);
IkReal x58=((0.0946)*r22);
IkReal x59=((-0.1892)*npx);
IkReal x60=((-0.1892)*npy);
IkReal x61=((-1.0)*npz);
IkReal x62=((-1.0)*r21);
IkReal x63=((-1.0)*npy);
IkReal x64=((-0.0946)*r21);
IkReal x65=((-1.0)*rxp0_2);
IkReal x66=((-1.0)*r22);
IkReal x67=((-0.0946)*r22);
IkReal x68=((-1.0)*rxp1_2);
IkReal x69=((-1.0)*npx);
matrixinvcoeffs[0]=x56;
matrixinvcoeffs[1]=x59;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=r20;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x69;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=rxp0_2;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x56;
matrixinvcoeffs[19]=x59;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=npx;
matrixinvcoeffs[26]=((-1.0)*r20);
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x65;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x57;
matrixinvcoeffs[33]=x60;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=r21;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=x63;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=rxp1_2;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x57;
matrixinvcoeffs[51]=x60;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=npy;
matrixinvcoeffs[58]=x62;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x68;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=x61;
matrixinvcoeffs[74]=r22;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x58;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=rxp2_2;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=r22;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x61;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x58;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=x62;
matrixinvcoeffs[101]=x63;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp1_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x64;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=x62;
matrixinvcoeffs[119]=x63;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp1_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x64;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=r20;
matrixinvcoeffs[133]=npx;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x65;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x56;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=r20;
matrixinvcoeffs[151]=npx;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x65;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x56;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x66;
matrixinvcoeffs[165]=x61;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x67;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x66;
matrixinvcoeffs[183]=x61;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x67;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=npy;
matrixinvcoeffs[202]=x62;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x64;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x68;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=x62;
matrixinvcoeffs[217]=0;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=npy;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x64;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=x68;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=x69;
matrixinvcoeffs[234]=r20;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x56;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=r20;
matrixinvcoeffs[249]=0;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x69;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x56;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=rxp0_2;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_9=matrixinvcoeffs[148], gclwh4_10=matrixinvcoeffs[164], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_8=matrixinvcoeffs[133], gclwh5_11=matrixinvcoeffs[181], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_8=matrixinvcoeffs[139], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_8=matrixinvcoeffs[141], gclwh13_11=matrixinvcoeffs[189], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_8=matrixinvcoeffs[143], gclwh15_11=matrixinvcoeffs[191], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x70=pz*pz;
IkReal x71=pp*pp;
IkReal x72=((0.1892)*pz);
IkReal x73=(gclwh14_9*rxp0_2);
IkReal x74=((0.00620576)*rxp1_2);
IkReal x75=(npy*pz);
IkReal x76=((0.1892)*rxp0_2);
IkReal x77=(gclwh12_3*pp);
IkReal x78=((0.1892)*rxp1_2);
IkReal x79=(gclwh5_11*r22);
IkReal x80=((2.0)*gclwh6_10);
IkReal x81=(npx*pz);
IkReal x82=((4.0)*gclwh6_10);
IkReal x83=(gclwh15_11*r20);
IkReal x84=(gclwh12_9*r21);
IkReal x85=((0.01789832)*r22);
IkReal x86=(pp*r20);
IkReal x87=(gclwh0_0*pz);
IkReal x88=((0.0328)*pp);
IkReal x89=(gclwh4_9*r22);
IkReal x90=(gclwh2_1*pp);
IkReal x91=(gclwh13_15*r21);
IkReal x92=((0.85)*pp);
IkReal x93=(gclwh13_0*r21);
IkReal x94=((0.02064172)*rxp1_2);
IkReal x95=(gclwh14_2*pz);
IkReal x96=((0.001952706712)*r20);
IkReal x97=(pp*r21);
IkReal x98=(gclwh8_10*r20);
IkReal x99=(gclwh13_0*rxp1_2);
IkReal x100=((0.01241152)*rxp0_2);
IkReal x101=((0.1892)*rxp2_2);
IkReal x102=(gclwh11_13*r22);
IkReal x103=(npz*pz);
IkReal x104=((0.00894916)*r21);
IkReal x105=(gclwh12_2*pz);
IkReal x106=((0.000976353356)*r22);
IkReal x107=(gclwh14_3*r20);
IkReal x108=((4.0)*gclwh8_10);
IkReal x109=(gclwh13_1*rxp1_2);
IkReal x110=((0.00894916)*r20);
IkReal x111=((0.14840848)*rxp2_2);
IkReal x112=(gclwh13_1*pp);
IkReal x113=((0.7844)*pp);
IkReal x114=((0.007313253552)*r20);
IkReal x115=((2.0)*gclwh8_10);
IkReal x116=((1.5688)*pp);
IkReal x117=((1.0)*pp);
IkReal x118=((2.0)*pp);
IkReal x119=(gclwh4_10*r22);
IkReal x120=((4.0)*gclwh11_8);
IkReal x121=(gclwh5_11*rxp2_2);
IkReal x122=(gclwh10_10*r22);
IkReal x123=((0.30922848)*rxp0_2);
IkReal x124=(gclwh0_1*r20);
IkReal x125=(gclwh6_2*pz);
IkReal x126=((0.0946)*pp);
IkReal x127=(gclwh15_11*rxp0_2);
IkReal x128=(gclwh10_2*r22);
IkReal x129=(gclwh9_0*pz);
IkReal x130=((0.2182)*gclwh5_15);
IkReal x131=((0.014626507104)*r20);
IkReal x132=((0.000976353356)*r20);
IkReal x133=((0.000293532448)*r21);
IkReal x134=((0.2182)*gclwh14_14);
IkReal x135=(gclwh4_2*r22);
IkReal x136=(gclwh4_14*rxp2_2);
IkReal x137=((0.014626507104)*r21);
IkReal x138=(gclwh13_8*rxp1_2);
IkReal x139=((0.03579664)*r21);
IkReal x140=(gclwh9_8*r20);
IkReal x141=(gclwh14_9*r20);
IkReal x142=(gclwh12_9*rxp1_2);
IkReal x143=((0.14840848)*rxp0_2);
IkReal x144=((0.007019721104)*r21);
IkReal x145=((1.0)*pz);
IkReal x146=((2.0)*gclwh7_8);
IkReal x147=(gclwh5_0*r22);
IkReal x148=(gclwh10_12*r22);
IkReal x149=((0.2182)*gclwh12_14);
IkReal x150=(gclwh13_11*r21);
IkReal x151=(pp*r22);
IkReal x152=((0.3784)*rxp0_2);
IkReal x153=(gclwh11_13*rxp2_2);
IkReal x154=((2.0)*gclwh13_8);
IkReal x155=(gclwh8_12*rxp0_2);
IkReal x156=((0.01789832)*r21);
IkReal x157=((0.30922848)*rxp2_2);
IkReal x158=((3.60605507284e-5)*r21);
IkReal x159=((0.30922848)*rxp1_2);
IkReal x160=(gclwh4_3*rxp2_2);
IkReal x161=((0.00894916)*pz);
IkReal x162=((0.126909587508)*rxp0_2);
IkReal x163=((0.007019721104)*r20);
IkReal x164=((0.04128344)*rxp0_2);
IkReal x165=(gclwh5_15*rxp2_2);
IkReal x166=((2.0)*gclwh9_8);
IkReal x167=((0.3784)*rxp2_2);
IkReal x168=(gclwh15_0*pz);
IkReal x169=(gclwh13_11*rxp1_2);
IkReal x170=(gclwh4_3*r22);
IkReal x171=((0.7568)*rxp0_2);
IkReal x172=(gclwh8_2*pz);
IkReal x173=(gclwh6_12*r21);
IkReal x174=((2.0)*gclwh14_10);
IkReal x175=(gclwh11_0*r22);
IkReal x176=(gclwh9_13*rxp0_2);
IkReal x177=((0.08256688)*rxp1_2);
IkReal x178=((0.8172)*pp);
IkReal x179=(gclwh1_3*r20);
IkReal x180=((2.0)*gclwh15_8);
IkReal x181=(gclwh5_1*rxp2_2);
IkReal x182=(gclwh5_8*r22);
IkReal x183=((0.2182)*gclwh15_15);
IkReal x184=((0.2182)*gclwh4_14);
IkReal x185=((0.04128344)*rxp1_2);
IkReal x186=((0.01241152)*rxp2_2);
IkReal x187=((1.6344)*pp);
IkReal x188=((0.14840848)*rxp1_2);
IkReal x189=((0.15461424)*rxp2_2);
IkReal x190=((4.0)*gclwh7_8);
IkReal x191=(pp*pz);
IkReal x192=(gclwh15_1*r20);
IkReal x193=((0.000976353356)*r21);
IkReal x194=(gclwh11_8*r22);
IkReal x195=(gclwh13_1*r21);
IkReal x196=((0.00620576)*rxp2_2);
IkReal x197=((0.000762379508)*rxp0_2);
IkReal x198=(gclwh11_0*pz);
IkReal x199=((0.000587064896)*r21);
IkReal x200=((0.001952706712)*r22);
IkReal x201=((2.0)*gclwh12_10);
IkReal x202=(gclwh12_3*rxp1_2);
IkReal x203=(gclwh2_0*pz);
IkReal x204=(gclwh15_15*rxp0_2);
IkReal x205=((0.01789832)*r20);
IkReal x206=(gclwh5_1*r22);
IkReal x207=((0.02064172)*rxp2_2);
IkReal x208=(gclwh2_1*r21);
IkReal x209=(gclwh3_3*r21);
IkReal x210=(gclwh7_13*r21);
IkReal x211=((0.7568)*rxp2_2);
IkReal x212=((0.02064172)*rxp0_2);
IkReal x213=(gclwh12_10*rxp1_2);
IkReal x214=(gclwh4_9*rxp2_2);
IkReal x215=((0.15461424)*rxp1_2);
IkReal x216=(gclwh9_13*r20);
IkReal x217=(gclwh12_3*r21);
IkReal x218=(gclwh7_0*pz);
IkReal x219=((4.0)*gclwh9_8);
IkReal x220=(gclwh8_12*r20);
IkReal x221=((0.000587064896)*r20);
IkReal x222=((0.3784)*rxp1_2);
IkReal x223=(gclwh8_5*x132);
IkReal x224=((0.02064172)*x136);
IkReal x225=(gclwh14_14*x212);
IkReal x226=(gclwh12_14*x94);
IkReal x227=(gclwh6_5*x193);
IkReal x228=(gclwh10_5*x106);
IkReal x229=(gclwh12_10*x78);
IkReal x230=((0.01789832)*x142);
IkReal x231=(gclwh6_10*x104);
IkReal x232=((0.00894916)*x122);
IkReal x233=((0.01789832)*x214);
IkReal x234=(gclwh14_10*x76);
IkReal x235=(gclwh4_10*x101);
IkReal x236=((0.01789832)*x73);
IkReal x237=((0.00894916)*x98);
IkReal x238=((0.00894916)*x194);
IkReal x239=(gclwh7_8*x104);
IkReal x240=((0.01789832)*x127);
IkReal x241=((0.01789832)*x121);
IkReal x242=(gclwh13_8*x78);
IkReal x243=(gclwh15_8*x76);
IkReal x244=((0.01789832)*x169);
IkReal x245=(gclwh5_8*x101);
IkReal x246=(gclwh9_8*x110);
IkReal x247=(gclwh13_15*x94);
IkReal x248=(gclwh9_7*x132);
IkReal x249=((0.02064172)*x204);
IkReal x250=(gclwh7_7*x193);
IkReal x251=((0.02064172)*x165);
IkReal x252=(gclwh11_7*x106);
IkReal x253=(gclwh12_14*x193);
IkReal x254=(gclwh8_5*x212);
IkReal x255=(gclwh4_14*x106);
IkReal x256=(gclwh6_5*x94);
IkReal x257=(gclwh10_5*x207);
IkReal x258=(gclwh14_14*x132);
IkReal x259=((0.000846590536)*x89);
IkReal x260=((0.000846590536)*x141);
IkReal x261=(gclwh14_10*x110);
IkReal x262=((0.00894916)*x119);
IkReal x263=(gclwh6_10*x78);
IkReal x264=(gclwh10_10*x101);
IkReal x265=(gclwh8_10*x76);
IkReal x266=((0.000846590536)*x84);
IkReal x267=(gclwh12_10*x104);
IkReal x268=((0.000846590536)*x150);
IkReal x269=(gclwh15_8*x110);
IkReal x270=(gclwh7_8*x78);
IkReal x271=((0.00894916)*x182);
IkReal x272=(gclwh11_8*x101);
IkReal x273=(gclwh13_8*x104);
IkReal x274=((0.000846590536)*x83);
IkReal x275=(gclwh9_8*x76);
IkReal x276=((0.000846590536)*x79);
IkReal x277=(gclwh5_15*x106);
IkReal x278=(gclwh9_7*x212);
IkReal x279=(gclwh15_15*x132);
IkReal x280=(gclwh11_7*x207);
IkReal x281=((0.000976353356)*x91);
IkReal x282=(gclwh7_7*x94);
IkReal x283=(gclwh14_10*x152);
IkReal x284=((0.01789832)*x98);
IkReal x285=(gclwh4_10*x167);
IkReal x286=(gclwh14_14*x164);
IkReal x287=((0.04128344)*x136);
IkReal x288=(gclwh12_14*x185);
IkReal x289=((0.3784)*x213);
IkReal x290=(gclwh6_10*x156);
IkReal x291=(gclwh10_10*x85);
IkReal x292=((0.04128344)*x165);
IkReal x293=(gclwh15_15*x164);
IkReal x294=(gclwh13_15*x185);
IkReal x295=(gclwh11_8*x85);
IkReal x296=((0.3784)*x138);
IkReal x297=(gclwh7_8*x156);
IkReal x298=((0.01789832)*x140);
IkReal x299=(gclwh15_8*x152);
IkReal x300=(gclwh5_8*x167);
IkReal x301=(gclwh12_10*x156);
IkReal x302=(gclwh8_10*x152);
IkReal x303=((0.001952706712)*gclwh12_14*r21);
IkReal x304=(gclwh4_14*x200);
IkReal x305=(gclwh14_14*x96);
IkReal x306=((2.0)*x70);
IkReal x307=((1.0)*x71);
IkReal x308=((0.1091)*gclwh8_5*x86);
IkReal x309=((0.2182)*gclwh10_5*x103);
IkReal x310=((0.2182)*gclwh6_5*x75);
IkReal x311=((0.1091)*gclwh6_5*x97);
IkReal x312=((0.1091)*gclwh10_5*x151);
IkReal x313=((0.2182)*gclwh8_5*x81);
IkReal x314=(gclwh4_3*pp*x101);
IkReal x315=(x104*x125);
IkReal x316=(x125*x97);
IkReal x317=(gclwh12_2*rxp1_2*x72);
IkReal x318=(x115*x81);
IkReal x319=(x128*x161);
IkReal x320=(gclwh14_3*pp*x76);
IkReal x321=(x128*x191);
IkReal x322=(x75*x80);
IkReal x323=(gclwh14_2*rxp0_2*x72);
IkReal x324=(x110*x172);
IkReal x325=((2.0)*gclwh10_10*x103);
IkReal x326=(gclwh4_2*rxp2_2*x72);
IkReal x327=(x77*x78);
IkReal x328=(x72*x99);
IkReal x329=(x218*x97);
IkReal x330=(x151*x198);
IkReal x331=(x161*x175);
IkReal x332=(x166*x81);
IkReal x333=(gclwh15_1*pp*x76);
IkReal x334=(gclwh5_1*pp*x101);
IkReal x335=(x104*x218);
IkReal x336=(gclwh15_0*rxp0_2*x72);
IkReal x337=((2.0)*gclwh11_8*x103);
IkReal x338=(x146*x75);
IkReal x339=(x112*x78);
IkReal x340=(x110*x129);
IkReal x341=(gclwh5_0*rxp2_2*x72);
IkReal x342=((0.1091)*gclwh9_7*x86);
IkReal x343=((0.2182)*gclwh11_7*x103);
IkReal x344=((0.2182)*gclwh7_7*x75);
IkReal x345=((0.2182)*gclwh9_7*x81);
IkReal x346=((0.1091)*gclwh7_7*x97);
IkReal x347=((0.1091)*gclwh11_7*x151);
IkReal x348=(x103*x184);
IkReal x349=(x134*x81);
IkReal x350=((0.1091)*gclwh12_14*x97);
IkReal x351=((0.1091)*gclwh4_14*x151);
IkReal x352=((0.1091)*gclwh14_14*x86);
IkReal x353=(x149*x75);
IkReal x354=(x201*x75);
IkReal x355=(gclwh12_9*npy*x72);
IkReal x356=(x86*x95);
IkReal x357=(x126*x89);
IkReal x358=(x217*x71);
IkReal x359=((0.0946)*gclwh14_9*x86);
IkReal x360=(gclwh6_2*rxp1_2*x72);
IkReal x361=(gclwh10_2*rxp2_2*x72);
IkReal x362=(x209*x71);
IkReal x363=(x179*x71);
IkReal x364=(gclwh3_2*pz*x104);
IkReal x365=(x135*x161);
IkReal x366=(x110*x95);
IkReal x367=(x135*x191);
IkReal x368=(gclwh1_2*pz*x110);
IkReal x369=(gclwh14_9*npx*x72);
IkReal x370=(x174*x81);
IkReal x371=(gclwh4_9*npz*x72);
IkReal x372=(x126*x84);
IkReal x373=(gclwh8_2*rxp0_2*x72);
IkReal x374=(x104*x105);
IkReal x375=((2.0)*gclwh4_10*x103);
IkReal x376=(x168*x86);
IkReal x377=(x195*x71);
IkReal x378=(x154*x75);
IkReal x379=(x147*x191);
IkReal x380=(x203*x97);
IkReal x381=(x86*x87);
IkReal x382=(gclwh5_11*npz*x72);
IkReal x383=(x110*x168);
IkReal x384=(gclwh7_0*rxp1_2*x72);
IkReal x385=(x147*x161);
IkReal x386=((0.0946)*gclwh13_11*x97);
IkReal x387=(gclwh15_11*npx*x72);
IkReal x388=(gclwh11_0*rxp2_2*x72);
IkReal x389=(x110*x87);
IkReal x390=(gclwh9_0*rxp0_2*x72);
IkReal x391=(x161*x93);
IkReal x392=(x126*x79);
IkReal x393=(gclwh13_11*npy*x72);
IkReal x394=((2.0)*gclwh5_8*x103);
IkReal x395=(x104*x203);
IkReal x396=(x126*x83);
IkReal x397=(x180*x81);
IkReal x398=((0.1091)*gclwh15_15*x86);
IkReal x399=((0.2182)*gclwh13_15*x75);
IkReal x400=((0.1091)*gclwh5_15*x151);
IkReal x401=(x103*x130);
IkReal x402=(x183*x81);
IkReal x403=((0.1091)*pp*x91);
IkReal x404=(x75*x82);
IkReal x405=((4.0)*gclwh10_10*x103);
IkReal x406=(x115*x86);
IkReal x407=(x80*x97);
IkReal x408=(x108*x81);
IkReal x409=(x118*x122);
IkReal x410=(x219*x81);
IkReal x411=(x146*x97);
IkReal x412=(x118*x194);
IkReal x413=(x190*x75);
IkReal x414=(x103*x120);
IkReal x415=(x166*x86);
IkReal x416=(x201*x97);
IkReal x417=((4.0)*gclwh14_10*x81);
IkReal x418=((4.0)*gclwh4_10*x103);
IkReal x419=(x149*x97);
IkReal x420=((0.4364)*gclwh14_14*x81);
IkReal x421=((0.4364)*gclwh4_14*x103);
IkReal x422=(x151*x184);
IkReal x423=((0.4364)*gclwh12_14*x75);
IkReal x424=(x134*x86);
IkReal x425=(gclwh8_2*npx*x306);
IkReal x426=(gclwh6_2*npy*x306);
IkReal x427=(gclwh8_2*x145*x86);
IkReal x428=(gclwh10_2*npz*x306);
IkReal x429=(gclwh9_0*npx*x306);
IkReal x430=((1.0)*x129*x86);
IkReal x431=(gclwh11_0*npz*x306);
IkReal x432=(gclwh7_0*npy*x306);
IkReal x433=(gclwh12_2*npy*x306);
IkReal x434=(gclwh3_2*npy*x306);
IkReal x435=(gclwh4_3*x103*x118);
IkReal x436=(gclwh1_2*npx*x306);
IkReal x437=(gclwh14_3*x118*x81);
IkReal x438=((1.0)*x105*x97);
IkReal x439=(gclwh1_2*x145*x86);
IkReal x440=(gclwh3_3*x118*x75);
IkReal x441=(gclwh1_3*x118*x81);
IkReal x442=(gclwh4_2*npz*x306);
IkReal x443=(gclwh3_2*x145*x97);
IkReal x444=(x170*x307);
IkReal x445=((2.0)*x75*x77);
IkReal x446=(gclwh14_2*npx*x306);
IkReal x447=(x107*x307);
IkReal x448=((2.0)*x75*x90);
IkReal x449=(gclwh0_1*x118*x81);
IkReal x450=(gclwh13_0*npy*x306);
IkReal x451=(gclwh5_1*x103*x118);
IkReal x452=(gclwh15_1*x118*x81);
IkReal x453=(gclwh5_0*npz*x306);
IkReal x454=(gclwh0_0*npx*x306);
IkReal x455=(gclwh2_0*npy*x306);
IkReal x456=(x124*x307);
IkReal x457=((2.0)*x112*x75);
IkReal x458=(x208*x307);
IkReal x459=(x192*x307);
IkReal x460=(gclwh15_0*npx*x306);
IkReal x461=(x206*x307);
IkReal x462=(pz*x117*x93);
IkReal x463=(x251+x249);
IkReal x464=(x225+x224);
IkReal x465=(x292+x293);
IkReal x466=(x256+x257);
IkReal x467=(x282+x280);
IkReal x468=(x287+x286);
IkReal x469=(x332+x238+x239+x242);
IkReal x470=(x318+x229+x232+x231);
IkReal x471=(x394+x397+x275+x273);
IkReal x472=(x375+x370+x265+x267);
IkReal x473=(x303+x419+x421+x420);
IkReal x474=(x342+x343+x344+x248);
IkReal x475=(x308+x309+x310+x223);
IkReal x476=(x350+x348+x349+x253);
IkReal x477=(x281+x401+x403+x402);
IkReal x478=(x354+x264+x261+x263+x262);
IkReal x479=(x378+x269+x272+x270+x271);
IkReal x480=(x338+x337+x243+x246+x245);
IkReal x481=(x325+x322+x237+x234+x235);
IkReal x482=(x302+x301+x416+x417+x418);
IkReal x483=(x304+x305+x424+x423+x422);
IkReal x484=(x399+x398+x277+x279+x400);
IkReal x485=(x351+x353+x352+x258+x255);
IkReal x486=(x346+x347+x345+x250+x252);
IkReal x487=(x311+x313+x312+x228+x227);
IkReal x488=(x290+x291+x289+x407+x409+x408);
IkReal x489=(x300+x298+x299+x413+x414+x415);
IkReal x490=(x295+x296+x297+x412+x410+x411);
IkReal x491=(x285+x284+x283+x405+x404+x406);
IkReal x492=(((gclwh14_10*x205))+((gclwh6_10*x222))+((x174*x86))+(((4.0)*gclwh12_10*x75))+((gclwh10_10*x167))+((gclwh4_10*x85))+((x118*x119)));
IkReal x493=(x339+x336+x340+x341+x244+x430+x431+x432);
IkReal x494=(x320+x321+x319+x315+x314+x317+x316+x230+x425);
IkReal x495=(x324+x326+x327+x323+x233+x236+x428+x427+x426);
IkReal x496=(x333+x331+x330+x335+x334+x328+x329+x241+x240+x429);
IkReal x497=(x374+x373+x372+x371+x369+x266+x438+x439+x445+x444+x447+x446+x441+x440+x443+x442+x72);
IkReal x498=(x386+x387+x384+x385+x382+x383+x380+x381+x388+x379+x377+x376+x268+x449+x448+x452+x450+x451+x72);
IkReal x499=(x389+x395+x396+x391+x390+x393+x392+x276+x274+x458+x459+x456+x457+x454+x455+x453+x462+x461+x460);
IkReal x500=(x355+x357+x356+x359+x358+x368+x360+x361+x362+x363+x364+x365+x366+x367+x259+x260+x433+x434+x435+x436+x437);
op[0]=(((gclwh8_12*x114))+(((-1.6344)*gclwh8_12*x81))+(((-1.0)*x487))+(((-1.0)*x464))+((gclwh4_9*x189))+(((0.8172)*gclwh8_12*x86))+x226+x475+(((-0.007313253552)*x173))+(((-0.8172)*gclwh6_12*x97))+(((-0.15461424)*x142))+(((-0.007313253552)*x148))+(((-1.0)*x148*x178))+(((1.6344)*gclwh10_12*x103))+(((1.6344)*gclwh6_12*x75))+(((0.15461424)*x73)));
op[1]=((((-1.0)*x495))+((gclwh8_10*x86))+(((-0.126909587508)*x160))+(((-1.0)*gclwh6_10*x97))+(((-1.0)*x470))+(((-1.0)*x117*x122))+(((-1.0)*gclwh14_3*x162))+x481+x494+(((0.126909587508)*x202)));
op[2]=((-0.17115608)+(((-1.0)*x488))+x491);
op[3]=((((0.7844)*gclwh6_2*x97))+(((-1.0)*gclwh4_2*x111))+(((-0.16082)*x73))+(((-1.0)*gclwh14_2*x143))+(((-0.16082)*x214))+((x113*x128))+(((0.16082)*x142))+x468+(((-0.7844)*gclwh8_2*x86))+(((-1.5688)*gclwh10_2*x103))+(((-1.5688)*gclwh6_2*x75))+(((-1.0)*x288))+(((1.5688)*gclwh8_2*x81))+((gclwh12_2*x188))+((gclwh6_2*x144))+(((0.007019721104)*x128))+(((-1.0)*gclwh8_2*x163)));
op[4]=((((-1.0)*x148*x88))+(((0.0656)*gclwh6_12*x75))+(((-0.000293532448)*x148))+((gclwh12_9*x74))+(((0.0328)*gclwh8_12*x86))+(((-1.0)*x487))+(((0.000293532448)*x220))+(((-1.0)*gclwh6_12*x133))+(((0.0656)*gclwh10_12*x103))+(((-0.00620576)*x73))+(((-1.0)*x173*x88))+x464+x475+(((-0.0656)*gclwh8_12*x81))+(((-1.0)*x226))+(((-1.0)*gclwh4_9*x196)));
op[5]=((((-1.0)*x495))+(((-1.0)*gclwh8_10*x86))+(((-1.0)*x481))+(((0.000762379508)*x202))+((pp*x122))+((gclwh6_10*x97))+x494+x470+(((-1.0)*gclwh14_3*x197))+(((-0.000762379508)*x160)));
op[6]=((((-1.0)*x493))+(((-1.0)*gclwh7_8*x97))+(((-0.126909587508)*x181))+(((-1.0)*x469))+(((-1.0)*x117*x194))+x480+x496+(((0.126909587508)*x109))+(((-1.0)*gclwh15_1*x162))+((gclwh9_8*x86)));
op[7]=((((-1.6344)*gclwh9_13*x81))+(((1.6344)*gclwh7_13*x75))+(((-1.0)*x486))+(((-0.007313253552)*x210))+((gclwh9_13*x114))+(((0.8172)*gclwh9_13*x86))+x463+x474+(((0.15461424)*x169))+(((-0.8172)*gclwh7_13*x97))+(((-1.0)*x102*x178))+(((-0.15461424)*x121))+(((-0.15461424)*x127))+(((-1.0)*x247))+(((1.6344)*gclwh11_13*x103))+(((-0.007313253552)*x102)));
op[8]=(((gclwh7_0*x144))+(((-0.16082)*x121))+(((-0.16082)*x127))+(((-0.7844)*gclwh9_0*x86))+((x113*x175))+(((-1.0)*gclwh9_0*x163))+(((-1.0)*x294))+(((-1.5688)*gclwh7_0*x75))+(((-1.0)*gclwh5_0*x111))+(((0.16082)*x169))+(((0.7844)*gclwh7_0*x97))+(((1.5688)*gclwh9_0*x81))+(((0.14840848)*x99))+x465+(((0.007019721104)*x175))+(((-1.0)*gclwh15_0*x143))+(((-1.5688)*gclwh11_0*x103)));
op[9]=((-0.17115608)+(((-1.0)*x489))+x490);
op[10]=((((-1.0)*gclwh9_8*x86))+(((-1.0)*x493))+(((-1.0)*x480))+((gclwh7_8*x97))+x496+x469+(((-1.0)*gclwh15_1*x197))+(((0.000762379508)*x109))+(((-0.000762379508)*x181))+((gclwh11_8*x151)));
op[11]=((((0.0656)*gclwh11_13*x103))+(((-0.0656)*gclwh9_13*x81))+(((-1.0)*x102*x88))+(((-1.0)*x486))+(((0.00620576)*x127))+(((0.00620576)*x121))+(((0.0656)*gclwh7_13*x75))+(((-0.000293532448)*x102))+(((-1.0)*x463))+(((-1.0)*x210*x88))+x247+(((0.0328)*gclwh9_13*x86))+x474+(((0.000293532448)*x216))+(((-1.0)*gclwh7_13*x133))+(((-1.0)*gclwh13_11*x74)));
op[12]=((((-1.6344)*gclwh12_9*x75))+(((0.007313253552)*x84))+((x178*x84))+(((-0.007313253552)*x89))+(((1.6344)*gclwh4_9*x103))+(((1.6344)*gclwh14_9*x81))+(((-0.8172)*gclwh14_9*x86))+(((-1.0)*x476))+(((-1.0)*x466))+(((-1.0)*gclwh14_9*x114))+(((0.15461424)*x155))+x254+x485+(((-1.0)*gclwh6_12*x215))+(((-1.0)*gclwh10_12*x189))+(((-1.0)*x178*x89)));
op[13]=((0.67971865)+(((-1.34153898)*gclwh14_3*x81))+(((-0.66182033)*r21*x77))+(((1.34153898)*gclwh12_3*x75))+(((0.0060028234891284)*x107))+(((-1.0)*x497))+(((-1.0)*x117*x119))+(((-0.0060028234891284)*x217))+(((0.66182033)*gclwh4_3*x151))+(((-1.0)*gclwh14_10*x86))+(((-1.0)*x478))+(((0.66182033)*gclwh14_3*x86))+(((1.34153898)*gclwh1_3*x81))+x472+(((0.0060028234891284)*x179))+(((0.0060028234891284)*x170))+(((0.0060028234891284)*x209))+x500+(((-0.67971865)*gclwh1_3*x86))+(((-1.34153898)*gclwh4_3*x103))+(((-0.67971865)*gclwh3_3*x97))+(((1.34153898)*gclwh3_3*x75))+((gclwh12_10*x97)));
op[14]=((0.07741394)+(((-1.0)*x492))+x482);
op[15]=((((-0.7844)*gclwh12_2*x97))+(((1.7)*gclwh12_9*x75))+((gclwh1_2*x163))+((x89*x92))+((gclwh6_2*x188))+(((-0.007606786)*x84))+(((-1.0)*x483))+(((1.5688)*gclwh12_2*x75))+(((-1.0)*gclwh12_2*x144))+(((-1.7)*gclwh4_9*x103))+(((0.007606786)*x141))+(((-1.5688)*gclwh4_2*x103))+(((1.5688)*gclwh1_2*x81))+(((0.7844)*gclwh14_2*x86))+(((-0.7844)*gclwh1_2*x86))+((x113*x135))+x473+(((-1.5688)*gclwh14_2*x81))+((gclwh14_2*x163))+((gclwh3_2*x144))+(((-1.0)*x84*x92))+(((0.007019721104)*x135))+(((0.007606786)*x89))+(((-1.0)*gclwh8_2*x143))+(((1.5688)*gclwh3_2*x75))+((gclwh10_2*x111))+(((-0.7844)*gclwh3_2*x97))+(((0.85)*gclwh14_9*x86))+(((-1.7)*gclwh14_9*x81)));
op[16]=((((-0.0656)*gclwh14_9*x81))+(((-0.000293532448)*x84))+(((-1.0)*x485))+(((-1.0)*x466))+(((0.0656)*gclwh12_9*x75))+x254+x476+(((0.00620576)*x155))+(((-1.0)*x84*x88))+((x88*x89))+(((-0.0656)*gclwh4_9*x103))+(((0.0328)*gclwh14_9*x86))+(((0.000293532448)*x89))+(((0.000293532448)*x141))+(((-1.0)*gclwh6_12*x74))+(((-1.0)*gclwh10_12*x196)));
op[17]=((-0.01297865)+(((-0.00491967)*gclwh14_3*x86))+(((0.00805898)*gclwh1_3*x81))+(((-1.0)*x497))+(((-0.00805898)*gclwh14_3*x81))+(((-0.00805898)*gclwh4_3*x103))+(((-0.00491967)*gclwh4_3*x151))+(((-1.0)*gclwh12_10*x97))+(((-1.0)*x472))+(((3.60605507284e-5)*x179))+(((3.60605507284e-5)*x170))+x478+((gclwh14_10*x86))+((pp*x119))+x500+(((-0.01297865)*gclwh3_3*x97))+((gclwh3_3*x158))+(((0.00805898)*gclwh12_3*x75))+(((3.60605507284e-5)*x107))+(((-0.01297865)*gclwh1_3*x86))+(((-1.0)*gclwh12_3*x158))+(((0.00491967)*r21*x77))+(((0.00805898)*gclwh3_3*x75)));
op[18]=((0.67971865)+(((0.66182033)*gclwh15_1*x86))+(((-1.0)*x499))+(((-1.34153898)*gclwh0_1*x81))+(((0.67971865)*gclwh0_1*x86))+(((-0.66182033)*gclwh13_1*x97))+(((0.67971865)*r21*x90))+(((-1.0)*x479))+(((0.66182033)*gclwh5_1*x151))+((gclwh13_8*x97))+(((-1.34153898)*gclwh5_1*x103))+(((0.0060028234891284)*x192))+(((-1.0)*x117*x182))+x498+x471+(((0.0060028234891284)*x206))+(((-0.0060028234891284)*x208))+(((-0.0060028234891284)*x124))+(((1.34153898)*gclwh13_1*x75))+(((-1.0)*gclwh15_8*x86))+(((-1.34153898)*gclwh15_1*x81))+(((-1.34153898)*gclwh2_1*x75))+(((-0.0060028234891284)*x195)));
op[19]=((((0.007313253552)*x83))+(((-1.6344)*gclwh15_11*x81))+(((-0.8172)*gclwh13_11*x97))+((x178*x83))+(((-1.0)*x484))+(((1.6344)*gclwh13_11*x75))+(((-1.0)*x467))+x278+(((-0.15461424)*x153))+(((0.15461424)*x176))+x477+((x178*x79))+(((0.007313253552)*x79))+(((-0.007313253552)*x150))+(((-1.0)*gclwh7_13*x215))+(((-1.6344)*gclwh5_11*x103)));
op[20]=(((gclwh7_0*x188))+((x113*x147))+(((-1.0)*x183*x86))+(((0.7844)*gclwh2_0*x97))+(((-1.0)*x130*x151))+((x79*x92))+(((0.4364)*gclwh15_15*x81))+(((-1.0)*gclwh2_0*x144))+(((-1.0)*x113*x93))+(((-1.5688)*gclwh2_0*x75))+(((0.7844)*gclwh0_0*x86))+(((-1.0)*gclwh9_0*x143))+((gclwh11_0*x111))+(((0.007606786)*x79))+(((0.4364)*gclwh5_15*x103))+(((-1.7)*gclwh5_11*x103))+(((-1.5688)*gclwh5_0*x103))+(((-1.5688)*gclwh0_0*x81))+(((0.007019721104)*x147))+(((-1.7)*gclwh15_11*x81))+(((-1.0)*gclwh15_15*x96))+((gclwh15_0*x163))+(((0.2182)*pp*x91))+(((-1.0)*gclwh0_0*x163))+(((1.7)*gclwh13_11*x75))+(((0.001952706712)*x91))+(((-1.5688)*gclwh15_0*x81))+(((0.7844)*gclwh15_0*x86))+((x83*x92))+(((-0.007019721104)*x93))+(((-0.007606786)*x150))+(((0.007606786)*x83))+(((-1.0)*gclwh5_15*x200))+(((1.5688)*gclwh13_0*x75))+(((-1.0)*x150*x92))+(((-0.4364)*gclwh13_15*x75)));
op[21]=((-0.07741394)+(((-1.0)*gclwh13_8*x156))+((gclwh11_8*x167))+(((-4.0)*gclwh15_8*x81))+((gclwh7_8*x222))+((x180*x86))+(((-1.0)*x154*x97))+(((-1.0)*gclwh9_8*x152))+(((-4.0)*gclwh5_8*x103))+((gclwh5_8*x85))+((x118*x182))+((gclwh15_8*x205))+(((4.0)*gclwh13_8*x75)));
op[22]=((-0.01297865)+(((3.60605507284e-5)*x206))+(((-0.00805898)*gclwh2_1*x75))+((gclwh5_8*x151))+(((-1.0)*x499))+(((-1.0)*gclwh2_1*x158))+(((0.01297865)*gclwh0_1*x86))+(((-1.0)*x471))+(((-0.00805898)*gclwh0_1*x81))+x498+x479+(((-0.00805898)*gclwh5_1*x103))+(((-0.00491967)*gclwh5_1*x151))+(((-1.0)*gclwh13_1*x158))+(((3.60605507284e-5)*x192))+(((0.00491967)*gclwh13_1*x97))+(((-3.60605507284e-5)*x124))+((gclwh15_8*x86))+(((-0.00805898)*gclwh15_1*x81))+(((0.01297865)*r21*x90))+(((-0.00491967)*gclwh15_1*x86))+(((0.00805898)*gclwh13_1*x75))+(((-1.0)*gclwh13_8*x97)));
op[23]=(((x150*x88))+(((-0.000293532448)*x83))+(((-1.0)*gclwh7_13*x74))+(((-1.0)*x83*x88))+((gclwh13_11*x133))+(((-0.0656)*gclwh13_11*x75))+(((-1.0)*x477))+(((0.00620576)*x176))+(((-1.0)*x467))+(((-1.0)*x79*x88))+x278+x484+(((-0.00620576)*x153))+(((-0.000293532448)*x79))+(((0.0656)*gclwh5_11*x103))+(((0.0656)*gclwh15_11*x81)));
op[24]=((-0.35662608)+(((-1.0)*x488))+x491);
op[25]=((((-1.0)*gclwh14_2*x123))+((x128*x187))+((gclwh6_2*x137))+(((-1.0)*gclwh8_2*x131))+(((0.014626507104)*x128))+(((-1.0)*gclwh4_2*x157))+x468+(((-1.0)*x288))+(((-1.6344)*gclwh8_2*x86))+(((1.6344)*gclwh6_2*x97))+(((-3.2688)*gclwh6_2*x75))+((gclwh12_2*x159))+(((-3.2688)*gclwh10_2*x103))+(((3.2688)*gclwh8_2*x81)));
op[26]=((((0.08256688)*gclwh14_14*rxp0_2))+(((0.014039442208)*x173))+(((-3.1376)*gclwh10_12*x103))+(((0.08256688)*x136))+(((0.014039442208)*x148))+(((-0.014039442208)*x220))+(((-3.1376)*gclwh6_12*x75))+(((-1.0)*gclwh12_14*x177))+((x116*x148))+(((1.5688)*gclwh6_12*x97))+(((-1.5688)*gclwh8_12*x86))+(((3.1376)*gclwh8_12*x81)));
op[27]=((((-8.0)*gclwh6_10*x75))+((x82*x97))+(((0.03579664)*x122))+((gclwh6_10*x139))+(((-0.03579664)*x98))+(((4.0)*pp*x122))+(((-1.0)*gclwh4_10*x211))+(((8.0)*gclwh8_10*x81))+(((-8.0)*gclwh10_10*x103))+(((-1.0)*gclwh14_10*x171))+(((-1.0)*x108*x86))+(((0.7568)*x213)));
op[28]=((-0.01431392)+(((-1.0)*x491))+x488);
op[29]=((((0.0656)*gclwh6_2*x97))+(((-1.0)*gclwh14_2*x100))+((gclwh6_2*x199))+(((-1.0)*gclwh4_2*x186))+(((0.01241152)*gclwh12_2*rxp1_2))+(((-0.1312)*gclwh6_2*x75))+(((0.0656)*pp*x128))+(((0.000587064896)*x128))+(((-1.0)*x468))+x288+(((-0.0656)*gclwh8_2*x86))+(((-1.0)*gclwh8_2*x221))+(((0.1312)*gclwh8_2*x81))+(((-0.1312)*gclwh10_2*x103)));
op[30]=(((gclwh7_0*x137))+(((3.2688)*gclwh9_0*x81))+(((-3.2688)*gclwh11_0*x103))+(((-1.6344)*gclwh9_0*x86))+(((1.6344)*gclwh11_0*x151))+(((1.6344)*gclwh7_0*x97))+(((-1.0)*x294))+(((-1.0)*gclwh15_0*x123))+(((0.30922848)*x99))+x465+(((-1.0)*gclwh5_0*x157))+(((0.014626507104)*x175))+(((-3.2688)*gclwh7_0*x75))+(((-1.0)*gclwh9_0*x131)));
op[31]=((-0.35662608)+(((-1.0)*x489))+x490);
op[32]=((((0.7568)*x138))+((x190*x97))+(((-0.03579664)*x140))+((x120*x151))+(((-8.0)*gclwh11_8*x103))+(((-1.0)*x219*x86))+(((-1.0)*gclwh15_8*x171))+(((-8.0)*gclwh7_8*x75))+(((-1.0)*gclwh5_8*x211))+((gclwh7_8*x139))+(((8.0)*gclwh9_8*x81))+(((0.03579664)*x194)));
op[33]=((((-1.5688)*gclwh9_13*x86))+(((-3.1376)*gclwh7_13*x75))+(((-0.08256688)*x204))+(((-3.1376)*gclwh11_13*x103))+(((-0.08256688)*x165))+(((1.5688)*gclwh7_13*x97))+((x102*x116))+(((3.1376)*gclwh9_13*x81))+(((0.014039442208)*x210))+(((0.014039442208)*x102))+(((-0.014039442208)*x216))+((gclwh13_15*x177)));
op[34]=((((0.0656)*gclwh7_0*x97))+(((-0.1312)*gclwh7_0*x75))+(((-1.0)*gclwh9_0*x221))+(((0.1312)*gclwh9_0*x81))+(((-1.0)*gclwh15_0*x100))+(((-1.0)*x465))+x294+(((0.000587064896)*x175))+(((-0.0656)*gclwh9_0*x86))+(((0.01241152)*x99))+(((-1.0)*gclwh5_0*x186))+(((-0.1312)*gclwh11_0*x103))+(((0.0656)*gclwh11_0*x151))+((gclwh7_0*x199)));
op[35]=((-0.01431392)+(((-1.0)*x490))+x489);
op[36]=((-1.31182606)+(((-1.0)*x492))+x482);
op[37]=((((3.2688)*gclwh3_2*x75))+(((1.6344)*gclwh14_2*x86))+((gclwh10_2*x157))+(((-1.6344)*gclwh12_2*x97))+(((-1.0)*x483))+((gclwh3_2*x137))+(((-3.2688)*gclwh14_2*x81))+(((-1.0)*gclwh8_2*x123))+(((-1.0)*gclwh12_2*x137))+(((-1.6344)*gclwh1_2*x86))+(((3.2688)*gclwh12_2*x75))+((gclwh14_2*x131))+(((0.014626507104)*x135))+x473+((x135*x187))+((gclwh6_2*x159))+((gclwh1_2*x131))+(((-1.6344)*gclwh3_2*x97))+(((-3.2688)*gclwh4_2*x103))+(((3.2688)*gclwh1_2*x81)));
IkReal x501=pz*pz;
IkReal x502=pp*pp;
IkReal x503=((0.1892)*pz);
IkReal x504=(gclwh14_9*rxp0_2);
IkReal x505=((0.00620576)*rxp1_2);
IkReal x506=(npy*pz);
IkReal x507=((0.1892)*rxp0_2);
IkReal x508=(gclwh12_3*pp);
IkReal x509=((0.1892)*rxp1_2);
IkReal x510=(gclwh5_11*r22);
IkReal x511=((2.0)*gclwh6_10);
IkReal x512=(npx*pz);
IkReal x513=((0.3784)*rxp1_2);
IkReal x514=(pp*r22);
IkReal x515=((0.4364)*gclwh13_15);
IkReal x516=((0.4364)*gclwh15_15);
IkReal x517=(gclwh12_9*r21);
IkReal x518=((0.01789832)*r22);
IkReal x519=(pp*r20);
IkReal x520=(gclwh0_0*pz);
IkReal x521=((2.0)*pp);
IkReal x522=((0.000976353356)*r21);
IkReal x523=(pp*r21);
IkReal x524=((4.0)*gclwh13_8);
IkReal x525=((0.007019721104)*r21);
IkReal x526=((0.02064172)*rxp1_2);
IkReal x527=(gclwh14_2*pz);
IkReal x528=(gclwh15_15*r20);
IkReal x529=(gclwh3_2*r21);
IkReal x530=((0.1892)*rxp2_2);
IkReal x531=((0.03579664)*r22);
IkReal x532=(npz*pz);
IkReal x533=((4.0)*gclwh4_10);
IkReal x534=(gclwh8_10*rxp0_2);
IkReal x535=((0.000976353356)*r22);
IkReal x536=(gclwh11_0*rxp2_2);
IkReal x537=(gclwh14_3*r20);
IkReal x538=(gclwh0_0*r20);
IkReal x539=(gclwh15_8*r20);
IkReal x540=(gclwh13_1*rxp1_2);
IkReal x541=((0.0328)*pp);
IkReal x542=((0.007313253552)*r20);
IkReal x543=((2.0)*gclwh8_10);
IkReal x544=(gclwh15_11*r20);
IkReal x545=((1.0)*pz);
IkReal x546=((2.0)*gclwh4_10);
IkReal x547=(gclwh8_10*r20);
IkReal x548=(gclwh5_11*rxp2_2);
IkReal x549=(gclwh6_2*pz);
IkReal x550=((0.0946)*pp);
IkReal x551=(gclwh15_11*rxp0_2);
IkReal x552=(gclwh10_2*r22);
IkReal x553=(gclwh9_0*pz);
IkReal x554=((0.2182)*gclwh5_15);
IkReal x555=((0.000976353356)*r20);
IkReal x556=((0.000293532448)*r21);
IkReal x557=((0.2182)*gclwh14_14);
IkReal x558=(gclwh5_0*r22);
IkReal x559=((0.00894916)*pz);
IkReal x560=((0.14840848)*rxp0_2);
IkReal x561=((0.02064172)*rxp2_2);
IkReal x562=((0.000587064896)*r20);
IkReal x563=(gclwh10_10*rxp2_2);
IkReal x564=(gclwh9_8*r20);
IkReal x565=(gclwh14_9*r20);
IkReal x566=(gclwh12_9*rxp1_2);
IkReal x567=((0.00894916)*r21);
IkReal x568=(gclwh4_2*r22);
IkReal x569=(gclwh2_0*r21);
IkReal x570=(gclwh4_2*pz);
IkReal x571=((0.2182)*gclwh12_14);
IkReal x572=(gclwh13_11*r21);
IkReal x573=(gclwh1_2*r20);
IkReal x574=((0.3784)*rxp0_2);
IkReal x575=((0.4364)*gclwh12_14);
IkReal x576=(gclwh11_13*rxp2_2);
IkReal x577=((0.00894916)*r20);
IkReal x578=(gclwh8_12*rxp0_2);
IkReal x579=(gclwh10_2*rxp2_2);
IkReal x580=((3.60605507284e-5)*r21);
IkReal x581=(gclwh4_9*r22);
IkReal x582=((0.126909587508)*rxp0_2);
IkReal x583=((0.00894916)*r22);
IkReal x584=((0.007019721104)*r20);
IkReal x585=((0.04128344)*rxp0_2);
IkReal x586=((2.0)*gclwh5_8);
IkReal x587=((0.01241152)*rxp1_2);
IkReal x588=((2.0)*gclwh9_8);
IkReal x589=(gclwh1_3*r20);
IkReal x590=(gclwh15_0*r20);
IkReal x591=((0.2182)*gclwh13_15);
IkReal x592=(gclwh14_10*r20);
IkReal x593=(gclwh13_11*rxp1_2);
IkReal x594=(gclwh4_3*r22);
IkReal x595=((4.0)*gclwh14_10);
IkReal x596=((3.60605507284e-5)*r20);
IkReal x597=((0.01789832)*r21);
IkReal x598=((2.0)*gclwh14_10);
IkReal x599=((0.003905413424)*r22);
IkReal x600=(gclwh11_8*rxp2_2);
IkReal x601=(gclwh9_13*rxp0_2);
IkReal x602=((0.85)*pp);
IkReal x603=((0.8172)*pp);
IkReal x604=((2.0)*gclwh15_8);
IkReal x605=(gclwh12_10*r21);
IkReal x606=((0.126909587508)*rxp2_2);
IkReal x607=((0.2182)*gclwh15_15);
IkReal x608=((0.2182)*gclwh4_14);
IkReal x609=((0.04128344)*rxp1_2);
IkReal x610=((4.0)*gclwh12_10);
IkReal x611=((0.04128344)*rxp2_2);
IkReal x612=(gclwh6_12*rxp1_2);
IkReal x613=((0.4364)*gclwh4_14);
IkReal x614=((0.14840848)*rxp1_2);
IkReal x615=((0.15461424)*rxp2_2);
IkReal x616=((2.0)*gclwh11_8);
IkReal x617=(gclwh10_2*pz);
IkReal x618=((0.01241152)*rxp0_2);
IkReal x619=((4.0)*gclwh5_8);
IkReal x620=(gclwh13_0*r21);
IkReal x621=(gclwh13_1*r21);
IkReal x622=((0.4364)*gclwh5_15);
IkReal x623=((0.00620576)*rxp2_2);
IkReal x624=((0.000762379508)*rxp0_2);
IkReal x625=(gclwh11_0*pz);
IkReal x626=((0.001952706712)*r22);
IkReal x627=(gclwh5_0*pz);
IkReal x628=((2.0)*gclwh10_10);
IkReal x629=(gclwh12_3*rxp1_2);
IkReal x630=(gclwh5_1*r22);
IkReal x631=((0.000293532448)*r22);
IkReal x632=(gclwh2_1*r21);
IkReal x633=((0.007313253552)*r21);
IkReal x634=(gclwh3_3*r21);
IkReal x635=((4.0)*gclwh15_8);
IkReal x636=(gclwh14_14*r20);
IkReal x637=((0.7568)*rxp1_2);
IkReal x638=(gclwh13_8*r21);
IkReal x639=((0.02064172)*rxp0_2);
IkReal x640=((0.001952706712)*r21);
IkReal x641=((0.003905413424)*r21);
IkReal x642=(gclwh4_9*rxp2_2);
IkReal x643=((0.000293532448)*r20);
IkReal x644=(gclwh11_0*r22);
IkReal x645=((0.14840848)*rxp2_2);
IkReal x646=((0.000762379508)*rxp2_2);
IkReal x647=((0.007313253552)*r22);
IkReal x648=((0.4364)*gclwh14_14);
IkReal x649=(gclwh7_13*rxp1_2);
IkReal x650=(gclwh7_0*pz);
IkReal x651=(gclwh12_3*r21);
IkReal x652=((0.3784)*rxp2_2);
IkReal x653=((0.0060028234891284)*r20);
IkReal x654=(gclwh15_0*pz);
IkReal x655=((0.001952706712)*x528);
IkReal x656=(gclwh5_15*x626);
IkReal x657=(gclwh13_15*x640);
IkReal x658=(gclwh9_8*x574);
IkReal x659=(gclwh13_8*x597);
IkReal x660=((0.01789832)*x539);
IkReal x661=(gclwh7_8*x513);
IkReal x662=(gclwh5_8*x518);
IkReal x663=((0.3784)*x600);
IkReal x664=(gclwh12_14*x526);
IkReal x665=(gclwh8_5*x555);
IkReal x666=(gclwh6_5*x522);
IkReal x667=(gclwh4_14*x561);
IkReal x668=(gclwh10_5*x535);
IkReal x669=(gclwh14_14*x639);
IkReal x670=((0.01789832)*x566);
IkReal x671=(gclwh14_10*x507);
IkReal x672=(gclwh4_10*x530);
IkReal x673=((0.00894916)*x547);
IkReal x674=((0.01789832)*x642);
IkReal x675=(gclwh12_10*x509);
IkReal x676=((0.01789832)*x504);
IkReal x677=(gclwh6_10*x567);
IkReal x678=(gclwh10_10*x583);
IkReal x679=(gclwh15_8*x507);
IkReal x680=((0.01789832)*x551);
IkReal x681=((0.01789832)*x548);
IkReal x682=(gclwh5_8*x530);
IkReal x683=((0.00894916)*x564);
IkReal x684=(gclwh11_8*x583);
IkReal x685=(gclwh7_8*x567);
IkReal x686=((0.01789832)*x593);
IkReal x687=(gclwh13_8*x509);
IkReal x688=(gclwh15_15*x639);
IkReal x689=(gclwh9_7*x555);
IkReal x690=(gclwh5_15*x561);
IkReal x691=(gclwh13_15*x526);
IkReal x692=(gclwh7_7*x522);
IkReal x693=(gclwh11_7*x535);
IkReal x694=((0.01789832)*x592);
IkReal x695=(gclwh6_10*x513);
IkReal x696=((0.3784)*x563);
IkReal x697=(gclwh4_10*x518);
IkReal x698=(gclwh4_14*x626);
IkReal x699=((0.001952706712)*x636);
IkReal x700=(gclwh12_14*x640);
IkReal x701=(gclwh4_14*x535);
IkReal x702=(gclwh8_5*x639);
IkReal x703=(gclwh14_14*x555);
IkReal x704=(gclwh12_14*x522);
IkReal x705=(gclwh6_5*x526);
IkReal x706=(gclwh10_5*x561);
IkReal x707=(gclwh8_10*x507);
IkReal x708=((0.000846590536)*x581);
IkReal x709=((0.000846590536)*x565);
IkReal x710=(gclwh12_10*x567);
IkReal x711=(gclwh14_10*x577);
IkReal x712=(gclwh4_10*x583);
IkReal x713=((0.000846590536)*x517);
IkReal x714=(gclwh6_10*x509);
IkReal x715=(gclwh10_10*x530);
IkReal x716=((0.000846590536)*x572);
IkReal x717=(gclwh13_8*x567);
IkReal x718=(gclwh9_8*x507);
IkReal x719=((0.00894916)*x539);
IkReal x720=(gclwh7_8*x509);
IkReal x721=(gclwh5_8*x583);
IkReal x722=(gclwh11_8*x530);
IkReal x723=((0.000846590536)*x544);
IkReal x724=((0.000846590536)*x510);
IkReal x725=(gclwh13_15*x522);
IkReal x726=(gclwh9_7*x639);
IkReal x727=(gclwh5_15*x535);
IkReal x728=(gclwh11_7*x561);
IkReal x729=((0.000976353356)*x528);
IkReal x730=(gclwh7_7*x526);
IkReal x731=(r21*x559);
IkReal x732=((2.0)*x501);
IkReal x733=((1.0)*x502);
IkReal x734=(x506*x515);
IkReal x735=(x514*x554);
IkReal x736=(x519*x607);
IkReal x737=(x532*x622);
IkReal x738=(x512*x516);
IkReal x739=(x523*x591);
IkReal x740=(x521*x638);
IkReal x741=(x512*x635);
IkReal x742=(x532*x619);
IkReal x743=(x506*x524);
IkReal x744=(x519*x604);
IkReal x745=(x514*x586);
IkReal x746=((0.1091)*gclwh8_5*x519);
IkReal x747=((0.2182)*gclwh10_5*x532);
IkReal x748=((0.2182)*gclwh6_5*x506);
IkReal x749=((0.1091)*gclwh6_5*x523);
IkReal x750=((0.1091)*gclwh10_5*x514);
IkReal x751=((0.2182)*gclwh8_5*x512);
IkReal x752=(gclwh4_3*pp*x530);
IkReal x753=(x549*x567);
IkReal x754=(x506*x511);
IkReal x755=(x523*x549);
IkReal x756=(gclwh12_2*rxp1_2*x503);
IkReal x757=(x532*x628);
IkReal x758=(x552*x559);
IkReal x759=(gclwh14_3*pp*x507);
IkReal x760=(x514*x617);
IkReal x761=(x512*x543);
IkReal x762=(gclwh14_2*rxp0_2*x503);
IkReal x763=(gclwh8_2*r20*x559);
IkReal x764=(gclwh4_2*rxp2_2*x503);
IkReal x765=(x508*x509);
IkReal x766=(x532*x616);
IkReal x767=((2.0)*gclwh7_8*x506);
IkReal x768=(gclwh13_0*rxp1_2*x503);
IkReal x769=(x523*x650);
IkReal x770=(x514*x625);
IkReal x771=(x559*x644);
IkReal x772=(gclwh15_1*pp*x507);
IkReal x773=(gclwh5_1*pp*x530);
IkReal x774=(gclwh7_0*x731);
IkReal x775=(gclwh15_0*rxp0_2*x503);
IkReal x776=(gclwh13_1*pp*x509);
IkReal x777=(x553*x577);
IkReal x778=(x512*x588);
IkReal x779=(gclwh5_0*rxp2_2*x503);
IkReal x780=((0.1091)*gclwh9_7*x519);
IkReal x781=((0.2182)*gclwh11_7*x532);
IkReal x782=((0.2182)*gclwh7_7*x506);
IkReal x783=((0.2182)*gclwh9_7*x512);
IkReal x784=((0.1091)*gclwh7_7*x523);
IkReal x785=((0.1091)*gclwh11_7*x514);
IkReal x786=(x519*x598);
IkReal x787=(x514*x546);
IkReal x788=(x506*x610);
IkReal x789=(x514*x608);
IkReal x790=(x506*x575);
IkReal x791=(x519*x557);
IkReal x792=(x523*x571);
IkReal x793=(x512*x648);
IkReal x794=(x532*x613);
IkReal x795=((0.1091)*gclwh4_14*x514);
IkReal x796=((0.1091)*gclwh14_14*x519);
IkReal x797=(x506*x571);
IkReal x798=(x532*x608);
IkReal x799=(x512*x557);
IkReal x800=((0.1091)*gclwh12_14*x523);
IkReal x801=(gclwh12_9*npy*x503);
IkReal x802=(x519*x527);
IkReal x803=((0.0946)*gclwh4_9*x514);
IkReal x804=(x502*x651);
IkReal x805=((0.0946)*gclwh14_9*x519);
IkReal x806=(x512*x598);
IkReal x807=(gclwh6_2*rxp1_2*x503);
IkReal x808=(x503*x579);
IkReal x809=(x502*x634);
IkReal x810=(x502*x589);
IkReal x811=(x529*x559);
IkReal x812=(x559*x568);
IkReal x813=(x527*x577);
IkReal x814=(x514*x570);
IkReal x815=(x559*x573);
IkReal x816=(x532*x546);
IkReal x817=((2.0)*gclwh12_10*x506);
IkReal x818=(gclwh14_9*npx*x503);
IkReal x819=(gclwh4_9*npz*x503);
IkReal x820=(x517*x550);
IkReal x821=(gclwh8_2*rxp0_2*x503);
IkReal x822=(gclwh12_2*x731);
IkReal x823=(x519*x654);
IkReal x824=(x502*x621);
IkReal x825=(x514*x627);
IkReal x826=(gclwh2_0*pz*x523);
IkReal x827=(x519*x520);
IkReal x828=(gclwh5_11*npz*x503);
IkReal x829=(x559*x590);
IkReal x830=(gclwh7_0*rxp1_2*x503);
IkReal x831=(x558*x559);
IkReal x832=((0.0946)*gclwh13_11*x523);
IkReal x833=(x532*x586);
IkReal x834=(gclwh15_11*npx*x503);
IkReal x835=(x503*x536);
IkReal x836=(x512*x604);
IkReal x837=(x520*x577);
IkReal x838=(gclwh9_0*rxp0_2*x503);
IkReal x839=((2.0)*gclwh13_8*x506);
IkReal x840=(x559*x620);
IkReal x841=(x510*x550);
IkReal x842=(gclwh13_11*npy*x503);
IkReal x843=(x559*x569);
IkReal x844=((0.0946)*gclwh15_11*x519);
IkReal x845=(x532*x554);
IkReal x846=(x512*x607);
IkReal x847=((0.1091)*gclwh13_15*x523);
IkReal x848=((0.1091)*gclwh15_15*x519);
IkReal x849=(x506*x591);
IkReal x850=((0.1091)*gclwh5_15*x514);
IkReal x851=(r20*x733);
IkReal x852=(gclwh8_2*npx*x732);
IkReal x853=(gclwh6_2*npy*x732);
IkReal x854=(gclwh8_2*x519*x545);
IkReal x855=(gclwh10_2*npz*x732);
IkReal x856=(gclwh9_0*npx*x732);
IkReal x857=(gclwh9_0*x519*x545);
IkReal x858=(gclwh11_0*npz*x732);
IkReal x859=(gclwh7_0*npy*x732);
IkReal x860=(gclwh12_2*npy*x732);
IkReal x861=(gclwh3_2*npy*x732);
IkReal x862=(gclwh4_3*x521*x532);
IkReal x863=(gclwh1_2*npx*x732);
IkReal x864=(gclwh14_3*x512*x521);
IkReal x865=(gclwh12_2*x523*x545);
IkReal x866=(gclwh1_2*x519*x545);
IkReal x867=(gclwh3_3*x506*x521);
IkReal x868=(gclwh1_3*x512*x521);
IkReal x869=(gclwh4_2*npz*x732);
IkReal x870=(gclwh3_2*x523*x545);
IkReal x871=(x594*x733);
IkReal x872=((2.0)*x506*x508);
IkReal x873=(gclwh14_2*npx*x732);
IkReal x874=(x537*x733);
IkReal x875=(gclwh2_1*x506*x521);
IkReal x876=(gclwh0_1*x512*x521);
IkReal x877=(gclwh13_0*npy*x732);
IkReal x878=(gclwh5_1*x521*x532);
IkReal x879=(gclwh15_1*x512*x521);
IkReal x880=(gclwh5_0*npz*x732);
IkReal x881=(gclwh0_0*npx*x732);
IkReal x882=(gclwh2_0*npy*x732);
IkReal x883=(gclwh0_1*x851);
IkReal x884=(gclwh13_1*x506*x521);
IkReal x885=(x632*x733);
IkReal x886=(gclwh15_1*x851);
IkReal x887=(gclwh15_0*npx*x732);
IkReal x888=(x630*x733);
IkReal x889=(gclwh13_0*x523*x545);
IkReal x890=(x688+x690);
IkReal x891=(x706+x705);
IkReal x892=(x730+x728);
IkReal x893=(x669+x667);
IkReal x894=(x678+x677+x675+x761);
IkReal x895=(x687+x685+x684+x778);
IkReal x896=(x718+x717+x836+x833);
IkReal x897=(x710+x707+x816+x806);
IkReal x898=(x657+x737+x739+x738);
IkReal x899=(x689+x782+x780+x781);
IkReal x900=(x700+x793+x792+x794);
IkReal x901=(x704+x799+x798+x800);
IkReal x902=(x725+x845+x847+x846);
IkReal x903=(x665+x746+x747+x748);
IkReal x904=(x719+x720+x721+x722+x839);
IkReal x905=(x711+x712+x715+x714+x817);
IkReal x906=(x672+x673+x671+x754+x757);
IkReal x907=(x679+x683+x682+x766+x767);
IkReal x908=(((x512*x595))+((gclwh12_10*x597))+((x521*x605))+(((0.3784)*x534))+((x532*x533)));
IkReal x909=(x658+x659+x742+x740+x741);
IkReal x910=(x655+x656+x736+x735+x734);
IkReal x911=(x698+x699+x791+x790+x789);
IkReal x912=(x727+x729+x850+x849+x848);
IkReal x913=(x668+x666+x751+x750+x749);
IkReal x914=(x703+x701+x795+x797+x796);
IkReal x915=(x692+x693+x783+x784+x785);
IkReal x916=(x661+x660+x663+x662+x744+x745+x743);
IkReal x917=(x694+x695+x696+x697+x786+x787+x788);
IkReal x918=(x686+x777+x776+x775+x779+x857+x858+x859);
IkReal x919=(x670+x755+x756+x753+x752+x759+x758+x760+x852);
IkReal x920=(x676+x674+x764+x765+x762+x763+x853+x854+x855);
IkReal x921=(x681+x680+x773+x772+x771+x770+x774+x768+x769+x856);
IkReal x922=(x503+x713+x869+x868+x867+x866+x865+x870+x871+x872+x873+x874+x818+x819+x822+x821+x820);
IkReal x923=(x503+x716+x878+x879+x875+x876+x877+x829+x828+x823+x827+x826+x825+x824+x834+x835+x830+x831+x832);
IkReal x924=(x723+x724+x885+x884+x887+x886+x881+x880+x883+x882+x889+x888+x837+x838+x841+x840+x843+x842+x844);
IkReal x925=(x708+x709+x864+x863+x862+x861+x860+x814+x815+x812+x813+x810+x811+x809+x808+x805+x804+x807+x801+x803+x802);
op[38]=((((-0.29681696)*x578))+(((0.29681696)*x612))+((gclwh12_14*x641))+((x523*x575))+(((-1.0)*x519*x648))+(((-0.8728)*gclwh12_14*x506))+(((0.8728)*gclwh4_14*x532))+(((0.8728)*gclwh14_14*x512))+(((-1.0)*x514*x613))+(((0.29681696)*gclwh10_12*rxp2_2))+(((-1.0)*gclwh4_14*x599))+(((-0.003905413424)*x636)));
op[39]=((0.0596054)+(((0.03579664)*x592))+(((-1.0)*x523*x610))+(((8.0)*gclwh12_10*x506))+(((-8.0)*gclwh14_10*x512))+(((-8.0)*gclwh4_10*x532))+(((0.7568)*x563))+(((-0.7568)*x534))+((x514*x533))+((gclwh4_10*x531))+((gclwh6_10*x637))+((x519*x595))+(((-0.03579664)*x605)));
op[40]=((-0.02165394)+(((-1.0)*x908))+x917);
op[41]=(((gclwh1_2*x562))+(((0.000587064896)*x529))+((gclwh14_2*x562))+(((-0.1312)*gclwh4_2*x532))+(((-0.0656)*gclwh12_2*x523))+(((-1.0)*x900))+(((0.1312)*gclwh12_2*x506))+(((0.0656)*gclwh14_2*x519))+(((-0.1312)*gclwh14_2*x512))+(((-0.000587064896)*gclwh12_2*r21))+(((0.000587064896)*x568))+(((0.1312)*gclwh3_2*x506))+(((0.0656)*gclwh4_2*x514))+(((0.1312)*gclwh1_2*x512))+(((-0.0656)*gclwh3_2*x523))+(((-1.0)*gclwh8_2*x618))+((gclwh6_2*x587))+x911+(((-0.0656)*gclwh1_2*x519))+(((0.01241152)*x579)));
op[42]=((((3.2688)*gclwh13_0*x506))+(((1.6344)*gclwh0_0*x519))+(((0.014626507104)*x590))+(((-0.014626507104)*x620))+(((-3.2688)*gclwh5_0*x532))+(((0.30922848)*x536))+(((1.6344)*gclwh2_0*x523))+(((-1.0)*x910))+(((0.30922848)*gclwh7_0*rxp1_2))+(((-3.2688)*gclwh2_0*x506))+(((-3.2688)*gclwh0_0*x512))+(((-0.014626507104)*x569))+(((-3.2688)*gclwh15_0*x512))+(((1.6344)*gclwh5_0*x514))+(((-1.6344)*gclwh13_0*x523))+x898+(((-0.30922848)*gclwh9_0*rxp0_2))+(((0.014626507104)*x558))+(((-0.014626507104)*x538))+(((1.6344)*gclwh15_0*x519)));
op[43]=((1.31182606)+(((-1.0)*x909))+x916);
op[44]=((0.0596054)+((x514*x619))+(((-0.7568)*gclwh9_8*rxp0_2))+((gclwh7_8*x637))+(((-1.0)*x523*x524))+(((0.7568)*x600))+(((-0.03579664)*x638))+(((0.03579664)*x539))+(((-8.0)*gclwh15_8*x512))+(((8.0)*gclwh13_8*x506))+(((-8.0)*gclwh5_8*x532))+((x519*x635))+((gclwh5_8*x531)));
op[45]=((((0.003905413424)*x528))+(((-0.8728)*gclwh5_15*x532))+(((-0.29681696)*x601))+((gclwh5_15*x599))+(((0.29681696)*x576))+(((-1.0)*x515*x523))+((x516*x519))+((x514*x622))+(((-1.0)*gclwh13_15*x641))+(((-0.8728)*gclwh15_15*x512))+(((0.8728)*gclwh13_15*x506))+(((0.29681696)*x649)));
op[46]=((((0.000587064896)*x558))+(((-0.1312)*gclwh0_0*x512))+(((-0.000587064896)*x620))+(((-0.1312)*gclwh5_0*x532))+(((0.0656)*gclwh0_0*x519))+(((0.0656)*gclwh5_0*x514))+(((0.01241152)*x536))+(((-0.000587064896)*x569))+((gclwh15_0*x562))+(((-1.0)*x898))+(((-0.1312)*gclwh15_0*x512))+(((-0.0656)*gclwh13_0*x523))+(((-1.0)*gclwh9_0*x618))+(((0.1312)*gclwh13_0*x506))+(((0.0656)*gclwh2_0*x523))+(((-0.1312)*gclwh2_0*x506))+((gclwh7_0*x587))+(((0.0656)*gclwh15_0*x519))+x910+(((-0.000587064896)*x538)));
op[47]=((0.02165394)+(((-1.0)*x916))+x909);
op[48]=((((-0.8172)*gclwh8_12*x519))+(((-1.6344)*gclwh6_12*x506))+(((-1.0)*x913))+((gclwh4_9*x615))+(((0.8172)*gclwh6_12*x523))+((gclwh10_12*x647))+(((0.8172)*gclwh10_12*x514))+(((0.15461424)*x504))+(((-1.0)*x664))+(((-1.0)*gclwh8_12*x542))+(((1.6344)*gclwh8_12*x512))+(((-1.6344)*gclwh10_12*x532))+x893+((gclwh6_12*x633))+x903+(((-0.15461424)*x566)));
op[49]=((((-1.0)*x920))+((gclwh6_10*x523))+(((0.126909587508)*x629))+(((-1.0)*x906))+(((-1.0)*gclwh8_10*x519))+(((-1.0)*gclwh14_3*x582))+((gclwh10_10*x514))+x894+(((-1.0)*gclwh4_3*x606))+x919);
op[50]=((0.17115608)+(((-4.0)*gclwh6_10*x506))+(((-4.0)*gclwh10_10*x532))+((gclwh6_10*x597))+(((4.0)*gclwh8_10*x512))+(((-1.0)*gclwh4_10*x652))+((x514*x628))+((gclwh10_10*x518))+(((-1.0)*gclwh14_10*x574))+((gclwh12_10*x513))+((x511*x523))+(((-0.01789832)*x547))+(((-1.0)*x519*x543)));
op[51]=((((0.7844)*gclwh8_2*x519))+(((-1.0)*gclwh6_2*x525))+(((-0.16082)*x504))+(((-0.7844)*gclwh10_2*x514))+(((-1.0)*gclwh14_14*x585))+(((-1.0)*gclwh4_14*x611))+(((1.5688)*gclwh10_2*x532))+((gclwh14_2*x560))+(((1.5688)*gclwh6_2*x506))+(((-1.0)*gclwh12_2*x614))+(((-0.7844)*gclwh6_2*x523))+(((0.16082)*x566))+((gclwh12_14*x609))+(((-0.007019721104)*x552))+((gclwh4_2*x645))+(((-1.5688)*gclwh8_2*x512))+(((-0.16082)*x642))+((gclwh8_2*x584)));
op[52]=((((0.0656)*gclwh8_12*x512))+((gclwh6_12*x556))+(((-1.0)*gclwh8_12*x643))+(((-0.00620576)*x504))+(((-1.0)*x893))+(((-1.0)*x913))+(((-0.0656)*gclwh10_12*x532))+((gclwh12_9*x505))+((gclwh10_12*x631))+(((-0.0328)*gclwh8_12*x519))+x664+(((-0.0656)*gclwh6_12*x506))+x903+(((0.0328)*gclwh10_12*x514))+(((0.0328)*gclwh6_12*x523))+(((-1.0)*gclwh4_9*x623)));
op[53]=(((gclwh8_10*x519))+(((-1.0)*x920))+(((-1.0)*gclwh14_3*x624))+(((-1.0)*gclwh10_10*x514))+(((-1.0)*x894))+(((-1.0)*gclwh6_10*x523))+(((0.000762379508)*x629))+x919+x906+(((-1.0)*gclwh4_3*x646)));
op[54]=((((-1.0)*gclwh9_8*x519))+(((0.126909587508)*x540))+(((-1.0)*x907))+(((-1.0)*x918))+((gclwh11_8*x514))+(((-1.0)*gclwh15_1*x582))+x895+((gclwh7_8*x523))+x921+(((-1.0)*gclwh5_1*x606)));
op[55]=(((gclwh11_13*x647))+(((-1.0)*x890))+(((-1.0)*x915))+(((0.15461424)*x593))+(((0.8172)*gclwh11_13*x514))+(((-0.8172)*gclwh9_13*x519))+(((-0.15461424)*x551))+(((-0.15461424)*x548))+x691+(((-1.6344)*gclwh11_13*x532))+(((0.8172)*gclwh7_13*x523))+((gclwh7_13*x633))+x899+(((-1.6344)*gclwh7_13*x506))+(((-1.0)*gclwh9_13*x542))+(((1.6344)*gclwh9_13*x512)));
op[56]=((((-0.16082)*x548))+((gclwh13_15*x609))+(((-1.0)*gclwh13_0*x614))+(((1.5688)*gclwh11_0*x532))+(((-1.0)*gclwh7_0*x525))+(((-1.5688)*gclwh9_0*x512))+(((-1.0)*gclwh15_15*x585))+((gclwh15_0*x560))+((gclwh5_0*x645))+(((-0.7844)*gclwh7_0*x523))+((gclwh9_0*x584))+(((-0.7844)*gclwh11_0*x514))+(((1.5688)*gclwh7_0*x506))+(((-0.16082)*x551))+(((0.16082)*x593))+(((-1.0)*gclwh5_15*x611))+(((-0.007019721104)*x644))+(((0.7844)*gclwh9_0*x519)));
op[57]=((0.17115608)+(((-1.0)*gclwh7_8*x597))+((gclwh15_8*x574))+(((-1.0)*gclwh11_8*x518))+((x519*x588))+(((-1.0)*gclwh13_8*x513))+(((4.0)*gclwh11_8*x532))+(((0.01789832)*x564))+(((-1.0)*gclwh7_8*r21*x521))+(((-1.0)*x514*x616))+((gclwh5_8*x652))+(((4.0)*gclwh7_8*x506))+(((-4.0)*gclwh9_8*x512)));
op[58]=((((-1.0)*gclwh5_1*x646))+(((0.000762379508)*x540))+(((-1.0)*gclwh15_1*x624))+(((-1.0)*x895))+(((-1.0)*x918))+((gclwh9_8*x519))+(((-1.0)*gclwh7_8*x523))+x921+x907+(((-1.0)*gclwh11_8*x514)));
op[59]=((((0.0656)*gclwh9_13*x512))+((gclwh11_13*x631))+(((-1.0)*x915))+(((0.00620576)*x551))+(((0.00620576)*x548))+(((0.0328)*gclwh7_13*x523))+(((-0.0656)*gclwh11_13*x532))+(((-0.0656)*gclwh7_13*x506))+(((0.0328)*gclwh11_13*x514))+(((-1.0)*x691))+x890+x899+(((-1.0)*gclwh13_11*x505))+(((-0.0328)*gclwh9_13*x519))+((gclwh7_13*x556))+(((-1.0)*gclwh9_13*x643)));
op[60]=(((x517*x603))+(((-1.6344)*gclwh12_9*x506))+(((-1.0)*x891))+(((-1.0)*x914))+(((0.15461424)*x612))+(((-0.007313253552)*x581))+x702+(((1.6344)*gclwh4_9*x532))+(((-0.8172)*gclwh14_9*x519))+(((1.6344)*gclwh14_9*x512))+(((0.007313253552)*x517))+x901+(((-0.15461424)*x578))+(((-0.8172)*gclwh4_9*x514))+(((-1.0)*gclwh14_9*x542))+((gclwh10_12*x615)));
op[61]=((-0.67971865)+(((-1.34153898)*gclwh14_3*x512))+(((-1.0)*x922))+(((-0.66182033)*r21*x508))+(((-1.0)*gclwh12_10*x523))+(((0.66182033)*gclwh4_3*x514))+(((-0.67971865)*gclwh3_3*x523))+(((-1.0)*x897))+(((-0.0060028234891284)*x651))+((gclwh4_10*x514))+(((0.0060028234891284)*x589))+(((1.34153898)*gclwh3_3*x506))+(((0.0060028234891284)*x634))+(((0.0060028234891284)*x537))+(((-1.34153898)*gclwh4_3*x532))+((gclwh14_10*x519))+(((1.34153898)*gclwh12_3*x506))+(((-0.67971865)*gclwh1_3*x519))+x925+x905+(((1.34153898)*gclwh1_3*x512))+(((0.66182033)*gclwh14_3*x519))+(((0.0060028234891284)*x594)));
op[62]=((-0.07741394)+(((-1.0)*x908))+x917);
op[63]=((((1.5688)*gclwh4_2*x532))+(((-0.007019721104)*x568))+((gclwh8_2*x560))+(((0.85)*gclwh14_9*x519))+(((-0.7844)*gclwh14_2*x519))+(((-1.5688)*gclwh1_2*x512))+(((0.7844)*gclwh12_2*x523))+(((-1.0)*x900))+(((-1.0)*gclwh3_2*x525))+(((0.007606786)*x581))+(((-1.5688)*gclwh3_2*x506))+(((-1.0)*gclwh6_2*x614))+(((-1.7)*gclwh14_9*x512))+(((-0.007606786)*x517))+(((-1.0)*gclwh14_2*x584))+(((-1.5688)*gclwh12_2*x506))+(((-0.7844)*gclwh4_2*x514))+((gclwh12_2*x525))+(((0.85)*gclwh4_9*x514))+(((1.5688)*gclwh14_2*x512))+(((0.7844)*gclwh1_2*x519))+(((0.007606786)*x565))+(((0.7844)*gclwh3_2*x523))+(((-0.007019721104)*x573))+x911+(((1.7)*gclwh12_9*x506))+(((-1.0)*x517*x602))+(((-1.7)*gclwh4_9*x532))+(((-0.14840848)*x579)));
op[64]=((((-0.0656)*gclwh4_9*x532))+(((-1.0)*x901))+(((-1.0)*x891))+(((-0.0656)*gclwh14_9*x512))+(((0.000293532448)*x581))+(((-1.0)*x517*x541))+((gclwh10_12*x623))+(((0.0328)*gclwh14_9*x519))+(((0.0656)*gclwh12_9*x506))+((gclwh6_12*x505))+x702+(((0.0328)*gclwh4_9*x514))+x914+(((0.000293532448)*x565))+(((-0.000293532448)*x517))+(((-0.00620576)*x578)));
op[65]=((0.01297865)+(((-1.0)*x922))+(((-1.0)*gclwh14_10*x519))+(((0.00805898)*gclwh1_3*x512))+(((-0.00805898)*gclwh4_3*x532))+(((-0.01297865)*gclwh1_3*x519))+(((0.00805898)*gclwh3_3*x506))+(((3.60605507284e-5)*x594))+(((0.00805898)*gclwh12_3*x506))+(((-1.0)*x905))+(((-0.01297865)*gclwh3_3*x523))+((gclwh3_3*x580))+(((-0.00491967)*gclwh14_3*x519))+(((-1.0)*gclwh12_3*x580))+(((3.60605507284e-5)*x589))+(((0.00491967)*r21*x508))+x897+(((-0.00805898)*gclwh14_3*x512))+(((-1.0)*gclwh4_10*x514))+x925+((gclwh12_10*x523))+(((3.60605507284e-5)*x537))+(((-0.00491967)*gclwh4_3*x514)));
op[66]=((-0.67971865)+(((0.66182033)*gclwh5_1*x514))+(((-1.0)*x924))+(((-1.34153898)*gclwh15_1*x512))+((gclwh15_8*x519))+(((-1.0)*gclwh0_1*x653))+(((1.34153898)*gclwh13_1*x506))+(((-0.66182033)*gclwh13_1*x523))+(((0.66182033)*gclwh15_1*x519))+((gclwh15_1*x653))+(((-1.0)*x896))+(((-1.34153898)*gclwh2_1*x506))+(((-0.0060028234891284)*x621))+(((-0.0060028234891284)*x632))+(((0.67971865)*gclwh2_1*x523))+(((-1.34153898)*gclwh0_1*x512))+(((0.0060028234891284)*x630))+(((-1.0)*gclwh13_8*x523))+(((0.67971865)*gclwh0_1*x519))+x923+x904+(((-1.34153898)*gclwh5_1*x532))+((gclwh5_8*x514)));
op[67]=((((0.8172)*gclwh15_11*x519))+((x510*x603))+((gclwh15_11*x542))+(((-1.0)*x902))+(((-1.0)*x892))+(((-1.6344)*gclwh15_11*x512))+(((1.6344)*gclwh13_11*x506))+x726+(((0.15461424)*x649))+(((0.007313253552)*x510))+x912+(((-1.6344)*gclwh5_11*x532))+(((-0.15461424)*x601))+(((-0.8172)*gclwh13_11*x523))+(((0.15461424)*x576))+(((-0.007313253552)*x572)));
op[68]=(((x510*x602))+(((1.5688)*gclwh5_0*x532))+(((-0.7844)*gclwh2_0*x523))+((gclwh13_0*x525))+(((-1.5688)*gclwh13_0*x506))+(((1.7)*gclwh13_11*x506))+(((0.007606786)*x544))+(((0.007019721104)*x538))+(((0.7844)*gclwh13_0*x523))+(((-1.0)*gclwh7_0*x614))+((gclwh2_0*x525))+(((-1.7)*gclwh5_11*x532))+(((-1.0)*x898))+(((0.007606786)*x510))+(((-0.007606786)*x572))+(((-0.7844)*gclwh5_0*x514))+(((-1.7)*gclwh15_11*x512))+(((-0.007019721104)*x558))+(((1.5688)*gclwh2_0*x506))+(((-1.0)*gclwh15_0*x584))+(((-0.7844)*gclwh0_0*x519))+(((1.5688)*gclwh0_0*x512))+(((-0.14840848)*x536))+(((1.5688)*gclwh15_0*x512))+x910+((gclwh9_0*x560))+(((-0.7844)*gclwh15_0*x519))+(((0.85)*gclwh15_11*x519))+(((-0.85)*gclwh13_11*x523)));
op[69]=((0.07741394)+(((-1.0)*x916))+x909);
op[70]=((0.01297865)+(((0.00805898)*gclwh13_1*x506))+(((-1.0)*gclwh13_1*x580))+(((-1.0)*x924))+(((-1.0)*gclwh2_1*x580))+(((3.60605507284e-5)*x630))+(((-0.00805898)*gclwh5_1*x532))+(((-1.0)*x904))+(((-0.00805898)*gclwh0_1*x512))+((gclwh13_8*x523))+(((0.01297865)*gclwh2_1*x523))+(((-0.00491967)*gclwh15_1*x519))+(((-1.0)*gclwh0_1*x596))+(((-1.0)*gclwh5_8*x514))+(((-0.00805898)*gclwh2_1*x506))+((gclwh15_1*x596))+(((-0.00805898)*gclwh15_1*x512))+(((0.00491967)*gclwh13_1*x523))+(((0.01297865)*gclwh0_1*x519))+(((-0.00491967)*gclwh5_1*x514))+x896+(((-1.0)*gclwh15_8*x519))+x923);
op[71]=(((gclwh7_13*x505))+(((0.00620576)*x576))+(((0.0656)*gclwh5_11*x532))+(((-1.0)*x892))+(((-1.0)*x912))+(((-0.000293532448)*x544))+((gclwh13_11*x556))+x726+(((-0.0328)*gclwh15_11*x519))+(((-1.0)*x510*x541))+(((0.0656)*gclwh15_11*x512))+(((-0.0656)*gclwh13_11*x506))+(((0.0328)*gclwh13_11*x523))+x902+(((-0.000293532448)*x510))+(((-0.00620576)*x601)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x926=htj1*htj1;
CheckValue<IkReal> x927=IKPowWithIntegerCheck(((1.0)+x926),-1);
if(!x927.valid){
continue;
}
cj1array[numsolutions]=((x927.value)*(((1.0)+(((-1.0)*x926)))));
CheckValue<IkReal> x928=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x928.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x928.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x929=htj2*htj2;
CheckValue<IkReal> x930=IKPowWithIntegerCheck(((1.0)+x929),-1);
if(!x930.valid){
continue;
}
cj2array[numsolutions]=((x930.value)*(((1.0)+(((-1.0)*x929)))));
CheckValue<IkReal> x931=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x931.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x931.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x932=htj3*htj3;
CheckValue<IkReal> x933=IKPowWithIntegerCheck(((1.0)+x932),-1);
if(!x933.valid){
continue;
}
cj3array[numsolutions]=((x933.value)*(((1.0)+(((-1.0)*x932)))));
CheckValue<IkReal> x934=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x934.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x934.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((1.0)+(((-1.0)*(r22*r22))));
j5eval[1]=((r20*r20)+(r21*r21));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x935=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x935);
rxp1_0=(pz*r11);
rxp1_1=(r01*x935);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x936=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x936);
rxp1_0=(pz*r11);
rxp1_1=(r01*x936);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x937=IKPowWithIntegerCheck(cj3,-1);
if(!x937.valid){
continue;
}
CheckValue<IkReal> x938=IKPowWithIntegerCheck(r22,-1);
if(!x938.valid){
continue;
}
sj4array[0]=((x937.value)*(x938.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x939=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x939);
rxp1_0=(pz*r11);
rxp1_1=(r01*x939);
IkReal x940=(r10*sj3);
IkReal x941=((4.0)*cj4);
IkReal x942=(r11*sj3);
IkReal x943=((16.0)*cj4);
IkReal x944=(sj1*sj2);
IkReal x945=(r01*sj4);
IkReal x946=(cj3*r11);
IkReal x947=(cj1*sj2);
IkReal x948=((8.0)*cj2);
IkReal x949=((8.0)*cj4);
IkReal x950=((4.0)*sj4);
IkReal x951=(r12*sj3);
IkReal x952=(cj2*sj1);
IkReal x953=(cj1*cj2);
IkReal x954=(cj3*r12);
IkReal x955=((12.0)*sj4);
IkReal x956=(cj3*r10);
IkReal x957=((4.0)*x942);
IkReal x958=((4.0)*x946);
IkReal x959=((12.0)*cj4*r02);
IkReal x960=(x941*x956);
IkReal x961=(x954*x955);
IkReal x962=(x940*x941);
IkReal x963=(x951*x955);
IkReal x964=(r00*x944*x950);
IkReal x965=(x953*x959);
IkReal x966=(r00*x950*x953);
IkReal x967=(x944*x959);
IkReal x968=(r00*x947*x950);
IkReal x969=(r00*x950*x952);
IkReal x970=(x952*x959);
IkReal x971=(x947*x959);
IkReal x972=(x966+x957);
IkReal x973=(x961+x965);
IkReal x974=(x960+x964);
IkReal x975=(x971+x970);
IkReal x976=(x962+x968+x969+x958);
j5eval[0]=((((0.5)*(IKabs((x973+x974+(((-1.0)*x967))+(((-1.0)*x972)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x941*x944))+x972+((r02*x941*x953))+((x950*x954))+(((-1.0)*x974)))))))+(((0.5)*(IKabs(((((-16.0)*x944*x945))+(((-1.0)*x943*x946))+(((-16.0)*x940))+(((16.0)*x945*x953)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x941*x952))+(((-1.0)*r02*x941*x947))+((x950*x951))+(((-1.0)*x976)))))))+(((0.5)*(IKabs((x976+x963+(((-1.0)*x975)))))))+(IKabs(((((-8.0)*x944*x945))+((cj1*x945*x948))+(((-1.0)*x946*x949))+(((-8.0)*x940)))))+(IKabs(((((8.0)*x956))+(((-1.0)*x942*x949))+(((-1.0)*sj1*x945*x948))+(((-8.0)*x945*x947)))))+(((0.5)*(IKabs((x973+x972+(((-1.0)*x967))+(((-1.0)*x974)))))))+(((0.5)*(IKabs((x963+(((-1.0)*x975))+(((-1.0)*x976)))))))+(((0.5)*(IKabs(((((16.0)*x956))+(((-1.0)*x942*x943))+(((-16.0)*x945*x952))+(((-16.0)*x945*x947))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x977=(r10*sj3);
IkReal x978=(r01*sj4);
IkReal x979=(cj1*cj2);
IkReal x980=(cj3*cj4);
IkReal x981=(sj1*sj2);
IkReal x982=(cj4*r02);
IkReal x983=((4.0)*r11*sj3);
IkReal x984=(cj3*r12*sj4);
IkReal x985=((4.0)*r00*sj4);
IkReal x986=((4.0)*r10*x980);
IkReal x987=((12.0)*x984);
IkReal x988=((4.0)*x984);
IkReal x989=(x979*x985);
IkReal x990=(x981*x985);
IkReal x991=((12.0)*x979*x982);
IkReal x992=((12.0)*x981*x982);
IkReal x993=((4.0)*x979*x982);
IkReal x994=((4.0)*x981*x982);
IkReal x995=(x989+x983);
IkReal x996=(x993+x988);
IkReal x997=(x990+x986);
IkReal x998=(x991+x987);
IkReal x999=((((-8.0)*x977))+(((-8.0)*x978*x981))+(((8.0)*x978*x979))+(((-8.0)*r11*x980)));
op[0]=((((-1.0)*x994))+(((-1.0)*x997))+x996+x995);
op[1]=x999;
op[2]=((((-1.0)*x992))+(((-1.0)*x997))+x995+x998);
op[3]=((((-16.0)*r11*x980))+(((-16.0)*x977))+(((16.0)*x978*x979))+(((-16.0)*x978*x981)));
op[4]=((((-1.0)*x992))+(((-1.0)*x995))+x997+x998);
op[5]=x999;
op[6]=((((-1.0)*x994))+(((-1.0)*x995))+x997+x996);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1000=(cj4*sj3);
IkReal x1001=(cj1*sj2);
IkReal x1002=(r01*sj4);
IkReal x1003=((4.0)*sj4);
IkReal x1004=(r12*sj3);
IkReal x1005=(cj4*r02);
IkReal x1006=(cj2*sj1);
IkReal x1007=(cj3*r10);
IkReal x1008=((4.0)*cj3*r11);
IkReal x1009=((4.0)*r10*x1000);
IkReal x1010=(x1003*x1004);
IkReal x1011=((12.0)*sj4*x1004);
IkReal x1012=(r00*x1001*x1003);
IkReal x1013=(r00*x1003*x1006);
IkReal x1014=((12.0)*x1005*x1006);
IkReal x1015=((12.0)*x1001*x1005);
IkReal x1016=((4.0)*x1005*x1006);
IkReal x1017=((4.0)*x1001*x1005);
IkReal x1018=(x1016+x1017);
IkReal x1019=(x1014+x1015);
IkReal x1020=((((8.0)*x1007))+(((-8.0)*x1002*x1006))+(((-8.0)*r11*x1000))+(((-8.0)*x1001*x1002)));
IkReal x1021=(x1012+x1013+x1009+x1008);
j5evalpoly[0]=(x1010+x1021+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1010+(((-1.0)*x1018))+(((-1.0)*x1021))))))+(((-1.0)*x1018))+((htj5*x1020))+(((htj5*htj5*htj5*htj5)*((x1011+(((-1.0)*x1019))+(((-1.0)*x1021))))))+((x1020*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*((x1011+x1021+(((-1.0)*x1019))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1001*x1002))+(((-16.0)*x1002*x1006))+(((16.0)*x1007))+(((-16.0)*r11*x1000)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1022=(cj5*sj4);
IkReal x1023=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r01*x1023))+((r00*x1022)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x1023))+(((-1.0)*r10*x1022))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r01*x1023))+((r00*x1022))))+IKsqr((((r11*x1023))+(((-1.0)*r10*x1022))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r01*x1023))+((r00*x1022))), (((r11*x1023))+(((-1.0)*r10*x1022))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1024=IKcos(j0);
IkReal x1025=IKsin(j0);
IkReal x1026=((1.0)*cj3);
IkReal x1027=(r02*sj4);
IkReal x1028=(cj4*cj5);
IkReal x1029=((1.0)*sj3);
IkReal x1030=((1.0)*sj2);
IkReal x1031=(r12*sj4);
IkReal x1032=(r01*sj5);
IkReal x1033=((1.0)*sj4);
IkReal x1034=(cj5*r01);
IkReal x1035=(cj4*sj3);
IkReal x1036=(cj5*sj4);
IkReal x1037=(cj5*r11);
IkReal x1038=(r00*sj5);
IkReal x1039=((1.0)*cj2);
IkReal x1040=((0.3922)*cj2);
IkReal x1041=(r11*sj5);
IkReal x1042=(r10*sj5);
IkReal x1043=((0.3922)*sj2);
IkReal x1044=((1.0)*cj4);
IkReal x1045=(cj3*cj4*sj5);
IkReal x1046=(cj1*x1024);
IkReal x1047=(cj1*x1025);
IkReal x1048=(sj1*x1024);
IkReal x1049=(sj1*x1025);
evalcond[0]=(((r10*x1036))+x1024+(((-1.0)*x1033*x1041))+(((-1.0)*r12*x1044)));
evalcond[1]=((((-1.0)*r02*x1044))+((r00*x1036))+(((-1.0)*x1032*x1033))+(((-1.0)*x1025)));
evalcond[2]=(((x1040*x1046))+(((0.0946)*x1034))+(((0.0946)*x1038))+(((-1.0)*x1043*x1048))+(((-1.0)*px))+(((-0.1091)*x1025))+(((0.425)*x1046)));
evalcond[3]=(((x1040*x1047))+(((0.0946)*x1037))+(((-1.0)*x1043*x1049))+(((0.1091)*x1024))+(((-1.0)*py))+(((0.0946)*x1042))+(((0.425)*x1047)));
evalcond[4]=((((-1.0)*x1026*x1027))+((cj2*x1046))+((sj3*x1038))+((sj3*x1034))+((cj3*cj4*x1032))+(((-1.0)*x1030*x1048))+(((-1.0)*r00*x1026*x1028)));
evalcond[5]=((((-1.0)*r10*x1026*x1028))+(((-1.0)*x1026*x1031))+((sj3*x1042))+((cj2*x1047))+((sj3*x1037))+((cj3*cj4*x1041))+(((-1.0)*x1030*x1049)));
evalcond[6]=((((-1.0)*x1026*x1034))+(((-1.0)*x1026*x1038))+(((-1.0)*x1039*x1048))+(((-1.0)*r00*x1028*x1029))+(((-1.0)*x1027*x1029))+((x1032*x1035))+(((-1.0)*x1030*x1046)));
evalcond[7]=((((-1.0)*x1029*x1031))+(((-1.0)*x1026*x1037))+((x1035*x1041))+(((-1.0)*x1039*x1049))+(((-1.0)*r10*x1028*x1029))+(((-1.0)*x1026*x1042))+(((-1.0)*x1030*x1047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1050=IKPowWithIntegerCheck(r22,-1);
if(!x1050.valid){
continue;
}
CheckValue<IkReal> x1051=IKPowWithIntegerCheck(sj3,-1);
if(!x1051.valid){
continue;
}
sj4array[0]=((x1050.value)*(x1051.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1052=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1052);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1052);
IkReal x1053=(r10*sj3);
IkReal x1054=((4.0)*cj4);
IkReal x1055=(r11*sj3);
IkReal x1056=((16.0)*cj4);
IkReal x1057=(sj1*sj2);
IkReal x1058=(r01*sj4);
IkReal x1059=(cj3*r11);
IkReal x1060=(cj1*sj2);
IkReal x1061=((8.0)*cj2);
IkReal x1062=((8.0)*cj4);
IkReal x1063=((4.0)*sj4);
IkReal x1064=(r12*sj3);
IkReal x1065=(cj2*sj1);
IkReal x1066=(cj1*cj2);
IkReal x1067=(cj3*r12);
IkReal x1068=((12.0)*sj4);
IkReal x1069=(cj3*r10);
IkReal x1070=((4.0)*x1055);
IkReal x1071=((4.0)*x1059);
IkReal x1072=((12.0)*cj4*r02);
IkReal x1073=(x1054*x1069);
IkReal x1074=(x1067*x1068);
IkReal x1075=(x1053*x1054);
IkReal x1076=(x1064*x1068);
IkReal x1077=(r00*x1057*x1063);
IkReal x1078=(x1066*x1072);
IkReal x1079=(r00*x1063*x1066);
IkReal x1080=(x1057*x1072);
IkReal x1081=(r00*x1060*x1063);
IkReal x1082=(r00*x1063*x1065);
IkReal x1083=(x1065*x1072);
IkReal x1084=(x1060*x1072);
IkReal x1085=(x1079+x1070);
IkReal x1086=(x1078+x1074);
IkReal x1087=(x1077+x1073);
IkReal x1088=(x1084+x1083);
IkReal x1089=(x1075+x1071+x1082+x1081);
j5eval[0]=((((0.5)*(IKabs(((((16.0)*x1058*x1066))+(((-16.0)*x1057*x1058))+(((-1.0)*x1056*x1059))+(((-16.0)*x1053)))))))+(((0.5)*(IKabs((x1076+x1089+(((-1.0)*x1088)))))))+(((0.5)*(IKabs((x1076+(((-1.0)*x1088))+(((-1.0)*x1089)))))))+(((0.5)*(IKabs((x1087+x1086+(((-1.0)*x1085))+(((-1.0)*x1080)))))))+(((0.5)*(IKabs(((((16.0)*x1069))+(((-16.0)*x1058*x1065))+(((-16.0)*x1058*x1060))+(((-1.0)*x1055*x1056)))))))+(((0.5)*(IKabs((x1086+x1085+(((-1.0)*x1087))+(((-1.0)*x1080)))))))+(((0.5)*(IKabs((x1085+((r02*x1054*x1066))+((x1063*x1067))+(((-1.0)*x1087))+(((-1.0)*r02*x1054*x1057)))))))+(((0.5)*(IKabs((((x1063*x1064))+(((-1.0)*x1089))+(((-1.0)*r02*x1054*x1060))+(((-1.0)*r02*x1054*x1065)))))))+(IKabs(((((-8.0)*x1053))+(((-1.0)*x1059*x1062))+(((-8.0)*x1057*x1058))+((cj1*x1058*x1061)))))+(IKabs(((((-8.0)*x1058*x1060))+(((-1.0)*sj1*x1058*x1061))+(((-1.0)*x1055*x1062))+(((8.0)*x1069))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1090=(r10*sj3);
IkReal x1091=(r01*sj4);
IkReal x1092=(cj1*cj2);
IkReal x1093=(cj3*cj4);
IkReal x1094=(sj1*sj2);
IkReal x1095=(cj4*r02);
IkReal x1096=((4.0)*r11*sj3);
IkReal x1097=(cj3*r12*sj4);
IkReal x1098=((4.0)*r00*sj4);
IkReal x1099=((4.0)*r10*x1093);
IkReal x1100=((12.0)*x1097);
IkReal x1101=((4.0)*x1097);
IkReal x1102=(x1092*x1098);
IkReal x1103=(x1094*x1098);
IkReal x1104=((12.0)*x1092*x1095);
IkReal x1105=((12.0)*x1094*x1095);
IkReal x1106=((4.0)*x1092*x1095);
IkReal x1107=((4.0)*x1094*x1095);
IkReal x1108=(x1102+x1096);
IkReal x1109=(x1106+x1101);
IkReal x1110=(x1103+x1099);
IkReal x1111=(x1104+x1100);
IkReal x1112=((((-8.0)*r11*x1093))+(((-8.0)*x1090))+(((-8.0)*x1091*x1094))+(((8.0)*x1091*x1092)));
op[0]=(x1108+x1109+(((-1.0)*x1107))+(((-1.0)*x1110)));
op[1]=x1112;
op[2]=(x1108+x1111+(((-1.0)*x1105))+(((-1.0)*x1110)));
op[3]=((((16.0)*x1091*x1092))+(((-16.0)*x1090))+(((-16.0)*r11*x1093))+(((-16.0)*x1091*x1094)));
op[4]=(x1111+x1110+(((-1.0)*x1105))+(((-1.0)*x1108)));
op[5]=x1112;
op[6]=(x1109+x1110+(((-1.0)*x1107))+(((-1.0)*x1108)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1113=(cj4*sj3);
IkReal x1114=(cj1*sj2);
IkReal x1115=(r01*sj4);
IkReal x1116=((4.0)*sj4);
IkReal x1117=(r12*sj3);
IkReal x1118=(cj4*r02);
IkReal x1119=(cj2*sj1);
IkReal x1120=(cj3*r10);
IkReal x1121=((4.0)*cj3*r11);
IkReal x1122=((4.0)*r10*x1113);
IkReal x1123=(x1116*x1117);
IkReal x1124=((12.0)*sj4*x1117);
IkReal x1125=(r00*x1114*x1116);
IkReal x1126=(r00*x1116*x1119);
IkReal x1127=((12.0)*x1118*x1119);
IkReal x1128=((12.0)*x1114*x1118);
IkReal x1129=((4.0)*x1118*x1119);
IkReal x1130=((4.0)*x1114*x1118);
IkReal x1131=(x1129+x1130);
IkReal x1132=(x1128+x1127);
IkReal x1133=((((8.0)*x1120))+(((-8.0)*r11*x1113))+(((-8.0)*x1115*x1119))+(((-8.0)*x1114*x1115)));
IkReal x1134=(x1121+x1122+x1125+x1126);
j5evalpoly[0]=(x1123+x1134+((x1133*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5)*(((((-16.0)*x1115*x1119))+(((-16.0)*x1114*x1115))+(((16.0)*x1120))+(((-16.0)*r11*x1113))))))+(((-1.0)*x1131))+(((htj5*htj5*htj5*htj5)*((x1124+(((-1.0)*x1134))+(((-1.0)*x1132))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1123+(((-1.0)*x1134))+(((-1.0)*x1131))))))+((htj5*x1133))+(((htj5*htj5)*((x1124+x1134+(((-1.0)*x1132)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1135=(cj5*sj4);
IkReal x1136=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r00*x1135))+(((-1.0)*r01*x1136)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1135))+((r11*x1136))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r00*x1135))+(((-1.0)*r01*x1136))))+IKsqr(((((-1.0)*r10*x1135))+((r11*x1136))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r00*x1135))+(((-1.0)*r01*x1136))), ((((-1.0)*r10*x1135))+((r11*x1136))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1137=IKcos(j0);
IkReal x1138=IKsin(j0);
IkReal x1139=((1.0)*cj3);
IkReal x1140=(r02*sj4);
IkReal x1141=(cj4*cj5);
IkReal x1142=((1.0)*sj3);
IkReal x1143=((1.0)*sj2);
IkReal x1144=(r12*sj4);
IkReal x1145=(r01*sj5);
IkReal x1146=((1.0)*sj4);
IkReal x1147=(cj5*r01);
IkReal x1148=(cj4*sj3);
IkReal x1149=(cj5*sj4);
IkReal x1150=(cj5*r11);
IkReal x1151=(r00*sj5);
IkReal x1152=((1.0)*cj2);
IkReal x1153=((0.3922)*cj2);
IkReal x1154=(r11*sj5);
IkReal x1155=(r10*sj5);
IkReal x1156=((0.3922)*sj2);
IkReal x1157=((1.0)*cj4);
IkReal x1158=(cj3*cj4*sj5);
IkReal x1159=(cj1*x1137);
IkReal x1160=(cj1*x1138);
IkReal x1161=(sj1*x1137);
IkReal x1162=(sj1*x1138);
evalcond[0]=(x1137+(((-1.0)*x1146*x1154))+(((-1.0)*r12*x1157))+((r10*x1149)));
evalcond[1]=((((-1.0)*x1145*x1146))+(((-1.0)*r02*x1157))+(((-1.0)*x1138))+((r00*x1149)));
evalcond[2]=((((-1.0)*x1156*x1161))+(((0.425)*x1159))+(((-0.1091)*x1138))+((x1153*x1159))+(((-1.0)*px))+(((0.0946)*x1147))+(((0.0946)*x1151)));
evalcond[3]=((((-1.0)*x1156*x1162))+((x1153*x1160))+(((-1.0)*py))+(((0.0946)*x1155))+(((0.0946)*x1150))+(((0.425)*x1160))+(((0.1091)*x1137)));
evalcond[4]=(((cj2*x1159))+((cj3*cj4*x1145))+((sj3*x1151))+((sj3*x1147))+(((-1.0)*x1143*x1161))+(((-1.0)*x1139*x1140))+(((-1.0)*r00*x1139*x1141)));
evalcond[5]=(((sj3*x1155))+((sj3*x1150))+((cj3*cj4*x1154))+(((-1.0)*r10*x1139*x1141))+(((-1.0)*x1143*x1162))+(((-1.0)*x1139*x1144))+((cj2*x1160)));
evalcond[6]=(((x1145*x1148))+(((-1.0)*x1140*x1142))+(((-1.0)*x1152*x1161))+(((-1.0)*x1143*x1159))+(((-1.0)*r00*x1141*x1142))+(((-1.0)*x1139*x1151))+(((-1.0)*x1139*x1147)));
evalcond[7]=((((-1.0)*x1152*x1162))+(((-1.0)*x1139*x1150))+(((-1.0)*x1139*x1155))+(((-1.0)*x1143*x1160))+((x1148*x1154))+(((-1.0)*r10*x1141*x1142))+(((-1.0)*x1142*x1144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1163=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1164=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1164);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1164);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1165=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1165);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1165);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(r22,-1);
if(!x1166.valid){
continue;
}
sj4array[0]=((x1166.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1167=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1167);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1167);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
IkReal x1168=x1169.value;
j5array[0]=((-1.0)*x1168);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1168)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1170=((1.0)*sj4);
if( IKabs(((((-1.0)*r01*sj5*x1170))+((cj5*r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1170))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj5*x1170))+((cj5*r00*sj4))))+IKsqr(((((-1.0)*cj5*r10*x1170))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj5*x1170))+((cj5*r00*sj4))), ((((-1.0)*cj5*r10*x1170))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1171=IKcos(j0);
IkReal x1172=IKsin(j0);
IkReal x1173=(cj5*sj4);
IkReal x1174=(cj5*r01);
IkReal x1175=(sj1*sj2);
IkReal x1176=(cj1*cj2);
IkReal x1177=((0.425)*cj1);
IkReal x1178=(cj5*r11);
IkReal x1179=(r00*sj5);
IkReal x1180=(r10*sj5);
IkReal x1181=((1.0)*x1172);
IkReal x1182=((1.0)*sj4*sj5);
IkReal x1183=((0.3922)*x1172);
IkReal x1184=((0.3922)*x1171);
evalcond[0]=((((-1.0)*r11*x1182))+x1171+((r10*x1173)));
evalcond[1]=((((-1.0)*r01*x1182))+((r00*x1173))+(((-1.0)*x1181)));
evalcond[2]=(x1174+x1179+(((-1.0)*x1171*x1175))+((x1171*x1176)));
evalcond[3]=((((-1.0)*x1175*x1181))+x1180+x1178+((x1172*x1176)));
evalcond[4]=((((0.0946)*x1179))+(((0.0946)*x1174))+(((-1.0)*x1175*x1184))+((x1176*x1184))+(((-1.0)*px))+((x1171*x1177))+(((-0.1091)*x1172)));
evalcond[5]=((((0.0946)*x1178))+(((-1.0)*x1175*x1183))+(((0.0946)*x1180))+(((0.1091)*x1171))+((x1176*x1183))+(((-1.0)*py))+((x1172*x1177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1185=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1185);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1185);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(r22,-1);
if(!x1186.valid){
continue;
}
sj4array[0]=((-1.0)*(x1186.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1187=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1187);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1187);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1189 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1189.valid){
continue;
}
IkReal x1188=x1189.value;
j5array[0]=((-1.0)*x1188);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1188)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1190=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1190)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1190))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1190))))+IKsqr(((((-1.0)*cj5*r10*x1190))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1190))), ((((-1.0)*cj5*r10*x1190))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1191=IKcos(j0);
IkReal x1192=IKsin(j0);
IkReal x1193=(sj1*sj2);
IkReal x1194=((1.0)*sj5);
IkReal x1195=(cj1*cj2);
IkReal x1196=((0.0946)*cj5);
IkReal x1197=((1.0)*cj5);
IkReal x1198=(cj5*sj4);
IkReal x1199=((0.0946)*sj5);
IkReal x1200=((0.425)*cj1);
IkReal x1201=((1.0)*x1192);
IkReal x1202=((0.3922)*x1192);
IkReal x1203=((0.3922)*x1191);
evalcond[0]=(x1191+((r10*x1198))+(((-1.0)*r11*sj4*x1194)));
evalcond[1]=(((r00*x1198))+(((-1.0)*r01*sj4*x1194))+(((-1.0)*x1201)));
evalcond[2]=((((-1.0)*r00*x1194))+(((-1.0)*x1191*x1193))+((x1191*x1195))+(((-1.0)*r01*x1197)));
evalcond[3]=((((-1.0)*r10*x1194))+((x1192*x1195))+(((-1.0)*r11*x1197))+(((-1.0)*x1193*x1201)));
evalcond[4]=((((-0.1091)*x1192))+((r01*x1196))+((r00*x1199))+((x1191*x1200))+(((-1.0)*px))+((x1195*x1203))+(((-1.0)*x1193*x1203)));
evalcond[5]=(((r10*x1199))+((x1192*x1200))+(((-1.0)*py))+((x1195*x1202))+((r11*x1196))+(((0.1091)*x1191))+(((-1.0)*x1193*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1204=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1204);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1204);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1205=IKPowWithIntegerCheck(r22,-1);
if(!x1205.valid){
continue;
}
sj4array[0]=((x1205.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1206=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1206);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1206);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1208 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
IkReal x1207=x1208.value;
j5array[0]=((-1.0)*x1207);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1207)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1209=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1209))))+IKsqr((((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1209))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1209))), (((r11*sj4*sj5))+(((-1.0)*cj5*r10*x1209))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1210=IKcos(j0);
IkReal x1211=IKsin(j0);
IkReal x1212=((1.0)*sj5);
IkReal x1213=((0.0946)*cj5);
IkReal x1214=((0.425)*cj1);
IkReal x1215=(cj5*sj4);
IkReal x1216=((1.0)*cj5);
IkReal x1217=((0.0946)*sj5);
IkReal x1218=((1.0)*cj1*sj2);
IkReal x1219=((1.0)*cj2*sj1);
evalcond[0]=(x1210+((r10*x1215))+(((-1.0)*r11*sj4*x1212)));
evalcond[1]=((((-1.0)*r01*sj4*x1212))+((r00*x1215))+(((-1.0)*x1211)));
evalcond[2]=(((x1210*x1214))+((r00*x1217))+((r01*x1213))+(((-1.0)*px))+(((-0.1091)*x1211)));
evalcond[3]=((((0.1091)*x1210))+((r11*x1213))+((r10*x1217))+(((-1.0)*py))+((x1211*x1214)));
evalcond[4]=((((-1.0)*r00*x1212))+(((-1.0)*r01*x1216))+(((-1.0)*x1210*x1218))+(((-1.0)*x1210*x1219)));
evalcond[5]=((((-1.0)*r10*x1212))+(((-1.0)*x1211*x1219))+(((-1.0)*x1211*x1218))+(((-1.0)*r11*x1216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1220=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1220);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1220);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(r22,-1);
if(!x1221.valid){
continue;
}
sj4array[0]=((-1.0)*(x1221.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1222=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1222);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1222);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1224 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1224.valid){
continue;
}
IkReal x1223=x1224.value;
j5array[0]=((-1.0)*x1223);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1223)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1225=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1225))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1225))))+IKsqr(((((-1.0)*cj5*r10*x1225))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1225))), ((((-1.0)*cj5*r10*x1225))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1226=IKcos(j0);
IkReal x1227=IKsin(j0);
IkReal x1228=(cj5*sj4);
IkReal x1229=(cj5*r01);
IkReal x1230=((0.425)*cj1);
IkReal x1231=(cj5*r11);
IkReal x1232=(r00*sj5);
IkReal x1233=(r10*sj5);
IkReal x1234=((1.0)*cj1*sj2);
IkReal x1235=((1.0)*sj4*sj5);
IkReal x1236=((1.0)*cj2*sj1);
evalcond[0]=(x1226+(((-1.0)*r11*x1235))+((r10*x1228)));
evalcond[1]=((((-1.0)*x1227))+(((-1.0)*r01*x1235))+((r00*x1228)));
evalcond[2]=(x1232+x1229+(((-1.0)*x1226*x1236))+(((-1.0)*x1226*x1234)));
evalcond[3]=(x1231+x1233+(((-1.0)*x1227*x1236))+(((-1.0)*x1227*x1234)));
evalcond[4]=((((-0.1091)*x1227))+(((0.0946)*x1229))+(((0.0946)*x1232))+(((-1.0)*px))+((x1226*x1230)));
evalcond[5]=((((0.0946)*x1233))+(((0.0946)*x1231))+(((-1.0)*py))+((x1227*x1230))+(((0.1091)*x1226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1237=IKPowWithIntegerCheck(cj3,-1);
if(!x1237.valid){
continue;
}
CheckValue<IkReal> x1238=IKPowWithIntegerCheck(r22,-1);
if(!x1238.valid){
continue;
}
sj4array[0]=((x1237.value)*(x1238.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1239=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1239);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1239);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1240=((4.0)*r01);
IkReal x1241=((16.0)*r00);
IkReal x1242=(cj3*sj2);
IkReal x1243=((8.0)*r00);
IkReal x1244=(cj2*cj3);
IkReal x1245=(cj4*r01);
IkReal x1246=((16.0)*cj1);
IkReal x1247=((8.0)*sj1);
IkReal x1248=((16.0)*sj1);
IkReal x1249=((8.0)*cj1);
IkReal x1250=(sj2*sj3);
IkReal x1251=(cj2*sj3);
IkReal x1252=(sj1*x1251);
IkReal x1253=((4.0)*cj4*r00);
IkReal x1254=(((cj1*x1240*x1250))+((sj1*x1240*x1242))+((x1240*x1252))+((sj1*x1250*x1253)));
IkReal x1255=(((cj1*x1240*x1244))+((cj1*x1242*x1253))+((cj1*x1251*x1253))+((sj1*x1244*x1253)));
IkReal x1256=((((-1.0)*x1254))+x1255);
IkReal x1257=((((-1.0)*x1245*x1247*x1250))+((x1243*x1252))+((sj1*x1242*x1243))+((x1244*x1245*x1247))+(((-1.0)*cj1*x1243*x1244))+((cj1*x1243*x1250))+((x1245*x1249*x1251))+((x1242*x1245*x1249)));
IkReal x1258=((((-1.0)*x1255))+x1254);
op[0]=x1256;
op[1]=x1257;
op[2]=x1256;
op[3]=(((sj1*x1241*x1242))+((x1245*x1246*x1251))+((cj1*x1241*x1250))+((x1241*x1252))+(((-1.0)*cj1*x1241*x1244))+((x1244*x1245*x1248))+((x1242*x1245*x1246))+(((-1.0)*x1245*x1248*x1250)));
op[4]=x1258;
op[5]=x1257;
op[6]=x1258;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1259=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1259)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1259))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1259))))+IKsqr(((((-1.0)*cj5*r10*x1259))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1259))), ((((-1.0)*cj5*r10*x1259))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1260=IKcos(j0);
IkReal x1261=IKsin(j0);
IkReal x1262=((0.0946)*cj5);
IkReal x1263=(r10*sj3);
IkReal x1264=(cj3*r00);
IkReal x1265=(cj5*sj4);
IkReal x1266=((1.0)*sj2);
IkReal x1267=((1.0)*sj5);
IkReal x1268=(cj3*r10);
IkReal x1269=(cj5*r01);
IkReal x1270=((1.0)*cj3);
IkReal x1271=(r11*sj3);
IkReal x1272=(r00*sj3);
IkReal x1273=((1.0)*cj2);
IkReal x1274=(cj4*sj5);
IkReal x1275=((0.0946)*sj5);
IkReal x1276=((0.3922)*sj2);
IkReal x1277=((0.3922)*cj2);
IkReal x1278=((1.0)*cj4*cj5);
IkReal x1279=(sj1*x1261);
IkReal x1280=(cj1*x1260);
IkReal x1281=(cj1*x1261);
IkReal x1282=(r01*x1274);
IkReal x1283=(sj1*x1260);
evalcond[0]=(x1260+((r10*x1265))+(((-1.0)*r11*sj4*x1267)));
evalcond[1]=((((-1.0)*r01*sj4*x1267))+(((-1.0)*x1261))+((r00*x1265)));
evalcond[2]=((((-1.0)*x1266*x1283))+((cj2*x1280))+((cj3*x1282))+(((-1.0)*x1264*x1278))+((sj3*x1269))+((sj5*x1272)));
evalcond[3]=((((-1.0)*x1268*x1278))+((sj5*x1263))+((cj3*r11*x1274))+(((-1.0)*x1266*x1279))+((cj2*x1281))+((cj5*x1271)));
evalcond[4]=((((-1.0)*x1264*x1267))+(((-1.0)*x1266*x1280))+(((-1.0)*x1272*x1278))+(((-1.0)*x1269*x1270))+(((-1.0)*x1273*x1283))+((sj3*x1282)));
evalcond[5]=((((-1.0)*cj5*r11*x1270))+(((-1.0)*x1266*x1281))+(((-1.0)*x1267*x1268))+(((-1.0)*x1263*x1278))+(((-1.0)*x1273*x1279))+((x1271*x1274)));
evalcond[6]=((((0.425)*x1280))+(((-1.0)*x1276*x1283))+(((-0.1091)*x1261))+(((-1.0)*px))+((x1277*x1280))+((r00*x1275))+((r01*x1262)));
evalcond[7]=((((0.425)*x1281))+((r11*x1262))+((r10*x1275))+(((-1.0)*x1276*x1279))+(((-1.0)*py))+((x1277*x1281))+(((0.1091)*x1260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1284=IKPowWithIntegerCheck(r22,-1);
if(!x1284.valid){
continue;
}
CheckValue<IkReal> x1285=IKPowWithIntegerCheck(sj3,-1);
if(!x1285.valid){
continue;
}
sj4array[0]=((x1284.value)*(x1285.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1286=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1286);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1286);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1287=((4.0)*r01);
IkReal x1288=((16.0)*r00);
IkReal x1289=(cj3*sj2);
IkReal x1290=((8.0)*r00);
IkReal x1291=(cj2*cj3);
IkReal x1292=(cj4*r01);
IkReal x1293=((16.0)*cj1);
IkReal x1294=((8.0)*sj1);
IkReal x1295=((16.0)*sj1);
IkReal x1296=((8.0)*cj1);
IkReal x1297=(sj2*sj3);
IkReal x1298=(cj2*sj3);
IkReal x1299=(sj1*x1298);
IkReal x1300=((4.0)*cj4*r00);
IkReal x1301=(((sj1*x1287*x1289))+((x1287*x1299))+((sj1*x1297*x1300))+((cj1*x1287*x1297)));
IkReal x1302=(((cj1*x1289*x1300))+((cj1*x1298*x1300))+((sj1*x1291*x1300))+((cj1*x1287*x1291)));
IkReal x1303=(x1302+(((-1.0)*x1301)));
IkReal x1304=(((sj1*x1289*x1290))+(((-1.0)*cj1*x1290*x1291))+((x1290*x1299))+((x1291*x1292*x1294))+((x1289*x1292*x1296))+((x1292*x1296*x1298))+(((-1.0)*x1292*x1294*x1297))+((cj1*x1290*x1297)));
IkReal x1305=(x1301+(((-1.0)*x1302)));
op[0]=x1303;
op[1]=x1304;
op[2]=x1303;
op[3]=(((x1288*x1299))+((x1291*x1292*x1295))+((cj1*x1288*x1297))+((x1289*x1292*x1293))+((sj1*x1288*x1289))+(((-1.0)*x1292*x1295*x1297))+(((-1.0)*cj1*x1288*x1291))+((x1292*x1293*x1298)));
op[4]=x1305;
op[5]=x1304;
op[6]=x1305;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1306=((1.0)*sj4);
if( IKabs((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r10*x1306))+((r11*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1306))))+IKsqr(((((-1.0)*cj5*r10*x1306))+((r11*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r00*sj4))+(((-1.0)*r01*sj5*x1306))), ((((-1.0)*cj5*r10*x1306))+((r11*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1307=IKcos(j0);
IkReal x1308=IKsin(j0);
IkReal x1309=((0.0946)*cj5);
IkReal x1310=(r10*sj3);
IkReal x1311=(cj3*r00);
IkReal x1312=(cj5*sj4);
IkReal x1313=((1.0)*sj2);
IkReal x1314=((1.0)*sj5);
IkReal x1315=(cj3*r10);
IkReal x1316=(cj5*r01);
IkReal x1317=((1.0)*cj3);
IkReal x1318=(r11*sj3);
IkReal x1319=(r00*sj3);
IkReal x1320=((1.0)*cj2);
IkReal x1321=(cj4*sj5);
IkReal x1322=((0.0946)*sj5);
IkReal x1323=((0.3922)*sj2);
IkReal x1324=((0.3922)*cj2);
IkReal x1325=((1.0)*cj4*cj5);
IkReal x1326=(sj1*x1308);
IkReal x1327=(cj1*x1307);
IkReal x1328=(cj1*x1308);
IkReal x1329=(r01*x1321);
IkReal x1330=(sj1*x1307);
evalcond[0]=(x1307+((r10*x1312))+(((-1.0)*r11*sj4*x1314)));
evalcond[1]=(((r00*x1312))+(((-1.0)*x1308))+(((-1.0)*r01*sj4*x1314)));
evalcond[2]=(((sj3*x1316))+((sj5*x1319))+((cj2*x1327))+((cj3*x1329))+(((-1.0)*x1313*x1330))+(((-1.0)*x1311*x1325)));
evalcond[3]=((((-1.0)*x1315*x1325))+((cj5*x1318))+(((-1.0)*x1313*x1326))+((sj5*x1310))+((cj2*x1328))+((cj3*r11*x1321)));
evalcond[4]=((((-1.0)*x1311*x1314))+(((-1.0)*x1319*x1325))+((sj3*x1329))+(((-1.0)*x1313*x1327))+(((-1.0)*x1320*x1330))+(((-1.0)*x1316*x1317)));
evalcond[5]=((((-1.0)*cj5*r11*x1317))+(((-1.0)*x1313*x1328))+(((-1.0)*x1314*x1315))+(((-1.0)*x1310*x1325))+((x1318*x1321))+(((-1.0)*x1320*x1326)));
evalcond[6]=(((r00*x1322))+(((-1.0)*x1323*x1330))+((x1324*x1327))+(((-1.0)*px))+(((-0.1091)*x1308))+((r01*x1309))+(((0.425)*x1327)));
evalcond[7]=((((-1.0)*x1323*x1326))+((x1324*x1328))+((r10*x1322))+(((0.1091)*x1307))+(((-1.0)*py))+((r11*x1309))+(((0.425)*x1328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1333 = IKatan2WithCheck(IkReal(((0.0946)*r21)),IkReal(((0.0946)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1333.valid){
continue;
}
IkReal x1331=((1.0)*(x1333.value));
if((((((0.00894916)*(r21*r21)))+(((0.00894916)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1334=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.00894916)*(r21*r21)))+(((0.00894916)*(r20*r20)))))),-1);
if(!x1334.valid){
continue;
}
if( (((-1.0)*(x1334.value)*(((((-0.3922)*cj2*sj1))+(((-0.3922)*cj1*sj2))+(((-1.0)*pz))+(((-0.425)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1334.value)*(((((-0.3922)*cj2*sj1))+(((-0.3922)*cj1*sj2))+(((-1.0)*pz))+(((-0.425)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1332=((-1.0)*(IKasin(((-1.0)*(x1334.value)*(((((-0.3922)*cj2*sj1))+(((-0.3922)*cj1*sj2))+(((-1.0)*pz))+(((-0.425)*sj1))))))));
j5array[0]=((((-1.0)*x1331))+(((-1.0)*x1332)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1332))+(((-1.0)*x1331)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1335=cj5*cj5;
IkReal x1336=r21*r21;
IkReal x1337=(cj3*x1335);
IkReal x1338=(((x1337*(r20*r20)))+(((-2.0)*cj3*cj5*r20*r21*sj5))+((cj3*(r22*r22)))+((cj3*x1336))+(((-1.0)*x1336*x1337)));
j4eval[0]=x1338;
j4eval[1]=IKsign(x1338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1339=cj5*cj5;
IkReal x1340=r21*r21;
IkReal x1341=(sj3*x1339);
IkReal x1342=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+(((-1.0)*x1340*x1341))+((sj3*x1340))+((x1341*(r20*r20))));
j4eval[0]=x1342;
j4eval[1]=IKsign(x1342);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1343=cj1*cj1;
IkReal x1344=cj2*cj2;
IkReal x1345=(cj1*sj1*sj2);
IkReal x1346=(cj2*x1343);
IkReal x1347=(x1343*x1344);
j0eval[0]=((6.18275857180378)+x1343+(((-5.73869279992359)*x1344))+(((-11.4773855998472)*cj2*x1345))+(((11.4773855998472)*x1347))+(((-12.4372485464943)*x1345))+(((12.4372485464943)*x1346)));
j0eval[1]=IKsign(((16572365.0)+(((33337000.0)*x1346))+(((-15382084.0)*x1344))+(((-33337000.0)*x1345))+(((30764168.0)*x1347))+(((2680416.0)*x1343))+(((-30764168.0)*cj2*x1345))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1348=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x1348;
j0eval[1]=IKsign(x1348);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1349=cj5*cj5;
IkReal x1350=r21*r21;
IkReal x1351=(cj2*sj1);
IkReal x1352=(cj1*sj2);
IkReal x1353=((1.0)*r22);
IkReal x1354=(r21*sj5);
IkReal x1355=((1.0)*cj5*r20);
IkReal x1356=(x1350+(((-2.0)*cj5*r20*x1354))+(r22*r22)+((x1349*(r20*r20)))+(((-1.0)*x1349*x1350)));
j4eval[0]=x1356;
j4eval[1]=((IKabs(((((-1.0)*x1352*x1355))+((x1351*x1354))+(((-1.0)*x1351*x1355))+((x1352*x1354)))))+(IKabs(((((-1.0)*x1352*x1353))+(((-1.0)*x1351*x1353))))));
j4eval[2]=IKsign(x1356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x1357=cj1*cj1;
IkReal x1358=(cj2*sj2);
IkReal x1359=(cj2*sj1);
IkReal x1360=(cj1*sj1);
j0eval[0]=(x1358+x1360+(((-2.0)*cj1*cj2*x1359))+(((-1.08363080061193)*sj2*x1357))+(((-2.0)*x1357*x1358))+(((-1.08363080061193)*cj1*x1359)));
j0eval[1]=((((-1.0)*x1359))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.20226214184354)*py))+(((-0.160507586484496)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.20226214184354)*px))+(((0.160507586484496)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.20226214184354)*py))+(((-0.160507586484496)*px))))+IKsqr(((((1.20226214184354)*px))+(((0.160507586484496)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.20226214184354)*py))+(((-0.160507586484496)*px))), ((((1.20226214184354)*px))+(((0.160507586484496)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1361=IKsin(j0);
IkReal x1362=IKcos(j0);
evalcond[0]=((((0.8172)*x1362))+(((-1.0)*px))+(((-0.1091)*x1361)));
evalcond[1]=((((0.1091)*x1362))+(((0.8172)*x1361))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1363=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1363;
j4eval[1]=IKsign(x1363);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1364=cj5*cj5;
IkReal x1365=((1.0)*r21);
IkReal x1366=(cj5*sj5);
IkReal x1367=((((-1.0)*r01*x1364*x1365))+((r01*r21))+(((-1.0)*r00*x1365*x1366))+((r00*r20*x1364))+((r02*r22))+(((-1.0)*r01*r20*x1366)));
j4eval[0]=x1367;
j4eval[1]=IKsign(x1367);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x1365))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1368=cj5*cj5;
IkReal x1369=(cj5*r20);
IkReal x1370=((1.0)*sj5);
IkReal x1371=(r11*r21);
IkReal x1372=((((-1.0)*r11*x1369*x1370))+x1371+((r10*r20*x1368))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1370))+(((-1.0)*x1368*x1371)));
j4eval[0]=x1372;
j4eval[1]=IKsign(x1372);
j4eval[2]=((IKabs((((sj0*x1369))+(((-1.0)*r21*sj0*x1370)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1373=cj5*cj5;
IkReal x1374=(cj5*r20);
IkReal x1375=((1.0)*sj5);
IkReal x1376=(r11*r21);
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1375))+((sj0*x1374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
CheckValue<IkReal> x1378=IKPowWithIntegerCheck(IKsign((x1376+(((-1.0)*x1373*x1376))+((r10*r20*x1373))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1375))+(((-1.0)*r11*x1374*x1375)))),-1);
if(!x1378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1377.value)+(((1.5707963267949)*(x1378.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1379=IKsin(j4);
IkReal x1380=IKcos(j4);
IkReal x1381=(cj5*r00);
IkReal x1382=(r11*sj5);
IkReal x1383=(cj5*r10);
IkReal x1384=(r01*sj5);
IkReal x1385=(cj5*r20);
IkReal x1386=(r21*sj5);
IkReal x1387=((1.0)*x1380);
IkReal x1388=((1.0)*x1379);
evalcond[0]=(((x1379*x1385))+(((-1.0)*r22*x1387))+(((-1.0)*x1386*x1388)));
evalcond[1]=(((x1380*x1386))+(((-1.0)*r22*x1388))+(((-1.0)*x1385*x1387)));
evalcond[2]=((((-1.0)*r12*x1387))+cj0+(((-1.0)*x1382*x1388))+((x1379*x1383)));
evalcond[3]=(((x1380*x1384))+cj0+(((-1.0)*r02*x1388))+(((-1.0)*x1381*x1387)));
evalcond[4]=((((-1.0)*r12*x1388))+((x1380*x1382))+sj0+(((-1.0)*x1383*x1387)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1384*x1388))+(((-1.0)*r02*x1387))+((x1379*x1381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1389=cj5*cj5;
IkReal x1390=((1.0)*r21);
IkReal x1391=(cj5*sj5);
CheckValue<IkReal> x1392 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1390))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1392.valid){
continue;
}
CheckValue<IkReal> x1393=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1389*x1390))+(((-1.0)*r00*x1390*x1391))+((r01*r21))+(((-1.0)*r01*r20*x1391))+((r02*r22))+((r00*r20*x1389)))),-1);
if(!x1393.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1392.value)+(((1.5707963267949)*(x1393.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1394=IKsin(j4);
IkReal x1395=IKcos(j4);
IkReal x1396=(cj5*r00);
IkReal x1397=(r11*sj5);
IkReal x1398=(cj5*r10);
IkReal x1399=(r01*sj5);
IkReal x1400=(cj5*r20);
IkReal x1401=(r21*sj5);
IkReal x1402=((1.0)*x1395);
IkReal x1403=((1.0)*x1394);
evalcond[0]=((((-1.0)*r22*x1402))+((x1394*x1400))+(((-1.0)*x1401*x1403)));
evalcond[1]=((((-1.0)*r22*x1403))+((x1395*x1401))+(((-1.0)*x1400*x1402)));
evalcond[2]=((((-1.0)*r12*x1402))+cj0+((x1394*x1398))+(((-1.0)*x1397*x1403)));
evalcond[3]=(cj0+((x1395*x1399))+(((-1.0)*r02*x1403))+(((-1.0)*x1396*x1402)));
evalcond[4]=((((-1.0)*r12*x1403))+sj0+(((-1.0)*x1398*x1402))+((x1395*x1397)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1399*x1403))+((x1394*x1396))+(((-1.0)*r02*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1404.value)+(((1.5707963267949)*(x1405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1406=IKsin(j4);
IkReal x1407=IKcos(j4);
IkReal x1408=(cj5*r00);
IkReal x1409=(r11*sj5);
IkReal x1410=(cj5*r10);
IkReal x1411=(r01*sj5);
IkReal x1412=(cj5*r20);
IkReal x1413=(r21*sj5);
IkReal x1414=((1.0)*x1407);
IkReal x1415=((1.0)*x1406);
evalcond[0]=((((-1.0)*x1413*x1415))+(((-1.0)*r22*x1414))+((x1406*x1412)));
evalcond[1]=(((x1407*x1413))+(((-1.0)*x1412*x1414))+(((-1.0)*r22*x1415)));
evalcond[2]=(cj0+((x1406*x1410))+(((-1.0)*r12*x1414))+(((-1.0)*x1409*x1415)));
evalcond[3]=(((x1407*x1411))+cj0+(((-1.0)*r02*x1415))+(((-1.0)*x1408*x1414)));
evalcond[4]=(sj0+(((-1.0)*x1410*x1414))+(((-1.0)*r12*x1415))+((x1407*x1409)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1414))+(((-1.0)*x1411*x1415))+((x1406*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52722740808944)*py))+(((-8.4061131165414)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.52722740808944)*px))+(((8.4061131165414)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52722740808944)*py))+(((-8.4061131165414)*px))))+IKsqr(((((2.52722740808944)*px))+(((8.4061131165414)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52722740808944)*py))+(((-8.4061131165414)*px))), ((((2.52722740808944)*px))+(((8.4061131165414)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1416=IKsin(j0);
IkReal x1417=IKcos(j0);
evalcond[0]=((((0.0328)*x1417))+(((-0.1091)*x1416))+(((-1.0)*px)));
evalcond[1]=((((0.1091)*x1417))+(((0.0328)*x1416))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1418=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1418;
j4eval[1]=IKsign(x1418);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1419=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1419;
j4eval[1]=IKsign(x1419);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1420=cj5*cj5;
IkReal x1421=(r11*r21);
IkReal x1422=((1.0)*cj5*sj5);
IkReal x1423=((((-1.0)*r11*r20*x1422))+(((-1.0)*r10*r21*x1422))+(((-1.0)*x1420*x1421))+((r12*r22))+x1421+((r10*r20*x1420)));
j4eval[0]=x1423;
j4eval[1]=IKsign(x1423);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1424=cj5*cj5;
IkReal x1425=(r11*r21);
IkReal x1426=((1.0)*cj5*sj5);
CheckValue<IkReal> x1427 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1427.valid){
continue;
}
CheckValue<IkReal> x1428=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r20*x1426))+(((-1.0)*r10*r21*x1426))+((r12*r22))+(((-1.0)*x1424*x1425))+x1425+((r10*r20*x1424)))),-1);
if(!x1428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1427.value)+(((1.5707963267949)*(x1428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1429=IKsin(j4);
IkReal x1430=IKcos(j4);
IkReal x1431=((1.0)*sj0);
IkReal x1432=(cj5*r00);
IkReal x1433=(r11*sj5);
IkReal x1434=(cj5*r10);
IkReal x1435=(r01*sj5);
IkReal x1436=(cj5*r20);
IkReal x1437=(r21*sj5);
IkReal x1438=((1.0)*x1430);
IkReal x1439=((1.0)*x1429);
evalcond[0]=((((-1.0)*x1437*x1439))+((x1429*x1436))+(((-1.0)*r22*x1438)));
evalcond[1]=((((-1.0)*x1436*x1438))+((x1430*x1437))+(((-1.0)*r22*x1439)));
evalcond[2]=(((x1429*x1434))+(((-1.0)*r12*x1438))+cj0+(((-1.0)*x1433*x1439)));
evalcond[3]=(((x1429*x1432))+(((-1.0)*x1435*x1439))+(((-1.0)*x1431))+(((-1.0)*r02*x1438)));
evalcond[4]=(((x1430*x1435))+(((-1.0)*r02*x1439))+(((-1.0)*x1432*x1438))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1439))+((x1430*x1433))+(((-1.0)*x1434*x1438))+(((-1.0)*x1431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1440 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1440.valid){
continue;
}
CheckValue<IkReal> x1441=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1440.value)+(((1.5707963267949)*(x1441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1442=IKsin(j4);
IkReal x1443=IKcos(j4);
IkReal x1444=((1.0)*sj0);
IkReal x1445=(cj5*r00);
IkReal x1446=(r11*sj5);
IkReal x1447=(cj5*r10);
IkReal x1448=(r01*sj5);
IkReal x1449=(cj5*r20);
IkReal x1450=(r21*sj5);
IkReal x1451=((1.0)*x1443);
IkReal x1452=((1.0)*x1442);
evalcond[0]=(((x1442*x1449))+(((-1.0)*r22*x1451))+(((-1.0)*x1450*x1452)));
evalcond[1]=((((-1.0)*r22*x1452))+(((-1.0)*x1449*x1451))+((x1443*x1450)));
evalcond[2]=(((x1442*x1447))+cj0+(((-1.0)*x1446*x1452))+(((-1.0)*r12*x1451)));
evalcond[3]=(((x1442*x1445))+(((-1.0)*x1448*x1452))+(((-1.0)*r02*x1451))+(((-1.0)*x1444)));
evalcond[4]=(((x1443*x1448))+(((-1.0)*x1445*x1451))+(((-1.0)*r02*x1452))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1447*x1451))+((x1443*x1446))+(((-1.0)*x1444))+(((-1.0)*r12*x1452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1453 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1453.valid){
continue;
}
CheckValue<IkReal> x1454=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1453.value)+(((1.5707963267949)*(x1454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1455=IKsin(j4);
IkReal x1456=IKcos(j4);
IkReal x1457=((1.0)*sj0);
IkReal x1458=(cj5*r00);
IkReal x1459=(r11*sj5);
IkReal x1460=(cj5*r10);
IkReal x1461=(r01*sj5);
IkReal x1462=(cj5*r20);
IkReal x1463=(r21*sj5);
IkReal x1464=((1.0)*x1456);
IkReal x1465=((1.0)*x1455);
evalcond[0]=((((-1.0)*r22*x1464))+((x1455*x1462))+(((-1.0)*x1463*x1465)));
evalcond[1]=((((-1.0)*r22*x1465))+(((-1.0)*x1462*x1464))+((x1456*x1463)));
evalcond[2]=(cj0+(((-1.0)*x1459*x1465))+((x1455*x1460))+(((-1.0)*r12*x1464)));
evalcond[3]=(((x1455*x1458))+(((-1.0)*r02*x1464))+(((-1.0)*x1457))+(((-1.0)*x1461*x1465)));
evalcond[4]=((((-1.0)*x1458*x1464))+(((-1.0)*r02*x1465))+((x1456*x1461))+(((-1.0)*cj0)));
evalcond[5]=(((x1456*x1459))+(((-1.0)*x1457))+(((-1.0)*x1460*x1464))+(((-1.0)*r12*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1466=((1.0)*sj5);
IkReal x1467=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x1467))+(((-1.0)*r10*x1466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1467))+(((-1.0)*r00*x1466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1467))+(((-1.0)*r10*x1466))))+IKsqr(((((-1.0)*r01*x1467))+(((-1.0)*r00*x1466))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x1467))+(((-1.0)*r10*x1466))), ((((-1.0)*r01*x1467))+(((-1.0)*r00*x1466))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1468=IKsin(j0);
IkReal x1469=IKcos(j0);
IkReal x1470=((1.0)*cj5);
IkReal x1471=((0.0946)*cj5);
IkReal x1472=(r10*sj5);
IkReal x1473=(r00*sj5);
evalcond[0]=((((-1.0)*r01*x1470))+(((-1.0)*x1473))+(((-1.0)*x1469)));
evalcond[1]=((((-1.0)*r11*x1470))+(((-1.0)*x1472))+(((-1.0)*x1468)));
evalcond[2]=((((0.0946)*x1473))+(((-1.0)*px))+(((-0.1091)*x1468))+((r01*x1471)));
evalcond[3]=((((0.0946)*x1472))+((r11*x1471))+(((0.1091)*x1469))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1474=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1474;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1475=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1475;
j4eval[1]=IKsign(x1475);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1476=r21*r21;
IkReal x1477=cj5*cj5;
IkReal x1478=(cj5*r20);
IkReal x1479=(r21*sj5);
IkReal x1480=((((-1.0)*x1476))+(((-1.0)*x1477*(r20*r20)))+(((-1.0)*(r22*r22)))+((x1476*x1477))+(((2.0)*x1478*x1479)));
j4eval[0]=x1480;
j4eval[1]=((IKabs(((((-1.0)*x1479))+x1478)))+(IKabs(r22)));
j4eval[2]=IKsign(x1480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1481=r21*r21;
IkReal x1482=cj5*cj5;
IkReal x1483=(cj5*r20);
IkReal x1484=(r21*sj5);
CheckValue<IkReal> x1485=IKPowWithIntegerCheck(IKsign(((((2.0)*x1483*x1484))+(((-1.0)*x1482*(r20*r20)))+((x1481*x1482))+(((-1.0)*x1481))+(((-1.0)*(r22*r22))))),-1);
if(!x1485.valid){
continue;
}
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x1484))+x1483)),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1485.value)))+(x1486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1487=IKsin(j4);
IkReal x1488=IKcos(j4);
IkReal x1489=(cj5*r00);
IkReal x1490=(r11*sj5);
IkReal x1491=(cj5*r10);
IkReal x1492=(r01*sj5);
IkReal x1493=(cj5*r20);
IkReal x1494=(r21*sj5);
IkReal x1495=((1.0)*x1488);
IkReal x1496=((1.0)*x1487);
evalcond[0]=((((-1.0)*x1494*x1496))+((x1487*x1493))+(((-1.0)*r22*x1495)));
evalcond[1]=((((-1.0)*r02*x1496))+((x1488*x1492))+(((-1.0)*x1489*x1495)));
evalcond[2]=((((-1.0)*r12*x1496))+(((-1.0)*x1491*x1495))+((x1488*x1490)));
evalcond[3]=((((-1.0)*r12*x1495))+cj0+((x1487*x1491))+(((-1.0)*x1490*x1496)));
evalcond[4]=((-1.0)+(((-1.0)*x1493*x1495))+(((-1.0)*r22*x1496))+((x1488*x1494)));
evalcond[5]=((((-1.0)*sj0))+((x1487*x1489))+(((-1.0)*x1492*x1496))+(((-1.0)*r02*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1497 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1497.valid){
continue;
}
CheckValue<IkReal> x1498=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1498.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1497.value)+(((1.5707963267949)*(x1498.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1499=IKsin(j4);
IkReal x1500=IKcos(j4);
IkReal x1501=(cj5*r00);
IkReal x1502=(r11*sj5);
IkReal x1503=(cj5*r10);
IkReal x1504=(r01*sj5);
IkReal x1505=(cj5*r20);
IkReal x1506=(r21*sj5);
IkReal x1507=((1.0)*x1500);
IkReal x1508=((1.0)*x1499);
evalcond[0]=(((x1499*x1505))+(((-1.0)*r22*x1507))+(((-1.0)*x1506*x1508)));
evalcond[1]=((((-1.0)*x1501*x1507))+(((-1.0)*r02*x1508))+((x1500*x1504)));
evalcond[2]=(((x1500*x1502))+(((-1.0)*x1503*x1507))+(((-1.0)*r12*x1508)));
evalcond[3]=(((x1499*x1503))+cj0+(((-1.0)*x1502*x1508))+(((-1.0)*r12*x1507)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1508))+((x1500*x1506))+(((-1.0)*x1505*x1507)));
evalcond[5]=(((x1499*x1501))+(((-1.0)*sj0))+(((-1.0)*x1504*x1508))+(((-1.0)*r02*x1507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1509=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1509.valid){
continue;
}
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1509.value)))+(x1510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1511=IKsin(j4);
IkReal x1512=IKcos(j4);
IkReal x1513=(cj5*r00);
IkReal x1514=(r11*sj5);
IkReal x1515=(cj5*r10);
IkReal x1516=(r01*sj5);
IkReal x1517=(cj5*r20);
IkReal x1518=(r21*sj5);
IkReal x1519=((1.0)*x1512);
IkReal x1520=((1.0)*x1511);
evalcond[0]=((((-1.0)*r22*x1519))+(((-1.0)*x1518*x1520))+((x1511*x1517)));
evalcond[1]=((((-1.0)*x1513*x1519))+(((-1.0)*r02*x1520))+((x1512*x1516)));
evalcond[2]=((((-1.0)*r12*x1520))+(((-1.0)*x1515*x1519))+((x1512*x1514)));
evalcond[3]=(cj0+(((-1.0)*x1514*x1520))+((x1511*x1515))+(((-1.0)*r12*x1519)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1520))+(((-1.0)*x1517*x1519))+((x1512*x1518)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1519))+((x1511*x1513))+(((-1.0)*x1516*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658324867935265)*px))+(((-2.3665904051715)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658324867935265)*py))+(((-2.3665904051715)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658324867935265)*px))+(((-2.3665904051715)*py))))+IKsqr(((((0.658324867935265)*py))+(((-2.3665904051715)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658324867935265)*px))+(((-2.3665904051715)*py))), ((((0.658324867935265)*py))+(((-2.3665904051715)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1521=IKcos(j0);
IkReal x1522=IKsin(j0);
evalcond[0]=((((-0.1091)*x1522))+(((-1.0)*px))+(((-0.3922)*x1521)));
evalcond[1]=((((-1.0)*py))+(((-0.3922)*x1522))+(((0.1091)*x1521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1523=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1523;
j4eval[1]=IKsign(x1523);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1524=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1524;
j4eval[1]=IKsign(x1524);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1525=cj5*cj5;
IkReal x1526=(r11*r21);
IkReal x1527=((1.0)*cj5*sj5);
IkReal x1528=((((-1.0)*x1525*x1526))+((r12*r22))+x1526+(((-1.0)*r11*r20*x1527))+(((-1.0)*r10*r21*x1527))+((r10*r20*x1525)));
j4eval[0]=x1528;
j4eval[1]=IKsign(x1528);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1529=cj5*cj5;
IkReal x1530=(r11*r21);
IkReal x1531=((1.0)*cj5*sj5);
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1529*x1530))+((r12*r22))+x1530+(((-1.0)*r11*r20*x1531))+(((-1.0)*r10*r21*x1531))+((r10*r20*x1529)))),-1);
if(!x1532.valid){
continue;
}
CheckValue<IkReal> x1533 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1532.value)))+(x1533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1534=IKsin(j4);
IkReal x1535=IKcos(j4);
IkReal x1536=((1.0)*sj0);
IkReal x1537=(cj5*r00);
IkReal x1538=(r11*sj5);
IkReal x1539=(cj5*r10);
IkReal x1540=(r01*sj5);
IkReal x1541=(cj5*r20);
IkReal x1542=(r21*sj5);
IkReal x1543=((1.0)*x1535);
IkReal x1544=((1.0)*x1534);
evalcond[0]=((((-1.0)*r22*x1543))+((x1534*x1541))+(((-1.0)*x1542*x1544)));
evalcond[1]=((((-1.0)*r22*x1544))+((x1535*x1542))+(((-1.0)*x1541*x1543)));
evalcond[2]=(cj0+((x1534*x1539))+(((-1.0)*r12*x1543))+(((-1.0)*x1538*x1544)));
evalcond[3]=((((-1.0)*r02*x1543))+(((-1.0)*x1540*x1544))+(((-1.0)*x1536))+((x1534*x1537)));
evalcond[4]=((((-1.0)*r02*x1544))+(((-1.0)*x1537*x1543))+((x1535*x1540))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1536))+((x1535*x1538))+(((-1.0)*x1539*x1543))+(((-1.0)*r12*x1544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1545.value)+(((1.5707963267949)*(x1546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1547=IKsin(j4);
IkReal x1548=IKcos(j4);
IkReal x1549=((1.0)*sj0);
IkReal x1550=(cj5*r00);
IkReal x1551=(r11*sj5);
IkReal x1552=(cj5*r10);
IkReal x1553=(r01*sj5);
IkReal x1554=(cj5*r20);
IkReal x1555=(r21*sj5);
IkReal x1556=((1.0)*x1548);
IkReal x1557=((1.0)*x1547);
evalcond[0]=(((x1547*x1554))+(((-1.0)*r22*x1556))+(((-1.0)*x1555*x1557)));
evalcond[1]=((((-1.0)*r22*x1557))+((x1548*x1555))+(((-1.0)*x1554*x1556)));
evalcond[2]=(((x1547*x1552))+cj0+(((-1.0)*r12*x1556))+(((-1.0)*x1551*x1557)));
evalcond[3]=(((x1547*x1550))+(((-1.0)*r02*x1556))+(((-1.0)*x1553*x1557))+(((-1.0)*x1549)));
evalcond[4]=((((-1.0)*r02*x1557))+(((-1.0)*x1550*x1556))+((x1548*x1553))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1552*x1556))+(((-1.0)*r12*x1557))+((x1548*x1551))+(((-1.0)*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1558 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1558.valid){
continue;
}
CheckValue<IkReal> x1559=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1558.value)+(((1.5707963267949)*(x1559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1560=IKsin(j4);
IkReal x1561=IKcos(j4);
IkReal x1562=((1.0)*sj0);
IkReal x1563=(cj5*r00);
IkReal x1564=(r11*sj5);
IkReal x1565=(cj5*r10);
IkReal x1566=(r01*sj5);
IkReal x1567=(cj5*r20);
IkReal x1568=(r21*sj5);
IkReal x1569=((1.0)*x1561);
IkReal x1570=((1.0)*x1560);
evalcond[0]=(((x1560*x1567))+(((-1.0)*r22*x1569))+(((-1.0)*x1568*x1570)));
evalcond[1]=((((-1.0)*x1567*x1569))+(((-1.0)*r22*x1570))+((x1561*x1568)));
evalcond[2]=(((x1560*x1565))+cj0+(((-1.0)*x1564*x1570))+(((-1.0)*r12*x1569)));
evalcond[3]=(((x1560*x1563))+(((-1.0)*r02*x1569))+(((-1.0)*x1566*x1570))+(((-1.0)*x1562)));
evalcond[4]=((((-1.0)*r02*x1570))+((x1561*x1566))+(((-1.0)*x1563*x1569))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1565*x1569))+((x1561*x1564))+(((-1.0)*r12*x1570))+(((-1.0)*x1562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1571=IKsin(j0);
IkReal x1572=IKcos(j0);
IkReal x1573=((1.0)*cj5);
IkReal x1574=((0.0946)*cj5);
IkReal x1575=(r10*sj5);
IkReal x1576=(r00*sj5);
evalcond[0]=(x1572+(((-1.0)*r01*x1573))+(((-1.0)*x1576)));
evalcond[1]=(x1571+(((-1.0)*r11*x1573))+(((-1.0)*x1575)));
evalcond[2]=((((0.0946)*x1576))+(((-0.1091)*x1571))+(((-1.0)*px))+((r01*x1574)));
evalcond[3]=((((0.0946)*x1575))+(((0.1091)*x1572))+(((-1.0)*py))+((r11*x1574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1577=((1.0)*cj5);
IkReal x1578=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1577)));
j4eval[0]=x1578;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1577))))));
j4eval[2]=IKsign(x1578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1579=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1579;
j4eval[1]=IKsign(x1579);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1580=cj5*cj5;
IkReal x1581=r21*r21;
IkReal x1582=(cj5*r20);
IkReal x1583=(r21*sj5);
IkReal x1584=((r22*r22)+(((-2.0)*x1582*x1583))+(((-1.0)*x1580*x1581))+x1581+((x1580*(r20*r20))));
j4eval[0]=x1584;
j4eval[1]=IKsign(x1584);
j4eval[2]=((IKabs((x1582+(((-1.0)*x1583)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1585=cj5*cj5;
IkReal x1586=r21*r21;
IkReal x1587=(cj5*r20);
IkReal x1588=(r21*sj5);
CheckValue<IkReal> x1589 = IKatan2WithCheck(IkReal(r22),IkReal((x1587+(((-1.0)*x1588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign((((x1585*(r20*r20)))+(r22*r22)+(((-1.0)*x1585*x1586))+x1586+(((-2.0)*x1587*x1588)))),-1);
if(!x1590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1589.value)+(((1.5707963267949)*(x1590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1591=IKsin(j4);
IkReal x1592=IKcos(j4);
IkReal x1593=(cj5*r00);
IkReal x1594=(r11*sj5);
IkReal x1595=(cj5*r10);
IkReal x1596=(r01*sj5);
IkReal x1597=(cj5*r20);
IkReal x1598=(r21*sj5);
IkReal x1599=((1.0)*x1592);
IkReal x1600=((1.0)*x1591);
evalcond[0]=(((x1591*x1597))+(((-1.0)*r22*x1599))+(((-1.0)*x1598*x1600)));
evalcond[1]=(((x1592*x1596))+(((-1.0)*x1593*x1599))+(((-1.0)*r02*x1600)));
evalcond[2]=(((x1592*x1594))+(((-1.0)*x1595*x1599))+(((-1.0)*r12*x1600)));
evalcond[3]=(cj0+(((-1.0)*x1594*x1600))+((x1591*x1595))+(((-1.0)*r12*x1599)));
evalcond[4]=((1.0)+((x1592*x1598))+(((-1.0)*r22*x1600))+(((-1.0)*x1597*x1599)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1599))+((x1591*x1593))+(((-1.0)*x1596*x1600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1601 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1601.valid){
continue;
}
CheckValue<IkReal> x1602=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1601.value)+(((1.5707963267949)*(x1602.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1603=IKsin(j4);
IkReal x1604=IKcos(j4);
IkReal x1605=(cj5*r00);
IkReal x1606=(r11*sj5);
IkReal x1607=(cj5*r10);
IkReal x1608=(r01*sj5);
IkReal x1609=(cj5*r20);
IkReal x1610=(r21*sj5);
IkReal x1611=((1.0)*x1604);
IkReal x1612=((1.0)*x1603);
evalcond[0]=((((-1.0)*x1610*x1612))+(((-1.0)*r22*x1611))+((x1603*x1609)));
evalcond[1]=((((-1.0)*r02*x1612))+(((-1.0)*x1605*x1611))+((x1604*x1608)));
evalcond[2]=((((-1.0)*r12*x1612))+(((-1.0)*x1607*x1611))+((x1604*x1606)));
evalcond[3]=((((-1.0)*x1606*x1612))+(((-1.0)*r12*x1611))+cj0+((x1603*x1607)));
evalcond[4]=((1.0)+(((-1.0)*r22*x1612))+((x1604*x1610))+(((-1.0)*x1609*x1611)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1611))+((x1603*x1605))+(((-1.0)*x1608*x1612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1613=((1.0)*cj5);
CheckValue<IkReal> x1614=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1613))+(((-1.0)*r10*sj5)))),-1);
if(!x1614.valid){
continue;
}
CheckValue<IkReal> x1615 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1613)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1614.value)))+(x1615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1616=IKsin(j4);
IkReal x1617=IKcos(j4);
IkReal x1618=(cj5*r00);
IkReal x1619=(r11*sj5);
IkReal x1620=(cj5*r10);
IkReal x1621=(r01*sj5);
IkReal x1622=(cj5*r20);
IkReal x1623=(r21*sj5);
IkReal x1624=((1.0)*x1617);
IkReal x1625=((1.0)*x1616);
evalcond[0]=((((-1.0)*x1623*x1625))+(((-1.0)*r22*x1624))+((x1616*x1622)));
evalcond[1]=(((x1617*x1621))+(((-1.0)*r02*x1625))+(((-1.0)*x1618*x1624)));
evalcond[2]=((((-1.0)*r12*x1625))+((x1617*x1619))+(((-1.0)*x1620*x1624)));
evalcond[3]=((((-1.0)*r12*x1624))+(((-1.0)*x1619*x1625))+cj0+((x1616*x1620)));
evalcond[4]=((1.0)+((x1617*x1623))+(((-1.0)*x1622*x1624))+(((-1.0)*r22*x1625)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1624))+(((-1.0)*x1621*x1625))+((x1616*x1618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.3665904051715)*py))+(((-0.658324867935265)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.3665904051715)*px))+(((0.658324867935265)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.3665904051715)*py))+(((-0.658324867935265)*px))))+IKsqr(((((2.3665904051715)*px))+(((0.658324867935265)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.3665904051715)*py))+(((-0.658324867935265)*px))), ((((2.3665904051715)*px))+(((0.658324867935265)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1626=IKsin(j0);
IkReal x1627=IKcos(j0);
evalcond[0]=((((-0.1091)*x1626))+(((-1.0)*px))+(((0.3922)*x1627)));
evalcond[1]=((((0.1091)*x1627))+(((-1.0)*py))+(((0.3922)*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1628=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1628;
j4eval[1]=IKsign(x1628);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1629=cj5*cj5;
IkReal x1630=((1.0)*r21);
IkReal x1631=(cj5*sj5);
IkReal x1632=(((r00*r20*x1629))+((r01*r21))+(((-1.0)*r01*x1629*x1630))+(((-1.0)*r00*x1630*x1631))+((r02*r22))+(((-1.0)*r01*r20*x1631)));
j4eval[0]=x1632;
j4eval[1]=IKsign(x1632);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x1630))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1633=cj5*cj5;
IkReal x1634=(cj5*r20);
IkReal x1635=((1.0)*sj5);
IkReal x1636=(r11*r21);
IkReal x1637=((((-1.0)*r11*x1634*x1635))+x1636+(((-1.0)*x1633*x1636))+(((-1.0)*cj5*r10*r21*x1635))+((r12*r22))+((r10*r20*x1633)));
j4eval[0]=x1637;
j4eval[1]=IKsign(x1637);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1634))+(((-1.0)*r21*sj0*x1635))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1638=cj5*cj5;
IkReal x1639=(cj5*r20);
IkReal x1640=((1.0)*sj5);
IkReal x1641=(r11*r21);
CheckValue<IkReal> x1642 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1640))+((sj0*x1639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1642.valid){
continue;
}
CheckValue<IkReal> x1643=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1638*x1641))+x1641+(((-1.0)*cj5*r10*r21*x1640))+((r12*r22))+((r10*r20*x1638))+(((-1.0)*r11*x1639*x1640)))),-1);
if(!x1643.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1642.value)+(((1.5707963267949)*(x1643.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1644=IKsin(j4);
IkReal x1645=IKcos(j4);
IkReal x1646=(cj5*r00);
IkReal x1647=(r11*sj5);
IkReal x1648=(cj5*r10);
IkReal x1649=(r01*sj5);
IkReal x1650=(cj5*r20);
IkReal x1651=(r21*sj5);
IkReal x1652=((1.0)*x1645);
IkReal x1653=((1.0)*x1644);
evalcond[0]=((((-1.0)*r22*x1652))+((x1644*x1650))+(((-1.0)*x1651*x1653)));
evalcond[1]=((((-1.0)*r22*x1653))+(((-1.0)*x1650*x1652))+((x1645*x1651)));
evalcond[2]=(cj0+(((-1.0)*x1647*x1653))+(((-1.0)*r12*x1652))+((x1644*x1648)));
evalcond[3]=(cj0+(((-1.0)*x1646*x1652))+((x1645*x1649))+(((-1.0)*r02*x1653)));
evalcond[4]=(sj0+((x1645*x1647))+(((-1.0)*r12*x1653))+(((-1.0)*x1648*x1652)));
evalcond[5]=((((-1.0)*sj0))+((x1644*x1646))+(((-1.0)*x1649*x1653))+(((-1.0)*r02*x1652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1654=cj5*cj5;
IkReal x1655=((1.0)*r21);
IkReal x1656=(cj5*sj5);
CheckValue<IkReal> x1657=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*r20*x1656))+(((-1.0)*r01*x1654*x1655))+((r01*r21))+((r00*r20*x1654))+(((-1.0)*r00*x1655*x1656))+((r02*r22)))),-1);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1655))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1657.value)))+(x1658.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1659=IKsin(j4);
IkReal x1660=IKcos(j4);
IkReal x1661=(cj5*r00);
IkReal x1662=(r11*sj5);
IkReal x1663=(cj5*r10);
IkReal x1664=(r01*sj5);
IkReal x1665=(cj5*r20);
IkReal x1666=(r21*sj5);
IkReal x1667=((1.0)*x1660);
IkReal x1668=((1.0)*x1659);
evalcond[0]=((((-1.0)*r22*x1667))+((x1659*x1665))+(((-1.0)*x1666*x1668)));
evalcond[1]=(((x1660*x1666))+(((-1.0)*r22*x1668))+(((-1.0)*x1665*x1667)));
evalcond[2]=((((-1.0)*x1662*x1668))+cj0+(((-1.0)*r12*x1667))+((x1659*x1663)));
evalcond[3]=(((x1660*x1664))+cj0+(((-1.0)*x1661*x1667))+(((-1.0)*r02*x1668)));
evalcond[4]=(((x1660*x1662))+sj0+(((-1.0)*r12*x1668))+(((-1.0)*x1663*x1667)));
evalcond[5]=((((-1.0)*sj0))+((x1659*x1661))+(((-1.0)*r02*x1667))+(((-1.0)*x1664*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1669 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1669.valid){
continue;
}
CheckValue<IkReal> x1670=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1669.value)+(((1.5707963267949)*(x1670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1671=IKsin(j4);
IkReal x1672=IKcos(j4);
IkReal x1673=(cj5*r00);
IkReal x1674=(r11*sj5);
IkReal x1675=(cj5*r10);
IkReal x1676=(r01*sj5);
IkReal x1677=(cj5*r20);
IkReal x1678=(r21*sj5);
IkReal x1679=((1.0)*x1672);
IkReal x1680=((1.0)*x1671);
evalcond[0]=((((-1.0)*x1678*x1680))+((x1671*x1677))+(((-1.0)*r22*x1679)));
evalcond[1]=((((-1.0)*r22*x1680))+(((-1.0)*x1677*x1679))+((x1672*x1678)));
evalcond[2]=(cj0+(((-1.0)*x1674*x1680))+(((-1.0)*r12*x1679))+((x1671*x1675)));
evalcond[3]=((((-1.0)*x1673*x1679))+cj0+((x1672*x1676))+(((-1.0)*r02*x1680)));
evalcond[4]=((((-1.0)*r12*x1680))+sj0+((x1672*x1674))+(((-1.0)*x1675*x1679)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1679))+(((-1.0)*x1676*x1680))+((x1671*x1673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160507586484496)*px))+(((-1.20226214184354)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.20226214184354)*px))+(((0.160507586484496)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160507586484496)*px))+(((-1.20226214184354)*py))))+IKsqr(((((-1.20226214184354)*px))+(((0.160507586484496)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160507586484496)*px))+(((-1.20226214184354)*py))), ((((-1.20226214184354)*px))+(((0.160507586484496)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1681=IKcos(j0);
IkReal x1682=IKsin(j0);
evalcond[0]=((((-0.1091)*x1682))+(((-0.8172)*x1681))+(((-1.0)*px)));
evalcond[1]=((((0.1091)*x1681))+(((-0.8172)*x1682))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1683=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1683;
j4eval[1]=IKsign(x1683);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1684=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1684;
j4eval[1]=IKsign(x1684);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1685=cj5*cj5;
IkReal x1686=(r11*r21);
IkReal x1687=((1.0)*cj5*sj5);
IkReal x1688=(x1686+((r12*r22))+(((-1.0)*r10*r21*x1687))+(((-1.0)*r11*r20*x1687))+((r10*r20*x1685))+(((-1.0)*x1685*x1686)));
j4eval[0]=x1688;
j4eval[1]=IKsign(x1688);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1689=cj5*cj5;
IkReal x1690=(r11*r21);
IkReal x1691=((1.0)*cj5*sj5);
CheckValue<IkReal> x1692 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1692.valid){
continue;
}
CheckValue<IkReal> x1693=IKPowWithIntegerCheck(IKsign((x1690+(((-1.0)*r11*r20*x1691))+((r12*r22))+(((-1.0)*r10*r21*x1691))+((r10*r20*x1689))+(((-1.0)*x1689*x1690)))),-1);
if(!x1693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1692.value)+(((1.5707963267949)*(x1693.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1694=IKsin(j4);
IkReal x1695=IKcos(j4);
IkReal x1696=((1.0)*sj0);
IkReal x1697=(cj5*r00);
IkReal x1698=(r11*sj5);
IkReal x1699=(cj5*r10);
IkReal x1700=(r01*sj5);
IkReal x1701=(cj5*r20);
IkReal x1702=(r21*sj5);
IkReal x1703=((1.0)*x1695);
IkReal x1704=((1.0)*x1694);
evalcond[0]=((((-1.0)*x1702*x1704))+((x1694*x1701))+(((-1.0)*r22*x1703)));
evalcond[1]=((((-1.0)*r22*x1704))+((x1695*x1702))+(((-1.0)*x1701*x1703)));
evalcond[2]=((((-1.0)*x1698*x1704))+cj0+((x1694*x1699))+(((-1.0)*r12*x1703)));
evalcond[3]=((((-1.0)*x1696))+(((-1.0)*r02*x1703))+(((-1.0)*x1700*x1704))+((x1694*x1697)));
evalcond[4]=((((-1.0)*r02*x1704))+((x1695*x1700))+(((-1.0)*cj0))+(((-1.0)*x1697*x1703)));
evalcond[5]=((((-1.0)*x1696))+(((-1.0)*x1699*x1703))+((x1695*x1698))+(((-1.0)*r12*x1704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1705 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1705.valid){
continue;
}
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1705.value)+(((1.5707963267949)*(x1706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1707=IKsin(j4);
IkReal x1708=IKcos(j4);
IkReal x1709=((1.0)*sj0);
IkReal x1710=(cj5*r00);
IkReal x1711=(r11*sj5);
IkReal x1712=(cj5*r10);
IkReal x1713=(r01*sj5);
IkReal x1714=(cj5*r20);
IkReal x1715=(r21*sj5);
IkReal x1716=((1.0)*x1708);
IkReal x1717=((1.0)*x1707);
evalcond[0]=((((-1.0)*r22*x1716))+(((-1.0)*x1715*x1717))+((x1707*x1714)));
evalcond[1]=((((-1.0)*x1714*x1716))+(((-1.0)*r22*x1717))+((x1708*x1715)));
evalcond[2]=(cj0+(((-1.0)*x1711*x1717))+(((-1.0)*r12*x1716))+((x1707*x1712)));
evalcond[3]=((((-1.0)*x1713*x1717))+(((-1.0)*x1709))+(((-1.0)*r02*x1716))+((x1707*x1710)));
evalcond[4]=((((-1.0)*x1710*x1716))+(((-1.0)*r02*x1717))+((x1708*x1713))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1712*x1716))+(((-1.0)*x1709))+((x1708*x1711))+(((-1.0)*r12*x1717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1718 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1718.valid){
continue;
}
CheckValue<IkReal> x1719=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1718.value)+(((1.5707963267949)*(x1719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1720=IKsin(j4);
IkReal x1721=IKcos(j4);
IkReal x1722=((1.0)*sj0);
IkReal x1723=(cj5*r00);
IkReal x1724=(r11*sj5);
IkReal x1725=(cj5*r10);
IkReal x1726=(r01*sj5);
IkReal x1727=(cj5*r20);
IkReal x1728=(r21*sj5);
IkReal x1729=((1.0)*x1721);
IkReal x1730=((1.0)*x1720);
evalcond[0]=((((-1.0)*r22*x1729))+(((-1.0)*x1728*x1730))+((x1720*x1727)));
evalcond[1]=(((x1721*x1728))+(((-1.0)*x1727*x1729))+(((-1.0)*r22*x1730)));
evalcond[2]=(cj0+(((-1.0)*r12*x1729))+((x1720*x1725))+(((-1.0)*x1724*x1730)));
evalcond[3]=((((-1.0)*x1726*x1730))+((x1720*x1723))+(((-1.0)*x1722))+(((-1.0)*r02*x1729)));
evalcond[4]=(((x1721*x1726))+(((-1.0)*x1723*x1729))+(((-1.0)*cj0))+(((-1.0)*r02*x1730)));
evalcond[5]=((((-1.0)*r12*x1730))+((x1721*x1724))+(((-1.0)*x1725*x1729))+(((-1.0)*x1722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52722740808944)*py))+(((-8.4061131165414)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4061131165414)*py))+(((-2.52722740808944)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52722740808944)*py))+(((-8.4061131165414)*px))))+IKsqr(((((8.4061131165414)*py))+(((-2.52722740808944)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52722740808944)*py))+(((-8.4061131165414)*px))), ((((8.4061131165414)*py))+(((-2.52722740808944)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1731=IKcos(j0);
IkReal x1732=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.0328)*x1731))+(((-0.1091)*x1732)));
evalcond[1]=((((-1.0)*py))+(((0.1091)*x1731))+(((-0.0328)*x1732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1733=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1733;
j4eval[1]=IKsign(x1733);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1734=cj5*cj5;
IkReal x1735=((1.0)*r21);
IkReal x1736=(cj5*sj5);
IkReal x1737=(((r01*r21))+(((-1.0)*r01*r20*x1736))+(((-1.0)*r00*x1735*x1736))+((r02*r22))+((r00*r20*x1734))+(((-1.0)*r01*x1734*x1735)));
j4eval[0]=x1737;
j4eval[1]=IKsign(x1737);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1735)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1738=cj5*cj5;
IkReal x1739=(cj5*r20);
IkReal x1740=((1.0)*sj5);
IkReal x1741=(r11*r21);
IkReal x1742=((((-1.0)*r11*x1739*x1740))+(((-1.0)*cj5*r10*r21*x1740))+x1741+((r12*r22))+(((-1.0)*x1738*x1741))+((r10*r20*x1738)));
j4eval[0]=x1742;
j4eval[1]=IKsign(x1742);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1739))+(((-1.0)*r21*sj0*x1740))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1743=cj5*cj5;
IkReal x1744=(cj5*r20);
IkReal x1745=((1.0)*sj5);
IkReal x1746=(r11*r21);
CheckValue<IkReal> x1747=IKPowWithIntegerCheck(IKsign((((r10*r20*x1743))+(((-1.0)*cj5*r10*r21*x1745))+x1746+((r12*r22))+(((-1.0)*x1743*x1746))+(((-1.0)*r11*x1744*x1745)))),-1);
if(!x1747.valid){
continue;
}
CheckValue<IkReal> x1748 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1744))+(((-1.0)*r21*sj0*x1745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1747.value)))+(x1748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1749=IKsin(j4);
IkReal x1750=IKcos(j4);
IkReal x1751=(cj5*r00);
IkReal x1752=(r11*sj5);
IkReal x1753=(cj5*r10);
IkReal x1754=(r01*sj5);
IkReal x1755=(cj5*r20);
IkReal x1756=(r21*sj5);
IkReal x1757=((1.0)*x1750);
IkReal x1758=((1.0)*x1749);
evalcond[0]=((((-1.0)*x1756*x1758))+((x1749*x1755))+(((-1.0)*r22*x1757)));
evalcond[1]=((((-1.0)*r22*x1758))+((x1750*x1756))+(((-1.0)*x1755*x1757)));
evalcond[2]=((((-1.0)*r12*x1757))+((x1749*x1753))+cj0+(((-1.0)*x1752*x1758)));
evalcond[3]=(cj0+((x1750*x1754))+(((-1.0)*x1751*x1757))+(((-1.0)*r02*x1758)));
evalcond[4]=(sj0+(((-1.0)*r12*x1758))+((x1750*x1752))+(((-1.0)*x1753*x1757)));
evalcond[5]=((((-1.0)*sj0))+((x1749*x1751))+(((-1.0)*x1754*x1758))+(((-1.0)*r02*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1759=cj5*cj5;
IkReal x1760=((1.0)*r21);
IkReal x1761=(cj5*sj5);
CheckValue<IkReal> x1762 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x1760))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1760*x1761))+((r01*r21))+(((-1.0)*r01*x1759*x1760))+((r00*r20*x1759))+(((-1.0)*r01*r20*x1761))+((r02*r22)))),-1);
if(!x1763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1762.value)+(((1.5707963267949)*(x1763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1764=IKsin(j4);
IkReal x1765=IKcos(j4);
IkReal x1766=(cj5*r00);
IkReal x1767=(r11*sj5);
IkReal x1768=(cj5*r10);
IkReal x1769=(r01*sj5);
IkReal x1770=(cj5*r20);
IkReal x1771=(r21*sj5);
IkReal x1772=((1.0)*x1765);
IkReal x1773=((1.0)*x1764);
evalcond[0]=(((x1764*x1770))+(((-1.0)*x1771*x1773))+(((-1.0)*r22*x1772)));
evalcond[1]=(((x1765*x1771))+(((-1.0)*x1770*x1772))+(((-1.0)*r22*x1773)));
evalcond[2]=(cj0+(((-1.0)*x1767*x1773))+((x1764*x1768))+(((-1.0)*r12*x1772)));
evalcond[3]=(cj0+((x1765*x1769))+(((-1.0)*r02*x1773))+(((-1.0)*x1766*x1772)));
evalcond[4]=(sj0+((x1765*x1767))+(((-1.0)*x1768*x1772))+(((-1.0)*r12*x1773)));
evalcond[5]=((((-1.0)*sj0))+((x1764*x1766))+(((-1.0)*r02*x1772))+(((-1.0)*x1769*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1774 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1774.valid){
continue;
}
CheckValue<IkReal> x1775=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1774.value)+(((1.5707963267949)*(x1775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1776=IKsin(j4);
IkReal x1777=IKcos(j4);
IkReal x1778=(cj5*r00);
IkReal x1779=(r11*sj5);
IkReal x1780=(cj5*r10);
IkReal x1781=(r01*sj5);
IkReal x1782=(cj5*r20);
IkReal x1783=(r21*sj5);
IkReal x1784=((1.0)*x1777);
IkReal x1785=((1.0)*x1776);
evalcond[0]=((((-1.0)*x1783*x1785))+(((-1.0)*r22*x1784))+((x1776*x1782)));
evalcond[1]=((((-1.0)*r22*x1785))+((x1777*x1783))+(((-1.0)*x1782*x1784)));
evalcond[2]=(cj0+(((-1.0)*r12*x1784))+(((-1.0)*x1779*x1785))+((x1776*x1780)));
evalcond[3]=(cj0+((x1777*x1781))+(((-1.0)*x1778*x1784))+(((-1.0)*r02*x1785)));
evalcond[4]=(sj0+(((-1.0)*r12*x1785))+(((-1.0)*x1780*x1784))+((x1777*x1779)));
evalcond[5]=((((-1.0)*sj0))+((x1776*x1778))+(((-1.0)*x1781*x1785))+(((-1.0)*r02*x1784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1786=IKsin(j0);
IkReal x1787=IKcos(j0);
IkReal x1788=((1.0)*cj5);
IkReal x1789=((0.0946)*cj5);
IkReal x1790=(r10*sj5);
IkReal x1791=(r00*sj5);
evalcond[0]=(x1787+(((-1.0)*r01*x1788))+(((-1.0)*x1791)));
evalcond[1]=(x1786+(((-1.0)*r11*x1788))+(((-1.0)*x1790)));
evalcond[2]=((((0.0946)*x1791))+(((-1.0)*px))+(((-0.1091)*x1786))+((r01*x1789)));
evalcond[3]=((((0.0946)*x1790))+(((-1.0)*py))+(((0.1091)*x1787))+((r11*x1789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1792=((1.0)*cj5);
IkReal x1793=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1792)));
j4eval[0]=x1793;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x1792))))));
j4eval[2]=IKsign(x1793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1794=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1794;
j4eval[1]=IKsign(x1794);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1795=cj5*cj5;
IkReal x1796=r21*r21;
IkReal x1797=(cj5*r20);
IkReal x1798=(r21*sj5);
IkReal x1799=(x1796+(r22*r22)+((x1795*(r20*r20)))+(((-1.0)*x1795*x1796))+(((-2.0)*x1797*x1798)));
j4eval[0]=x1799;
j4eval[1]=IKsign(x1799);
j4eval[2]=((IKabs(r22))+(IKabs((x1797+(((-1.0)*x1798))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1800=cj5*cj5;
IkReal x1801=r21*r21;
IkReal x1802=(cj5*r20);
IkReal x1803=(r21*sj5);
CheckValue<IkReal> x1804 = IKatan2WithCheck(IkReal(r22),IkReal((x1802+(((-1.0)*x1803)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1804.valid){
continue;
}
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1800*x1801))+(r22*r22)+(((-2.0)*x1802*x1803))+x1801+((x1800*(r20*r20))))),-1);
if(!x1805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1804.value)+(((1.5707963267949)*(x1805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1806=IKsin(j4);
IkReal x1807=IKcos(j4);
IkReal x1808=(cj5*r00);
IkReal x1809=(r11*sj5);
IkReal x1810=(cj5*r10);
IkReal x1811=(r01*sj5);
IkReal x1812=(cj5*r20);
IkReal x1813=(r21*sj5);
IkReal x1814=((1.0)*x1807);
IkReal x1815=((1.0)*x1806);
evalcond[0]=((((-1.0)*x1813*x1815))+((x1806*x1812))+(((-1.0)*r22*x1814)));
evalcond[1]=((((-1.0)*x1808*x1814))+(((-1.0)*r02*x1815))+((x1807*x1811)));
evalcond[2]=((((-1.0)*x1810*x1814))+(((-1.0)*r12*x1815))+((x1807*x1809)));
evalcond[3]=(cj0+(((-1.0)*x1809*x1815))+(((-1.0)*r12*x1814))+((x1806*x1810)));
evalcond[4]=((1.0)+(((-1.0)*x1812*x1814))+((x1807*x1813))+(((-1.0)*r22*x1815)));
evalcond[5]=((((-1.0)*sj0))+((x1806*x1808))+(((-1.0)*x1811*x1815))+(((-1.0)*r02*x1814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1816 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1816.valid){
continue;
}
CheckValue<IkReal> x1817=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1816.value)+(((1.5707963267949)*(x1817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1818=IKsin(j4);
IkReal x1819=IKcos(j4);
IkReal x1820=(cj5*r00);
IkReal x1821=(r11*sj5);
IkReal x1822=(cj5*r10);
IkReal x1823=(r01*sj5);
IkReal x1824=(cj5*r20);
IkReal x1825=(r21*sj5);
IkReal x1826=((1.0)*x1819);
IkReal x1827=((1.0)*x1818);
evalcond[0]=(((x1818*x1824))+(((-1.0)*x1825*x1827))+(((-1.0)*r22*x1826)));
evalcond[1]=(((x1819*x1823))+(((-1.0)*r02*x1827))+(((-1.0)*x1820*x1826)));
evalcond[2]=(((x1819*x1821))+(((-1.0)*r12*x1827))+(((-1.0)*x1822*x1826)));
evalcond[3]=((((-1.0)*x1821*x1827))+cj0+((x1818*x1822))+(((-1.0)*r12*x1826)));
evalcond[4]=((1.0)+((x1819*x1825))+(((-1.0)*r22*x1827))+(((-1.0)*x1824*x1826)));
evalcond[5]=((((-1.0)*sj0))+((x1818*x1820))+(((-1.0)*x1823*x1827))+(((-1.0)*r02*x1826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1828=((1.0)*cj5);
CheckValue<IkReal> x1829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1828)))),-1);
if(!x1829.valid){
continue;
}
CheckValue<IkReal> x1830 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x1828)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1829.value)))+(x1830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1831=IKsin(j4);
IkReal x1832=IKcos(j4);
IkReal x1833=(cj5*r00);
IkReal x1834=(r11*sj5);
IkReal x1835=(cj5*r10);
IkReal x1836=(r01*sj5);
IkReal x1837=(cj5*r20);
IkReal x1838=(r21*sj5);
IkReal x1839=((1.0)*x1832);
IkReal x1840=((1.0)*x1831);
evalcond[0]=(((x1831*x1837))+(((-1.0)*x1838*x1840))+(((-1.0)*r22*x1839)));
evalcond[1]=((((-1.0)*x1833*x1839))+(((-1.0)*r02*x1840))+((x1832*x1836)));
evalcond[2]=((((-1.0)*x1835*x1839))+(((-1.0)*r12*x1840))+((x1832*x1834)));
evalcond[3]=(cj0+((x1831*x1835))+(((-1.0)*r12*x1839))+(((-1.0)*x1834*x1840)));
evalcond[4]=((1.0)+(((-1.0)*r22*x1840))+(((-1.0)*x1837*x1839))+((x1832*x1838)));
evalcond[5]=((((-1.0)*sj0))+((x1831*x1833))+(((-1.0)*x1836*x1840))+(((-1.0)*r02*x1839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.3665904051715)*py))+(((-0.658324867935265)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.3665904051715)*px))+(((0.658324867935265)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.3665904051715)*py))+(((-0.658324867935265)*px))))+IKsqr(((((2.3665904051715)*px))+(((0.658324867935265)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.3665904051715)*py))+(((-0.658324867935265)*px))), ((((2.3665904051715)*px))+(((0.658324867935265)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1841=IKsin(j0);
IkReal x1842=IKcos(j0);
evalcond[0]=((((-0.1091)*x1841))+(((-1.0)*px))+(((0.3922)*x1842)));
evalcond[1]=((((-1.0)*py))+(((0.1091)*x1842))+(((0.3922)*x1841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1843=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1843;
j4eval[1]=IKsign(x1843);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1844=cj5*cj5;
IkReal x1845=((1.0)*r21);
IkReal x1846=(cj5*sj5);
IkReal x1847=((((-1.0)*r00*x1845*x1846))+((r01*r21))+((r00*r20*x1844))+(((-1.0)*r01*x1844*x1845))+(((-1.0)*r01*r20*x1846))+((r02*r22)));
j4eval[0]=x1847;
j4eval[1]=IKsign(x1847);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1845)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1848=cj5*cj5;
IkReal x1849=(cj5*r20);
IkReal x1850=((1.0)*sj5);
IkReal x1851=(r11*r21);
IkReal x1852=((((-1.0)*x1848*x1851))+(((-1.0)*r11*x1849*x1850))+(((-1.0)*cj5*r10*r21*x1850))+((r10*r20*x1848))+((r12*r22))+x1851);
j4eval[0]=x1852;
j4eval[1]=IKsign(x1852);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r21*sj0*x1850))+((sj0*x1849))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1853=cj5*cj5;
IkReal x1854=(cj5*r20);
IkReal x1855=((1.0)*sj5);
IkReal x1856=(r11*r21);
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x1855))+((sj0*x1854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
CheckValue<IkReal> x1858=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1853*x1856))+(((-1.0)*cj5*r10*r21*x1855))+(((-1.0)*r11*x1854*x1855))+((r12*r22))+x1856+((r10*r20*x1853)))),-1);
if(!x1858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1857.value)+(((1.5707963267949)*(x1858.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1859=IKsin(j4);
IkReal x1860=IKcos(j4);
IkReal x1861=(cj5*r00);
IkReal x1862=(r11*sj5);
IkReal x1863=(cj5*r10);
IkReal x1864=(r01*sj5);
IkReal x1865=(cj5*r20);
IkReal x1866=(r21*sj5);
IkReal x1867=((1.0)*x1860);
IkReal x1868=((1.0)*x1859);
evalcond[0]=((((-1.0)*x1866*x1868))+((x1859*x1865))+(((-1.0)*r22*x1867)));
evalcond[1]=(((x1860*x1866))+(((-1.0)*x1865*x1867))+(((-1.0)*r22*x1868)));
evalcond[2]=(cj0+((x1859*x1863))+(((-1.0)*x1862*x1868))+(((-1.0)*r12*x1867)));
evalcond[3]=(cj0+(((-1.0)*r02*x1868))+((x1860*x1864))+(((-1.0)*x1861*x1867)));
evalcond[4]=(sj0+((x1860*x1862))+(((-1.0)*x1863*x1867))+(((-1.0)*r12*x1868)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1864*x1868))+(((-1.0)*r02*x1867))+((x1859*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1869=cj5*cj5;
IkReal x1870=((1.0)*r21);
IkReal x1871=(cj5*sj5);
CheckValue<IkReal> x1872=IKPowWithIntegerCheck(IKsign((((r01*r21))+(((-1.0)*r01*r20*x1871))+((r00*r20*x1869))+(((-1.0)*r01*x1869*x1870))+((r02*r22))+(((-1.0)*r00*x1870*x1871)))),-1);
if(!x1872.valid){
continue;
}
CheckValue<IkReal> x1873 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x1870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1872.value)))+(x1873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1874=IKsin(j4);
IkReal x1875=IKcos(j4);
IkReal x1876=(cj5*r00);
IkReal x1877=(r11*sj5);
IkReal x1878=(cj5*r10);
IkReal x1879=(r01*sj5);
IkReal x1880=(cj5*r20);
IkReal x1881=(r21*sj5);
IkReal x1882=((1.0)*x1875);
IkReal x1883=((1.0)*x1874);
evalcond[0]=(((x1874*x1880))+(((-1.0)*r22*x1882))+(((-1.0)*x1881*x1883)));
evalcond[1]=((((-1.0)*x1880*x1882))+(((-1.0)*r22*x1883))+((x1875*x1881)));
evalcond[2]=(cj0+((x1874*x1878))+(((-1.0)*r12*x1882))+(((-1.0)*x1877*x1883)));
evalcond[3]=((((-1.0)*x1876*x1882))+cj0+(((-1.0)*r02*x1883))+((x1875*x1879)));
evalcond[4]=(sj0+(((-1.0)*x1878*x1882))+(((-1.0)*r12*x1883))+((x1875*x1877)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1879*x1883))+((x1874*x1876))+(((-1.0)*r02*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1884 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1884.valid){
continue;
}
CheckValue<IkReal> x1885=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1884.value)+(((1.5707963267949)*(x1885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1886=IKsin(j4);
IkReal x1887=IKcos(j4);
IkReal x1888=(cj5*r00);
IkReal x1889=(r11*sj5);
IkReal x1890=(cj5*r10);
IkReal x1891=(r01*sj5);
IkReal x1892=(cj5*r20);
IkReal x1893=(r21*sj5);
IkReal x1894=((1.0)*x1887);
IkReal x1895=((1.0)*x1886);
evalcond[0]=((((-1.0)*x1893*x1895))+((x1886*x1892))+(((-1.0)*r22*x1894)));
evalcond[1]=((((-1.0)*x1892*x1894))+(((-1.0)*r22*x1895))+((x1887*x1893)));
evalcond[2]=(((x1886*x1890))+cj0+(((-1.0)*x1889*x1895))+(((-1.0)*r12*x1894)));
evalcond[3]=((((-1.0)*r02*x1895))+cj0+(((-1.0)*x1888*x1894))+((x1887*x1891)));
evalcond[4]=(((x1887*x1889))+sj0+(((-1.0)*x1890*x1894))+(((-1.0)*r12*x1895)));
evalcond[5]=((((-1.0)*r02*x1894))+(((-1.0)*sj0))+(((-1.0)*x1891*x1895))+((x1886*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1896=((1.0)*sj5);
IkReal x1897=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x1896))+(((-1.0)*r11*x1897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1897))+(((-1.0)*r00*x1896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1896))+(((-1.0)*r11*x1897))))+IKsqr(((((-1.0)*r01*x1897))+(((-1.0)*r00*x1896))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x1896))+(((-1.0)*r11*x1897))), ((((-1.0)*r01*x1897))+(((-1.0)*r00*x1896))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1898=IKsin(j0);
IkReal x1899=IKcos(j0);
IkReal x1900=((1.0)*cj5);
IkReal x1901=((0.0946)*cj5);
IkReal x1902=(r10*sj5);
IkReal x1903=(r00*sj5);
evalcond[0]=((((-1.0)*x1903))+(((-1.0)*x1899))+(((-1.0)*r01*x1900)));
evalcond[1]=((((-1.0)*x1902))+(((-1.0)*r11*x1900))+(((-1.0)*x1898)));
evalcond[2]=(((r01*x1901))+(((-0.1091)*x1898))+(((-1.0)*px))+(((0.0946)*x1903)));
evalcond[3]=((((0.1091)*x1899))+(((-1.0)*py))+((r11*x1901))+(((0.0946)*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1904=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1904;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x1904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1905=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1905;
j4eval[1]=IKsign(x1905);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1906=r21*r21;
IkReal x1907=cj5*cj5;
IkReal x1908=(cj5*r20);
IkReal x1909=(r21*sj5);
IkReal x1910=((((-1.0)*x1907*(r20*r20)))+(((-1.0)*x1906))+(((-1.0)*(r22*r22)))+((x1906*x1907))+(((2.0)*x1908*x1909)));
j4eval[0]=x1910;
j4eval[1]=((IKabs(((((-1.0)*x1909))+x1908)))+(IKabs(r22)));
j4eval[2]=IKsign(x1910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1911=r21*r21;
IkReal x1912=cj5*cj5;
IkReal x1913=(cj5*r20);
IkReal x1914=(r21*sj5);
CheckValue<IkReal> x1915=IKPowWithIntegerCheck(IKsign(((((2.0)*x1913*x1914))+(((-1.0)*x1912*(r20*r20)))+((x1911*x1912))+(((-1.0)*x1911))+(((-1.0)*(r22*r22))))),-1);
if(!x1915.valid){
continue;
}
CheckValue<IkReal> x1916 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x1914))+x1913)),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1915.value)))+(x1916.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1917=IKsin(j4);
IkReal x1918=IKcos(j4);
IkReal x1919=(cj5*r00);
IkReal x1920=(r11*sj5);
IkReal x1921=(cj5*r10);
IkReal x1922=(r01*sj5);
IkReal x1923=(cj5*r20);
IkReal x1924=(r21*sj5);
IkReal x1925=((1.0)*x1918);
IkReal x1926=((1.0)*x1917);
evalcond[0]=((((-1.0)*r22*x1925))+((x1917*x1923))+(((-1.0)*x1924*x1926)));
evalcond[1]=(((x1918*x1922))+(((-1.0)*x1919*x1925))+(((-1.0)*r02*x1926)));
evalcond[2]=((((-1.0)*r12*x1926))+((x1918*x1920))+(((-1.0)*x1921*x1925)));
evalcond[3]=((((-1.0)*r12*x1925))+cj0+((x1917*x1921))+(((-1.0)*x1920*x1926)));
evalcond[4]=((-1.0)+((x1918*x1924))+(((-1.0)*r22*x1926))+(((-1.0)*x1923*x1925)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1922*x1926))+((x1917*x1919))+(((-1.0)*r02*x1925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1927 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1927.valid){
continue;
}
CheckValue<IkReal> x1928=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1927.value)+(((1.5707963267949)*(x1928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1929=IKsin(j4);
IkReal x1930=IKcos(j4);
IkReal x1931=(cj5*r00);
IkReal x1932=(r11*sj5);
IkReal x1933=(cj5*r10);
IkReal x1934=(r01*sj5);
IkReal x1935=(cj5*r20);
IkReal x1936=(r21*sj5);
IkReal x1937=((1.0)*x1930);
IkReal x1938=((1.0)*x1929);
evalcond[0]=((((-1.0)*r22*x1937))+((x1929*x1935))+(((-1.0)*x1936*x1938)));
evalcond[1]=(((x1930*x1934))+(((-1.0)*x1931*x1937))+(((-1.0)*r02*x1938)));
evalcond[2]=((((-1.0)*x1933*x1937))+((x1930*x1932))+(((-1.0)*r12*x1938)));
evalcond[3]=(cj0+(((-1.0)*r12*x1937))+(((-1.0)*x1932*x1938))+((x1929*x1933)));
evalcond[4]=((-1.0)+((x1930*x1936))+(((-1.0)*r22*x1938))+(((-1.0)*x1935*x1937)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1934*x1938))+((x1929*x1931))+(((-1.0)*r02*x1937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1939=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1939.valid){
continue;
}
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1939.value)))+(x1940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1941=IKsin(j4);
IkReal x1942=IKcos(j4);
IkReal x1943=(cj5*r00);
IkReal x1944=(r11*sj5);
IkReal x1945=(cj5*r10);
IkReal x1946=(r01*sj5);
IkReal x1947=(cj5*r20);
IkReal x1948=(r21*sj5);
IkReal x1949=((1.0)*x1942);
IkReal x1950=((1.0)*x1941);
evalcond[0]=((((-1.0)*x1948*x1950))+(((-1.0)*r22*x1949))+((x1941*x1947)));
evalcond[1]=((((-1.0)*x1943*x1949))+(((-1.0)*r02*x1950))+((x1942*x1946)));
evalcond[2]=((((-1.0)*x1945*x1949))+(((-1.0)*r12*x1950))+((x1942*x1944)));
evalcond[3]=(cj0+(((-1.0)*x1944*x1950))+((x1941*x1945))+(((-1.0)*r12*x1949)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x1950))+(((-1.0)*x1947*x1949))+((x1942*x1948)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1949))+((x1941*x1943))+(((-1.0)*x1946*x1950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658324867935265)*px))+(((-2.3665904051715)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658324867935265)*py))+(((-2.3665904051715)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658324867935265)*px))+(((-2.3665904051715)*py))))+IKsqr(((((0.658324867935265)*py))+(((-2.3665904051715)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658324867935265)*px))+(((-2.3665904051715)*py))), ((((0.658324867935265)*py))+(((-2.3665904051715)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1951=IKcos(j0);
IkReal x1952=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.1091)*x1952))+(((-0.3922)*x1951)));
evalcond[1]=((((0.1091)*x1951))+(((-1.0)*py))+(((-0.3922)*x1952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1953=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x1953;
j4eval[1]=IKsign(x1953);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1954=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x1954;
j4eval[1]=IKsign(x1954);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1955=cj5*cj5;
IkReal x1956=(r11*r21);
IkReal x1957=((1.0)*cj5*sj5);
IkReal x1958=((((-1.0)*x1955*x1956))+((r12*r22))+x1956+((r10*r20*x1955))+(((-1.0)*r10*r21*x1957))+(((-1.0)*r11*r20*x1957)));
j4eval[0]=x1958;
j4eval[1]=IKsign(x1958);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1959=cj5*cj5;
IkReal x1960=(r11*r21);
IkReal x1961=((1.0)*cj5*sj5);
CheckValue<IkReal> x1962 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1962.valid){
continue;
}
CheckValue<IkReal> x1963=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1959*x1960))+(((-1.0)*r10*r21*x1961))+((r12*r22))+x1960+((r10*r20*x1959))+(((-1.0)*r11*r20*x1961)))),-1);
if(!x1963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1962.value)+(((1.5707963267949)*(x1963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1964=IKsin(j4);
IkReal x1965=IKcos(j4);
IkReal x1966=((1.0)*sj0);
IkReal x1967=(cj5*r00);
IkReal x1968=(r11*sj5);
IkReal x1969=(cj5*r10);
IkReal x1970=(r01*sj5);
IkReal x1971=(cj5*r20);
IkReal x1972=(r21*sj5);
IkReal x1973=((1.0)*x1965);
IkReal x1974=((1.0)*x1964);
evalcond[0]=(((x1964*x1971))+(((-1.0)*r22*x1973))+(((-1.0)*x1972*x1974)));
evalcond[1]=((((-1.0)*r22*x1974))+(((-1.0)*x1971*x1973))+((x1965*x1972)));
evalcond[2]=(cj0+((x1964*x1969))+(((-1.0)*x1968*x1974))+(((-1.0)*r12*x1973)));
evalcond[3]=(((x1964*x1967))+(((-1.0)*r02*x1973))+(((-1.0)*x1966))+(((-1.0)*x1970*x1974)));
evalcond[4]=((((-1.0)*r02*x1974))+((x1965*x1970))+(((-1.0)*x1967*x1973))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1966))+((x1965*x1968))+(((-1.0)*r12*x1974))+(((-1.0)*x1969*x1973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1975 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1975.valid){
continue;
}
CheckValue<IkReal> x1976=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x1976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1975.value)+(((1.5707963267949)*(x1976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1977=IKsin(j4);
IkReal x1978=IKcos(j4);
IkReal x1979=((1.0)*sj0);
IkReal x1980=(cj5*r00);
IkReal x1981=(r11*sj5);
IkReal x1982=(cj5*r10);
IkReal x1983=(r01*sj5);
IkReal x1984=(cj5*r20);
IkReal x1985=(r21*sj5);
IkReal x1986=((1.0)*x1978);
IkReal x1987=((1.0)*x1977);
evalcond[0]=((((-1.0)*x1985*x1987))+(((-1.0)*r22*x1986))+((x1977*x1984)));
evalcond[1]=((((-1.0)*x1984*x1986))+((x1978*x1985))+(((-1.0)*r22*x1987)));
evalcond[2]=((((-1.0)*x1981*x1987))+cj0+(((-1.0)*r12*x1986))+((x1977*x1982)));
evalcond[3]=((((-1.0)*x1983*x1987))+(((-1.0)*r02*x1986))+(((-1.0)*x1979))+((x1977*x1980)));
evalcond[4]=((((-1.0)*x1980*x1986))+(((-1.0)*r02*x1987))+((x1978*x1983))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1979))+((x1978*x1981))+(((-1.0)*r12*x1987))+(((-1.0)*x1982*x1986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1988 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1988.valid){
continue;
}
CheckValue<IkReal> x1989=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x1989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1988.value)+(((1.5707963267949)*(x1989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1990=IKsin(j4);
IkReal x1991=IKcos(j4);
IkReal x1992=((1.0)*sj0);
IkReal x1993=(cj5*r00);
IkReal x1994=(r11*sj5);
IkReal x1995=(cj5*r10);
IkReal x1996=(r01*sj5);
IkReal x1997=(cj5*r20);
IkReal x1998=(r21*sj5);
IkReal x1999=((1.0)*x1991);
IkReal x2000=((1.0)*x1990);
evalcond[0]=((((-1.0)*x1998*x2000))+((x1990*x1997))+(((-1.0)*r22*x1999)));
evalcond[1]=((((-1.0)*x1997*x1999))+(((-1.0)*r22*x2000))+((x1991*x1998)));
evalcond[2]=(cj0+(((-1.0)*x1994*x2000))+((x1990*x1995))+(((-1.0)*r12*x1999)));
evalcond[3]=((((-1.0)*r02*x1999))+(((-1.0)*x1992))+(((-1.0)*x1996*x2000))+((x1990*x1993)));
evalcond[4]=((((-1.0)*x1993*x1999))+((x1991*x1996))+(((-1.0)*r02*x2000))+(((-1.0)*cj0)));
evalcond[5]=(((x1991*x1994))+(((-1.0)*r12*x2000))+(((-1.0)*x1992))+(((-1.0)*x1995*x1999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2001=cj1*cj1;
IkReal x2002=(r00*sj5);
IkReal x2003=(cj2*sj1);
IkReal x2004=((10000.0)*py);
IkReal x2005=(cj1*sj2);
IkReal x2006=(cj2*sj2);
IkReal x2007=(cj5*r01);
IkReal x2008=(cj1*sj1);
IkReal x2009=((946.0)*cj5*r11);
IkReal x2010=((946.0)*r10*sj5);
CheckValue<IkReal> x2011=IKPowWithIntegerCheck(((((-4250.0)*sj2*x2001))+(((-4250.0)*cj1*x2003))+(((-7844.0)*cj1*cj2*x2003))+(((-7844.0)*x2001*x2006))+(((3922.0)*x2006))+(((3922.0)*x2008))),-1);
if(!x2011.valid){
continue;
}
CheckValue<IkReal> x2012=IKPowWithIntegerCheck(((((-1.0)*x2005))+(((-1.0)*x2003))),-1);
if(!x2012.valid){
continue;
}
if( IKabs(((x2011.value)*(((((-1.0)*x2004*x2005))+(((-1.0)*x2003*x2004))+((x2005*x2010))+((x2005*x2009))+((x2003*x2010))+((x2003*x2009))+(((-1091.0)*x2007))+(((-1091.0)*x2002)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2012.value)*((x2002+x2007)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2011.value)*(((((-1.0)*x2004*x2005))+(((-1.0)*x2003*x2004))+((x2005*x2010))+((x2005*x2009))+((x2003*x2010))+((x2003*x2009))+(((-1091.0)*x2007))+(((-1091.0)*x2002))))))+IKsqr(((x2012.value)*((x2002+x2007))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x2011.value)*(((((-1.0)*x2004*x2005))+(((-1.0)*x2003*x2004))+((x2005*x2010))+((x2005*x2009))+((x2003*x2010))+((x2003*x2009))+(((-1091.0)*x2007))+(((-1091.0)*x2002))))), ((x2012.value)*((x2002+x2007))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2013=IKcos(j0);
IkReal x2014=IKsin(j0);
IkReal x2015=((0.0946)*cj5);
IkReal x2016=((1.0)*sj5);
IkReal x2017=((1.0)*cj5);
IkReal x2018=((1.0)*cj2);
IkReal x2019=(cj1*cj2);
IkReal x2020=((0.0946)*sj5);
IkReal x2021=((0.425)*cj1);
IkReal x2022=((1.0)*cj1*sj2);
IkReal x2023=(sj1*x2013);
IkReal x2024=((0.3922)*x2014);
evalcond[0]=((((-1.0)*x2013*x2022))+(((-1.0)*x2018*x2023))+(((-1.0)*r00*x2016))+(((-1.0)*r01*x2017)));
evalcond[1]=((((-1.0)*sj1*x2014*x2018))+(((-1.0)*x2014*x2022))+(((-1.0)*r11*x2017))+(((-1.0)*r10*x2016)));
evalcond[2]=((((0.3922)*x2013*x2019))+((r00*x2020))+(((-0.3922)*sj2*x2023))+((r01*x2015))+(((-1.0)*px))+((x2013*x2021))+(((-0.1091)*x2014)));
evalcond[3]=(((r10*x2020))+(((0.1091)*x2013))+((x2019*x2024))+(((-1.0)*sj1*sj2*x2024))+(((-1.0)*py))+((r11*x2015))+((x2014*x2021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2025=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2025;
j4eval[1]=IKsign(x2025);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2026=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2026;
j4eval[1]=IKsign(x2026);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2027=((1.0)*sj0);
IkReal x2028=((1.0)*cj0);
IkReal x2029=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2029;
j4eval[1]=IKsign(x2029);
j4eval[2]=((IKabs(((((-1.0)*r02*x2028))+(((-1.0)*r12*x2027)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x2027))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x2028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2031 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2031)==0){
continue;
}
IkReal x2030=pow(x2031,-0.5);
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2032.value));
IkReal gconst79=((-1.0)*r21*x2030);
IkReal gconst80=(r20*x2030);
CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2033.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2033.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2036 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2036.valid){
continue;
}
IkReal x2034=((-1.0)*(x2036.value));
IkReal x2035=x2030;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2034;
IkReal gconst78=x2034;
IkReal gconst79=((-1.0)*r21*x2035);
IkReal gconst80=(r20*x2035);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2039 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2039.valid){
continue;
}
IkReal x2037=((-1.0)*(x2039.value));
IkReal x2038=x2030;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2037;
IkReal gconst78=x2037;
IkReal gconst79=((-1.0)*r21*x2038);
IkReal gconst80=(r20*x2038);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2042 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2042.valid){
continue;
}
IkReal x2040=((-1.0)*(x2042.value));
IkReal x2041=x2030;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2040;
IkReal gconst78=x2040;
IkReal gconst79=((-1.0)*r21*x2041);
IkReal gconst80=(r20*x2041);
IkReal x2043=r22*r22;
CheckValue<IkReal> x2046=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2043))),-1);
if(!x2046.valid){
continue;
}
IkReal x2044=x2046.value;
IkReal x2045=(((x2044*(r21*r21*r21*r21)))+x2043+(((2.0)*x2044*(r20*r20)*(r21*r21)))+((x2044*(r20*r20*r20*r20))));
j4eval[0]=x2045;
j4eval[1]=IKsign(x2045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2047=(gconst80*r20);
IkReal x2048=(gconst79*r21);
IkReal x2049=(cj2*sj1);
IkReal x2050=((1.0)*cj1*sj2);
CheckValue<IkReal> x2051 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2050))+(((-1.0)*r22*x2049)))),IkReal((((x2048*x2049))+(((-1.0)*x2047*x2049))+((cj1*sj2*x2048))+(((-1.0)*x2047*x2050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2051.valid){
continue;
}
CheckValue<IkReal> x2052=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2047*x2047)+(((-2.0)*x2047*x2048))+(x2048*x2048))),-1);
if(!x2052.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2051.value)+(((1.5707963267949)*(x2052.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2053=IKsin(j4);
IkReal x2054=IKcos(j4);
IkReal x2055=(cj1*cj2);
IkReal x2056=(gconst80*r20);
IkReal x2057=((1.0)*sj1);
IkReal x2058=(gconst79*r21);
IkReal x2059=(gconst80*r00);
IkReal x2060=(gconst80*r10);
IkReal x2061=(gconst79*r01);
IkReal x2062=(gconst79*r11);
IkReal x2063=((1.0)*x2054);
IkReal x2064=((1.0)*x2053);
evalcond[0]=(((x2053*x2056))+(((-1.0)*x2058*x2064))+(((-1.0)*r22*x2063)));
evalcond[1]=((((-1.0)*r12*x2063))+cj0+(((-1.0)*x2062*x2064))+((x2053*x2060)));
evalcond[2]=((((-1.0)*sj0))+((x2053*x2059))+(((-1.0)*r02*x2063))+(((-1.0)*x2061*x2064)));
evalcond[3]=((((-1.0)*cj2*x2057))+((x2054*x2058))+(((-1.0)*r22*x2064))+(((-1.0)*cj1*sj2))+(((-1.0)*x2056*x2063)));
evalcond[4]=(((x2054*x2061))+(((-1.0)*cj0*sj2*x2057))+(((-1.0)*r02*x2064))+((cj0*x2055))+(((-1.0)*x2059*x2063)));
evalcond[5]=(((x2054*x2062))+(((-1.0)*r12*x2064))+(((-1.0)*sj0*sj2*x2057))+((sj0*x2055))+(((-1.0)*x2060*x2063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2065=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2065.valid){
continue;
}
CheckValue<IkReal> x2066 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst79*r21*sj0))+((gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2065.value)))+(x2066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2067=IKsin(j4);
IkReal x2068=IKcos(j4);
IkReal x2069=(cj1*cj2);
IkReal x2070=(gconst80*r20);
IkReal x2071=((1.0)*sj1);
IkReal x2072=(gconst79*r21);
IkReal x2073=(gconst80*r00);
IkReal x2074=(gconst80*r10);
IkReal x2075=(gconst79*r01);
IkReal x2076=(gconst79*r11);
IkReal x2077=((1.0)*x2068);
IkReal x2078=((1.0)*x2067);
evalcond[0]=((((-1.0)*r22*x2077))+(((-1.0)*x2072*x2078))+((x2067*x2070)));
evalcond[1]=(cj0+(((-1.0)*r12*x2077))+(((-1.0)*x2076*x2078))+((x2067*x2074)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2077))+(((-1.0)*x2075*x2078))+((x2067*x2073)));
evalcond[3]=((((-1.0)*x2070*x2077))+(((-1.0)*cj2*x2071))+(((-1.0)*r22*x2078))+(((-1.0)*cj1*sj2))+((x2068*x2072)));
evalcond[4]=(((cj0*x2069))+(((-1.0)*r02*x2078))+(((-1.0)*cj0*sj2*x2071))+((x2068*x2075))+(((-1.0)*x2073*x2077)));
evalcond[5]=((((-1.0)*sj0*sj2*x2071))+(((-1.0)*r12*x2078))+((x2068*x2076))+(((-1.0)*x2074*x2077))+((sj0*x2069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2079=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2079.valid){
continue;
}
CheckValue<IkReal> x2080 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst79*r21))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2079.value)))+(x2080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2081=IKsin(j4);
IkReal x2082=IKcos(j4);
IkReal x2083=(cj1*cj2);
IkReal x2084=(gconst80*r20);
IkReal x2085=((1.0)*sj1);
IkReal x2086=(gconst79*r21);
IkReal x2087=(gconst80*r00);
IkReal x2088=(gconst80*r10);
IkReal x2089=(gconst79*r01);
IkReal x2090=(gconst79*r11);
IkReal x2091=((1.0)*x2082);
IkReal x2092=((1.0)*x2081);
evalcond[0]=(((x2081*x2084))+(((-1.0)*x2086*x2092))+(((-1.0)*r22*x2091)));
evalcond[1]=((((-1.0)*x2090*x2092))+cj0+((x2081*x2088))+(((-1.0)*r12*x2091)));
evalcond[2]=((((-1.0)*sj0))+((x2081*x2087))+(((-1.0)*x2089*x2092))+(((-1.0)*r02*x2091)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2085))+((x2082*x2086))+(((-1.0)*x2084*x2091))+(((-1.0)*r22*x2092)));
evalcond[4]=((((-1.0)*x2087*x2091))+(((-1.0)*cj0*sj2*x2085))+((x2082*x2089))+(((-1.0)*r02*x2092))+((cj0*x2083)));
evalcond[5]=(((sj0*x2083))+((x2082*x2090))+(((-1.0)*x2088*x2091))+(((-1.0)*r12*x2092))+(((-1.0)*sj0*sj2*x2085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2094 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2094)==0){
continue;
}
IkReal x2093=pow(x2094,-0.5);
CheckValue<IkReal> x2095 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2095.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2095.value))));
IkReal gconst82=((1.0)*r21*x2093);
IkReal gconst83=((-1.0)*r20*x2093);
CheckValue<IkReal> x2096 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2096.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2096.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2099 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2099.valid){
continue;
}
IkReal x2097=((1.0)*(x2099.value));
IkReal x2098=x2093;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2097)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2097)));
IkReal gconst82=((1.0)*r21*x2098);
IkReal gconst83=((-1.0)*r20*x2098);
IkReal x2100=r22*r22;
IkReal x2101=((1.0)*x2100);
CheckValue<IkReal> x2105=IKPowWithIntegerCheck(((-1.0)+x2100),-1);
if(!x2105.valid){
continue;
}
IkReal x2102=x2105.value;
if((((1.0)+(((-1.0)*x2101)))) < -0.00001)
continue;
IkReal x2103=IKsqrt(((1.0)+(((-1.0)*x2101))));
IkReal x2104=(cj0*x2102*x2103);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x2101*x2104))+x2104))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2108 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2108.valid){
continue;
}
IkReal x2106=((1.0)*(x2108.value));
IkReal x2107=x2093;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2106)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2106)));
IkReal gconst82=((1.0)*r21*x2107);
IkReal gconst83=((-1.0)*r20*x2107);
IkReal x2109=r22*r22;
IkReal x2110=((1.0)*x2109);
CheckValue<IkReal> x2114=IKPowWithIntegerCheck(((-1.0)+x2109),-1);
if(!x2114.valid){
continue;
}
IkReal x2111=x2114.value;
if((((1.0)+(((-1.0)*x2110)))) < -0.00001)
continue;
IkReal x2112=IKsqrt(((1.0)+(((-1.0)*x2110))));
IkReal x2113=(sj0*x2111*x2112);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2113+(((-1.0)*x2110*x2113))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2117 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2117.valid){
continue;
}
IkReal x2115=((1.0)*(x2117.value));
IkReal x2116=x2093;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2115)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2115)));
IkReal gconst82=((1.0)*r21*x2116);
IkReal gconst83=((-1.0)*r20*x2116);
IkReal x2118=r22*r22;
IkReal x2119=(r12*sj0);
IkReal x2120=(cj0*r02);
CheckValue<IkReal> x2124=IKPowWithIntegerCheck(((-1.0)+x2118),-1);
if(!x2124.valid){
continue;
}
IkReal x2121=x2124.value;
if((((1.0)+(((-1.0)*x2118)))) < -0.00001)
continue;
IkReal x2122=IKsqrt(((1.0)+(((-1.0)*x2118))));
IkReal x2123=(r22*x2121*x2122);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2120))+(((-1.0)*x2119)))))+(IKabs((((x2120*x2123))+((x2119*x2123))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2125=((1.0)*sj0);
IkReal x2126=((1.0)*cj0);
CheckValue<IkReal> x2127=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2127.valid){
continue;
}
CheckValue<IkReal> x2128 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2126))+(((-1.0)*r12*x2125)))),IkReal(((((-1.0)*gconst83*r00*x2126))+(((-1.0)*gconst83*r10*x2125))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2127.value)))+(x2128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2129=IKsin(j4);
IkReal x2130=IKcos(j4);
IkReal x2131=(cj1*cj2);
IkReal x2132=(gconst82*r01);
IkReal x2133=((1.0)*sj1);
IkReal x2134=(gconst82*r21);
IkReal x2135=(gconst82*r11);
IkReal x2136=((1.0)*x2130);
IkReal x2137=(gconst83*x2129);
IkReal x2138=((1.0)*x2129);
evalcond[0]=((((-1.0)*r22*x2136))+(((-1.0)*x2134*x2138))+((r20*x2137)));
evalcond[1]=(cj0+(((-1.0)*r12*x2136))+(((-1.0)*x2135*x2138))+((r10*x2137)));
evalcond[2]=((((-1.0)*sj0))+((r00*x2137))+(((-1.0)*x2132*x2138))+(((-1.0)*r02*x2136)));
evalcond[3]=((((-1.0)*r22*x2138))+(((-1.0)*cj2*x2133))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2136))+((x2130*x2134)));
evalcond[4]=((((-1.0)*cj0*sj2*x2133))+((cj0*x2131))+(((-1.0)*gconst83*r00*x2136))+((x2130*x2132))+(((-1.0)*r02*x2138)));
evalcond[5]=((((-1.0)*r12*x2138))+(((-1.0)*sj0*sj2*x2133))+(((-1.0)*gconst83*r10*x2136))+((sj0*x2131))+((x2130*x2135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst82*r21*sj0))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
CheckValue<IkReal> x2140=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2139.value)+(((1.5707963267949)*(x2140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2141=IKsin(j4);
IkReal x2142=IKcos(j4);
IkReal x2143=(cj1*cj2);
IkReal x2144=(gconst82*r01);
IkReal x2145=((1.0)*sj1);
IkReal x2146=(gconst82*r21);
IkReal x2147=(gconst82*r11);
IkReal x2148=((1.0)*x2142);
IkReal x2149=(gconst83*x2141);
IkReal x2150=((1.0)*x2141);
evalcond[0]=(((r20*x2149))+(((-1.0)*r22*x2148))+(((-1.0)*x2146*x2150)));
evalcond[1]=(cj0+(((-1.0)*r12*x2148))+((r10*x2149))+(((-1.0)*x2147*x2150)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2144*x2150))+(((-1.0)*r02*x2148))+((r00*x2149)));
evalcond[3]=((((-1.0)*gconst83*r20*x2148))+(((-1.0)*cj1*sj2))+((x2142*x2146))+(((-1.0)*r22*x2150))+(((-1.0)*cj2*x2145)));
evalcond[4]=((((-1.0)*gconst83*r00*x2148))+(((-1.0)*r02*x2150))+((cj0*x2143))+((x2142*x2144))+(((-1.0)*cj0*sj2*x2145)));
evalcond[5]=((((-1.0)*gconst83*r10*x2148))+((x2142*x2147))+(((-1.0)*r12*x2150))+((sj0*x2143))+(((-1.0)*sj0*sj2*x2145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2151 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2151.valid){
continue;
}
CheckValue<IkReal> x2152=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2151.value)+(((1.5707963267949)*(x2152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2153=IKsin(j4);
IkReal x2154=IKcos(j4);
IkReal x2155=(cj1*cj2);
IkReal x2156=(gconst82*r01);
IkReal x2157=((1.0)*sj1);
IkReal x2158=(gconst82*r21);
IkReal x2159=(gconst82*r11);
IkReal x2160=((1.0)*x2154);
IkReal x2161=(gconst83*x2153);
IkReal x2162=((1.0)*x2153);
evalcond[0]=(((r20*x2161))+(((-1.0)*x2158*x2162))+(((-1.0)*r22*x2160)));
evalcond[1]=(cj0+(((-1.0)*x2159*x2162))+((r10*x2161))+(((-1.0)*r12*x2160)));
evalcond[2]=((((-1.0)*sj0))+((r00*x2161))+(((-1.0)*x2156*x2162))+(((-1.0)*r02*x2160)));
evalcond[3]=(((x2154*x2158))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2160))+(((-1.0)*r22*x2162))+(((-1.0)*cj2*x2157)));
evalcond[4]=(((x2154*x2156))+((cj0*x2155))+(((-1.0)*cj0*sj2*x2157))+(((-1.0)*gconst83*r00*x2160))+(((-1.0)*r02*x2162)));
evalcond[5]=(((x2154*x2159))+((sj0*x2155))+(((-1.0)*gconst83*r10*x2160))+(((-1.0)*sj0*sj2*x2157))+(((-1.0)*r12*x2162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2164 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2164)==0){
continue;
}
IkReal x2163=pow(x2164,-0.5);
CheckValue<IkReal> x2165 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2165.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2165.value));
IkReal gconst85=((-1.0)*r11*x2163);
IkReal gconst86=(r10*x2163);
CheckValue<IkReal> x2166 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2166.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2166.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2169 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2169.valid){
continue;
}
IkReal x2167=((-1.0)*(x2169.value));
IkReal x2168=x2163;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2167;
IkReal gconst84=x2167;
IkReal gconst85=((-1.0)*r11*x2168);
IkReal gconst86=(r10*x2168);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2170=((1.0)*sj0);
IkReal x2171=((1.0)*cj0);
CheckValue<IkReal> x2172=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2172.valid){
continue;
}
CheckValue<IkReal> x2173 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2171))+(((-1.0)*r12*x2170)))),IkReal(((((-1.0)*gconst86*r10*x2170))+((gconst85*r11*sj0))+((cj0*gconst85*r01))+(((-1.0)*gconst86*r00*x2171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2172.value)))+(x2173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2174=IKsin(j4);
IkReal x2175=IKcos(j4);
IkReal x2176=(cj1*cj2);
IkReal x2177=((1.0)*sj1);
IkReal x2178=((1.0)*x2175);
IkReal x2179=(gconst86*x2174);
IkReal x2180=(gconst85*x2175);
IkReal x2181=((1.0)*x2174);
IkReal x2182=(gconst85*x2181);
evalcond[0]=((((-1.0)*r21*x2182))+((r20*x2179))+(((-1.0)*r22*x2178)));
evalcond[1]=(cj0+((r10*x2179))+(((-1.0)*r11*x2182))+(((-1.0)*r12*x2178)));
evalcond[2]=(((r00*x2179))+(((-1.0)*sj0))+(((-1.0)*r02*x2178))+(((-1.0)*r01*x2182)));
evalcond[3]=((((-1.0)*cj2*x2177))+(((-1.0)*gconst86*r20*x2178))+(((-1.0)*cj1*sj2))+((r21*x2180))+(((-1.0)*r22*x2181)));
evalcond[4]=((((-1.0)*cj0*sj2*x2177))+((cj0*x2176))+(((-1.0)*r02*x2181))+((r01*x2180))+(((-1.0)*gconst86*r00*x2178)));
evalcond[5]=((((-1.0)*sj0*sj2*x2177))+(((-1.0)*gconst86*r10*x2178))+((r11*x2180))+(((-1.0)*r12*x2181))+((sj0*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2183=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x2183.valid){
continue;
}
CheckValue<IkReal> x2184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst86*r20))+(((-1.0)*cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2183.value)))+(x2184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2185=IKsin(j4);
IkReal x2186=IKcos(j4);
IkReal x2187=(cj1*cj2);
IkReal x2188=((1.0)*sj1);
IkReal x2189=((1.0)*x2186);
IkReal x2190=(gconst86*x2185);
IkReal x2191=(gconst85*x2186);
IkReal x2192=((1.0)*x2185);
IkReal x2193=(gconst85*x2192);
evalcond[0]=((((-1.0)*r21*x2193))+((r20*x2190))+(((-1.0)*r22*x2189)));
evalcond[1]=(cj0+(((-1.0)*r12*x2189))+(((-1.0)*r11*x2193))+((r10*x2190)));
evalcond[2]=((((-1.0)*r01*x2193))+(((-1.0)*sj0))+(((-1.0)*r02*x2189))+((r00*x2190)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r21*x2191))+(((-1.0)*r22*x2192))+(((-1.0)*gconst86*r20*x2189))+(((-1.0)*cj2*x2188)));
evalcond[4]=(((cj0*x2187))+(((-1.0)*cj0*sj2*x2188))+(((-1.0)*r02*x2192))+(((-1.0)*gconst86*r00*x2189))+((r01*x2191)));
evalcond[5]=((((-1.0)*gconst86*r10*x2189))+(((-1.0)*sj0*sj2*x2188))+((sj0*x2187))+((r11*x2191))+(((-1.0)*r12*x2192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2195 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2195)==0){
continue;
}
IkReal x2194=pow(x2195,-0.5);
CheckValue<IkReal> x2196 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2196.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2196.value))));
IkReal gconst88=((1.0)*r11*x2194);
IkReal gconst89=((-1.0)*r10*x2194);
CheckValue<IkReal> x2197 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2197.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2197.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
IkReal x2198=((1.0)*(x2200.value));
IkReal x2199=x2194;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2198)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2198)));
IkReal gconst88=((1.0)*r11*x2199);
IkReal gconst89=((-1.0)*r10*x2199);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
IkReal x2201=((1.0)*(x2203.value));
IkReal x2202=x2194;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2201)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2201)));
IkReal gconst88=((1.0)*r11*x2202);
IkReal gconst89=((-1.0)*r10*x2202);
IkReal x2204=r12*r12;
IkReal x2205=((1.0)*sj0);
IkReal x2206=(cj0*r02);
IkReal x2207=x2194;
j4eval[0]=((IKabs(((((-1.0)*x2206))+(((-1.0)*r12*x2205)))))+(IKabs(((((-1.0)*x2205*x2207))+((r12*x2206*x2207))+((sj0*x2204*x2207))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2210 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2210.valid){
continue;
}
IkReal x2208=((1.0)*(x2210.value));
IkReal x2209=x2194;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2208)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2208)));
IkReal gconst88=((1.0)*r11*x2209);
IkReal gconst89=((-1.0)*r10*x2209);
IkReal x2211=((1.0)*r22);
IkReal x2212=(cj1*sj2);
IkReal x2213=(cj2*sj1);
IkReal x2214=x2194;
IkReal x2215=(r12*r22*x2214);
j4eval[0]=((IKabs((((x2212*x2215))+((x2213*x2215)))))+(IKabs(((((-1.0)*x2211*x2213))+(((-1.0)*x2211*x2212))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2216=(gconst89*r20);
IkReal x2217=(gconst88*r21);
IkReal x2218=(cj2*sj1);
IkReal x2219=((1.0)*cj1*sj2);
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign(((x2216*x2216)+(r22*r22)+(((-2.0)*x2216*x2217))+(x2217*x2217))),-1);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2218))+(((-1.0)*r22*x2219)))),IkReal((((x2217*x2218))+(((-1.0)*x2216*x2218))+(((-1.0)*x2216*x2219))+((cj1*sj2*x2217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2220.value)))+(x2221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2222=IKsin(j4);
IkReal x2223=IKcos(j4);
IkReal x2224=(cj1*cj2);
IkReal x2225=(gconst89*r10);
IkReal x2226=((1.0)*sj2);
IkReal x2227=((1.0)*x2223);
IkReal x2228=(gconst88*x2223);
IkReal x2229=(gconst89*x2222);
IkReal x2230=((1.0)*x2222);
evalcond[0]=((((-1.0)*gconst88*r21*x2230))+((r20*x2229))+(((-1.0)*r22*x2227)));
evalcond[1]=(cj0+((x2222*x2225))+(((-1.0)*r12*x2227))+(((-1.0)*gconst88*r11*x2230)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2227))+((r00*x2229))+(((-1.0)*gconst88*r01*x2230)));
evalcond[3]=((((-1.0)*gconst89*r20*x2227))+(((-1.0)*cj2*sj1))+((r21*x2228))+(((-1.0)*r22*x2230))+(((-1.0)*cj1*x2226)));
evalcond[4]=((((-1.0)*gconst89*r00*x2227))+(((-1.0)*r02*x2230))+((cj0*x2224))+(((-1.0)*cj0*sj1*x2226))+((r01*x2228)));
evalcond[5]=((((-1.0)*x2225*x2227))+(((-1.0)*sj0*sj1*x2226))+((sj0*x2224))+(((-1.0)*r12*x2230))+((r11*x2228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2231=((1.0)*sj0);
IkReal x2232=((1.0)*cj0);
CheckValue<IkReal> x2233 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2232))+(((-1.0)*r12*x2231)))),IkReal(((((-1.0)*gconst89*r10*x2231))+(((-1.0)*gconst89*r00*x2232))+((cj0*gconst88*r01))+((gconst88*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2233.valid){
continue;
}
CheckValue<IkReal> x2234=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2233.value)+(((1.5707963267949)*(x2234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2235=IKsin(j4);
IkReal x2236=IKcos(j4);
IkReal x2237=(cj1*cj2);
IkReal x2238=(gconst89*r10);
IkReal x2239=((1.0)*sj2);
IkReal x2240=((1.0)*x2236);
IkReal x2241=(gconst88*x2236);
IkReal x2242=(gconst89*x2235);
IkReal x2243=((1.0)*x2235);
evalcond[0]=((((-1.0)*gconst88*r21*x2243))+(((-1.0)*r22*x2240))+((r20*x2242)));
evalcond[1]=(((x2235*x2238))+cj0+(((-1.0)*gconst88*r11*x2243))+(((-1.0)*r12*x2240)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2240))+(((-1.0)*gconst88*r01*x2243))+((r00*x2242)));
evalcond[3]=((((-1.0)*cj1*x2239))+(((-1.0)*r22*x2243))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst89*r20*x2240))+((r21*x2241)));
evalcond[4]=((((-1.0)*r02*x2243))+((cj0*x2237))+(((-1.0)*gconst89*r00*x2240))+((r01*x2241))+(((-1.0)*cj0*sj1*x2239)));
evalcond[5]=((((-1.0)*sj0*sj1*x2239))+((r11*x2241))+((sj0*x2237))+(((-1.0)*r12*x2243))+(((-1.0)*x2238*x2240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2244=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2244.valid){
continue;
}
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2244.value)))+(x2245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2246=IKsin(j4);
IkReal x2247=IKcos(j4);
IkReal x2248=(cj1*cj2);
IkReal x2249=(gconst89*r10);
IkReal x2250=((1.0)*sj2);
IkReal x2251=((1.0)*x2247);
IkReal x2252=(gconst88*x2247);
IkReal x2253=(gconst89*x2246);
IkReal x2254=((1.0)*x2246);
evalcond[0]=((((-1.0)*r22*x2251))+((r20*x2253))+(((-1.0)*gconst88*r21*x2254)));
evalcond[1]=(cj0+((x2246*x2249))+(((-1.0)*r12*x2251))+(((-1.0)*gconst88*r11*x2254)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2251))+(((-1.0)*gconst88*r01*x2254))+((r00*x2253)));
evalcond[3]=((((-1.0)*r22*x2254))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst89*r20*x2251))+((r21*x2252))+(((-1.0)*cj1*x2250)));
evalcond[4]=((((-1.0)*r02*x2254))+(((-1.0)*gconst89*r00*x2251))+(((-1.0)*cj0*sj1*x2250))+((r01*x2252))+((cj0*x2248)));
evalcond[5]=((((-1.0)*x2249*x2251))+(((-1.0)*sj0*sj1*x2250))+(((-1.0)*r12*x2254))+((sj0*x2248))+((r11*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2255=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2255;
j4eval[1]=IKsign(x2255);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2256=((1.0)*sj5);
IkReal x2257=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2256)));
j4eval[0]=x2257;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x2256))+((cj5*r00))))));
j4eval[2]=IKsign(x2257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2258=cj5*cj5;
IkReal x2259=r11*r11;
IkReal x2260=(r11*sj5);
IkReal x2261=(cj5*r10);
IkReal x2262=((r12*r12)+x2259+(((-2.0)*x2260*x2261))+(((-1.0)*x2258*x2259))+((x2258*(r10*r10))));
j4eval[0]=x2262;
j4eval[1]=IKsign(x2262);
j4eval[2]=((IKabs(r12))+(IKabs((x2260+(((-1.0)*x2261))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2263=cj5*cj5;
IkReal x2264=r11*r11;
IkReal x2265=(cj5*r10);
IkReal x2266=(r11*sj5);
CheckValue<IkReal> x2267 = IKatan2WithCheck(IkReal((x2266+(((-1.0)*x2265)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2267.valid){
continue;
}
CheckValue<IkReal> x2268=IKPowWithIntegerCheck(IKsign((((x2263*(r10*r10)))+(r12*r12)+x2264+(((-2.0)*x2265*x2266))+(((-1.0)*x2263*x2264)))),-1);
if(!x2268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2267.value)+(((1.5707963267949)*(x2268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2269=IKsin(j4);
IkReal x2270=IKcos(j4);
IkReal x2271=(cj5*r00);
IkReal x2272=((1.0)*sj2);
IkReal x2273=((1.0)*x2270);
IkReal x2274=(sj5*x2270);
IkReal x2275=(cj5*x2269);
IkReal x2276=((1.0)*x2269);
IkReal x2277=(sj5*x2276);
evalcond[0]=((((-1.0)*r21*x2277))+(((-1.0)*r22*x2273))+((r20*x2275)));
evalcond[1]=((((-1.0)*r01*x2277))+((x2269*x2271))+(((-1.0)*r02*x2273)));
evalcond[2]=(((r11*x2274))+(((-1.0)*r12*x2276))+(((-1.0)*cj5*r10*x2273)));
evalcond[3]=((1.0)+((r10*x2275))+(((-1.0)*r11*x2277))+(((-1.0)*r12*x2273)));
evalcond[4]=(((r01*x2274))+(((-1.0)*sj1*x2272))+(((-1.0)*r02*x2276))+((cj1*cj2))+(((-1.0)*x2271*x2273)));
evalcond[5]=((((-1.0)*cj5*r20*x2273))+((r21*x2274))+(((-1.0)*cj1*x2272))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2278=((1.0)*sj5);
CheckValue<IkReal> x2279 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2278))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2279.valid){
continue;
}
CheckValue<IkReal> x2280=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2278))+(((-1.0)*cj5*r21)))),-1);
if(!x2280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2279.value)+(((1.5707963267949)*(x2280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2281=IKsin(j4);
IkReal x2282=IKcos(j4);
IkReal x2283=(cj5*r00);
IkReal x2284=((1.0)*sj2);
IkReal x2285=((1.0)*x2282);
IkReal x2286=(sj5*x2282);
IkReal x2287=(cj5*x2281);
IkReal x2288=((1.0)*x2281);
IkReal x2289=(sj5*x2288);
evalcond[0]=(((r20*x2287))+(((-1.0)*r21*x2289))+(((-1.0)*r22*x2285)));
evalcond[1]=((((-1.0)*r02*x2285))+((x2281*x2283))+(((-1.0)*r01*x2289)));
evalcond[2]=(((r11*x2286))+(((-1.0)*r12*x2288))+(((-1.0)*cj5*r10*x2285)));
evalcond[3]=((1.0)+((r10*x2287))+(((-1.0)*r11*x2289))+(((-1.0)*r12*x2285)));
evalcond[4]=((((-1.0)*r02*x2288))+(((-1.0)*sj1*x2284))+((r01*x2286))+((cj1*cj2))+(((-1.0)*x2283*x2285)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x2286))+(((-1.0)*cj5*r20*x2285))+(((-1.0)*cj1*x2284))+(((-1.0)*r22*x2288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2290=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2290.valid){
continue;
}
CheckValue<IkReal> x2291 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2290.value)))+(x2291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2292=IKsin(j4);
IkReal x2293=IKcos(j4);
IkReal x2294=(cj5*r00);
IkReal x2295=((1.0)*sj2);
IkReal x2296=((1.0)*x2293);
IkReal x2297=(sj5*x2293);
IkReal x2298=(cj5*x2292);
IkReal x2299=((1.0)*x2292);
IkReal x2300=(sj5*x2299);
evalcond[0]=((((-1.0)*r21*x2300))+((r20*x2298))+(((-1.0)*r22*x2296)));
evalcond[1]=((((-1.0)*r02*x2296))+(((-1.0)*r01*x2300))+((x2292*x2294)));
evalcond[2]=((((-1.0)*cj5*r10*x2296))+(((-1.0)*r12*x2299))+((r11*x2297)));
evalcond[3]=((1.0)+(((-1.0)*r11*x2300))+((r10*x2298))+(((-1.0)*r12*x2296)));
evalcond[4]=((((-1.0)*r02*x2299))+((cj1*cj2))+(((-1.0)*sj1*x2295))+((r01*x2297))+(((-1.0)*x2294*x2296)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x2297))+(((-1.0)*cj1*x2295))+(((-1.0)*r22*x2299))+(((-1.0)*cj5*r20*x2296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2301=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2301;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2301);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2302=((1.0)*sj5);
IkReal x2303=((((-1.0)*r00*x2302))+(((-1.0)*cj5*r01)));
j4eval[0]=x2303;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2302))))));
j4eval[2]=IKsign(x2303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2304=cj5*cj5;
IkReal x2305=r11*r11;
IkReal x2306=(cj5*r10);
IkReal x2307=(r11*sj5);
IkReal x2308=((((-1.0)*x2305))+((x2304*x2305))+(((-1.0)*x2304*(r10*r10)))+(((2.0)*x2306*x2307))+(((-1.0)*(r12*r12))));
j4eval[0]=x2308;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2306))+x2307))));
j4eval[2]=IKsign(x2308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2309=cj5*cj5;
IkReal x2310=r11*r11;
IkReal x2311=(cj5*r10);
IkReal x2312=(r11*sj5);
CheckValue<IkReal> x2313 = IKatan2WithCheck(IkReal(((((-1.0)*x2311))+x2312)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2313.valid){
continue;
}
CheckValue<IkReal> x2314=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2310))+(((-1.0)*x2309*(r10*r10)))+((x2309*x2310))+(((-1.0)*(r12*r12)))+(((2.0)*x2311*x2312)))),-1);
if(!x2314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2313.value)+(((1.5707963267949)*(x2314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2315=IKsin(j4);
IkReal x2316=IKcos(j4);
IkReal x2317=(cj5*r00);
IkReal x2318=((1.0)*cj1);
IkReal x2319=((1.0)*x2316);
IkReal x2320=(sj5*x2316);
IkReal x2321=(cj5*x2315);
IkReal x2322=((1.0)*x2315);
IkReal x2323=(sj5*x2322);
evalcond[0]=((((-1.0)*r22*x2319))+((r20*x2321))+(((-1.0)*r21*x2323)));
evalcond[1]=(((x2315*x2317))+(((-1.0)*r02*x2319))+(((-1.0)*r01*x2323)));
evalcond[2]=((((-1.0)*cj5*r10*x2319))+((r11*x2320))+(((-1.0)*r12*x2322)));
evalcond[3]=((-1.0)+((r10*x2321))+(((-1.0)*r12*x2319))+(((-1.0)*r11*x2323)));
evalcond[4]=((((-1.0)*cj2*x2318))+((sj1*sj2))+((r01*x2320))+(((-1.0)*x2317*x2319))+(((-1.0)*r02*x2322)));
evalcond[5]=((((-1.0)*r22*x2322))+((r21*x2320))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2319))+(((-1.0)*sj2*x2318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2324=((1.0)*sj5);
CheckValue<IkReal> x2325 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2324)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2325.valid){
continue;
}
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2324))+(((-1.0)*cj5*r01)))),-1);
if(!x2326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2325.value)+(((1.5707963267949)*(x2326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2327=IKsin(j4);
IkReal x2328=IKcos(j4);
IkReal x2329=(cj5*r00);
IkReal x2330=((1.0)*cj1);
IkReal x2331=((1.0)*x2328);
IkReal x2332=(sj5*x2328);
IkReal x2333=(cj5*x2327);
IkReal x2334=((1.0)*x2327);
IkReal x2335=(sj5*x2334);
evalcond[0]=((((-1.0)*r22*x2331))+(((-1.0)*r21*x2335))+((r20*x2333)));
evalcond[1]=(((x2327*x2329))+(((-1.0)*r01*x2335))+(((-1.0)*r02*x2331)));
evalcond[2]=((((-1.0)*cj5*r10*x2331))+((r11*x2332))+(((-1.0)*r12*x2334)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x2335))+(((-1.0)*r12*x2331))+((r10*x2333)));
evalcond[4]=(((sj1*sj2))+((r01*x2332))+(((-1.0)*cj2*x2330))+(((-1.0)*r02*x2334))+(((-1.0)*x2329*x2331)));
evalcond[5]=(((r21*x2332))+(((-1.0)*r22*x2334))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2331))+(((-1.0)*sj2*x2330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2336=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2336.valid){
continue;
}
CheckValue<IkReal> x2337 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2336.value)))+(x2337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2338=IKsin(j4);
IkReal x2339=IKcos(j4);
IkReal x2340=(cj5*r00);
IkReal x2341=((1.0)*cj1);
IkReal x2342=((1.0)*x2339);
IkReal x2343=(sj5*x2339);
IkReal x2344=(cj5*x2338);
IkReal x2345=((1.0)*x2338);
IkReal x2346=(sj5*x2345);
evalcond[0]=((((-1.0)*r21*x2346))+(((-1.0)*r22*x2342))+((r20*x2344)));
evalcond[1]=((((-1.0)*r01*x2346))+((x2338*x2340))+(((-1.0)*r02*x2342)));
evalcond[2]=(((r11*x2343))+(((-1.0)*cj5*r10*x2342))+(((-1.0)*r12*x2345)));
evalcond[3]=((-1.0)+((r10*x2344))+(((-1.0)*r11*x2346))+(((-1.0)*r12*x2342)));
evalcond[4]=(((r01*x2343))+(((-1.0)*x2340*x2342))+(((-1.0)*cj2*x2341))+((sj1*sj2))+(((-1.0)*r02*x2345)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2341))+(((-1.0)*r22*x2345))+(((-1.0)*cj5*r20*x2342))+((r21*x2343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2348 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2348)==0){
continue;
}
IkReal x2347=pow(x2348,-0.5);
CheckValue<IkReal> x2349 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2349.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2349.value));
IkReal gconst91=((-1.0)*r01*x2347);
IkReal gconst92=(r00*x2347);
CheckValue<IkReal> x2350 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2350.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2350.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2353 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2353.valid){
continue;
}
IkReal x2351=((-1.0)*(x2353.value));
IkReal x2352=x2347;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2351;
IkReal gconst90=x2351;
IkReal gconst91=((-1.0)*r01*x2352);
IkReal gconst92=(r00*x2352);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2354=((1.0)*sj0);
IkReal x2355=((1.0)*cj0);
CheckValue<IkReal> x2356 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2355))+(((-1.0)*r12*x2354)))),IkReal(((((-1.0)*gconst92*r10*x2354))+(((-1.0)*gconst92*r00*x2355))+((gconst91*r11*sj0))+((cj0*gconst91*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2356.valid){
continue;
}
CheckValue<IkReal> x2357=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2356.value)+(((1.5707963267949)*(x2357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2358=IKsin(j4);
IkReal x2359=IKcos(j4);
IkReal x2360=(cj1*cj2);
IkReal x2361=(gconst92*r00);
IkReal x2362=((1.0)*sj1);
IkReal x2363=((1.0)*x2359);
IkReal x2364=(gconst91*x2359);
IkReal x2365=((1.0)*x2358);
IkReal x2366=(gconst92*x2358);
IkReal x2367=(gconst91*x2365);
evalcond[0]=(((r20*x2366))+(((-1.0)*r21*x2367))+(((-1.0)*r22*x2363)));
evalcond[1]=(cj0+((r10*x2366))+(((-1.0)*r11*x2367))+(((-1.0)*r12*x2363)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x2367))+((x2358*x2361))+(((-1.0)*r02*x2363)));
evalcond[3]=((((-1.0)*cj2*x2362))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst92*r20*x2363))+(((-1.0)*r22*x2365))+((r21*x2364)));
evalcond[4]=((((-1.0)*cj0*sj2*x2362))+((cj0*x2360))+(((-1.0)*x2361*x2363))+((r01*x2364))+(((-1.0)*r02*x2365)));
evalcond[5]=(((r11*x2364))+(((-1.0)*sj0*sj2*x2362))+((sj0*x2360))+(((-1.0)*gconst92*r10*x2363))+(((-1.0)*r12*x2365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2368 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst91*r21*sj0))+((gconst92*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2368.valid){
continue;
}
CheckValue<IkReal> x2369=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2368.value)+(((1.5707963267949)*(x2369.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2370=IKsin(j4);
IkReal x2371=IKcos(j4);
IkReal x2372=(cj1*cj2);
IkReal x2373=(gconst92*r00);
IkReal x2374=((1.0)*sj1);
IkReal x2375=((1.0)*x2371);
IkReal x2376=(gconst91*x2371);
IkReal x2377=((1.0)*x2370);
IkReal x2378=(gconst92*x2370);
IkReal x2379=(gconst91*x2377);
evalcond[0]=(((r20*x2378))+(((-1.0)*r21*x2379))+(((-1.0)*r22*x2375)));
evalcond[1]=(cj0+((r10*x2378))+(((-1.0)*r12*x2375))+(((-1.0)*r11*x2379)));
evalcond[2]=((((-1.0)*r02*x2375))+(((-1.0)*sj0))+((x2370*x2373))+(((-1.0)*r01*x2379)));
evalcond[3]=((((-1.0)*cj2*x2374))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst92*r20*x2375))+(((-1.0)*r22*x2377))+((r21*x2376)));
evalcond[4]=((((-1.0)*r02*x2377))+(((-1.0)*cj0*sj2*x2374))+((cj0*x2372))+(((-1.0)*x2373*x2375))+((r01*x2376)));
evalcond[5]=((((-1.0)*sj0*sj2*x2374))+((sj0*x2372))+(((-1.0)*gconst92*r10*x2375))+(((-1.0)*r12*x2377))+((r11*x2376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2381 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2381)==0){
continue;
}
IkReal x2380=pow(x2381,-0.5);
CheckValue<IkReal> x2382 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2382.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2382.value))));
IkReal gconst94=((1.0)*r01*x2380);
IkReal gconst95=((-1.0)*r00*x2380);
CheckValue<IkReal> x2383 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2383.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2383.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x2386 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2386.valid){
continue;
}
IkReal x2384=((1.0)*(x2386.value));
IkReal x2385=x2380;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2384)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2384)));
IkReal gconst94=((1.0)*r01*x2385);
IkReal gconst95=((-1.0)*r00*x2385);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2389 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2389.valid){
continue;
}
IkReal x2387=((1.0)*(x2389.value));
IkReal x2388=x2380;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2387)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2387)));
IkReal gconst94=((1.0)*r01*x2388);
IkReal gconst95=((-1.0)*r00*x2388);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2392 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2392.valid){
continue;
}
IkReal x2390=((1.0)*(x2392.value));
IkReal x2391=x2380;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2390)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2390)));
IkReal gconst94=((1.0)*r01*x2391);
IkReal gconst95=((-1.0)*r00*x2391);
IkReal x2393=r02*r02;
IkReal x2394=(r12*sj0);
IkReal x2395=((1.0)*cj0);
IkReal x2396=x2380;
j4eval[0]=((IKabs((((r02*x2394*x2396))+((cj0*x2393*x2396))+(((-1.0)*x2395*x2396)))))+(IKabs(((((-1.0)*r02*x2395))+(((-1.0)*x2394))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2397=((1.0)*sj0);
IkReal x2398=((1.0)*cj0);
CheckValue<IkReal> x2399=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x2399.valid){
continue;
}
CheckValue<IkReal> x2400 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2398))+(((-1.0)*r12*x2397)))),IkReal((((gconst94*r11*sj0))+(((-1.0)*gconst95*r00*x2398))+((cj0*gconst94*r01))+(((-1.0)*gconst95*r10*x2397)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2399.value)))+(x2400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2401=IKsin(j4);
IkReal x2402=IKcos(j4);
IkReal x2403=(cj1*cj2);
IkReal x2404=(gconst95*r10);
IkReal x2405=((1.0)*sj1);
IkReal x2406=((1.0)*x2402);
IkReal x2407=(gconst95*x2401);
IkReal x2408=(gconst94*x2402);
IkReal x2409=((1.0)*x2401);
IkReal x2410=(gconst94*x2409);
evalcond[0]=(((r20*x2407))+(((-1.0)*r21*x2410))+(((-1.0)*r22*x2406)));
evalcond[1]=(cj0+(((-1.0)*r11*x2410))+((x2401*x2404))+(((-1.0)*r12*x2406)));
evalcond[2]=((((-1.0)*sj0))+((r00*x2407))+(((-1.0)*r02*x2406))+(((-1.0)*r01*x2410)));
evalcond[3]=((((-1.0)*cj2*x2405))+(((-1.0)*gconst95*r20*x2406))+(((-1.0)*cj1*sj2))+((r21*x2408))+(((-1.0)*r22*x2409)));
evalcond[4]=((((-1.0)*cj0*sj2*x2405))+((r01*x2408))+((cj0*x2403))+(((-1.0)*r02*x2409))+(((-1.0)*gconst95*r00*x2406)));
evalcond[5]=((((-1.0)*x2404*x2406))+((r11*x2408))+(((-1.0)*sj0*sj2*x2405))+((sj0*x2403))+(((-1.0)*r12*x2409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2411=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x2411.valid){
continue;
}
CheckValue<IkReal> x2412 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst95*r20*sj0))+(((-1.0)*gconst94*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2411.value)))+(x2412.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2413=IKsin(j4);
IkReal x2414=IKcos(j4);
IkReal x2415=(cj1*cj2);
IkReal x2416=(gconst95*r10);
IkReal x2417=((1.0)*sj1);
IkReal x2418=((1.0)*x2414);
IkReal x2419=(gconst95*x2413);
IkReal x2420=(gconst94*x2414);
IkReal x2421=((1.0)*x2413);
IkReal x2422=(gconst94*x2421);
evalcond[0]=((((-1.0)*r21*x2422))+((r20*x2419))+(((-1.0)*r22*x2418)));
evalcond[1]=(cj0+((x2413*x2416))+(((-1.0)*r12*x2418))+(((-1.0)*r11*x2422)));
evalcond[2]=((((-1.0)*r01*x2422))+(((-1.0)*sj0))+((r00*x2419))+(((-1.0)*r02*x2418)));
evalcond[3]=(((r21*x2420))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2421))+(((-1.0)*gconst95*r20*x2418))+(((-1.0)*cj2*x2417)));
evalcond[4]=((((-1.0)*r02*x2421))+((cj0*x2415))+((r01*x2420))+(((-1.0)*cj0*sj2*x2417))+(((-1.0)*gconst95*r00*x2418)));
evalcond[5]=((((-1.0)*x2416*x2418))+((sj0*x2415))+(((-1.0)*r12*x2421))+(((-1.0)*sj0*sj2*x2417))+((r11*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2423=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x2423.valid){
continue;
}
CheckValue<IkReal> x2424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst94*r21))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2423.value)))+(x2424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2425=IKsin(j4);
IkReal x2426=IKcos(j4);
IkReal x2427=(cj1*cj2);
IkReal x2428=(gconst95*r10);
IkReal x2429=((1.0)*sj1);
IkReal x2430=((1.0)*x2426);
IkReal x2431=(gconst95*x2425);
IkReal x2432=(gconst94*x2426);
IkReal x2433=((1.0)*x2425);
IkReal x2434=(gconst94*x2433);
evalcond[0]=((((-1.0)*r22*x2430))+((r20*x2431))+(((-1.0)*r21*x2434)));
evalcond[1]=(cj0+((x2425*x2428))+(((-1.0)*r12*x2430))+(((-1.0)*r11*x2434)));
evalcond[2]=((((-1.0)*sj0))+((r00*x2431))+(((-1.0)*r01*x2434))+(((-1.0)*r02*x2430)));
evalcond[3]=((((-1.0)*r22*x2433))+(((-1.0)*gconst95*r20*x2430))+(((-1.0)*cj1*sj2))+((r21*x2432))+(((-1.0)*cj2*x2429)));
evalcond[4]=((((-1.0)*gconst95*r00*x2430))+((r01*x2432))+(((-1.0)*r02*x2433))+((cj0*x2427))+(((-1.0)*cj0*sj2*x2429)));
evalcond[5]=(((r11*x2432))+((sj0*x2427))+(((-1.0)*x2428*x2430))+(((-1.0)*r12*x2433))+(((-1.0)*sj0*sj2*x2429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2435=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2435;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x2435);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2436=((1.0)*sj5);
IkReal x2437=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2436)));
j4eval[0]=x2437;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2436))))));
j4eval[2]=IKsign(x2437);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2438=cj5*cj5;
IkReal x2439=r01*r01;
IkReal x2440=(r01*sj5);
IkReal x2441=(cj5*r00);
IkReal x2442=((((-1.0)*x2439))+(((-1.0)*(r02*r02)))+(((-1.0)*x2438*(r00*r00)))+((x2438*x2439))+(((2.0)*x2440*x2441)));
j4eval[0]=x2442;
j4eval[1]=IKsign(x2442);
j4eval[2]=((IKabs(r02))+(IKabs((x2440+(((-1.0)*x2441))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2443=cj5*cj5;
IkReal x2444=r01*r01;
IkReal x2445=(r01*sj5);
IkReal x2446=(cj5*r00);
CheckValue<IkReal> x2447 = IKatan2WithCheck(IkReal((x2445+(((-1.0)*x2446)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2447.valid){
continue;
}
CheckValue<IkReal> x2448=IKPowWithIntegerCheck(IKsign(((((2.0)*x2445*x2446))+((x2443*x2444))+(((-1.0)*(r02*r02)))+(((-1.0)*x2444))+(((-1.0)*x2443*(r00*r00))))),-1);
if(!x2448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2447.value)+(((1.5707963267949)*(x2448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2449=IKsin(j4);
IkReal x2450=IKcos(j4);
IkReal x2451=(cj5*r00);
IkReal x2452=((1.0)*sj2);
IkReal x2453=(cj5*r20);
IkReal x2454=(cj5*r10);
IkReal x2455=((1.0)*x2450);
IkReal x2456=(sj5*x2450);
IkReal x2457=((1.0)*x2449);
IkReal x2458=(sj5*x2457);
evalcond[0]=((((-1.0)*r21*x2458))+((x2449*x2453))+(((-1.0)*r22*x2455)));
evalcond[1]=(((x2449*x2454))+(((-1.0)*r11*x2458))+(((-1.0)*r12*x2455)));
evalcond[2]=(((r01*x2456))+(((-1.0)*x2451*x2455))+(((-1.0)*r02*x2457)));
evalcond[3]=((-1.0)+((x2449*x2451))+(((-1.0)*r01*x2458))+(((-1.0)*r02*x2455)));
evalcond[4]=((((-1.0)*x2454*x2455))+(((-1.0)*r12*x2457))+((cj1*cj2))+((r11*x2456))+(((-1.0)*sj1*x2452)));
evalcond[5]=((((-1.0)*x2453*x2455))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2457))+(((-1.0)*cj1*x2452))+((r21*x2456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2459=((1.0)*sj5);
CheckValue<IkReal> x2460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x2459))+(((-1.0)*cj5*r21)))),-1);
if(!x2460.valid){
continue;
}
CheckValue<IkReal> x2461 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x2459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2460.value)))+(x2461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2462=IKsin(j4);
IkReal x2463=IKcos(j4);
IkReal x2464=(cj5*r00);
IkReal x2465=((1.0)*sj2);
IkReal x2466=(cj5*r20);
IkReal x2467=(cj5*r10);
IkReal x2468=((1.0)*x2463);
IkReal x2469=(sj5*x2463);
IkReal x2470=((1.0)*x2462);
IkReal x2471=(sj5*x2470);
evalcond[0]=((((-1.0)*r22*x2468))+(((-1.0)*r21*x2471))+((x2462*x2466)));
evalcond[1]=((((-1.0)*r11*x2471))+(((-1.0)*r12*x2468))+((x2462*x2467)));
evalcond[2]=((((-1.0)*x2464*x2468))+((r01*x2469))+(((-1.0)*r02*x2470)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2471))+((x2462*x2464))+(((-1.0)*r02*x2468)));
evalcond[4]=((((-1.0)*r12*x2470))+((r11*x2469))+(((-1.0)*x2467*x2468))+((cj1*cj2))+(((-1.0)*sj1*x2465)));
evalcond[5]=((((-1.0)*x2466*x2468))+(((-1.0)*cj2*sj1))+((r21*x2469))+(((-1.0)*cj1*x2465))+(((-1.0)*r22*x2470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2472=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2472.valid){
continue;
}
CheckValue<IkReal> x2473 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2472.value)))+(x2473.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2474=IKsin(j4);
IkReal x2475=IKcos(j4);
IkReal x2476=(cj5*r00);
IkReal x2477=((1.0)*sj2);
IkReal x2478=(cj5*r20);
IkReal x2479=(cj5*r10);
IkReal x2480=((1.0)*x2475);
IkReal x2481=(sj5*x2475);
IkReal x2482=((1.0)*x2474);
IkReal x2483=(sj5*x2482);
evalcond[0]=((((-1.0)*r22*x2480))+(((-1.0)*r21*x2483))+((x2474*x2478)));
evalcond[1]=((((-1.0)*r12*x2480))+(((-1.0)*r11*x2483))+((x2474*x2479)));
evalcond[2]=(((r01*x2481))+(((-1.0)*x2476*x2480))+(((-1.0)*r02*x2482)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x2483))+(((-1.0)*r02*x2480))+((x2474*x2476)));
evalcond[4]=(((r11*x2481))+(((-1.0)*sj1*x2477))+((cj1*cj2))+(((-1.0)*r12*x2482))+(((-1.0)*x2479*x2480)));
evalcond[5]=((((-1.0)*r22*x2482))+(((-1.0)*cj2*sj1))+((r21*x2481))+(((-1.0)*cj1*x2477))+(((-1.0)*x2478*x2480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2484=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2484;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x2484);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2485=((1.0)*sj5);
IkReal x2486=((((-1.0)*cj5*r11))+(((-1.0)*r10*x2485)));
j4eval[0]=x2486;
j4eval[1]=IKsign(x2486);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x2485)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2487=cj5*cj5;
IkReal x2488=r01*r01;
IkReal x2489=(cj5*r00);
IkReal x2490=(r01*sj5);
IkReal x2491=((((-1.0)*x2487*x2488))+x2488+((x2487*(r00*r00)))+(((-2.0)*x2489*x2490))+(r02*r02));
j4eval[0]=x2491;
j4eval[1]=((IKabs(r02))+(IKabs((x2490+(((-1.0)*x2489))))));
j4eval[2]=IKsign(x2491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2492=cj5*cj5;
IkReal x2493=r01*r01;
IkReal x2494=(r01*sj5);
IkReal x2495=(cj5*r00);
CheckValue<IkReal> x2496=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2492*x2493))+x2493+((x2492*(r00*r00)))+(((-2.0)*x2494*x2495))+(r02*r02))),-1);
if(!x2496.valid){
continue;
}
CheckValue<IkReal> x2497 = IKatan2WithCheck(IkReal((x2494+(((-1.0)*x2495)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2496.value)))+(x2497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2498=IKsin(j4);
IkReal x2499=IKcos(j4);
IkReal x2500=(cj5*r00);
IkReal x2501=((1.0)*cj1);
IkReal x2502=(cj5*r20);
IkReal x2503=(cj5*r10);
IkReal x2504=((1.0)*x2499);
IkReal x2505=(sj5*x2499);
IkReal x2506=((1.0)*x2498);
IkReal x2507=(sj5*x2506);
evalcond[0]=((((-1.0)*r22*x2504))+((x2498*x2502))+(((-1.0)*r21*x2507)));
evalcond[1]=((((-1.0)*r12*x2504))+(((-1.0)*r11*x2507))+((x2498*x2503)));
evalcond[2]=((((-1.0)*r02*x2506))+(((-1.0)*x2500*x2504))+((r01*x2505)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2504))+(((-1.0)*r01*x2507))+((x2498*x2500)));
evalcond[4]=((((-1.0)*cj2*x2501))+(((-1.0)*r12*x2506))+(((-1.0)*x2503*x2504))+((sj1*sj2))+((r11*x2505)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x2502*x2504))+(((-1.0)*r22*x2506))+((r21*x2505))+(((-1.0)*sj2*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2508=((1.0)*sj5);
CheckValue<IkReal> x2509=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x2508)))),-1);
if(!x2509.valid){
continue;
}
CheckValue<IkReal> x2510 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2509.value)))+(x2510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2511=IKsin(j4);
IkReal x2512=IKcos(j4);
IkReal x2513=(cj5*r00);
IkReal x2514=((1.0)*cj1);
IkReal x2515=(cj5*r20);
IkReal x2516=(cj5*r10);
IkReal x2517=((1.0)*x2512);
IkReal x2518=(sj5*x2512);
IkReal x2519=((1.0)*x2511);
IkReal x2520=(sj5*x2519);
evalcond[0]=(((x2511*x2515))+(((-1.0)*r21*x2520))+(((-1.0)*r22*x2517)));
evalcond[1]=(((x2511*x2516))+(((-1.0)*r11*x2520))+(((-1.0)*r12*x2517)));
evalcond[2]=((((-1.0)*x2513*x2517))+((r01*x2518))+(((-1.0)*r02*x2519)));
evalcond[3]=((1.0)+((x2511*x2513))+(((-1.0)*r01*x2520))+(((-1.0)*r02*x2517)));
evalcond[4]=((((-1.0)*cj2*x2514))+((r11*x2518))+((sj1*sj2))+(((-1.0)*r12*x2519))+(((-1.0)*x2516*x2517)));
evalcond[5]=((((-1.0)*sj2*x2514))+(((-1.0)*cj2*sj1))+(((-1.0)*x2515*x2517))+(((-1.0)*r22*x2519))+((r21*x2518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2521 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2521.valid){
continue;
}
CheckValue<IkReal> x2522=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2521.value)+(((1.5707963267949)*(x2522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2523=IKsin(j4);
IkReal x2524=IKcos(j4);
IkReal x2525=(cj5*r00);
IkReal x2526=((1.0)*cj1);
IkReal x2527=(cj5*r20);
IkReal x2528=(cj5*r10);
IkReal x2529=((1.0)*x2524);
IkReal x2530=(sj5*x2524);
IkReal x2531=((1.0)*x2523);
IkReal x2532=(sj5*x2531);
evalcond[0]=((((-1.0)*r21*x2532))+((x2523*x2527))+(((-1.0)*r22*x2529)));
evalcond[1]=((((-1.0)*r12*x2529))+((x2523*x2528))+(((-1.0)*r11*x2532)));
evalcond[2]=(((r01*x2530))+(((-1.0)*r02*x2531))+(((-1.0)*x2525*x2529)));
evalcond[3]=((1.0)+(((-1.0)*r01*x2532))+(((-1.0)*r02*x2529))+((x2523*x2525)));
evalcond[4]=((((-1.0)*x2528*x2529))+((sj1*sj2))+(((-1.0)*cj2*x2526))+(((-1.0)*r12*x2531))+((r11*x2530)));
evalcond[5]=((((-1.0)*x2527*x2529))+(((-1.0)*cj2*sj1))+((r21*x2530))+(((-1.0)*r22*x2531))+(((-1.0)*sj2*x2526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2533=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2533);
rxp1_1=(px*r21);
rxp1_2=(r11*x2533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2534=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2534);
rxp1_1=(px*r21);
rxp1_2=(r11*x2534);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2535=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2535);
rxp1_1=(px*r21);
rxp1_2=(r11*x2535);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2538=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x2538.valid){
continue;
}
IkReal x2536=x2538.value;
IkReal x2537=(sj0*x2536);
cj4array[0]=(((sj1*sj2*x2537))+(((-1.0)*cj1*cj2*x2537)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2539=IKsin(j4);
IkReal x2540=IKcos(j4);
IkReal x2541=(cj5*x2539);
IkReal x2542=((1.0)*x2540);
IkReal x2543=((1.0)*sj5*x2539);
evalcond[0]=((-1.0)*r02*x2539);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2542)));
evalcond[2]=(((r20*x2541))+(((-1.0)*r21*x2543)));
evalcond[3]=((((-1.0)*r11*x2543))+((r10*x2541)));
evalcond[4]=(((r21*sj5*x2540))+(((-1.0)*cj5*r20*x2542))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2545=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x2545.valid){
continue;
}
IkReal x2544=x2545.value;
cj4array[0]=(((cj1*sj2*x2544))+((cj2*sj1*x2544)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2546=IKsin(j4);
IkReal x2547=IKcos(j4);
IkReal x2548=((1.0)*sj0);
IkReal x2549=(cj5*r10);
IkReal x2550=((1.0)*x2547);
IkReal x2551=((1.0)*sj5*x2546);
evalcond[0]=((-1.0)*r02*x2546);
evalcond[1]=((((-1.0)*r02*x2550))+(((-1.0)*x2548)));
evalcond[2]=(((cj5*r20*x2546))+(((-1.0)*r21*x2551)));
evalcond[3]=((((-1.0)*r11*x2551))+((x2546*x2549)));
evalcond[4]=((((-1.0)*x2549*x2550))+((cj1*cj2*sj0))+((r11*sj5*x2547))+(((-1.0)*sj1*sj2*x2548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(r02,-1);
if(!x2552.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2552.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2553=IKsin(j4);
IkReal x2554=IKcos(j4);
IkReal x2555=(cj5*r10);
IkReal x2556=(cj5*r20);
IkReal x2557=((1.0)*sj2);
IkReal x2558=((1.0)*x2554);
IkReal x2559=(sj5*x2554);
IkReal x2560=((1.0)*sj5*x2553);
evalcond[0]=((-1.0)*r02*x2553);
evalcond[1]=((((-1.0)*r21*x2560))+((x2553*x2556)));
evalcond[2]=(((x2553*x2555))+(((-1.0)*r11*x2560)));
evalcond[3]=((((-1.0)*x2556*x2558))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2557))+((r21*x2559)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x2555*x2558))+((r11*x2559))+(((-1.0)*sj0*sj1*x2557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2561=((1.0)*sj0);
IkReal x2562=((1.0)*cj0);
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2563.valid){
continue;
}
CheckValue<IkReal> x2564 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2562))+(((-1.0)*r12*x2561)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x2561))+(((-1.0)*cj5*r00*x2562)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2563.value)))+(x2564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2565=IKsin(j4);
IkReal x2566=IKcos(j4);
IkReal x2567=(cj5*r00);
IkReal x2568=(cj1*cj2);
IkReal x2569=((1.0)*sj2);
IkReal x2570=(cj5*r20);
IkReal x2571=(cj5*r10);
IkReal x2572=((1.0)*x2566);
IkReal x2573=(sj5*x2566);
IkReal x2574=((1.0)*x2565);
IkReal x2575=(sj5*x2574);
evalcond[0]=((((-1.0)*r21*x2575))+(((-1.0)*r22*x2572))+((x2565*x2570)));
evalcond[1]=((((-1.0)*r12*x2572))+cj0+((x2565*x2571))+(((-1.0)*r11*x2575)));
evalcond[2]=((((-1.0)*sj0))+((x2565*x2567))+(((-1.0)*r01*x2575))+(((-1.0)*r02*x2572)));
evalcond[3]=(((r21*x2573))+(((-1.0)*cj1*x2569))+(((-1.0)*cj2*sj1))+(((-1.0)*x2570*x2572))+(((-1.0)*r22*x2574)));
evalcond[4]=(((cj0*x2568))+((r01*x2573))+(((-1.0)*x2567*x2572))+(((-1.0)*cj0*sj1*x2569))+(((-1.0)*r02*x2574)));
evalcond[5]=((((-1.0)*r12*x2574))+(((-1.0)*x2571*x2572))+((r11*x2573))+(((-1.0)*sj0*sj1*x2569))+((sj0*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2576 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2576.valid){
continue;
}
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2576.value)+(((1.5707963267949)*(x2577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2578=IKsin(j4);
IkReal x2579=IKcos(j4);
IkReal x2580=(cj5*r00);
IkReal x2581=(cj1*cj2);
IkReal x2582=((1.0)*sj2);
IkReal x2583=(cj5*r20);
IkReal x2584=(cj5*r10);
IkReal x2585=((1.0)*x2579);
IkReal x2586=(sj5*x2579);
IkReal x2587=((1.0)*x2578);
IkReal x2588=(sj5*x2587);
evalcond[0]=((((-1.0)*r21*x2588))+((x2578*x2583))+(((-1.0)*r22*x2585)));
evalcond[1]=(cj0+((x2578*x2584))+(((-1.0)*r11*x2588))+(((-1.0)*r12*x2585)));
evalcond[2]=((((-1.0)*r01*x2588))+(((-1.0)*sj0))+(((-1.0)*r02*x2585))+((x2578*x2580)));
evalcond[3]=((((-1.0)*cj1*x2582))+(((-1.0)*cj2*sj1))+((r21*x2586))+(((-1.0)*x2583*x2585))+(((-1.0)*r22*x2587)));
evalcond[4]=(((r01*x2586))+(((-1.0)*r02*x2587))+((cj0*x2581))+(((-1.0)*cj0*sj1*x2582))+(((-1.0)*x2580*x2585)));
evalcond[5]=((((-1.0)*sj0*sj1*x2582))+((r11*x2586))+(((-1.0)*x2584*x2585))+((sj0*x2581))+(((-1.0)*r12*x2587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2589 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2589.valid){
continue;
}
CheckValue<IkReal> x2590=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2589.value)+(((1.5707963267949)*(x2590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2591=IKsin(j4);
IkReal x2592=IKcos(j4);
IkReal x2593=(cj5*r00);
IkReal x2594=(cj1*cj2);
IkReal x2595=((1.0)*sj2);
IkReal x2596=(cj5*r20);
IkReal x2597=(cj5*r10);
IkReal x2598=((1.0)*x2592);
IkReal x2599=(sj5*x2592);
IkReal x2600=((1.0)*x2591);
IkReal x2601=(sj5*x2600);
evalcond[0]=((((-1.0)*r22*x2598))+((x2591*x2596))+(((-1.0)*r21*x2601)));
evalcond[1]=(cj0+((x2591*x2597))+(((-1.0)*r11*x2601))+(((-1.0)*r12*x2598)));
evalcond[2]=((((-1.0)*sj0))+((x2591*x2593))+(((-1.0)*r02*x2598))+(((-1.0)*r01*x2601)));
evalcond[3]=((((-1.0)*cj1*x2595))+(((-1.0)*cj2*sj1))+(((-1.0)*x2596*x2598))+(((-1.0)*r22*x2600))+((r21*x2599)));
evalcond[4]=(((r01*x2599))+(((-1.0)*x2593*x2598))+((cj0*x2594))+(((-1.0)*r02*x2600))+(((-1.0)*cj0*sj1*x2595)));
evalcond[5]=((((-1.0)*r12*x2600))+(((-1.0)*sj0*sj1*x2595))+(((-1.0)*x2597*x2598))+((r11*x2599))+((sj0*x2594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2602=cj5*cj5;
IkReal x2603=r21*r21;
IkReal x2604=(cj2*sj1);
IkReal x2605=(cj1*sj2);
IkReal x2606=((1.0)*r22);
IkReal x2607=(r21*sj5);
IkReal x2608=((1.0)*cj5*r20);
CheckValue<IkReal> x2609 = IKatan2WithCheck(IkReal(((((-1.0)*x2605*x2606))+(((-1.0)*x2604*x2606)))),IkReal((((x2605*x2607))+(((-1.0)*x2605*x2608))+((x2604*x2607))+(((-1.0)*x2604*x2608)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2609.valid){
continue;
}
CheckValue<IkReal> x2610=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x2607))+(r22*r22)+(((-1.0)*x2602*x2603))+((x2602*(r20*r20)))+x2603)),-1);
if(!x2610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2609.value)+(((1.5707963267949)*(x2610.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2611=IKsin(j4);
IkReal x2612=IKcos(j4);
IkReal x2613=(cj5*r20);
IkReal x2614=(r21*sj5);
IkReal x2615=((1.0)*x2612);
IkReal x2616=((1.0)*x2611);
evalcond[0]=((((-1.0)*r22*x2615))+((x2611*x2613))+(((-1.0)*x2614*x2616)));
evalcond[1]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x2613*x2615))+(((-1.0)*r22*x2616))+((x2612*x2614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2617=(cj5*sj4);
IkReal x2618=(sj4*sj5);
if( IKabs((((r00*x2617))+(((-1.0)*cj4*r02))+(((-1.0)*r01*x2618)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x2617))+((r11*x2618))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x2617))+(((-1.0)*cj4*r02))+(((-1.0)*r01*x2618))))+IKsqr(((((-1.0)*r10*x2617))+((r11*x2618))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x2617))+(((-1.0)*cj4*r02))+(((-1.0)*r01*x2618))), ((((-1.0)*r10*x2617))+((r11*x2618))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2619=IKcos(j0);
IkReal x2620=IKsin(j0);
IkReal x2621=(cj5*r00);
IkReal x2622=((1.0)*sj2);
IkReal x2623=((1.0)*sj5);
IkReal x2624=((0.0946)*cj5);
IkReal x2625=((1.0)*cj4);
IkReal x2626=((1.0)*cj5);
IkReal x2627=((1.0)*sj4);
IkReal x2628=((0.3922)*cj2);
IkReal x2629=((1.0)*cj2);
IkReal x2630=(cj5*r10);
IkReal x2631=((0.0946)*sj5);
IkReal x2632=((0.3922)*sj2);
IkReal x2633=(cj4*sj5);
IkReal x2634=(sj1*x2620);
IkReal x2635=(cj1*x2619);
IkReal x2636=(cj1*x2620);
IkReal x2637=(sj1*x2619);
evalcond[0]=(((sj4*x2630))+(((-1.0)*r11*sj4*x2623))+(((-1.0)*r12*x2625))+x2619);
evalcond[1]=((((-1.0)*x2620))+((sj4*x2621))+(((-1.0)*r01*sj4*x2623))+(((-1.0)*r02*x2625)));
evalcond[2]=((((-1.0)*r01*x2626))+(((-1.0)*r00*x2623))+(((-1.0)*x2629*x2637))+(((-1.0)*x2622*x2635)));
evalcond[3]=((((-1.0)*r11*x2626))+(((-1.0)*r10*x2623))+(((-1.0)*x2629*x2634))+(((-1.0)*x2622*x2636)));
evalcond[4]=(((cj2*x2635))+((r01*x2633))+(((-1.0)*x2622*x2637))+(((-1.0)*r02*x2627))+(((-1.0)*x2621*x2625)));
evalcond[5]=(((cj2*x2636))+((r11*x2633))+(((-1.0)*r12*x2627))+(((-1.0)*x2622*x2634))+(((-1.0)*x2625*x2630)));
evalcond[6]=(((r01*x2624))+(((-1.0)*x2632*x2637))+(((-1.0)*px))+((x2628*x2635))+((r00*x2631))+(((-0.1091)*x2620))+(((0.425)*x2635)));
evalcond[7]=((((0.1091)*x2619))+((r10*x2631))+(((-1.0)*x2632*x2634))+(((-1.0)*py))+((x2628*x2636))+((r11*x2624))+(((0.425)*x2636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
CheckValue<IkReal> x2639=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x2639.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2638.value)+(((1.5707963267949)*(x2639.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2640=IKcos(j0);
IkReal x2641=IKsin(j0);
IkReal x2642=((0.0946)*cj5);
IkReal x2643=((1.0)*sj5);
IkReal x2644=((1.0)*cj5);
IkReal x2645=((1.0)*cj2);
IkReal x2646=(cj1*cj2);
IkReal x2647=((0.0946)*sj5);
IkReal x2648=((0.425)*cj1);
IkReal x2649=((1.0)*cj1*sj2);
IkReal x2650=(sj1*x2640);
IkReal x2651=((0.3922)*x2641);
evalcond[0]=((((-1.0)*r00*x2643))+(((-1.0)*x2645*x2650))+(((-1.0)*r01*x2644))+(((-1.0)*x2640*x2649)));
evalcond[1]=((((-1.0)*sj1*x2641*x2645))+(((-1.0)*r11*x2644))+(((-1.0)*x2641*x2649))+(((-1.0)*r10*x2643)));
evalcond[2]=((((0.3922)*x2640*x2646))+(((-1.0)*px))+((r00*x2647))+((r01*x2642))+(((-0.3922)*sj2*x2650))+((x2640*x2648))+(((-0.1091)*x2641)));
evalcond[3]=(((r11*x2642))+(((0.1091)*x2640))+((r10*x2647))+(((-1.0)*py))+(((-1.0)*sj1*sj2*x2651))+((x2646*x2651))+((x2641*x2648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2652=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2652;
j4eval[1]=IKsign(x2652);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2653=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2653;
j4eval[1]=IKsign(x2653);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x2654=((1.0)*sj0);
IkReal x2655=((1.0)*cj0);
IkReal x2656=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2656;
j4eval[1]=IKsign(x2656);
j4eval[2]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x2654))+(((-1.0)*cj5*r00*x2655))+((cj0*r01*sj5)))))+(IKabs(((((-1.0)*r12*x2654))+(((-1.0)*r02*x2655))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2658 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2658)==0){
continue;
}
IkReal x2657=pow(x2658,-0.5);
CheckValue<IkReal> x2659 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2659.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2659.value));
IkReal gconst79=((-1.0)*r21*x2657);
IkReal gconst80=(r20*x2657);
CheckValue<IkReal> x2660 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2660.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2660.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
IkReal x2661=((-1.0)*(x2663.value));
IkReal x2662=x2657;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2661;
IkReal gconst78=x2661;
IkReal gconst79=((-1.0)*r21*x2662);
IkReal gconst80=(r20*x2662);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2666 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2666.valid){
continue;
}
IkReal x2664=((-1.0)*(x2666.value));
IkReal x2665=x2657;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2664;
IkReal gconst78=x2664;
IkReal gconst79=((-1.0)*r21*x2665);
IkReal gconst80=(r20*x2665);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x2669 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2669.valid){
continue;
}
IkReal x2667=((-1.0)*(x2669.value));
IkReal x2668=x2657;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst79;
cj5=gconst80;
j5=x2667;
IkReal gconst78=x2667;
IkReal gconst79=((-1.0)*r21*x2668);
IkReal gconst80=(r20*x2668);
IkReal x2670=r22*r22;
CheckValue<IkReal> x2673=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2670))),-1);
if(!x2673.valid){
continue;
}
IkReal x2671=x2673.value;
IkReal x2672=((((2.0)*x2671*(r20*r20)*(r21*r21)))+((x2671*(r21*r21*r21*r21)))+((x2671*(r20*r20*r20*r20)))+x2670);
j4eval[0]=x2672;
j4eval[1]=IKsign(x2672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2674=(gconst80*r20);
IkReal x2675=(gconst79*r21);
IkReal x2676=(cj2*sj1);
IkReal x2677=((1.0)*cj1*sj2);
CheckValue<IkReal> x2678 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2676))+(((-1.0)*r22*x2677)))),IkReal(((((-1.0)*x2674*x2676))+(((-1.0)*x2674*x2677))+((x2675*x2676))+((cj1*sj2*x2675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2675*x2675)+(x2674*x2674)+(((-2.0)*x2674*x2675)))),-1);
if(!x2679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2678.value)+(((1.5707963267949)*(x2679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2680=IKsin(j4);
IkReal x2681=IKcos(j4);
IkReal x2682=(cj1*cj2);
IkReal x2683=(gconst80*r20);
IkReal x2684=((1.0)*sj1);
IkReal x2685=(gconst79*r21);
IkReal x2686=(gconst80*r00);
IkReal x2687=(gconst80*r10);
IkReal x2688=(gconst79*r01);
IkReal x2689=(gconst79*r11);
IkReal x2690=((1.0)*x2681);
IkReal x2691=((1.0)*x2680);
evalcond[0]=((((-1.0)*r22*x2690))+((x2680*x2683))+(((-1.0)*x2685*x2691)));
evalcond[1]=(cj0+(((-1.0)*x2689*x2691))+(((-1.0)*r12*x2690))+((x2680*x2687)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2690))+(((-1.0)*x2688*x2691))+((x2680*x2686)));
evalcond[3]=((((-1.0)*x2683*x2690))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2684))+(((-1.0)*r22*x2691))+((x2681*x2685)));
evalcond[4]=(((cj0*x2682))+(((-1.0)*r02*x2691))+(((-1.0)*cj0*sj2*x2684))+(((-1.0)*x2686*x2690))+((x2681*x2688)));
evalcond[5]=(((sj0*x2682))+((x2681*x2689))+(((-1.0)*x2687*x2690))+(((-1.0)*r12*x2691))+(((-1.0)*sj0*sj2*x2684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2692=IKPowWithIntegerCheck(IKsign((((gconst80*r11))+((gconst79*r10)))),-1);
if(!x2692.valid){
continue;
}
CheckValue<IkReal> x2693 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst79*r21*sj0))+((gconst80*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2693.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2692.value)))+(x2693.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2694=IKsin(j4);
IkReal x2695=IKcos(j4);
IkReal x2696=(cj1*cj2);
IkReal x2697=(gconst80*r20);
IkReal x2698=((1.0)*sj1);
IkReal x2699=(gconst79*r21);
IkReal x2700=(gconst80*r00);
IkReal x2701=(gconst80*r10);
IkReal x2702=(gconst79*r01);
IkReal x2703=(gconst79*r11);
IkReal x2704=((1.0)*x2695);
IkReal x2705=((1.0)*x2694);
evalcond[0]=((((-1.0)*r22*x2704))+((x2694*x2697))+(((-1.0)*x2699*x2705)));
evalcond[1]=(((x2694*x2701))+cj0+(((-1.0)*r12*x2704))+(((-1.0)*x2703*x2705)));
evalcond[2]=((((-1.0)*x2702*x2705))+((x2694*x2700))+(((-1.0)*sj0))+(((-1.0)*r02*x2704)));
evalcond[3]=((((-1.0)*r22*x2705))+(((-1.0)*x2697*x2704))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2698))+((x2695*x2699)));
evalcond[4]=(((x2695*x2702))+((cj0*x2696))+(((-1.0)*r02*x2705))+(((-1.0)*cj0*sj2*x2698))+(((-1.0)*x2700*x2704)));
evalcond[5]=((((-1.0)*sj0*sj2*x2698))+((x2695*x2703))+(((-1.0)*r12*x2705))+((sj0*x2696))+(((-1.0)*x2701*x2704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2706=IKPowWithIntegerCheck(IKsign((((gconst79*r00))+((gconst80*r01)))),-1);
if(!x2706.valid){
continue;
}
CheckValue<IkReal> x2707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst79*r21))+((cj0*gconst80*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2706.value)))+(x2707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2708=IKsin(j4);
IkReal x2709=IKcos(j4);
IkReal x2710=(cj1*cj2);
IkReal x2711=(gconst80*r20);
IkReal x2712=((1.0)*sj1);
IkReal x2713=(gconst79*r21);
IkReal x2714=(gconst80*r00);
IkReal x2715=(gconst80*r10);
IkReal x2716=(gconst79*r01);
IkReal x2717=(gconst79*r11);
IkReal x2718=((1.0)*x2709);
IkReal x2719=((1.0)*x2708);
evalcond[0]=(((x2708*x2711))+(((-1.0)*x2713*x2719))+(((-1.0)*r22*x2718)));
evalcond[1]=(((x2708*x2715))+cj0+(((-1.0)*x2717*x2719))+(((-1.0)*r12*x2718)));
evalcond[2]=(((x2708*x2714))+(((-1.0)*sj0))+(((-1.0)*r02*x2718))+(((-1.0)*x2716*x2719)));
evalcond[3]=((((-1.0)*cj2*x2712))+((x2709*x2713))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x2719))+(((-1.0)*x2711*x2718)));
evalcond[4]=((((-1.0)*cj0*sj2*x2712))+(((-1.0)*r02*x2719))+((x2709*x2716))+((cj0*x2710))+(((-1.0)*x2714*x2718)));
evalcond[5]=((((-1.0)*sj0*sj2*x2712))+((x2709*x2717))+((sj0*x2710))+(((-1.0)*x2715*x2718))+(((-1.0)*r12*x2719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2721 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2721)==0){
continue;
}
IkReal x2720=pow(x2721,-0.5);
CheckValue<IkReal> x2722 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2722.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2722.value))));
IkReal gconst82=((1.0)*r21*x2720);
IkReal gconst83=((-1.0)*r20*x2720);
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2723.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x2726 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2726.valid){
continue;
}
IkReal x2724=((1.0)*(x2726.value));
IkReal x2725=x2720;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2724)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2724)));
IkReal gconst82=((1.0)*r21*x2725);
IkReal gconst83=((-1.0)*r20*x2725);
IkReal x2727=r22*r22;
IkReal x2728=((1.0)*x2727);
CheckValue<IkReal> x2732=IKPowWithIntegerCheck(((-1.0)+x2727),-1);
if(!x2732.valid){
continue;
}
IkReal x2729=x2732.value;
if((((1.0)+(((-1.0)*x2728)))) < -0.00001)
continue;
IkReal x2730=IKsqrt(((1.0)+(((-1.0)*x2728))));
IkReal x2731=(cj0*x2729*x2730);
j4eval[0]=((IKabs((x2731+(((-1.0)*x2728*x2731)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2735 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2735.valid){
continue;
}
IkReal x2733=((1.0)*(x2735.value));
IkReal x2734=x2720;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2733)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2733)));
IkReal gconst82=((1.0)*r21*x2734);
IkReal gconst83=((-1.0)*r20*x2734);
IkReal x2736=r22*r22;
IkReal x2737=((1.0)*x2736);
CheckValue<IkReal> x2741=IKPowWithIntegerCheck(((-1.0)+x2736),-1);
if(!x2741.valid){
continue;
}
IkReal x2738=x2741.value;
if((((1.0)+(((-1.0)*x2737)))) < -0.00001)
continue;
IkReal x2739=IKsqrt(((1.0)+(((-1.0)*x2737))));
IkReal x2740=(sj0*x2738*x2739);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x2740+(((-1.0)*x2737*x2740))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x2744 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x2744.valid){
continue;
}
IkReal x2742=((1.0)*(x2744.value));
IkReal x2743=x2720;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2742)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2742)));
IkReal gconst82=((1.0)*r21*x2743);
IkReal gconst83=((-1.0)*r20*x2743);
IkReal x2745=r22*r22;
IkReal x2746=(r12*sj0);
IkReal x2747=(cj0*r02);
CheckValue<IkReal> x2751=IKPowWithIntegerCheck(((-1.0)+x2745),-1);
if(!x2751.valid){
continue;
}
IkReal x2748=x2751.value;
if((((1.0)+(((-1.0)*x2745)))) < -0.00001)
continue;
IkReal x2749=IKsqrt(((1.0)+(((-1.0)*x2745))));
IkReal x2750=(r22*x2748*x2749);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x2747))+(((-1.0)*x2746)))))+(IKabs((((x2746*x2750))+((x2747*x2750))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2752=((1.0)*sj0);
IkReal x2753=((1.0)*cj0);
CheckValue<IkReal> x2754 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2752))+(((-1.0)*r02*x2753)))),IkReal(((((-1.0)*gconst83*r00*x2753))+(((-1.0)*gconst83*r10*x2752))+((gconst82*r11*sj0))+((cj0*gconst82*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2754.valid){
continue;
}
CheckValue<IkReal> x2755=IKPowWithIntegerCheck(IKsign((((gconst83*r21))+((gconst82*r20)))),-1);
if(!x2755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2754.value)+(((1.5707963267949)*(x2755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2756=IKsin(j4);
IkReal x2757=IKcos(j4);
IkReal x2758=(cj1*cj2);
IkReal x2759=(gconst82*r01);
IkReal x2760=((1.0)*sj1);
IkReal x2761=(gconst82*r21);
IkReal x2762=(gconst82*r11);
IkReal x2763=((1.0)*x2757);
IkReal x2764=(gconst83*x2756);
IkReal x2765=((1.0)*x2756);
evalcond[0]=((((-1.0)*x2761*x2765))+((r20*x2764))+(((-1.0)*r22*x2763)));
evalcond[1]=(cj0+(((-1.0)*r12*x2763))+(((-1.0)*x2762*x2765))+((r10*x2764)));
evalcond[2]=((((-1.0)*sj0))+((r00*x2764))+(((-1.0)*x2759*x2765))+(((-1.0)*r02*x2763)));
evalcond[3]=(((x2757*x2761))+(((-1.0)*cj2*x2760))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2763))+(((-1.0)*r22*x2765)));
evalcond[4]=((((-1.0)*cj0*sj2*x2760))+((cj0*x2758))+(((-1.0)*gconst83*r00*x2763))+((x2757*x2759))+(((-1.0)*r02*x2765)));
evalcond[5]=((((-1.0)*gconst83*r10*x2763))+(((-1.0)*r12*x2765))+((x2757*x2762))+(((-1.0)*sj0*sj2*x2760))+((sj0*x2758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2766 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst82*r21*sj0))+((gconst83*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2766.valid){
continue;
}
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(IKsign((((gconst83*r11))+((gconst82*r10)))),-1);
if(!x2767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2766.value)+(((1.5707963267949)*(x2767.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2768=IKsin(j4);
IkReal x2769=IKcos(j4);
IkReal x2770=(cj1*cj2);
IkReal x2771=(gconst82*r01);
IkReal x2772=((1.0)*sj1);
IkReal x2773=(gconst82*r21);
IkReal x2774=(gconst82*r11);
IkReal x2775=((1.0)*x2769);
IkReal x2776=(gconst83*x2768);
IkReal x2777=((1.0)*x2768);
evalcond[0]=((((-1.0)*x2773*x2777))+((r20*x2776))+(((-1.0)*r22*x2775)));
evalcond[1]=(cj0+(((-1.0)*r12*x2775))+((r10*x2776))+(((-1.0)*x2774*x2777)));
evalcond[2]=((((-1.0)*sj0))+((r00*x2776))+(((-1.0)*r02*x2775))+(((-1.0)*x2771*x2777)));
evalcond[3]=((((-1.0)*gconst83*r20*x2775))+((x2769*x2773))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x2772))+(((-1.0)*r22*x2777)));
evalcond[4]=(((x2769*x2771))+(((-1.0)*gconst83*r00*x2775))+(((-1.0)*r02*x2777))+((cj0*x2770))+(((-1.0)*cj0*sj2*x2772)));
evalcond[5]=(((x2769*x2774))+(((-1.0)*gconst83*r10*x2775))+(((-1.0)*r12*x2777))+(((-1.0)*sj0*sj2*x2772))+((sj0*x2770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2778 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst83*r20))+(((-1.0)*cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2778.valid){
continue;
}
CheckValue<IkReal> x2779=IKPowWithIntegerCheck(IKsign((((gconst83*r01))+((gconst82*r00)))),-1);
if(!x2779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2778.value)+(((1.5707963267949)*(x2779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2780=IKsin(j4);
IkReal x2781=IKcos(j4);
IkReal x2782=(cj1*cj2);
IkReal x2783=(gconst82*r01);
IkReal x2784=((1.0)*sj1);
IkReal x2785=(gconst82*r21);
IkReal x2786=(gconst82*r11);
IkReal x2787=((1.0)*x2781);
IkReal x2788=(gconst83*x2780);
IkReal x2789=((1.0)*x2780);
evalcond[0]=((((-1.0)*x2785*x2789))+(((-1.0)*r22*x2787))+((r20*x2788)));
evalcond[1]=((((-1.0)*r12*x2787))+cj0+(((-1.0)*x2786*x2789))+((r10*x2788)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x2783*x2789))+((r00*x2788))+(((-1.0)*r02*x2787)));
evalcond[3]=((((-1.0)*cj2*x2784))+((x2781*x2785))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst83*r20*x2787))+(((-1.0)*r22*x2789)));
evalcond[4]=(((x2781*x2783))+(((-1.0)*cj0*sj2*x2784))+(((-1.0)*gconst83*r00*x2787))+((cj0*x2782))+(((-1.0)*r02*x2789)));
evalcond[5]=((((-1.0)*r12*x2789))+(((-1.0)*sj0*sj2*x2784))+((x2781*x2786))+((sj0*x2782))+(((-1.0)*gconst83*r10*x2787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2791 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2791)==0){
continue;
}
IkReal x2790=pow(x2791,-0.5);
CheckValue<IkReal> x2792 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2792.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2792.value));
IkReal gconst85=((-1.0)*r11*x2790);
IkReal gconst86=(r10*x2790);
CheckValue<IkReal> x2793 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2793.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2793.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2796 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2796.valid){
continue;
}
IkReal x2794=((-1.0)*(x2796.value));
IkReal x2795=x2790;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst85;
cj5=gconst86;
j5=x2794;
IkReal gconst84=x2794;
IkReal gconst85=((-1.0)*r11*x2795);
IkReal gconst86=(r10*x2795);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2797=((1.0)*sj0);
IkReal x2798=((1.0)*cj0);
CheckValue<IkReal> x2799 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2797))+(((-1.0)*r02*x2798)))),IkReal(((((-1.0)*gconst86*r00*x2798))+(((-1.0)*gconst86*r10*x2797))+((gconst85*r11*sj0))+((cj0*gconst85*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2799.valid){
continue;
}
CheckValue<IkReal> x2800=IKPowWithIntegerCheck(IKsign((((gconst86*r21))+((gconst85*r20)))),-1);
if(!x2800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2799.value)+(((1.5707963267949)*(x2800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2801=IKsin(j4);
IkReal x2802=IKcos(j4);
IkReal x2803=(cj1*cj2);
IkReal x2804=((1.0)*sj1);
IkReal x2805=((1.0)*x2802);
IkReal x2806=(gconst86*x2801);
IkReal x2807=(gconst85*x2802);
IkReal x2808=((1.0)*x2801);
IkReal x2809=(gconst85*x2808);
evalcond[0]=(((r20*x2806))+(((-1.0)*r21*x2809))+(((-1.0)*r22*x2805)));
evalcond[1]=(((r10*x2806))+cj0+(((-1.0)*r11*x2809))+(((-1.0)*r12*x2805)));
evalcond[2]=((((-1.0)*r01*x2809))+(((-1.0)*sj0))+(((-1.0)*r02*x2805))+((r00*x2806)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x2808))+(((-1.0)*gconst86*r20*x2805))+((r21*x2807))+(((-1.0)*cj2*x2804)));
evalcond[4]=((((-1.0)*gconst86*r00*x2805))+(((-1.0)*cj0*sj2*x2804))+((cj0*x2803))+(((-1.0)*r02*x2808))+((r01*x2807)));
evalcond[5]=((((-1.0)*gconst86*r10*x2805))+(((-1.0)*r12*x2808))+(((-1.0)*sj0*sj2*x2804))+((r11*x2807))+((sj0*x2803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2810=IKPowWithIntegerCheck(IKsign((((gconst85*r00))+((gconst86*r01)))),-1);
if(!x2810.valid){
continue;
}
CheckValue<IkReal> x2811 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst86*r20))+(((-1.0)*cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2810.value)))+(x2811.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2812=IKsin(j4);
IkReal x2813=IKcos(j4);
IkReal x2814=(cj1*cj2);
IkReal x2815=((1.0)*sj1);
IkReal x2816=((1.0)*x2813);
IkReal x2817=(gconst86*x2812);
IkReal x2818=(gconst85*x2813);
IkReal x2819=((1.0)*x2812);
IkReal x2820=(gconst85*x2819);
evalcond[0]=((((-1.0)*r21*x2820))+(((-1.0)*r22*x2816))+((r20*x2817)));
evalcond[1]=((((-1.0)*r12*x2816))+cj0+((r10*x2817))+(((-1.0)*r11*x2820)));
evalcond[2]=(((r00*x2817))+(((-1.0)*r02*x2816))+(((-1.0)*sj0))+(((-1.0)*r01*x2820)));
evalcond[3]=((((-1.0)*gconst86*r20*x2816))+(((-1.0)*cj1*sj2))+((r21*x2818))+(((-1.0)*r22*x2819))+(((-1.0)*cj2*x2815)));
evalcond[4]=((((-1.0)*cj0*sj2*x2815))+((r01*x2818))+(((-1.0)*r02*x2819))+(((-1.0)*gconst86*r00*x2816))+((cj0*x2814)));
evalcond[5]=((((-1.0)*r12*x2819))+(((-1.0)*gconst86*r10*x2816))+((sj0*x2814))+((r11*x2818))+(((-1.0)*sj0*sj2*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2822 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2822)==0){
continue;
}
IkReal x2821=pow(x2822,-0.5);
CheckValue<IkReal> x2823 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2823.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2823.value))));
IkReal gconst88=((1.0)*r11*x2821);
IkReal gconst89=((-1.0)*r10*x2821);
CheckValue<IkReal> x2824 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2827 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2827.valid){
continue;
}
IkReal x2825=((1.0)*(x2827.value));
IkReal x2826=x2821;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2825)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2825)));
IkReal gconst88=((1.0)*r11*x2826);
IkReal gconst89=((-1.0)*r10*x2826);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2830 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2830.valid){
continue;
}
IkReal x2828=((1.0)*(x2830.value));
IkReal x2829=x2821;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2828)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2828)));
IkReal gconst88=((1.0)*r11*x2829);
IkReal gconst89=((-1.0)*r10*x2829);
IkReal x2831=r12*r12;
IkReal x2832=((1.0)*sj0);
IkReal x2833=(cj0*r02);
IkReal x2834=x2821;
j4eval[0]=((IKabs((((sj0*x2831*x2834))+((r12*x2833*x2834))+(((-1.0)*x2832*x2834)))))+(IKabs(((((-1.0)*x2833))+(((-1.0)*r12*x2832))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x2837 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x2837.valid){
continue;
}
IkReal x2835=((1.0)*(x2837.value));
IkReal x2836=x2821;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2835)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2835)));
IkReal gconst88=((1.0)*r11*x2836);
IkReal gconst89=((-1.0)*r10*x2836);
IkReal x2838=((1.0)*r22);
IkReal x2839=(cj1*sj2);
IkReal x2840=(cj2*sj1);
IkReal x2841=x2821;
IkReal x2842=(r12*r22*x2841);
j4eval[0]=((IKabs(((((-1.0)*x2838*x2839))+(((-1.0)*x2838*x2840)))))+(IKabs((((x2840*x2842))+((x2839*x2842))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2843=(gconst89*r20);
IkReal x2844=(gconst88*r21);
IkReal x2845=(cj2*sj1);
IkReal x2846=((1.0)*cj1*sj2);
CheckValue<IkReal> x2847=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2843*x2844))+(r22*r22)+(x2844*x2844)+(x2843*x2843))),-1);
if(!x2847.valid){
continue;
}
CheckValue<IkReal> x2848 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2845))+(((-1.0)*r22*x2846)))),IkReal((((cj1*sj2*x2844))+(((-1.0)*x2843*x2846))+((x2844*x2845))+(((-1.0)*x2843*x2845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2848.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2847.value)))+(x2848.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2849=IKsin(j4);
IkReal x2850=IKcos(j4);
IkReal x2851=(cj1*cj2);
IkReal x2852=(gconst89*r10);
IkReal x2853=((1.0)*sj2);
IkReal x2854=((1.0)*x2850);
IkReal x2855=(gconst88*x2850);
IkReal x2856=(gconst89*x2849);
IkReal x2857=((1.0)*x2849);
evalcond[0]=(((r20*x2856))+(((-1.0)*gconst88*r21*x2857))+(((-1.0)*r22*x2854)));
evalcond[1]=(cj0+((x2849*x2852))+(((-1.0)*r12*x2854))+(((-1.0)*gconst88*r11*x2857)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2854))+(((-1.0)*gconst88*r01*x2857))+((r00*x2856)));
evalcond[3]=(((r21*x2855))+(((-1.0)*cj1*x2853))+(((-1.0)*cj2*sj1))+(((-1.0)*gconst89*r20*x2854))+(((-1.0)*r22*x2857)));
evalcond[4]=((((-1.0)*r02*x2857))+((cj0*x2851))+(((-1.0)*cj0*sj1*x2853))+((r01*x2855))+(((-1.0)*gconst89*r00*x2854)));
evalcond[5]=(((sj0*x2851))+((r11*x2855))+(((-1.0)*r12*x2857))+(((-1.0)*sj0*sj1*x2853))+(((-1.0)*x2852*x2854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2858=((1.0)*sj0);
IkReal x2859=((1.0)*cj0);
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2858))+(((-1.0)*r02*x2859)))),IkReal(((((-1.0)*gconst89*r10*x2858))+((cj0*gconst88*r01))+((gconst88*r11*sj0))+(((-1.0)*gconst89*r00*x2859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(IKsign((((gconst89*r21))+((gconst88*r20)))),-1);
if(!x2861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2860.value)+(((1.5707963267949)*(x2861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2862=IKsin(j4);
IkReal x2863=IKcos(j4);
IkReal x2864=(cj1*cj2);
IkReal x2865=(gconst89*r10);
IkReal x2866=((1.0)*sj2);
IkReal x2867=((1.0)*x2863);
IkReal x2868=(gconst88*x2863);
IkReal x2869=(gconst89*x2862);
IkReal x2870=((1.0)*x2862);
evalcond[0]=((((-1.0)*gconst88*r21*x2870))+(((-1.0)*r22*x2867))+((r20*x2869)));
evalcond[1]=((((-1.0)*r12*x2867))+cj0+((x2862*x2865))+(((-1.0)*gconst88*r11*x2870)));
evalcond[2]=((((-1.0)*r02*x2867))+((r00*x2869))+(((-1.0)*sj0))+(((-1.0)*gconst88*r01*x2870)));
evalcond[3]=((((-1.0)*gconst89*r20*x2867))+(((-1.0)*cj1*x2866))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x2870))+((r21*x2868)));
evalcond[4]=((((-1.0)*r02*x2870))+(((-1.0)*gconst89*r00*x2867))+(((-1.0)*cj0*sj1*x2866))+((cj0*x2864))+((r01*x2868)));
evalcond[5]=((((-1.0)*sj0*sj1*x2866))+(((-1.0)*x2865*x2867))+((sj0*x2864))+((r11*x2868))+(((-1.0)*r12*x2870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(IKsign((((gconst88*r00))+((gconst89*r01)))),-1);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst89*r20))+(((-1.0)*cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2871.value)))+(x2872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2873=IKsin(j4);
IkReal x2874=IKcos(j4);
IkReal x2875=(cj1*cj2);
IkReal x2876=(gconst89*r10);
IkReal x2877=((1.0)*sj2);
IkReal x2878=((1.0)*x2874);
IkReal x2879=(gconst88*x2874);
IkReal x2880=(gconst89*x2873);
IkReal x2881=((1.0)*x2873);
evalcond[0]=(((r20*x2880))+(((-1.0)*gconst88*r21*x2881))+(((-1.0)*r22*x2878)));
evalcond[1]=(cj0+((x2873*x2876))+(((-1.0)*r12*x2878))+(((-1.0)*gconst88*r11*x2881)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2878))+(((-1.0)*gconst88*r01*x2881))+((r00*x2880)));
evalcond[3]=((((-1.0)*gconst89*r20*x2878))+(((-1.0)*r22*x2881))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2877))+((r21*x2879)));
evalcond[4]=(((cj0*x2875))+((r01*x2879))+(((-1.0)*cj0*sj1*x2877))+(((-1.0)*r02*x2881))+(((-1.0)*gconst89*r00*x2878)));
evalcond[5]=((((-1.0)*sj0*sj1*x2877))+(((-1.0)*x2876*x2878))+((r11*x2879))+((sj0*x2875))+(((-1.0)*r12*x2881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2882=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2882;
j4eval[1]=IKsign(x2882);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2883=((1.0)*sj5);
IkReal x2884=((((-1.0)*cj5*r21))+(((-1.0)*r20*x2883)));
j4eval[0]=x2884;
j4eval[1]=((IKabs(((((-1.0)*r01*x2883))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x2884);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2885=cj5*cj5;
IkReal x2886=r11*r11;
IkReal x2887=(r11*sj5);
IkReal x2888=(cj5*r10);
IkReal x2889=((((-2.0)*x2887*x2888))+(r12*r12)+((x2885*(r10*r10)))+(((-1.0)*x2885*x2886))+x2886);
j4eval[0]=x2889;
j4eval[1]=IKsign(x2889);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2888))+x2887))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2890=cj5*cj5;
IkReal x2891=r11*r11;
IkReal x2892=(cj5*r10);
IkReal x2893=(r11*sj5);
CheckValue<IkReal> x2894=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x2892*x2893))+(((-1.0)*x2890*x2891))+((x2890*(r10*r10)))+x2891)),-1);
if(!x2894.valid){
continue;
}
CheckValue<IkReal> x2895 = IKatan2WithCheck(IkReal(((((-1.0)*x2892))+x2893)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2895.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2894.value)))+(x2895.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2896=IKsin(j4);
IkReal x2897=IKcos(j4);
IkReal x2898=(cj5*r00);
IkReal x2899=((1.0)*sj2);
IkReal x2900=((1.0)*x2897);
IkReal x2901=(sj5*x2897);
IkReal x2902=(cj5*x2896);
IkReal x2903=((1.0)*x2896);
IkReal x2904=(sj5*x2903);
evalcond[0]=((((-1.0)*r21*x2904))+((r20*x2902))+(((-1.0)*r22*x2900)));
evalcond[1]=((((-1.0)*r02*x2900))+(((-1.0)*r01*x2904))+((x2896*x2898)));
evalcond[2]=((((-1.0)*r12*x2903))+((r11*x2901))+(((-1.0)*cj5*r10*x2900)));
evalcond[3]=((1.0)+((r10*x2902))+(((-1.0)*r12*x2900))+(((-1.0)*r11*x2904)));
evalcond[4]=((((-1.0)*r02*x2903))+(((-1.0)*x2898*x2900))+((r01*x2901))+(((-1.0)*sj1*x2899))+((cj1*cj2)));
evalcond[5]=(((r21*x2901))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2900))+(((-1.0)*cj1*x2899))+(((-1.0)*r22*x2903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2905=((1.0)*sj5);
CheckValue<IkReal> x2906 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x2905))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2906.valid){
continue;
}
CheckValue<IkReal> x2907=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x2905)))),-1);
if(!x2907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2906.value)+(((1.5707963267949)*(x2907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2908=IKsin(j4);
IkReal x2909=IKcos(j4);
IkReal x2910=(cj5*r00);
IkReal x2911=((1.0)*sj2);
IkReal x2912=((1.0)*x2909);
IkReal x2913=(sj5*x2909);
IkReal x2914=(cj5*x2908);
IkReal x2915=((1.0)*x2908);
IkReal x2916=(sj5*x2915);
evalcond[0]=(((r20*x2914))+(((-1.0)*r21*x2916))+(((-1.0)*r22*x2912)));
evalcond[1]=((((-1.0)*r02*x2912))+((x2908*x2910))+(((-1.0)*r01*x2916)));
evalcond[2]=(((r11*x2913))+(((-1.0)*cj5*r10*x2912))+(((-1.0)*r12*x2915)));
evalcond[3]=((1.0)+(((-1.0)*r11*x2916))+(((-1.0)*r12*x2912))+((r10*x2914)));
evalcond[4]=(((r01*x2913))+(((-1.0)*sj1*x2911))+(((-1.0)*x2910*x2912))+((cj1*cj2))+(((-1.0)*r02*x2915)));
evalcond[5]=((((-1.0)*cj5*r20*x2912))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x2911))+((r21*x2913))+(((-1.0)*r22*x2915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2917=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2917.valid){
continue;
}
CheckValue<IkReal> x2918 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2917.value)))+(x2918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2919=IKsin(j4);
IkReal x2920=IKcos(j4);
IkReal x2921=(cj5*r00);
IkReal x2922=((1.0)*sj2);
IkReal x2923=((1.0)*x2920);
IkReal x2924=(sj5*x2920);
IkReal x2925=(cj5*x2919);
IkReal x2926=((1.0)*x2919);
IkReal x2927=(sj5*x2926);
evalcond[0]=((((-1.0)*r21*x2927))+((r20*x2925))+(((-1.0)*r22*x2923)));
evalcond[1]=((((-1.0)*r02*x2923))+((x2919*x2921))+(((-1.0)*r01*x2927)));
evalcond[2]=((((-1.0)*r12*x2926))+((r11*x2924))+(((-1.0)*cj5*r10*x2923)));
evalcond[3]=((1.0)+((r10*x2925))+(((-1.0)*r12*x2923))+(((-1.0)*r11*x2927)));
evalcond[4]=((((-1.0)*r02*x2926))+(((-1.0)*x2921*x2923))+((r01*x2924))+(((-1.0)*sj1*x2922))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x2924))+(((-1.0)*cj5*r20*x2923))+(((-1.0)*cj1*x2922))+(((-1.0)*r22*x2926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2928=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2928;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x2928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2929=((1.0)*sj5);
IkReal x2930=((((-1.0)*r00*x2929))+(((-1.0)*cj5*r01)));
j4eval[0]=x2930;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x2929))))));
j4eval[2]=IKsign(x2930);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2931=cj5*cj5;
IkReal x2932=r11*r11;
IkReal x2933=(cj5*r10);
IkReal x2934=(r11*sj5);
IkReal x2935=((((-1.0)*x2931*(r10*r10)))+(((2.0)*x2933*x2934))+(((-1.0)*(r12*r12)))+(((-1.0)*x2932))+((x2931*x2932)));
j4eval[0]=x2935;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2933))+x2934))));
j4eval[2]=IKsign(x2935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2936=cj5*cj5;
IkReal x2937=r11*r11;
IkReal x2938=(cj5*r10);
IkReal x2939=(r11*sj5);
CheckValue<IkReal> x2940 = IKatan2WithCheck(IkReal(((((-1.0)*x2938))+x2939)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2940.valid){
continue;
}
CheckValue<IkReal> x2941=IKPowWithIntegerCheck(IKsign((((x2936*x2937))+(((-1.0)*x2936*(r10*r10)))+(((-1.0)*(r12*r12)))+(((2.0)*x2938*x2939))+(((-1.0)*x2937)))),-1);
if(!x2941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2940.value)+(((1.5707963267949)*(x2941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2942=IKsin(j4);
IkReal x2943=IKcos(j4);
IkReal x2944=(cj5*r00);
IkReal x2945=((1.0)*cj1);
IkReal x2946=((1.0)*x2943);
IkReal x2947=(sj5*x2943);
IkReal x2948=(cj5*x2942);
IkReal x2949=((1.0)*x2942);
IkReal x2950=(sj5*x2949);
evalcond[0]=((((-1.0)*r21*x2950))+(((-1.0)*r22*x2946))+((r20*x2948)));
evalcond[1]=((((-1.0)*r02*x2946))+(((-1.0)*r01*x2950))+((x2942*x2944)));
evalcond[2]=((((-1.0)*r12*x2949))+((r11*x2947))+(((-1.0)*cj5*r10*x2946)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2946))+((r10*x2948))+(((-1.0)*r11*x2950)));
evalcond[4]=((((-1.0)*r02*x2949))+((sj1*sj2))+((r01*x2947))+(((-1.0)*cj2*x2945))+(((-1.0)*x2944*x2946)));
evalcond[5]=(((r21*x2947))+(((-1.0)*cj2*sj1))+(((-1.0)*cj5*r20*x2946))+(((-1.0)*sj2*x2945))+(((-1.0)*r22*x2949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2951=((1.0)*sj5);
CheckValue<IkReal> x2952=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2951))+(((-1.0)*cj5*r01)))),-1);
if(!x2952.valid){
continue;
}
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x2951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2952.value)))+(x2953.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2954=IKsin(j4);
IkReal x2955=IKcos(j4);
IkReal x2956=(cj5*r00);
IkReal x2957=((1.0)*cj1);
IkReal x2958=((1.0)*x2955);
IkReal x2959=(sj5*x2955);
IkReal x2960=(cj5*x2954);
IkReal x2961=((1.0)*x2954);
IkReal x2962=(sj5*x2961);
evalcond[0]=((((-1.0)*r21*x2962))+(((-1.0)*r22*x2958))+((r20*x2960)));
evalcond[1]=(((x2954*x2956))+(((-1.0)*r02*x2958))+(((-1.0)*r01*x2962)));
evalcond[2]=(((r11*x2959))+(((-1.0)*cj5*r10*x2958))+(((-1.0)*r12*x2961)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x2962))+((r10*x2960))+(((-1.0)*r12*x2958)));
evalcond[4]=(((sj1*sj2))+((r01*x2959))+(((-1.0)*r02*x2961))+(((-1.0)*x2956*x2958))+(((-1.0)*cj2*x2957)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r21*x2959))+(((-1.0)*cj5*r20*x2958))+(((-1.0)*sj2*x2957))+(((-1.0)*r22*x2961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2963=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2963.valid){
continue;
}
CheckValue<IkReal> x2964 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2964.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2963.value)))+(x2964.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2965=IKsin(j4);
IkReal x2966=IKcos(j4);
IkReal x2967=(cj5*r00);
IkReal x2968=((1.0)*cj1);
IkReal x2969=((1.0)*x2966);
IkReal x2970=(sj5*x2966);
IkReal x2971=(cj5*x2965);
IkReal x2972=((1.0)*x2965);
IkReal x2973=(sj5*x2972);
evalcond[0]=((((-1.0)*r21*x2973))+(((-1.0)*r22*x2969))+((r20*x2971)));
evalcond[1]=(((x2965*x2967))+(((-1.0)*r01*x2973))+(((-1.0)*r02*x2969)));
evalcond[2]=((((-1.0)*r12*x2972))+((r11*x2970))+(((-1.0)*cj5*r10*x2969)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x2973))+((r10*x2971))+(((-1.0)*r12*x2969)));
evalcond[4]=((((-1.0)*r02*x2972))+((sj1*sj2))+((r01*x2970))+(((-1.0)*x2967*x2969))+(((-1.0)*cj2*x2968)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x2968))+(((-1.0)*cj5*r20*x2969))+(((-1.0)*r22*x2972))+((r21*x2970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2975 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2975)==0){
continue;
}
IkReal x2974=pow(x2975,-0.5);
CheckValue<IkReal> x2976 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2976.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2976.value));
IkReal gconst91=((-1.0)*r01*x2974);
IkReal gconst92=(r00*x2974);
CheckValue<IkReal> x2977 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2977.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2977.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x2980 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x2980.valid){
continue;
}
IkReal x2978=((-1.0)*(x2980.value));
IkReal x2979=x2974;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst91;
cj5=gconst92;
j5=x2978;
IkReal gconst90=x2978;
IkReal gconst91=((-1.0)*r01*x2979);
IkReal gconst92=(r00*x2979);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2981=((1.0)*sj0);
IkReal x2982=((1.0)*cj0);
CheckValue<IkReal> x2983=IKPowWithIntegerCheck(IKsign((((gconst91*r20))+((gconst92*r21)))),-1);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2981))+(((-1.0)*r02*x2982)))),IkReal(((((-1.0)*gconst92*r00*x2982))+((gconst91*r11*sj0))+((cj0*gconst91*r01))+(((-1.0)*gconst92*r10*x2981)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2983.value)))+(x2984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2985=IKsin(j4);
IkReal x2986=IKcos(j4);
IkReal x2987=(cj1*cj2);
IkReal x2988=(gconst92*r00);
IkReal x2989=((1.0)*sj1);
IkReal x2990=((1.0)*x2986);
IkReal x2991=(gconst91*x2986);
IkReal x2992=((1.0)*x2985);
IkReal x2993=(gconst92*x2985);
IkReal x2994=(gconst91*x2992);
evalcond[0]=((((-1.0)*r22*x2990))+((r20*x2993))+(((-1.0)*r21*x2994)));
evalcond[1]=(cj0+(((-1.0)*r12*x2990))+(((-1.0)*r11*x2994))+((r10*x2993)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x2990))+((x2985*x2988))+(((-1.0)*r01*x2994)));
evalcond[3]=((((-1.0)*r22*x2992))+(((-1.0)*cj2*x2989))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst92*r20*x2990))+((r21*x2991)));
evalcond[4]=(((cj0*x2987))+(((-1.0)*cj0*sj2*x2989))+((r01*x2991))+(((-1.0)*x2988*x2990))+(((-1.0)*r02*x2992)));
evalcond[5]=((((-1.0)*r12*x2992))+(((-1.0)*sj0*sj2*x2989))+((sj0*x2987))+(((-1.0)*gconst92*r10*x2990))+((r11*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2995 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst91*r21*sj0))+((gconst92*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2995.valid){
continue;
}
CheckValue<IkReal> x2996=IKPowWithIntegerCheck(IKsign((((gconst91*r10))+((gconst92*r11)))),-1);
if(!x2996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2995.value)+(((1.5707963267949)*(x2996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2997=IKsin(j4);
IkReal x2998=IKcos(j4);
IkReal x2999=(cj1*cj2);
IkReal x3000=(gconst92*r00);
IkReal x3001=((1.0)*sj1);
IkReal x3002=((1.0)*x2998);
IkReal x3003=(gconst91*x2998);
IkReal x3004=((1.0)*x2997);
IkReal x3005=(gconst92*x2997);
IkReal x3006=(gconst91*x3004);
evalcond[0]=((((-1.0)*r22*x3002))+((r20*x3005))+(((-1.0)*r21*x3006)));
evalcond[1]=(cj0+((r10*x3005))+(((-1.0)*r11*x3006))+(((-1.0)*r12*x3002)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3002))+(((-1.0)*r01*x3006))+((x2997*x3000)));
evalcond[3]=((((-1.0)*r22*x3004))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3001))+((r21*x3003))+(((-1.0)*gconst92*r20*x3002)));
evalcond[4]=(((r01*x3003))+((cj0*x2999))+(((-1.0)*r02*x3004))+(((-1.0)*x3000*x3002))+(((-1.0)*cj0*sj2*x3001)));
evalcond[5]=((((-1.0)*gconst92*r10*x3002))+(((-1.0)*sj0*sj2*x3001))+((sj0*x2999))+(((-1.0)*r12*x3004))+((r11*x3003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3008 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3008)==0){
continue;
}
IkReal x3007=pow(x3008,-0.5);
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x3009.value))));
IkReal gconst94=((1.0)*r01*x3007);
IkReal gconst95=((-1.0)*r00*x3007);
CheckValue<IkReal> x3010 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3010.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3010.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x3013 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3013.valid){
continue;
}
IkReal x3011=((1.0)*(x3013.value));
IkReal x3012=x3007;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3011)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3011)));
IkReal gconst94=((1.0)*r01*x3012);
IkReal gconst95=((-1.0)*r00*x3012);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3016 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3016.valid){
continue;
}
IkReal x3014=((1.0)*(x3016.value));
IkReal x3015=x3007;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3014)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3014)));
IkReal gconst94=((1.0)*r01*x3015);
IkReal gconst95=((-1.0)*r00*x3015);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3019 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x3019.valid){
continue;
}
IkReal x3017=((1.0)*(x3019.value));
IkReal x3018=x3007;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x3017)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x3017)));
IkReal gconst94=((1.0)*r01*x3018);
IkReal gconst95=((-1.0)*r00*x3018);
IkReal x3020=r02*r02;
IkReal x3021=(r12*sj0);
IkReal x3022=((1.0)*cj0);
IkReal x3023=x3007;
j4eval[0]=((IKabs(((((-1.0)*x3021))+(((-1.0)*r02*x3022)))))+(IKabs((((cj0*x3020*x3023))+((r02*x3021*x3023))+(((-1.0)*x3022*x3023))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3024=((1.0)*sj0);
IkReal x3025=((1.0)*cj0);
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(IKsign((((gconst95*r21))+((gconst94*r20)))),-1);
if(!x3026.valid){
continue;
}
CheckValue<IkReal> x3027 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3024))+(((-1.0)*r02*x3025)))),IkReal(((((-1.0)*gconst95*r00*x3025))+((gconst94*r11*sj0))+((cj0*gconst94*r01))+(((-1.0)*gconst95*r10*x3024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3027.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3026.value)))+(x3027.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3028=IKsin(j4);
IkReal x3029=IKcos(j4);
IkReal x3030=(cj1*cj2);
IkReal x3031=(gconst95*r10);
IkReal x3032=((1.0)*sj1);
IkReal x3033=((1.0)*x3029);
IkReal x3034=(gconst95*x3028);
IkReal x3035=(gconst94*x3029);
IkReal x3036=((1.0)*x3028);
IkReal x3037=(gconst94*x3036);
evalcond[0]=((((-1.0)*r21*x3037))+(((-1.0)*r22*x3033))+((r20*x3034)));
evalcond[1]=(((x3028*x3031))+cj0+(((-1.0)*r11*x3037))+(((-1.0)*r12*x3033)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x3037))+((r00*x3034))+(((-1.0)*r02*x3033)));
evalcond[3]=((((-1.0)*cj2*x3032))+(((-1.0)*cj1*sj2))+((r21*x3035))+(((-1.0)*r22*x3036))+(((-1.0)*gconst95*r20*x3033)));
evalcond[4]=(((cj0*x3030))+((r01*x3035))+(((-1.0)*r02*x3036))+(((-1.0)*gconst95*r00*x3033))+(((-1.0)*cj0*sj2*x3032)));
evalcond[5]=(((r11*x3035))+((sj0*x3030))+(((-1.0)*sj0*sj2*x3032))+(((-1.0)*r12*x3036))+(((-1.0)*x3031*x3033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3038=IKPowWithIntegerCheck(IKsign((((gconst95*r11))+((gconst94*r10)))),-1);
if(!x3038.valid){
continue;
}
CheckValue<IkReal> x3039 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst95*r20*sj0))+(((-1.0)*gconst94*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3038.value)))+(x3039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3040=IKsin(j4);
IkReal x3041=IKcos(j4);
IkReal x3042=(cj1*cj2);
IkReal x3043=(gconst95*r10);
IkReal x3044=((1.0)*sj1);
IkReal x3045=((1.0)*x3041);
IkReal x3046=(gconst95*x3040);
IkReal x3047=(gconst94*x3041);
IkReal x3048=((1.0)*x3040);
IkReal x3049=(gconst94*x3048);
evalcond[0]=((((-1.0)*r22*x3045))+(((-1.0)*r21*x3049))+((r20*x3046)));
evalcond[1]=(cj0+(((-1.0)*r12*x3045))+(((-1.0)*r11*x3049))+((x3040*x3043)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x3049))+((r00*x3046))+(((-1.0)*r02*x3045)));
evalcond[3]=(((r21*x3047))+(((-1.0)*r22*x3048))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst95*r20*x3045))+(((-1.0)*cj2*x3044)));
evalcond[4]=((((-1.0)*cj0*sj2*x3044))+(((-1.0)*gconst95*r00*x3045))+(((-1.0)*r02*x3048))+((cj0*x3042))+((r01*x3047)));
evalcond[5]=((((-1.0)*r12*x3048))+(((-1.0)*sj0*sj2*x3044))+((sj0*x3042))+(((-1.0)*x3043*x3045))+((r11*x3047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3050=IKPowWithIntegerCheck(IKsign((((gconst95*r01))+((gconst94*r00)))),-1);
if(!x3050.valid){
continue;
}
CheckValue<IkReal> x3051 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst94*r21))+((cj0*gconst95*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3050.value)))+(x3051.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3052=IKsin(j4);
IkReal x3053=IKcos(j4);
IkReal x3054=(cj1*cj2);
IkReal x3055=(gconst95*r10);
IkReal x3056=((1.0)*sj1);
IkReal x3057=((1.0)*x3053);
IkReal x3058=(gconst95*x3052);
IkReal x3059=(gconst94*x3053);
IkReal x3060=((1.0)*x3052);
IkReal x3061=(gconst94*x3060);
evalcond[0]=((((-1.0)*r21*x3061))+(((-1.0)*r22*x3057))+((r20*x3058)));
evalcond[1]=(cj0+(((-1.0)*r11*x3061))+((x3052*x3055))+(((-1.0)*r12*x3057)));
evalcond[2]=((((-1.0)*sj0))+((r00*x3058))+(((-1.0)*r01*x3061))+(((-1.0)*r02*x3057)));
evalcond[3]=((((-1.0)*r22*x3060))+(((-1.0)*cj2*x3056))+(((-1.0)*cj1*sj2))+((r21*x3059))+(((-1.0)*gconst95*r20*x3057)));
evalcond[4]=((((-1.0)*r02*x3060))+((cj0*x3054))+((r01*x3059))+(((-1.0)*cj0*sj2*x3056))+(((-1.0)*gconst95*r00*x3057)));
evalcond[5]=((((-1.0)*x3055*x3057))+(((-1.0)*sj0*sj2*x3056))+(((-1.0)*r12*x3060))+((sj0*x3054))+((r11*x3059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3062=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3062;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x3062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3063=((1.0)*sj5);
IkReal x3064=((((-1.0)*cj5*r21))+(((-1.0)*r20*x3063)));
j4eval[0]=x3064;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3063))))));
j4eval[2]=IKsign(x3064);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3065=cj5*cj5;
IkReal x3066=r01*r01;
IkReal x3067=(r01*sj5);
IkReal x3068=(cj5*r00);
IkReal x3069=((((-1.0)*x3066))+(((2.0)*x3067*x3068))+((x3065*x3066))+(((-1.0)*x3065*(r00*r00)))+(((-1.0)*(r02*r02))));
j4eval[0]=x3069;
j4eval[1]=IKsign(x3069);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x3068))+x3067))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3070=cj5*cj5;
IkReal x3071=r01*r01;
IkReal x3072=(r01*sj5);
IkReal x3073=(cj5*r00);
CheckValue<IkReal> x3074 = IKatan2WithCheck(IkReal(((((-1.0)*x3073))+x3072)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3074.valid){
continue;
}
CheckValue<IkReal> x3075=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3071))+(((2.0)*x3072*x3073))+(((-1.0)*(r02*r02)))+((x3070*x3071))+(((-1.0)*x3070*(r00*r00))))),-1);
if(!x3075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3074.value)+(((1.5707963267949)*(x3075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3076=IKsin(j4);
IkReal x3077=IKcos(j4);
IkReal x3078=(cj5*r00);
IkReal x3079=((1.0)*sj2);
IkReal x3080=(cj5*r20);
IkReal x3081=(cj5*r10);
IkReal x3082=((1.0)*x3077);
IkReal x3083=(sj5*x3077);
IkReal x3084=((1.0)*x3076);
IkReal x3085=(sj5*x3084);
evalcond[0]=((((-1.0)*r21*x3085))+(((-1.0)*r22*x3082))+((x3076*x3080)));
evalcond[1]=(((x3076*x3081))+(((-1.0)*r12*x3082))+(((-1.0)*r11*x3085)));
evalcond[2]=((((-1.0)*x3078*x3082))+(((-1.0)*r02*x3084))+((r01*x3083)));
evalcond[3]=((-1.0)+((x3076*x3078))+(((-1.0)*r02*x3082))+(((-1.0)*r01*x3085)));
evalcond[4]=(((r11*x3083))+((cj1*cj2))+(((-1.0)*sj1*x3079))+(((-1.0)*r12*x3084))+(((-1.0)*x3081*x3082)));
evalcond[5]=((((-1.0)*x3080*x3082))+(((-1.0)*cj2*sj1))+((r21*x3083))+(((-1.0)*cj1*x3079))+(((-1.0)*r22*x3084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3086=((1.0)*sj5);
CheckValue<IkReal> x3087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3086))+(((-1.0)*cj5*r21)))),-1);
if(!x3087.valid){
continue;
}
CheckValue<IkReal> x3088 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x3086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3087.value)))+(x3088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3089=IKsin(j4);
IkReal x3090=IKcos(j4);
IkReal x3091=(cj5*r00);
IkReal x3092=((1.0)*sj2);
IkReal x3093=(cj5*r20);
IkReal x3094=(cj5*r10);
IkReal x3095=((1.0)*x3090);
IkReal x3096=(sj5*x3090);
IkReal x3097=((1.0)*x3089);
IkReal x3098=(sj5*x3097);
evalcond[0]=((((-1.0)*r22*x3095))+(((-1.0)*r21*x3098))+((x3089*x3093)));
evalcond[1]=((((-1.0)*r11*x3098))+(((-1.0)*r12*x3095))+((x3089*x3094)));
evalcond[2]=(((r01*x3096))+(((-1.0)*r02*x3097))+(((-1.0)*x3091*x3095)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3095))+(((-1.0)*r01*x3098))+((x3089*x3091)));
evalcond[4]=((((-1.0)*r12*x3097))+(((-1.0)*sj1*x3092))+((cj1*cj2))+((r11*x3096))+(((-1.0)*x3094*x3095)));
evalcond[5]=((((-1.0)*r22*x3097))+((r21*x3096))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3092))+(((-1.0)*x3093*x3095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3099=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3099.valid){
continue;
}
CheckValue<IkReal> x3100 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3099.value)))+(x3100.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3101=IKsin(j4);
IkReal x3102=IKcos(j4);
IkReal x3103=(cj5*r00);
IkReal x3104=((1.0)*sj2);
IkReal x3105=(cj5*r20);
IkReal x3106=(cj5*r10);
IkReal x3107=((1.0)*x3102);
IkReal x3108=(sj5*x3102);
IkReal x3109=((1.0)*x3101);
IkReal x3110=(sj5*x3109);
evalcond[0]=((((-1.0)*r21*x3110))+(((-1.0)*r22*x3107))+((x3101*x3105)));
evalcond[1]=((((-1.0)*r11*x3110))+(((-1.0)*r12*x3107))+((x3101*x3106)));
evalcond[2]=((((-1.0)*x3103*x3107))+((r01*x3108))+(((-1.0)*r02*x3109)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x3110))+((x3101*x3103))+(((-1.0)*r02*x3107)));
evalcond[4]=(((r11*x3108))+(((-1.0)*sj1*x3104))+(((-1.0)*r12*x3109))+(((-1.0)*x3106*x3107))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x3104))+(((-1.0)*cj2*sj1))+((r21*x3108))+(((-1.0)*x3105*x3107))+(((-1.0)*r22*x3109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3111=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3111;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x3111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3112=((1.0)*sj5);
IkReal x3113=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3112)));
j4eval[0]=x3113;
j4eval[1]=IKsign(x3113);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x3112))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3114=cj5*cj5;
IkReal x3115=r01*r01;
IkReal x3116=(cj5*r00);
IkReal x3117=(r01*sj5);
IkReal x3118=(((x3114*(r00*r00)))+x3115+(((-2.0)*x3116*x3117))+(r02*r02)+(((-1.0)*x3114*x3115)));
j4eval[0]=x3118;
j4eval[1]=((IKabs(r02))+(IKabs((x3117+(((-1.0)*x3116))))));
j4eval[2]=IKsign(x3118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3119=cj5*cj5;
IkReal x3120=r01*r01;
IkReal x3121=(r01*sj5);
IkReal x3122=(cj5*r00);
CheckValue<IkReal> x3123 = IKatan2WithCheck(IkReal((x3121+(((-1.0)*x3122)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3123.valid){
continue;
}
CheckValue<IkReal> x3124=IKPowWithIntegerCheck(IKsign((x3120+(((-1.0)*x3119*x3120))+(r02*r02)+(((-2.0)*x3121*x3122))+((x3119*(r00*r00))))),-1);
if(!x3124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3123.value)+(((1.5707963267949)*(x3124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3125=IKsin(j4);
IkReal x3126=IKcos(j4);
IkReal x3127=(cj5*r00);
IkReal x3128=((1.0)*cj1);
IkReal x3129=(cj5*r20);
IkReal x3130=(cj5*r10);
IkReal x3131=((1.0)*x3126);
IkReal x3132=(sj5*x3126);
IkReal x3133=((1.0)*x3125);
IkReal x3134=(sj5*x3133);
evalcond[0]=((((-1.0)*r21*x3134))+((x3125*x3129))+(((-1.0)*r22*x3131)));
evalcond[1]=(((x3125*x3130))+(((-1.0)*r12*x3131))+(((-1.0)*r11*x3134)));
evalcond[2]=(((r01*x3132))+(((-1.0)*r02*x3133))+(((-1.0)*x3127*x3131)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3131))+((x3125*x3127))+(((-1.0)*r01*x3134)));
evalcond[4]=((((-1.0)*x3130*x3131))+((sj1*sj2))+(((-1.0)*cj2*x3128))+(((-1.0)*r12*x3133))+((r11*x3132)));
evalcond[5]=((((-1.0)*sj2*x3128))+(((-1.0)*cj2*sj1))+((r21*x3132))+(((-1.0)*r22*x3133))+(((-1.0)*x3129*x3131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3135=((1.0)*sj5);
CheckValue<IkReal> x3136 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x3135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3135)))),-1);
if(!x3137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3136.value)+(((1.5707963267949)*(x3137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3138=IKsin(j4);
IkReal x3139=IKcos(j4);
IkReal x3140=(cj5*r00);
IkReal x3141=((1.0)*cj1);
IkReal x3142=(cj5*r20);
IkReal x3143=(cj5*r10);
IkReal x3144=((1.0)*x3139);
IkReal x3145=(sj5*x3139);
IkReal x3146=((1.0)*x3138);
IkReal x3147=(sj5*x3146);
evalcond[0]=((((-1.0)*r22*x3144))+(((-1.0)*r21*x3147))+((x3138*x3142)));
evalcond[1]=((((-1.0)*r11*x3147))+(((-1.0)*r12*x3144))+((x3138*x3143)));
evalcond[2]=((((-1.0)*x3140*x3144))+((r01*x3145))+(((-1.0)*r02*x3146)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3144))+(((-1.0)*r01*x3147))+((x3138*x3140)));
evalcond[4]=((((-1.0)*x3143*x3144))+(((-1.0)*r12*x3146))+((sj1*sj2))+((r11*x3145))+(((-1.0)*cj2*x3141)));
evalcond[5]=((((-1.0)*r22*x3146))+(((-1.0)*x3142*x3144))+(((-1.0)*cj2*sj1))+((r21*x3145))+(((-1.0)*sj2*x3141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3148 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3148.valid){
continue;
}
CheckValue<IkReal> x3149=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3148.value)+(((1.5707963267949)*(x3149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3150=IKsin(j4);
IkReal x3151=IKcos(j4);
IkReal x3152=(cj5*r00);
IkReal x3153=((1.0)*cj1);
IkReal x3154=(cj5*r20);
IkReal x3155=(cj5*r10);
IkReal x3156=((1.0)*x3151);
IkReal x3157=(sj5*x3151);
IkReal x3158=((1.0)*x3150);
IkReal x3159=(sj5*x3158);
evalcond[0]=((((-1.0)*r22*x3156))+((x3150*x3154))+(((-1.0)*r21*x3159)));
evalcond[1]=((((-1.0)*r11*x3159))+((x3150*x3155))+(((-1.0)*r12*x3156)));
evalcond[2]=(((r01*x3157))+(((-1.0)*r02*x3158))+(((-1.0)*x3152*x3156)));
evalcond[3]=((1.0)+((x3150*x3152))+(((-1.0)*r02*x3156))+(((-1.0)*r01*x3159)));
evalcond[4]=(((r11*x3157))+((sj1*sj2))+(((-1.0)*cj2*x3153))+(((-1.0)*r12*x3158))+(((-1.0)*x3155*x3156)));
evalcond[5]=((((-1.0)*r22*x3158))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x3153))+(((-1.0)*x3154*x3156))+((r21*x3157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3160=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3160);
rxp1_1=(px*r21);
rxp1_2=(r11*x3160);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3161=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3161);
rxp1_1=(px*r21);
rxp1_2=(r11*x3161);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3162=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3162);
rxp1_1=(px*r21);
rxp1_2=(r11*x3162);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3165=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x3165.valid){
continue;
}
IkReal x3163=x3165.value;
IkReal x3164=(sj0*x3163);
cj4array[0]=((((-1.0)*cj1*cj2*x3164))+((sj1*sj2*x3164)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3166=IKsin(j4);
IkReal x3167=IKcos(j4);
IkReal x3168=(cj5*x3166);
IkReal x3169=((1.0)*x3167);
IkReal x3170=((1.0)*sj5*x3166);
evalcond[0]=((-1.0)*r02*x3166);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3169)));
evalcond[2]=((((-1.0)*r21*x3170))+((r20*x3168)));
evalcond[3]=(((r10*x3168))+(((-1.0)*r11*x3170)));
evalcond[4]=((((-1.0)*cj5*r20*x3169))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+((r21*sj5*x3167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3172=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x3172.valid){
continue;
}
IkReal x3171=x3172.value;
cj4array[0]=(((cj1*sj2*x3171))+((cj2*sj1*x3171)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3173=IKsin(j4);
IkReal x3174=IKcos(j4);
IkReal x3175=((1.0)*sj0);
IkReal x3176=(cj5*r10);
IkReal x3177=((1.0)*x3174);
IkReal x3178=((1.0)*sj5*x3173);
evalcond[0]=((-1.0)*r02*x3173);
evalcond[1]=((((-1.0)*x3175))+(((-1.0)*r02*x3177)));
evalcond[2]=((((-1.0)*r21*x3178))+((cj5*r20*x3173)));
evalcond[3]=((((-1.0)*r11*x3178))+((x3173*x3176)));
evalcond[4]=(((cj1*cj2*sj0))+((r11*sj5*x3174))+(((-1.0)*x3176*x3177))+(((-1.0)*sj1*sj2*x3175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3179=IKPowWithIntegerCheck(r02,-1);
if(!x3179.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3179.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3180=IKsin(j4);
IkReal x3181=IKcos(j4);
IkReal x3182=(cj5*r10);
IkReal x3183=(cj5*r20);
IkReal x3184=((1.0)*sj2);
IkReal x3185=((1.0)*x3181);
IkReal x3186=(sj5*x3181);
IkReal x3187=((1.0)*sj5*x3180);
evalcond[0]=((-1.0)*r02*x3180);
evalcond[1]=((((-1.0)*r21*x3187))+((x3180*x3183)));
evalcond[2]=(((x3180*x3182))+(((-1.0)*r11*x3187)));
evalcond[3]=((((-1.0)*x3183*x3185))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x3184))+((r21*x3186)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*x3182*x3185))+((r11*x3186))+(((-1.0)*sj0*sj1*x3184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3188=((1.0)*sj0);
IkReal x3189=((1.0)*cj0);
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3190.valid){
continue;
}
CheckValue<IkReal> x3191 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3189))+(((-1.0)*r12*x3188)))),IkReal(((((-1.0)*cj5*r10*x3188))+(((-1.0)*cj5*r00*x3189))+((r11*sj0*sj5))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3190.value)))+(x3191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3192=IKsin(j4);
IkReal x3193=IKcos(j4);
IkReal x3194=(cj5*r00);
IkReal x3195=(cj1*cj2);
IkReal x3196=((1.0)*sj2);
IkReal x3197=(cj5*r20);
IkReal x3198=(cj5*r10);
IkReal x3199=((1.0)*x3193);
IkReal x3200=(sj5*x3193);
IkReal x3201=((1.0)*x3192);
IkReal x3202=(sj5*x3201);
evalcond[0]=((((-1.0)*r22*x3199))+(((-1.0)*r21*x3202))+((x3192*x3197)));
evalcond[1]=(cj0+(((-1.0)*r11*x3202))+(((-1.0)*r12*x3199))+((x3192*x3198)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x3202))+(((-1.0)*r02*x3199))+((x3192*x3194)));
evalcond[3]=((((-1.0)*x3197*x3199))+(((-1.0)*cj2*sj1))+(((-1.0)*r22*x3201))+((r21*x3200))+(((-1.0)*cj1*x3196)));
evalcond[4]=((((-1.0)*cj0*sj1*x3196))+(((-1.0)*r02*x3201))+((cj0*x3195))+((r01*x3200))+(((-1.0)*x3194*x3199)));
evalcond[5]=((((-1.0)*x3198*x3199))+((r11*x3200))+(((-1.0)*r12*x3201))+((sj0*x3195))+(((-1.0)*sj0*sj1*x3196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3203 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3203.valid){
continue;
}
CheckValue<IkReal> x3204=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3203.value)+(((1.5707963267949)*(x3204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3205=IKsin(j4);
IkReal x3206=IKcos(j4);
IkReal x3207=(cj5*r00);
IkReal x3208=(cj1*cj2);
IkReal x3209=((1.0)*sj2);
IkReal x3210=(cj5*r20);
IkReal x3211=(cj5*r10);
IkReal x3212=((1.0)*x3206);
IkReal x3213=(sj5*x3206);
IkReal x3214=((1.0)*x3205);
IkReal x3215=(sj5*x3214);
evalcond[0]=(((x3205*x3210))+(((-1.0)*r21*x3215))+(((-1.0)*r22*x3212)));
evalcond[1]=(cj0+((x3205*x3211))+(((-1.0)*r11*x3215))+(((-1.0)*r12*x3212)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x3215))+((x3205*x3207))+(((-1.0)*r02*x3212)));
evalcond[3]=((((-1.0)*cj2*sj1))+(((-1.0)*x3210*x3212))+(((-1.0)*cj1*x3209))+((r21*x3213))+(((-1.0)*r22*x3214)));
evalcond[4]=(((r01*x3213))+((cj0*x3208))+(((-1.0)*cj0*sj1*x3209))+(((-1.0)*r02*x3214))+(((-1.0)*x3207*x3212)));
evalcond[5]=(((sj0*x3208))+(((-1.0)*x3211*x3212))+((r11*x3213))+(((-1.0)*r12*x3214))+(((-1.0)*sj0*sj1*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3216 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3216.valid){
continue;
}
CheckValue<IkReal> x3217=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3216.value)+(((1.5707963267949)*(x3217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3218=IKsin(j4);
IkReal x3219=IKcos(j4);
IkReal x3220=(cj5*r00);
IkReal x3221=(cj1*cj2);
IkReal x3222=((1.0)*sj2);
IkReal x3223=(cj5*r20);
IkReal x3224=(cj5*r10);
IkReal x3225=((1.0)*x3219);
IkReal x3226=(sj5*x3219);
IkReal x3227=((1.0)*x3218);
IkReal x3228=(sj5*x3227);
evalcond[0]=(((x3218*x3223))+(((-1.0)*r22*x3225))+(((-1.0)*r21*x3228)));
evalcond[1]=(cj0+((x3218*x3224))+(((-1.0)*r11*x3228))+(((-1.0)*r12*x3225)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3225))+((x3218*x3220))+(((-1.0)*r01*x3228)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r21*x3226))+(((-1.0)*r22*x3227))+(((-1.0)*cj1*x3222))+(((-1.0)*x3223*x3225)));
evalcond[4]=((((-1.0)*r02*x3227))+(((-1.0)*cj0*sj1*x3222))+((cj0*x3221))+((r01*x3226))+(((-1.0)*x3220*x3225)));
evalcond[5]=(((r11*x3226))+(((-1.0)*sj0*sj1*x3222))+(((-1.0)*x3224*x3225))+((sj0*x3221))+(((-1.0)*r12*x3227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3229=((1.0)*cj5);
IkReal x3230=((1.0)*sj5);
IkReal x3231=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x3231;
j0eval[1]=((IKabs(((((-1.0)*r10*x3230))+(((-1.0)*r11*x3229)))))+(IKabs(((((-1.0)*r00*x3230))+(((-1.0)*r01*x3229))))));
j0eval[2]=IKsign(x3231);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3232=r21*r21;
IkReal x3233=cj5*cj5;
IkReal x3234=(cj2*sj1);
IkReal x3235=(cj1*sj2);
IkReal x3236=((1.0)*r22);
IkReal x3237=(r21*sj5);
IkReal x3238=((1.0)*cj5*r20);
IkReal x3239=(((x3232*x3233))+(((2.0)*cj5*r20*x3237))+(((-1.0)*x3232))+(((-1.0)*r22*x3236))+(((-1.0)*x3233*(r20*r20))));
j4eval[0]=x3239;
j4eval[1]=((IKabs(((((-1.0)*x3235*x3236))+(((-1.0)*x3234*x3236)))))+(IKabs((((x3234*x3237))+(((-1.0)*x3235*x3238))+((x3235*x3237))+(((-1.0)*x3234*x3238))))));
j4eval[2]=IKsign(x3239);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3240=cj1*cj1;
IkReal x3241=(cj2*sj2);
IkReal x3242=(cj2*sj1);
IkReal x3243=(cj1*sj1);
j0eval[0]=((((-2.0)*x3240*x3241))+(((-1.08363080061193)*sj2*x3240))+x3243+x3241+(((-1.08363080061193)*cj1*x3242))+(((-2.0)*cj1*cj2*x3242)));
j0eval[1]=((((-1.0)*x3242))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((1.20226214184354)*py))+(((-0.160507586484496)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((1.20226214184354)*px))+(((0.160507586484496)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((1.20226214184354)*py))+(((-0.160507586484496)*px))))+IKsqr(((((1.20226214184354)*px))+(((0.160507586484496)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((1.20226214184354)*py))+(((-0.160507586484496)*px))), ((((1.20226214184354)*px))+(((0.160507586484496)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3244=IKsin(j0);
IkReal x3245=IKcos(j0);
evalcond[0]=((((-0.1091)*x3244))+(((-1.0)*px))+(((0.8172)*x3245)));
evalcond[1]=((((0.1091)*x3245))+(((-1.0)*py))+(((0.8172)*x3244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3246=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3246;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3246);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3247=((1.0)*sj5);
IkReal x3248=((((-1.0)*r00*x3247))+(((-1.0)*cj5*r01)));
j4eval[0]=x3248;
j4eval[1]=IKsign(x3248);
j4eval[2]=((IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3247)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3249=cj5*cj5;
IkReal x3250=((1.0)*r21);
IkReal x3251=(cj5*r20);
IkReal x3252=((((-1.0)*r00*r20*x3249))+(((-1.0)*r02*r22))+((r01*r21*x3249))+((r01*sj5*x3251))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3250)));
j4eval[0]=x3252;
j4eval[1]=IKsign(x3252);
j4eval[2]=((IKabs((((cj0*x3251))+(((-1.0)*cj0*sj5*x3250)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3253=cj5*cj5;
IkReal x3254=((1.0)*r21);
IkReal x3255=(cj5*r20);
CheckValue<IkReal> x3256=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3253))+((r01*sj5*x3255))+((cj5*r00*r21*sj5))+((r01*r21*x3253))+(((-1.0)*r01*x3254)))),-1);
if(!x3256.valid){
continue;
}
CheckValue<IkReal> x3257 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3255))+(((-1.0)*cj0*sj5*x3254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3256.value)))+(x3257.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3258=IKcos(j4);
IkReal x3259=IKsin(j4);
IkReal x3260=(r11*sj5);
IkReal x3261=(r21*sj5);
IkReal x3262=(r01*sj5);
IkReal x3263=((1.0)*x3258);
IkReal x3264=((1.0)*x3259);
IkReal x3265=(cj5*x3258);
IkReal x3266=(cj5*x3259);
evalcond[0]=((((-1.0)*x3261*x3263))+((r20*x3265))+((r22*x3259)));
evalcond[1]=((((-1.0)*x3261*x3264))+((r20*x3266))+(((-1.0)*r22*x3263)));
evalcond[2]=(cj0+((r00*x3265))+((r02*x3259))+(((-1.0)*x3262*x3263)));
evalcond[3]=((((-1.0)*x3260*x3263))+((r12*x3259))+sj0+((r10*x3265)));
evalcond[4]=((((-1.0)*x3260*x3264))+cj0+(((-1.0)*r12*x3263))+((r10*x3266)));
evalcond[5]=((((-1.0)*sj0))+((r00*x3266))+(((-1.0)*x3262*x3264))+(((-1.0)*r02*x3263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3267=((1.0)*sj5);
CheckValue<IkReal> x3268 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3267)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3268.valid){
continue;
}
CheckValue<IkReal> x3269=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3267))+(((-1.0)*cj5*r01)))),-1);
if(!x3269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3268.value)+(((1.5707963267949)*(x3269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3270=IKcos(j4);
IkReal x3271=IKsin(j4);
IkReal x3272=(r11*sj5);
IkReal x3273=(r21*sj5);
IkReal x3274=(r01*sj5);
IkReal x3275=((1.0)*x3270);
IkReal x3276=((1.0)*x3271);
IkReal x3277=(cj5*x3270);
IkReal x3278=(cj5*x3271);
evalcond[0]=((((-1.0)*x3273*x3275))+((r20*x3277))+((r22*x3271)));
evalcond[1]=((((-1.0)*x3273*x3276))+((r20*x3278))+(((-1.0)*r22*x3275)));
evalcond[2]=(cj0+((r00*x3277))+(((-1.0)*x3274*x3275))+((r02*x3271)));
evalcond[3]=((((-1.0)*x3272*x3275))+sj0+((r10*x3277))+((r12*x3271)));
evalcond[4]=((((-1.0)*x3272*x3276))+(((-1.0)*r12*x3275))+cj0+((r10*x3278)));
evalcond[5]=((((-1.0)*sj0))+((r00*x3278))+(((-1.0)*x3274*x3276))+(((-1.0)*r02*x3275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3279 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3279.valid){
continue;
}
CheckValue<IkReal> x3280=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3279.value)+(((1.5707963267949)*(x3280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3281=IKcos(j4);
IkReal x3282=IKsin(j4);
IkReal x3283=(r11*sj5);
IkReal x3284=(r21*sj5);
IkReal x3285=(r01*sj5);
IkReal x3286=((1.0)*x3281);
IkReal x3287=((1.0)*x3282);
IkReal x3288=(cj5*x3281);
IkReal x3289=(cj5*x3282);
evalcond[0]=(((r20*x3288))+((r22*x3282))+(((-1.0)*x3284*x3286)));
evalcond[1]=(((r20*x3289))+(((-1.0)*r22*x3286))+(((-1.0)*x3284*x3287)));
evalcond[2]=(((r00*x3288))+cj0+((r02*x3282))+(((-1.0)*x3285*x3286)));
evalcond[3]=(sj0+(((-1.0)*x3283*x3286))+((r10*x3288))+((r12*x3282)));
evalcond[4]=((((-1.0)*r12*x3286))+cj0+(((-1.0)*x3283*x3287))+((r10*x3289)));
evalcond[5]=(((r00*x3289))+(((-1.0)*sj0))+(((-1.0)*r02*x3286))+(((-1.0)*x3285*x3287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52722740808944)*py))+(((-8.4061131165414)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.52722740808944)*px))+(((8.4061131165414)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52722740808944)*py))+(((-8.4061131165414)*px))))+IKsqr(((((2.52722740808944)*px))+(((8.4061131165414)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52722740808944)*py))+(((-8.4061131165414)*px))), ((((2.52722740808944)*px))+(((8.4061131165414)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3290=IKsin(j0);
IkReal x3291=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.1091)*x3290))+(((0.0328)*x3291)));
evalcond[1]=((((-1.0)*py))+(((0.1091)*x3291))+(((0.0328)*x3290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3292=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3292;
j4eval[1]=IKsign(x3292);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3293=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3293;
j4eval[1]=IKsign(x3293);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3294=((1.0)*sj5);
IkReal x3295=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3294)));
j4eval[0]=x3295;
j4eval[1]=IKsign(x3295);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x3294))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3296=((1.0)*sj5);
CheckValue<IkReal> x3297=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3296)))),-1);
if(!x3297.valid){
continue;
}
CheckValue<IkReal> x3298 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3296))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3297.value)))+(x3298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3299=IKcos(j4);
IkReal x3300=IKsin(j4);
IkReal x3301=((1.0)*sj0);
IkReal x3302=(r11*sj5);
IkReal x3303=(r21*sj5);
IkReal x3304=(r01*sj5);
IkReal x3305=((1.0)*x3299);
IkReal x3306=((1.0)*x3300);
IkReal x3307=(cj5*x3299);
IkReal x3308=(cj5*x3300);
evalcond[0]=(((r22*x3300))+((r20*x3307))+(((-1.0)*x3303*x3305)));
evalcond[1]=((((-1.0)*r22*x3305))+((r20*x3308))+(((-1.0)*x3303*x3306)));
evalcond[2]=(cj0+((r10*x3308))+(((-1.0)*x3302*x3306))+(((-1.0)*r12*x3305)));
evalcond[3]=((((-1.0)*x3304*x3305))+((r02*x3300))+((r00*x3307))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x3307))+(((-1.0)*x3301))+(((-1.0)*x3302*x3305))+((r12*x3300)));
evalcond[5]=((((-1.0)*x3304*x3306))+(((-1.0)*x3301))+(((-1.0)*r02*x3305))+((r00*x3308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3309 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3309.valid){
continue;
}
CheckValue<IkReal> x3310=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3309.value)+(((1.5707963267949)*(x3310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3311=IKcos(j4);
IkReal x3312=IKsin(j4);
IkReal x3313=((1.0)*sj0);
IkReal x3314=(r11*sj5);
IkReal x3315=(r21*sj5);
IkReal x3316=(r01*sj5);
IkReal x3317=((1.0)*x3311);
IkReal x3318=((1.0)*x3312);
IkReal x3319=(cj5*x3311);
IkReal x3320=(cj5*x3312);
evalcond[0]=(((r22*x3312))+(((-1.0)*x3315*x3317))+((r20*x3319)));
evalcond[1]=(((r20*x3320))+(((-1.0)*r22*x3317))+(((-1.0)*x3315*x3318)));
evalcond[2]=(cj0+(((-1.0)*x3314*x3318))+(((-1.0)*r12*x3317))+((r10*x3320)));
evalcond[3]=(((r02*x3312))+(((-1.0)*x3316*x3317))+((r00*x3319))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3313))+((r10*x3319))+(((-1.0)*x3314*x3317))+((r12*x3312)));
evalcond[5]=(((r00*x3320))+(((-1.0)*x3316*x3318))+(((-1.0)*x3313))+(((-1.0)*r02*x3317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3321 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3321.valid){
continue;
}
CheckValue<IkReal> x3322=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3321.value)+(((1.5707963267949)*(x3322.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3323=IKcos(j4);
IkReal x3324=IKsin(j4);
IkReal x3325=((1.0)*sj0);
IkReal x3326=(r11*sj5);
IkReal x3327=(r21*sj5);
IkReal x3328=(r01*sj5);
IkReal x3329=((1.0)*x3323);
IkReal x3330=((1.0)*x3324);
IkReal x3331=(cj5*x3323);
IkReal x3332=(cj5*x3324);
evalcond[0]=(((r22*x3324))+(((-1.0)*x3327*x3329))+((r20*x3331)));
evalcond[1]=((((-1.0)*r22*x3329))+(((-1.0)*x3327*x3330))+((r20*x3332)));
evalcond[2]=(cj0+((r10*x3332))+(((-1.0)*r12*x3329))+(((-1.0)*x3326*x3330)));
evalcond[3]=((((-1.0)*x3328*x3329))+((r00*x3331))+((r02*x3324))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3325))+((r12*x3324))+(((-1.0)*x3326*x3329))+((r10*x3331)));
evalcond[5]=((((-1.0)*x3325))+(((-1.0)*r02*x3329))+((r00*x3332))+(((-1.0)*x3328*x3330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3333=IKsin(j0);
IkReal x3334=IKcos(j0);
IkReal x3335=(r00*sj5);
IkReal x3336=(r10*sj5);
IkReal x3337=(cj5*r11);
IkReal x3338=(cj5*r01);
evalcond[0]=(x3335+x3338+(((-1.0)*x3334)));
evalcond[1]=(x3337+x3336+(((-1.0)*x3333)));
evalcond[2]=((((-1.0)*px))+(((0.0946)*x3338))+(((0.0946)*x3335))+(((-0.1091)*x3333)));
evalcond[3]=((((-1.0)*py))+(((0.1091)*x3334))+(((0.0946)*x3336))+(((0.0946)*x3337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3339=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3339;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3339);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3340=((1.0)*sj5);
IkReal x3341=((((-1.0)*cj5*r01))+(((-1.0)*r00*x3340)));
j4eval[0]=x3341;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x3340))))));
j4eval[2]=IKsign(x3341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3342=cj5*cj5;
IkReal x3343=(r01*r11);
IkReal x3344=(cj5*sj5);
IkReal x3345=((((-1.0)*x3343))+(((-1.0)*r00*r10*x3342))+((x3342*x3343))+(((-1.0)*r02*r12))+((r01*r10*x3344))+((r00*r11*x3344)));
j4eval[0]=x3345;
j4eval[1]=IKsign(x3345);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3346=cj5*cj5;
IkReal x3347=(r01*r11);
IkReal x3348=(cj5*sj5);
CheckValue<IkReal> x3349 = IKatan2WithCheck(IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3349.valid){
continue;
}
CheckValue<IkReal> x3350=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3347))+(((-1.0)*r00*r10*x3346))+(((-1.0)*r02*r12))+((x3346*x3347))+((r01*r10*x3348))+((r00*r11*x3348)))),-1);
if(!x3350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3349.value)+(((1.5707963267949)*(x3350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3351=IKcos(j4);
IkReal x3352=IKsin(j4);
IkReal x3353=(r11*sj5);
IkReal x3354=(r21*sj5);
IkReal x3355=(cj5*r20);
IkReal x3356=(cj5*r00);
IkReal x3357=(r01*sj5);
IkReal x3358=(cj5*r10);
IkReal x3359=((1.0)*x3351);
IkReal x3360=((1.0)*x3352);
evalcond[0]=((((-1.0)*x3357*x3359))+((x3351*x3356))+((r02*x3352)));
evalcond[1]=(((r12*x3352))+(((-1.0)*x3353*x3359))+((x3351*x3358)));
evalcond[2]=((((-1.0)*x3354*x3360))+((x3352*x3355))+(((-1.0)*r22*x3359)));
evalcond[3]=((-1.0)+(((-1.0)*x3354*x3359))+((x3351*x3355))+((r22*x3352)));
evalcond[4]=(cj0+((x3352*x3358))+(((-1.0)*r12*x3359))+(((-1.0)*x3353*x3360)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3359))+(((-1.0)*x3357*x3360))+((x3352*x3356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3361=((1.0)*sj5);
CheckValue<IkReal> x3362=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3361))+(((-1.0)*cj5*r01)))),-1);
if(!x3362.valid){
continue;
}
CheckValue<IkReal> x3363 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x3361)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3362.value)))+(x3363.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3364=IKcos(j4);
IkReal x3365=IKsin(j4);
IkReal x3366=(r11*sj5);
IkReal x3367=(r21*sj5);
IkReal x3368=(cj5*r20);
IkReal x3369=(cj5*r00);
IkReal x3370=(r01*sj5);
IkReal x3371=(cj5*r10);
IkReal x3372=((1.0)*x3364);
IkReal x3373=((1.0)*x3365);
evalcond[0]=(((r02*x3365))+(((-1.0)*x3370*x3372))+((x3364*x3369)));
evalcond[1]=((((-1.0)*x3366*x3372))+((x3364*x3371))+((r12*x3365)));
evalcond[2]=((((-1.0)*r22*x3372))+((x3365*x3368))+(((-1.0)*x3367*x3373)));
evalcond[3]=((-1.0)+(((-1.0)*x3367*x3372))+((r22*x3365))+((x3364*x3368)));
evalcond[4]=((((-1.0)*x3366*x3373))+cj0+((x3365*x3371))+(((-1.0)*r12*x3372)));
evalcond[5]=(((x3365*x3369))+(((-1.0)*sj0))+(((-1.0)*x3370*x3373))+(((-1.0)*r02*x3372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3374 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3374.valid){
continue;
}
CheckValue<IkReal> x3375=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3374.value)+(((1.5707963267949)*(x3375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3376=IKcos(j4);
IkReal x3377=IKsin(j4);
IkReal x3378=(r11*sj5);
IkReal x3379=(r21*sj5);
IkReal x3380=(cj5*r20);
IkReal x3381=(cj5*r00);
IkReal x3382=(r01*sj5);
IkReal x3383=(cj5*r10);
IkReal x3384=((1.0)*x3376);
IkReal x3385=((1.0)*x3377);
evalcond[0]=((((-1.0)*x3382*x3384))+((r02*x3377))+((x3376*x3381)));
evalcond[1]=(((r12*x3377))+(((-1.0)*x3378*x3384))+((x3376*x3383)));
evalcond[2]=((((-1.0)*r22*x3384))+(((-1.0)*x3379*x3385))+((x3377*x3380)));
evalcond[3]=((-1.0)+((r22*x3377))+(((-1.0)*x3379*x3384))+((x3376*x3380)));
evalcond[4]=((((-1.0)*x3378*x3385))+cj0+(((-1.0)*r12*x3384))+((x3377*x3383)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3382*x3385))+(((-1.0)*r02*x3384))+((x3377*x3381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658324867935265)*px))+(((-2.3665904051715)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658324867935265)*py))+(((-2.3665904051715)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658324867935265)*px))+(((-2.3665904051715)*py))))+IKsqr(((((0.658324867935265)*py))+(((-2.3665904051715)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658324867935265)*px))+(((-2.3665904051715)*py))), ((((0.658324867935265)*py))+(((-2.3665904051715)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3386=IKcos(j0);
IkReal x3387=IKsin(j0);
evalcond[0]=((((-0.1091)*x3387))+(((-0.3922)*x3386))+(((-1.0)*px)));
evalcond[1]=((((-0.3922)*x3387))+(((0.1091)*x3386))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3388=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3388;
j4eval[1]=IKsign(x3388);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3389=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3389;
j4eval[1]=IKsign(x3389);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3390=((1.0)*sj5);
IkReal x3391=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3390)));
j4eval[0]=x3391;
j4eval[1]=IKsign(x3391);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3390)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3392=((1.0)*sj5);
CheckValue<IkReal> x3393=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3392)))),-1);
if(!x3393.valid){
continue;
}
CheckValue<IkReal> x3394 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3392)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3393.value)))+(x3394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3395=IKcos(j4);
IkReal x3396=IKsin(j4);
IkReal x3397=((1.0)*sj0);
IkReal x3398=(r11*sj5);
IkReal x3399=(r21*sj5);
IkReal x3400=(r01*sj5);
IkReal x3401=((1.0)*x3395);
IkReal x3402=((1.0)*x3396);
IkReal x3403=(cj5*x3395);
IkReal x3404=(cj5*x3396);
evalcond[0]=((((-1.0)*x3399*x3401))+((r22*x3396))+((r20*x3403)));
evalcond[1]=((((-1.0)*x3399*x3402))+((r20*x3404))+(((-1.0)*r22*x3401)));
evalcond[2]=(cj0+(((-1.0)*x3398*x3402))+(((-1.0)*r12*x3401))+((r10*x3404)));
evalcond[3]=((((-1.0)*x3400*x3401))+((r02*x3396))+((r00*x3403))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3398*x3401))+(((-1.0)*x3397))+((r10*x3403))+((r12*x3396)));
evalcond[5]=((((-1.0)*x3400*x3402))+(((-1.0)*r02*x3401))+(((-1.0)*x3397))+((r00*x3404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3405 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3405.valid){
continue;
}
CheckValue<IkReal> x3406=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3406.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3405.value)+(((1.5707963267949)*(x3406.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3407=IKcos(j4);
IkReal x3408=IKsin(j4);
IkReal x3409=((1.0)*sj0);
IkReal x3410=(r11*sj5);
IkReal x3411=(r21*sj5);
IkReal x3412=(r01*sj5);
IkReal x3413=((1.0)*x3407);
IkReal x3414=((1.0)*x3408);
IkReal x3415=(cj5*x3407);
IkReal x3416=(cj5*x3408);
evalcond[0]=(((r22*x3408))+(((-1.0)*x3411*x3413))+((r20*x3415)));
evalcond[1]=((((-1.0)*r22*x3413))+(((-1.0)*x3411*x3414))+((r20*x3416)));
evalcond[2]=(cj0+(((-1.0)*r12*x3413))+((r10*x3416))+(((-1.0)*x3410*x3414)));
evalcond[3]=((((-1.0)*x3412*x3413))+((r02*x3408))+((r00*x3415))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3408))+((r10*x3415))+(((-1.0)*x3410*x3413))+(((-1.0)*x3409)));
evalcond[5]=((((-1.0)*x3412*x3414))+(((-1.0)*r02*x3413))+((r00*x3416))+(((-1.0)*x3409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3417.valid){
continue;
}
CheckValue<IkReal> x3418=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3417.value)+(((1.5707963267949)*(x3418.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3419=IKcos(j4);
IkReal x3420=IKsin(j4);
IkReal x3421=((1.0)*sj0);
IkReal x3422=(r11*sj5);
IkReal x3423=(r21*sj5);
IkReal x3424=(r01*sj5);
IkReal x3425=((1.0)*x3419);
IkReal x3426=((1.0)*x3420);
IkReal x3427=(cj5*x3419);
IkReal x3428=(cj5*x3420);
evalcond[0]=(((r20*x3427))+(((-1.0)*x3423*x3425))+((r22*x3420)));
evalcond[1]=(((r20*x3428))+(((-1.0)*r22*x3425))+(((-1.0)*x3423*x3426)));
evalcond[2]=((((-1.0)*r12*x3425))+((r10*x3428))+cj0+(((-1.0)*x3422*x3426)));
evalcond[3]=(((r00*x3427))+(((-1.0)*x3424*x3425))+((r02*x3420))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x3427))+(((-1.0)*x3421))+(((-1.0)*x3422*x3425))+((r12*x3420)));
evalcond[5]=(((r00*x3428))+(((-1.0)*x3424*x3426))+(((-1.0)*x3421))+(((-1.0)*r02*x3425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3429=((1.0)*sj5);
IkReal x3430=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x3429))+(((-1.0)*r11*x3430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3430))+(((-1.0)*r00*x3429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3429))+(((-1.0)*r11*x3430))))+IKsqr(((((-1.0)*r01*x3430))+(((-1.0)*r00*x3429))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x3429))+(((-1.0)*r11*x3430))), ((((-1.0)*r01*x3430))+(((-1.0)*r00*x3429))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3431=IKsin(j0);
IkReal x3432=IKcos(j0);
IkReal x3433=(r00*sj5);
IkReal x3434=(r10*sj5);
IkReal x3435=(cj5*r11);
IkReal x3436=(cj5*r01);
evalcond[0]=(x3432+x3433+x3436);
evalcond[1]=(x3431+x3434+x3435);
evalcond[2]=((((-0.1091)*x3431))+(((-1.0)*px))+(((0.0946)*x3436))+(((0.0946)*x3433)));
evalcond[3]=((((-1.0)*py))+(((0.1091)*x3432))+(((0.0946)*x3435))+(((0.0946)*x3434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3437=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3437;
j4eval[1]=IKsign(x3437);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3438=((1.0)*sj5);
IkReal x3439=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3438)));
j4eval[0]=x3439;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3438))+((cj5*r00))))));
j4eval[2]=IKsign(x3439);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3440=cj5*cj5;
IkReal x3441=(r01*r11);
IkReal x3442=(cj5*sj5);
IkReal x3443=((((-1.0)*r02*r12))+(((-1.0)*x3441))+(((-1.0)*r00*r10*x3440))+((r01*r10*x3442))+((x3440*x3441))+((r00*r11*x3442)));
j4eval[0]=x3443;
j4eval[1]=IKsign(x3443);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3444=cj5*cj5;
IkReal x3445=(r01*r11);
IkReal x3446=(cj5*sj5);
CheckValue<IkReal> x3447=IKPowWithIntegerCheck(IKsign((((x3444*x3445))+(((-1.0)*r02*r12))+(((-1.0)*x3445))+(((-1.0)*r00*r10*x3444))+((r01*r10*x3446))+((r00*r11*x3446)))),-1);
if(!x3447.valid){
continue;
}
CheckValue<IkReal> x3448 = IKatan2WithCheck(IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3447.value)))+(x3448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3449=IKcos(j4);
IkReal x3450=IKsin(j4);
IkReal x3451=(r11*sj5);
IkReal x3452=(r21*sj5);
IkReal x3453=(cj5*r20);
IkReal x3454=(cj5*r00);
IkReal x3455=(r01*sj5);
IkReal x3456=(cj5*r10);
IkReal x3457=((1.0)*x3449);
IkReal x3458=((1.0)*x3450);
evalcond[0]=(((r02*x3450))+(((-1.0)*x3455*x3457))+((x3449*x3454)));
evalcond[1]=((((-1.0)*x3451*x3457))+((r12*x3450))+((x3449*x3456)));
evalcond[2]=((((-1.0)*r22*x3457))+(((-1.0)*x3452*x3458))+((x3450*x3453)));
evalcond[3]=((1.0)+((r22*x3450))+((x3449*x3453))+(((-1.0)*x3452*x3457)));
evalcond[4]=((((-1.0)*x3451*x3458))+cj0+(((-1.0)*r12*x3457))+((x3450*x3456)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3455*x3458))+(((-1.0)*r02*x3457))+((x3450*x3454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3459=((1.0)*sj5);
CheckValue<IkReal> x3460 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3459))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3460.valid){
continue;
}
CheckValue<IkReal> x3461=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3459)))),-1);
if(!x3461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3460.value)+(((1.5707963267949)*(x3461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3462=IKcos(j4);
IkReal x3463=IKsin(j4);
IkReal x3464=(r11*sj5);
IkReal x3465=(r21*sj5);
IkReal x3466=(cj5*r20);
IkReal x3467=(cj5*r00);
IkReal x3468=(r01*sj5);
IkReal x3469=(cj5*r10);
IkReal x3470=((1.0)*x3462);
IkReal x3471=((1.0)*x3463);
evalcond[0]=(((x3462*x3467))+(((-1.0)*x3468*x3470))+((r02*x3463)));
evalcond[1]=(((x3462*x3469))+((r12*x3463))+(((-1.0)*x3464*x3470)));
evalcond[2]=((((-1.0)*x3465*x3471))+((x3463*x3466))+(((-1.0)*r22*x3470)));
evalcond[3]=((1.0)+(((-1.0)*x3465*x3470))+((x3462*x3466))+((r22*x3463)));
evalcond[4]=(cj0+((x3463*x3469))+(((-1.0)*r12*x3470))+(((-1.0)*x3464*x3471)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3470))+((x3463*x3467))+(((-1.0)*x3468*x3471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3472 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3472.valid){
continue;
}
CheckValue<IkReal> x3473=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3472.value)+(((1.5707963267949)*(x3473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3474=IKcos(j4);
IkReal x3475=IKsin(j4);
IkReal x3476=(r11*sj5);
IkReal x3477=(r21*sj5);
IkReal x3478=(cj5*r20);
IkReal x3479=(cj5*r00);
IkReal x3480=(r01*sj5);
IkReal x3481=(cj5*r10);
IkReal x3482=((1.0)*x3474);
IkReal x3483=((1.0)*x3475);
evalcond[0]=(((x3474*x3479))+((r02*x3475))+(((-1.0)*x3480*x3482)));
evalcond[1]=(((x3474*x3481))+((r12*x3475))+(((-1.0)*x3476*x3482)));
evalcond[2]=(((x3475*x3478))+(((-1.0)*r22*x3482))+(((-1.0)*x3477*x3483)));
evalcond[3]=((1.0)+((x3474*x3478))+(((-1.0)*x3477*x3482))+((r22*x3475)));
evalcond[4]=(((x3475*x3481))+cj0+(((-1.0)*r12*x3482))+(((-1.0)*x3476*x3483)));
evalcond[5]=(((x3475*x3479))+(((-1.0)*sj0))+(((-1.0)*r02*x3482))+(((-1.0)*x3480*x3483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.3665904051715)*py))+(((-0.658324867935265)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.3665904051715)*px))+(((0.658324867935265)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.3665904051715)*py))+(((-0.658324867935265)*px))))+IKsqr(((((2.3665904051715)*px))+(((0.658324867935265)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.3665904051715)*py))+(((-0.658324867935265)*px))), ((((2.3665904051715)*px))+(((0.658324867935265)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3484=IKsin(j0);
IkReal x3485=IKcos(j0);
evalcond[0]=((((-0.1091)*x3484))+(((-1.0)*px))+(((0.3922)*x3485)));
evalcond[1]=((((-1.0)*py))+(((0.1091)*x3485))+(((0.3922)*x3484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3486=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3486;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3487=((1.0)*sj5);
IkReal x3488=((((-1.0)*r00*x3487))+(((-1.0)*cj5*r01)));
j4eval[0]=x3488;
j4eval[1]=IKsign(x3488);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3487))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3489=cj5*cj5;
IkReal x3490=((1.0)*r21);
IkReal x3491=(cj5*r20);
IkReal x3492=((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3489))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3490))+((r01*r21*x3489))+((r01*sj5*x3491)));
j4eval[0]=x3492;
j4eval[1]=IKsign(x3492);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3491))+(((-1.0)*cj0*sj5*x3490))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3493=cj5*cj5;
IkReal x3494=((1.0)*r21);
IkReal x3495=(cj5*r20);
CheckValue<IkReal> x3496 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3495))+(((-1.0)*cj0*sj5*x3494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3496.valid){
continue;
}
CheckValue<IkReal> x3497=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3493))+((r01*r21*x3493))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3494))+((r01*sj5*x3495)))),-1);
if(!x3497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3496.value)+(((1.5707963267949)*(x3497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3498=IKcos(j4);
IkReal x3499=IKsin(j4);
IkReal x3500=(r11*sj5);
IkReal x3501=(r21*sj5);
IkReal x3502=(r01*sj5);
IkReal x3503=((1.0)*x3498);
IkReal x3504=((1.0)*x3499);
IkReal x3505=(cj5*x3498);
IkReal x3506=(cj5*x3499);
evalcond[0]=(((r20*x3505))+(((-1.0)*x3501*x3503))+((r22*x3499)));
evalcond[1]=(((r20*x3506))+(((-1.0)*r22*x3503))+(((-1.0)*x3501*x3504)));
evalcond[2]=(cj0+((r00*x3505))+(((-1.0)*x3502*x3503))+((r02*x3499)));
evalcond[3]=(sj0+((r10*x3505))+((r12*x3499))+(((-1.0)*x3500*x3503)));
evalcond[4]=((((-1.0)*r12*x3503))+((r10*x3506))+cj0+(((-1.0)*x3500*x3504)));
evalcond[5]=((((-1.0)*sj0))+((r00*x3506))+(((-1.0)*x3502*x3504))+(((-1.0)*r02*x3503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3507=((1.0)*sj5);
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3507)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
CheckValue<IkReal> x3509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3507))+(((-1.0)*cj5*r01)))),-1);
if(!x3509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3508.value)+(((1.5707963267949)*(x3509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3510=IKcos(j4);
IkReal x3511=IKsin(j4);
IkReal x3512=(r11*sj5);
IkReal x3513=(r21*sj5);
IkReal x3514=(r01*sj5);
IkReal x3515=((1.0)*x3510);
IkReal x3516=((1.0)*x3511);
IkReal x3517=(cj5*x3510);
IkReal x3518=(cj5*x3511);
evalcond[0]=((((-1.0)*x3513*x3515))+((r20*x3517))+((r22*x3511)));
evalcond[1]=((((-1.0)*x3513*x3516))+((r20*x3518))+(((-1.0)*r22*x3515)));
evalcond[2]=((((-1.0)*x3514*x3515))+cj0+((r00*x3517))+((r02*x3511)));
evalcond[3]=((((-1.0)*x3512*x3515))+sj0+((r10*x3517))+((r12*x3511)));
evalcond[4]=((((-1.0)*x3512*x3516))+cj0+((r10*x3518))+(((-1.0)*r12*x3515)));
evalcond[5]=((((-1.0)*x3514*x3516))+(((-1.0)*r02*x3515))+(((-1.0)*sj0))+((r00*x3518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3519 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3519.valid){
continue;
}
CheckValue<IkReal> x3520=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3519.value)+(((1.5707963267949)*(x3520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3521=IKcos(j4);
IkReal x3522=IKsin(j4);
IkReal x3523=(r11*sj5);
IkReal x3524=(r21*sj5);
IkReal x3525=(r01*sj5);
IkReal x3526=((1.0)*x3521);
IkReal x3527=((1.0)*x3522);
IkReal x3528=(cj5*x3521);
IkReal x3529=(cj5*x3522);
evalcond[0]=((((-1.0)*x3524*x3526))+((r20*x3528))+((r22*x3522)));
evalcond[1]=((((-1.0)*x3524*x3527))+((r20*x3529))+(((-1.0)*r22*x3526)));
evalcond[2]=((((-1.0)*x3525*x3526))+cj0+((r00*x3528))+((r02*x3522)));
evalcond[3]=(sj0+((r10*x3528))+((r12*x3522))+(((-1.0)*x3523*x3526)));
evalcond[4]=(cj0+((r10*x3529))+(((-1.0)*r12*x3526))+(((-1.0)*x3523*x3527)));
evalcond[5]=((((-1.0)*x3525*x3527))+(((-1.0)*r02*x3526))+(((-1.0)*sj0))+((r00*x3529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160507586484496)*px))+(((-1.20226214184354)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.20226214184354)*px))+(((0.160507586484496)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160507586484496)*px))+(((-1.20226214184354)*py))))+IKsqr(((((-1.20226214184354)*px))+(((0.160507586484496)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160507586484496)*px))+(((-1.20226214184354)*py))), ((((-1.20226214184354)*px))+(((0.160507586484496)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3530=IKcos(j0);
IkReal x3531=IKsin(j0);
evalcond[0]=((((-0.1091)*x3531))+(((-0.8172)*x3530))+(((-1.0)*px)));
evalcond[1]=((((-0.8172)*x3531))+(((-1.0)*py))+(((0.1091)*x3530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3532=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3532;
j4eval[1]=IKsign(x3532);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3533=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3533;
j4eval[1]=IKsign(x3533);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3534=((1.0)*sj5);
IkReal x3535=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3534)));
j4eval[0]=x3535;
j4eval[1]=IKsign(x3535);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x3534))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3536=((1.0)*sj5);
CheckValue<IkReal> x3537 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x3536))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3537.valid){
continue;
}
CheckValue<IkReal> x3538=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3536)))),-1);
if(!x3538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3537.value)+(((1.5707963267949)*(x3538.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3539=IKcos(j4);
IkReal x3540=IKsin(j4);
IkReal x3541=((1.0)*sj0);
IkReal x3542=(r11*sj5);
IkReal x3543=(r21*sj5);
IkReal x3544=(r01*sj5);
IkReal x3545=((1.0)*x3539);
IkReal x3546=((1.0)*x3540);
IkReal x3547=(cj5*x3539);
IkReal x3548=(cj5*x3540);
evalcond[0]=(((r20*x3547))+(((-1.0)*x3543*x3545))+((r22*x3540)));
evalcond[1]=(((r20*x3548))+(((-1.0)*x3543*x3546))+(((-1.0)*r22*x3545)));
evalcond[2]=(cj0+(((-1.0)*x3542*x3546))+(((-1.0)*r12*x3545))+((r10*x3548)));
evalcond[3]=(((r02*x3540))+((r00*x3547))+(((-1.0)*cj0))+(((-1.0)*x3544*x3545)));
evalcond[4]=((((-1.0)*x3542*x3545))+((r12*x3540))+(((-1.0)*x3541))+((r10*x3547)));
evalcond[5]=((((-1.0)*r02*x3545))+((r00*x3548))+(((-1.0)*x3541))+(((-1.0)*x3544*x3546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3549 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3549.valid){
continue;
}
CheckValue<IkReal> x3550=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3549.value)+(((1.5707963267949)*(x3550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3551=IKcos(j4);
IkReal x3552=IKsin(j4);
IkReal x3553=((1.0)*sj0);
IkReal x3554=(r11*sj5);
IkReal x3555=(r21*sj5);
IkReal x3556=(r01*sj5);
IkReal x3557=((1.0)*x3551);
IkReal x3558=((1.0)*x3552);
IkReal x3559=(cj5*x3551);
IkReal x3560=(cj5*x3552);
evalcond[0]=(((r20*x3559))+(((-1.0)*x3555*x3557))+((r22*x3552)));
evalcond[1]=((((-1.0)*x3555*x3558))+(((-1.0)*r22*x3557))+((r20*x3560)));
evalcond[2]=(((r10*x3560))+cj0+(((-1.0)*x3554*x3558))+(((-1.0)*r12*x3557)));
evalcond[3]=(((r00*x3559))+((r02*x3552))+(((-1.0)*cj0))+(((-1.0)*x3556*x3557)));
evalcond[4]=((((-1.0)*x3554*x3557))+((r12*x3552))+(((-1.0)*x3553))+((r10*x3559)));
evalcond[5]=(((r00*x3560))+(((-1.0)*x3553))+(((-1.0)*x3556*x3558))+(((-1.0)*r02*x3557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3561 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3561.valid){
continue;
}
CheckValue<IkReal> x3562=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3561.value)+(((1.5707963267949)*(x3562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3563=IKcos(j4);
IkReal x3564=IKsin(j4);
IkReal x3565=((1.0)*sj0);
IkReal x3566=(r11*sj5);
IkReal x3567=(r21*sj5);
IkReal x3568=(r01*sj5);
IkReal x3569=((1.0)*x3563);
IkReal x3570=((1.0)*x3564);
IkReal x3571=(cj5*x3563);
IkReal x3572=(cj5*x3564);
evalcond[0]=(((r20*x3571))+((r22*x3564))+(((-1.0)*x3567*x3569)));
evalcond[1]=((((-1.0)*r22*x3569))+((r20*x3572))+(((-1.0)*x3567*x3570)));
evalcond[2]=(((r10*x3572))+cj0+(((-1.0)*x3566*x3570))+(((-1.0)*r12*x3569)));
evalcond[3]=(((r00*x3571))+(((-1.0)*x3568*x3569))+((r02*x3564))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x3571))+(((-1.0)*x3566*x3569))+(((-1.0)*x3565))+((r12*x3564)));
evalcond[5]=((((-1.0)*x3568*x3570))+((r00*x3572))+(((-1.0)*r02*x3569))+(((-1.0)*x3565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52722740808944)*py))+(((-8.4061131165414)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4061131165414)*py))+(((-2.52722740808944)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52722740808944)*py))+(((-8.4061131165414)*px))))+IKsqr(((((8.4061131165414)*py))+(((-2.52722740808944)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52722740808944)*py))+(((-8.4061131165414)*px))), ((((8.4061131165414)*py))+(((-2.52722740808944)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3573=IKcos(j0);
IkReal x3574=IKsin(j0);
evalcond[0]=((((-0.0328)*x3573))+(((-1.0)*px))+(((-0.1091)*x3574)));
evalcond[1]=((((-0.0328)*x3574))+(((-1.0)*py))+(((0.1091)*x3573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3575=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3575;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3576=((1.0)*sj5);
IkReal x3577=((((-1.0)*r00*x3576))+(((-1.0)*cj5*r01)));
j4eval[0]=x3577;
j4eval[1]=IKsign(x3577);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3578=cj5*cj5;
IkReal x3579=((1.0)*r21);
IkReal x3580=(cj5*r20);
IkReal x3581=((((-1.0)*r02*r22))+((r01*r21*x3578))+((r01*sj5*x3580))+(((-1.0)*r00*r20*x3578))+(((-1.0)*r01*x3579))+((cj5*r00*r21*sj5)));
j4eval[0]=x3581;
j4eval[1]=IKsign(x3581);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x3579))+((cj0*x3580))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3582=cj5*cj5;
IkReal x3583=((1.0)*r21);
IkReal x3584=(cj5*r20);
CheckValue<IkReal> x3585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x3583))+((cj0*x3584)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3585.valid){
continue;
}
CheckValue<IkReal> x3586=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r00*r20*x3582))+((r01*r21*x3582))+((r01*sj5*x3584))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x3583)))),-1);
if(!x3586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3585.value)+(((1.5707963267949)*(x3586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3587=IKcos(j4);
IkReal x3588=IKsin(j4);
IkReal x3589=(r11*sj5);
IkReal x3590=(r21*sj5);
IkReal x3591=(r01*sj5);
IkReal x3592=((1.0)*x3587);
IkReal x3593=((1.0)*x3588);
IkReal x3594=(cj5*x3587);
IkReal x3595=(cj5*x3588);
evalcond[0]=(((r20*x3594))+(((-1.0)*x3590*x3592))+((r22*x3588)));
evalcond[1]=((((-1.0)*r22*x3592))+((r20*x3595))+(((-1.0)*x3590*x3593)));
evalcond[2]=(cj0+((r02*x3588))+(((-1.0)*x3591*x3592))+((r00*x3594)));
evalcond[3]=((((-1.0)*x3589*x3592))+sj0+((r12*x3588))+((r10*x3594)));
evalcond[4]=((((-1.0)*x3589*x3593))+cj0+((r10*x3595))+(((-1.0)*r12*x3592)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3592))+(((-1.0)*x3591*x3593))+((r00*x3595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3596=((1.0)*sj5);
CheckValue<IkReal> x3597 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3596)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3597.valid){
continue;
}
CheckValue<IkReal> x3598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3596))+(((-1.0)*cj5*r01)))),-1);
if(!x3598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3597.value)+(((1.5707963267949)*(x3598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3599=IKcos(j4);
IkReal x3600=IKsin(j4);
IkReal x3601=(r11*sj5);
IkReal x3602=(r21*sj5);
IkReal x3603=(r01*sj5);
IkReal x3604=((1.0)*x3599);
IkReal x3605=((1.0)*x3600);
IkReal x3606=(cj5*x3599);
IkReal x3607=(cj5*x3600);
evalcond[0]=(((r22*x3600))+(((-1.0)*x3602*x3604))+((r20*x3606)));
evalcond[1]=((((-1.0)*x3602*x3605))+(((-1.0)*r22*x3604))+((r20*x3607)));
evalcond[2]=(((r02*x3600))+cj0+(((-1.0)*x3603*x3604))+((r00*x3606)));
evalcond[3]=(sj0+(((-1.0)*x3601*x3604))+((r10*x3606))+((r12*x3600)));
evalcond[4]=(cj0+(((-1.0)*r12*x3604))+(((-1.0)*x3601*x3605))+((r10*x3607)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3604))+(((-1.0)*x3603*x3605))+((r00*x3607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3608 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3608.valid){
continue;
}
CheckValue<IkReal> x3609=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3608.value)+(((1.5707963267949)*(x3609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3610=IKcos(j4);
IkReal x3611=IKsin(j4);
IkReal x3612=(r11*sj5);
IkReal x3613=(r21*sj5);
IkReal x3614=(r01*sj5);
IkReal x3615=((1.0)*x3610);
IkReal x3616=((1.0)*x3611);
IkReal x3617=(cj5*x3610);
IkReal x3618=(cj5*x3611);
evalcond[0]=(((r22*x3611))+(((-1.0)*x3613*x3615))+((r20*x3617)));
evalcond[1]=((((-1.0)*x3613*x3616))+(((-1.0)*r22*x3615))+((r20*x3618)));
evalcond[2]=(cj0+((r02*x3611))+(((-1.0)*x3614*x3615))+((r00*x3617)));
evalcond[3]=(sj0+(((-1.0)*x3612*x3615))+((r10*x3617))+((r12*x3611)));
evalcond[4]=(cj0+(((-1.0)*x3612*x3616))+(((-1.0)*r12*x3615))+((r10*x3618)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3615))+(((-1.0)*x3614*x3616))+((r00*x3618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3619=((1.0)*sj5);
IkReal x3620=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x3619))+(((-1.0)*r11*x3620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x3619))+(((-1.0)*r01*x3620)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x3619))+(((-1.0)*r11*x3620))))+IKsqr(((((-1.0)*r00*x3619))+(((-1.0)*r01*x3620))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x3619))+(((-1.0)*r11*x3620))), ((((-1.0)*r00*x3619))+(((-1.0)*r01*x3620))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3621=IKsin(j0);
IkReal x3622=IKcos(j0);
IkReal x3623=(r00*sj5);
IkReal x3624=(r10*sj5);
IkReal x3625=(cj5*r11);
IkReal x3626=(cj5*r01);
evalcond[0]=(x3623+x3622+x3626);
evalcond[1]=(x3621+x3625+x3624);
evalcond[2]=((((-0.1091)*x3621))+(((-1.0)*px))+(((0.0946)*x3626))+(((0.0946)*x3623)));
evalcond[3]=((((-1.0)*py))+(((0.1091)*x3622))+(((0.0946)*x3624))+(((0.0946)*x3625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3627=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3627;
j4eval[1]=IKsign(x3627);
j4eval[2]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3628=((1.0)*sj5);
IkReal x3629=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3628)));
j4eval[0]=x3629;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x3628))+((cj5*r00))))));
j4eval[2]=IKsign(x3629);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3630=cj5*cj5;
IkReal x3631=(r01*r11);
IkReal x3632=(cj5*sj5);
IkReal x3633=(((r01*r10*x3632))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x3630))+(((-1.0)*x3631))+((x3630*x3631))+((r00*r11*x3632)));
j4eval[0]=x3633;
j4eval[1]=IKsign(x3633);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3634=cj5*cj5;
IkReal x3635=(r01*r11);
IkReal x3636=(cj5*sj5);
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
CheckValue<IkReal> x3638=IKPowWithIntegerCheck(IKsign((((r01*r10*x3636))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x3634))+((x3634*x3635))+(((-1.0)*x3635))+((r00*r11*x3636)))),-1);
if(!x3638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3637.value)+(((1.5707963267949)*(x3638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3639=IKcos(j4);
IkReal x3640=IKsin(j4);
IkReal x3641=(r11*sj5);
IkReal x3642=(r21*sj5);
IkReal x3643=(cj5*r20);
IkReal x3644=(cj5*r00);
IkReal x3645=(r01*sj5);
IkReal x3646=(cj5*r10);
IkReal x3647=((1.0)*x3639);
IkReal x3648=((1.0)*x3640);
evalcond[0]=((((-1.0)*x3645*x3647))+((x3639*x3644))+((r02*x3640)));
evalcond[1]=(((r12*x3640))+((x3639*x3646))+(((-1.0)*x3641*x3647)));
evalcond[2]=((((-1.0)*r22*x3647))+(((-1.0)*x3642*x3648))+((x3640*x3643)));
evalcond[3]=((1.0)+((x3639*x3643))+((r22*x3640))+(((-1.0)*x3642*x3647)));
evalcond[4]=(cj0+(((-1.0)*r12*x3647))+((x3640*x3646))+(((-1.0)*x3641*x3648)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3645*x3648))+(((-1.0)*r02*x3647))+((x3640*x3644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3649=((1.0)*sj5);
CheckValue<IkReal> x3650 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x3649))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3650.valid){
continue;
}
CheckValue<IkReal> x3651=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3649)))),-1);
if(!x3651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3650.value)+(((1.5707963267949)*(x3651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3652=IKcos(j4);
IkReal x3653=IKsin(j4);
IkReal x3654=(r11*sj5);
IkReal x3655=(r21*sj5);
IkReal x3656=(cj5*r20);
IkReal x3657=(cj5*r00);
IkReal x3658=(r01*sj5);
IkReal x3659=(cj5*r10);
IkReal x3660=((1.0)*x3652);
IkReal x3661=((1.0)*x3653);
evalcond[0]=(((x3652*x3657))+(((-1.0)*x3658*x3660))+((r02*x3653)));
evalcond[1]=(((r12*x3653))+((x3652*x3659))+(((-1.0)*x3654*x3660)));
evalcond[2]=(((x3653*x3656))+(((-1.0)*x3655*x3661))+(((-1.0)*r22*x3660)));
evalcond[3]=((1.0)+((x3652*x3656))+(((-1.0)*x3655*x3660))+((r22*x3653)));
evalcond[4]=(((x3653*x3659))+cj0+(((-1.0)*x3654*x3661))+(((-1.0)*r12*x3660)));
evalcond[5]=(((x3653*x3657))+(((-1.0)*sj0))+(((-1.0)*r02*x3660))+(((-1.0)*x3658*x3661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3662 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3662.valid){
continue;
}
CheckValue<IkReal> x3663=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3662.value)+(((1.5707963267949)*(x3663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3664=IKcos(j4);
IkReal x3665=IKsin(j4);
IkReal x3666=(r11*sj5);
IkReal x3667=(r21*sj5);
IkReal x3668=(cj5*r20);
IkReal x3669=(cj5*r00);
IkReal x3670=(r01*sj5);
IkReal x3671=(cj5*r10);
IkReal x3672=((1.0)*x3664);
IkReal x3673=((1.0)*x3665);
evalcond[0]=((((-1.0)*x3670*x3672))+((x3664*x3669))+((r02*x3665)));
evalcond[1]=(((x3664*x3671))+((r12*x3665))+(((-1.0)*x3666*x3672)));
evalcond[2]=((((-1.0)*r22*x3672))+(((-1.0)*x3667*x3673))+((x3665*x3668)));
evalcond[3]=((1.0)+((r22*x3665))+((x3664*x3668))+(((-1.0)*x3667*x3672)));
evalcond[4]=(cj0+(((-1.0)*r12*x3672))+(((-1.0)*x3666*x3673))+((x3665*x3671)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3670*x3673))+(((-1.0)*r02*x3672))+((x3665*x3669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.3665904051715)*py))+(((-0.658324867935265)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.3665904051715)*px))+(((0.658324867935265)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.3665904051715)*py))+(((-0.658324867935265)*px))))+IKsqr(((((2.3665904051715)*px))+(((0.658324867935265)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.3665904051715)*py))+(((-0.658324867935265)*px))), ((((2.3665904051715)*px))+(((0.658324867935265)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3674=IKsin(j0);
IkReal x3675=IKcos(j0);
evalcond[0]=((((0.3922)*x3675))+(((-1.0)*px))+(((-0.1091)*x3674)));
evalcond[1]=((((0.1091)*x3675))+(((0.3922)*x3674))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3676=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3676;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x3676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3677=((1.0)*sj5);
IkReal x3678=((((-1.0)*r00*x3677))+(((-1.0)*cj5*r01)));
j4eval[0]=x3678;
j4eval[1]=IKsign(x3678);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3677))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3679=cj5*cj5;
IkReal x3680=((1.0)*r21);
IkReal x3681=(cj5*r20);
IkReal x3682=((((-1.0)*r02*r22))+((r01*r21*x3679))+((r01*sj5*x3681))+(((-1.0)*r01*x3680))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x3679)));
j4eval[0]=x3682;
j4eval[1]=IKsign(x3682);
j4eval[2]=((IKabs((((cj0*x3681))+(((-1.0)*cj0*sj5*x3680)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3683=cj5*cj5;
IkReal x3684=((1.0)*r21);
IkReal x3685=(cj5*r20);
CheckValue<IkReal> x3686=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x3685))+(((-1.0)*r00*r20*x3683))+(((-1.0)*r01*x3684))+((cj5*r00*r21*sj5))+((r01*r21*x3683)))),-1);
if(!x3686.valid){
continue;
}
CheckValue<IkReal> x3687 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3685))+(((-1.0)*cj0*sj5*x3684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3686.value)))+(x3687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3688=IKcos(j4);
IkReal x3689=IKsin(j4);
IkReal x3690=(r11*sj5);
IkReal x3691=(r21*sj5);
IkReal x3692=(r01*sj5);
IkReal x3693=((1.0)*x3688);
IkReal x3694=((1.0)*x3689);
IkReal x3695=(cj5*x3688);
IkReal x3696=(cj5*x3689);
evalcond[0]=(((r20*x3695))+((r22*x3689))+(((-1.0)*x3691*x3693)));
evalcond[1]=(((r20*x3696))+(((-1.0)*r22*x3693))+(((-1.0)*x3691*x3694)));
evalcond[2]=(((r00*x3695))+cj0+((r02*x3689))+(((-1.0)*x3692*x3693)));
evalcond[3]=(sj0+((r12*x3689))+(((-1.0)*x3690*x3693))+((r10*x3695)));
evalcond[4]=(cj0+(((-1.0)*r12*x3693))+(((-1.0)*x3690*x3694))+((r10*x3696)));
evalcond[5]=(((r00*x3696))+(((-1.0)*sj0))+(((-1.0)*r02*x3693))+(((-1.0)*x3692*x3694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3697=((1.0)*sj5);
CheckValue<IkReal> x3698=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x3697)))),-1);
if(!x3698.valid){
continue;
}
CheckValue<IkReal> x3699 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x3697)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3698.value)))+(x3699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3700=IKcos(j4);
IkReal x3701=IKsin(j4);
IkReal x3702=(r11*sj5);
IkReal x3703=(r21*sj5);
IkReal x3704=(r01*sj5);
IkReal x3705=((1.0)*x3700);
IkReal x3706=((1.0)*x3701);
IkReal x3707=(cj5*x3700);
IkReal x3708=(cj5*x3701);
evalcond[0]=(((r20*x3707))+(((-1.0)*x3703*x3705))+((r22*x3701)));
evalcond[1]=(((r20*x3708))+(((-1.0)*x3703*x3706))+(((-1.0)*r22*x3705)));
evalcond[2]=(cj0+(((-1.0)*x3704*x3705))+((r00*x3707))+((r02*x3701)));
evalcond[3]=(((r12*x3701))+sj0+((r10*x3707))+(((-1.0)*x3702*x3705)));
evalcond[4]=(cj0+((r10*x3708))+(((-1.0)*r12*x3705))+(((-1.0)*x3702*x3706)));
evalcond[5]=((((-1.0)*r02*x3705))+(((-1.0)*sj0))+(((-1.0)*x3704*x3706))+((r00*x3708)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3709 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3709.valid){
continue;
}
CheckValue<IkReal> x3710=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3709.value)+(((1.5707963267949)*(x3710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3711=IKcos(j4);
IkReal x3712=IKsin(j4);
IkReal x3713=(r11*sj5);
IkReal x3714=(r21*sj5);
IkReal x3715=(r01*sj5);
IkReal x3716=((1.0)*x3711);
IkReal x3717=((1.0)*x3712);
IkReal x3718=(cj5*x3711);
IkReal x3719=(cj5*x3712);
evalcond[0]=((((-1.0)*x3714*x3716))+((r20*x3718))+((r22*x3712)));
evalcond[1]=((((-1.0)*x3714*x3717))+((r20*x3719))+(((-1.0)*r22*x3716)));
evalcond[2]=(cj0+(((-1.0)*x3715*x3716))+((r00*x3718))+((r02*x3712)));
evalcond[3]=((((-1.0)*x3713*x3716))+sj0+((r12*x3712))+((r10*x3718)));
evalcond[4]=((((-1.0)*x3713*x3717))+cj0+(((-1.0)*r12*x3716))+((r10*x3719)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3716))+(((-1.0)*x3715*x3717))+((r00*x3719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3720=IKsin(j0);
IkReal x3721=IKcos(j0);
IkReal x3722=(r00*sj5);
IkReal x3723=(r10*sj5);
IkReal x3724=(cj5*r11);
IkReal x3725=(cj5*r01);
evalcond[0]=(x3725+x3722+(((-1.0)*x3721)));
evalcond[1]=(x3724+x3723+(((-1.0)*x3720)));
evalcond[2]=((((0.0946)*x3722))+(((0.0946)*x3725))+(((-0.1091)*x3720))+(((-1.0)*px)));
evalcond[3]=((((0.0946)*x3723))+(((0.0946)*x3724))+(((-1.0)*py))+(((0.1091)*x3721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3726=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3726;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x3726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3727=((1.0)*sj5);
IkReal x3728=((((-1.0)*r00*x3727))+(((-1.0)*cj5*r01)));
j4eval[0]=x3728;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x3727)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3728);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3729=cj5*cj5;
IkReal x3730=(r01*r11);
IkReal x3731=(cj5*sj5);
IkReal x3732=(((r01*r10*x3731))+((x3729*x3730))+(((-1.0)*r02*r12))+(((-1.0)*x3730))+(((-1.0)*r00*r10*x3729))+((r00*r11*x3731)));
j4eval[0]=x3732;
j4eval[1]=IKsign(x3732);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3733=cj5*cj5;
IkReal x3734=(r01*r11);
IkReal x3735=(cj5*sj5);
CheckValue<IkReal> x3736=IKPowWithIntegerCheck(IKsign((((r01*r10*x3735))+((x3733*x3734))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x3733))+(((-1.0)*x3734))+((r00*r11*x3735)))),-1);
if(!x3736.valid){
continue;
}
CheckValue<IkReal> x3737 = IKatan2WithCheck(IkReal((((cj0*cj5*r00))+(((-1.0)*cj0*r01*sj5)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3736.value)))+(x3737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3738=IKcos(j4);
IkReal x3739=IKsin(j4);
IkReal x3740=(r11*sj5);
IkReal x3741=(r21*sj5);
IkReal x3742=(cj5*r20);
IkReal x3743=(cj5*r00);
IkReal x3744=(r01*sj5);
IkReal x3745=(cj5*r10);
IkReal x3746=((1.0)*x3738);
IkReal x3747=((1.0)*x3739);
evalcond[0]=(((r02*x3739))+(((-1.0)*x3744*x3746))+((x3738*x3743)));
evalcond[1]=((((-1.0)*x3740*x3746))+((r12*x3739))+((x3738*x3745)));
evalcond[2]=((((-1.0)*r22*x3746))+(((-1.0)*x3741*x3747))+((x3739*x3742)));
evalcond[3]=((-1.0)+((r22*x3739))+(((-1.0)*x3741*x3746))+((x3738*x3742)));
evalcond[4]=(cj0+(((-1.0)*x3740*x3747))+(((-1.0)*r12*x3746))+((x3739*x3745)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3744*x3747))+(((-1.0)*r02*x3746))+((x3739*x3743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3748=((1.0)*sj5);
CheckValue<IkReal> x3749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x3748))+(((-1.0)*cj5*r01)))),-1);
if(!x3749.valid){
continue;
}
CheckValue<IkReal> x3750 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x3748)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3749.value)))+(x3750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3751=IKcos(j4);
IkReal x3752=IKsin(j4);
IkReal x3753=(r11*sj5);
IkReal x3754=(r21*sj5);
IkReal x3755=(cj5*r20);
IkReal x3756=(cj5*r00);
IkReal x3757=(r01*sj5);
IkReal x3758=(cj5*r10);
IkReal x3759=((1.0)*x3751);
IkReal x3760=((1.0)*x3752);
evalcond[0]=(((x3751*x3756))+((r02*x3752))+(((-1.0)*x3757*x3759)));
evalcond[1]=(((x3751*x3758))+(((-1.0)*x3753*x3759))+((r12*x3752)));
evalcond[2]=((((-1.0)*r22*x3759))+(((-1.0)*x3754*x3760))+((x3752*x3755)));
evalcond[3]=((-1.0)+((x3751*x3755))+((r22*x3752))+(((-1.0)*x3754*x3759)));
evalcond[4]=(cj0+(((-1.0)*r12*x3759))+((x3752*x3758))+(((-1.0)*x3753*x3760)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3757*x3760))+((x3752*x3756))+(((-1.0)*r02*x3759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3761 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x3761.valid){
continue;
}
CheckValue<IkReal> x3762=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3761.value)+(((1.5707963267949)*(x3762.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3763=IKcos(j4);
IkReal x3764=IKsin(j4);
IkReal x3765=(r11*sj5);
IkReal x3766=(r21*sj5);
IkReal x3767=(cj5*r20);
IkReal x3768=(cj5*r00);
IkReal x3769=(r01*sj5);
IkReal x3770=(cj5*r10);
IkReal x3771=((1.0)*x3763);
IkReal x3772=((1.0)*x3764);
evalcond[0]=(((r02*x3764))+(((-1.0)*x3769*x3771))+((x3763*x3768)));
evalcond[1]=((((-1.0)*x3765*x3771))+((r12*x3764))+((x3763*x3770)));
evalcond[2]=((((-1.0)*r22*x3771))+(((-1.0)*x3766*x3772))+((x3764*x3767)));
evalcond[3]=((-1.0)+((r22*x3764))+((x3763*x3767))+(((-1.0)*x3766*x3771)));
evalcond[4]=(cj0+(((-1.0)*x3765*x3772))+((x3764*x3770))+(((-1.0)*r12*x3771)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3771))+(((-1.0)*x3769*x3772))+((x3764*x3768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658324867935265)*px))+(((-2.3665904051715)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658324867935265)*py))+(((-2.3665904051715)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658324867935265)*px))+(((-2.3665904051715)*py))))+IKsqr(((((0.658324867935265)*py))+(((-2.3665904051715)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658324867935265)*px))+(((-2.3665904051715)*py))), ((((0.658324867935265)*py))+(((-2.3665904051715)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3773=IKcos(j0);
IkReal x3774=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.3922)*x3773))+(((-0.1091)*x3774)));
evalcond[1]=((((0.1091)*x3773))+(((-1.0)*py))+(((-0.3922)*x3774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3775=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3775;
j4eval[1]=IKsign(x3775);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3776=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3776;
j4eval[1]=IKsign(x3776);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3777=((1.0)*sj5);
IkReal x3778=((((-1.0)*cj5*r11))+(((-1.0)*r10*x3777)));
j4eval[0]=x3778;
j4eval[1]=IKsign(x3778);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3777)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3779=((1.0)*sj5);
CheckValue<IkReal> x3780 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x3779)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3780.valid){
continue;
}
CheckValue<IkReal> x3781=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x3779)))),-1);
if(!x3781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3780.value)+(((1.5707963267949)*(x3781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3782=IKcos(j4);
IkReal x3783=IKsin(j4);
IkReal x3784=((1.0)*sj0);
IkReal x3785=(r11*sj5);
IkReal x3786=(r21*sj5);
IkReal x3787=(r01*sj5);
IkReal x3788=((1.0)*x3782);
IkReal x3789=((1.0)*x3783);
IkReal x3790=(cj5*x3782);
IkReal x3791=(cj5*x3783);
evalcond[0]=(((r22*x3783))+(((-1.0)*x3786*x3788))+((r20*x3790)));
evalcond[1]=((((-1.0)*r22*x3788))+(((-1.0)*x3786*x3789))+((r20*x3791)));
evalcond[2]=(cj0+((r10*x3791))+(((-1.0)*r12*x3788))+(((-1.0)*x3785*x3789)));
evalcond[3]=(((r02*x3783))+((r00*x3790))+(((-1.0)*x3787*x3788))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3783))+((r10*x3790))+(((-1.0)*x3784))+(((-1.0)*x3785*x3788)));
evalcond[5]=((((-1.0)*r02*x3788))+(((-1.0)*x3784))+((r00*x3791))+(((-1.0)*x3787*x3789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3792 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3792.valid){
continue;
}
CheckValue<IkReal> x3793=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3792.value)+(((1.5707963267949)*(x3793.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3794=IKcos(j4);
IkReal x3795=IKsin(j4);
IkReal x3796=((1.0)*sj0);
IkReal x3797=(r11*sj5);
IkReal x3798=(r21*sj5);
IkReal x3799=(r01*sj5);
IkReal x3800=((1.0)*x3794);
IkReal x3801=((1.0)*x3795);
IkReal x3802=(cj5*x3794);
IkReal x3803=(cj5*x3795);
evalcond[0]=(((r22*x3795))+((r20*x3802))+(((-1.0)*x3798*x3800)));
evalcond[1]=(((r20*x3803))+(((-1.0)*x3798*x3801))+(((-1.0)*r22*x3800)));
evalcond[2]=(cj0+(((-1.0)*x3797*x3801))+((r10*x3803))+(((-1.0)*r12*x3800)));
evalcond[3]=(((r00*x3802))+((r02*x3795))+(((-1.0)*x3799*x3800))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3796))+(((-1.0)*x3797*x3800))+((r10*x3802))+((r12*x3795)));
evalcond[5]=((((-1.0)*x3796))+((r00*x3803))+(((-1.0)*r02*x3800))+(((-1.0)*x3799*x3801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3804 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3804.valid){
continue;
}
CheckValue<IkReal> x3805=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3804.value)+(((1.5707963267949)*(x3805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3806=IKcos(j4);
IkReal x3807=IKsin(j4);
IkReal x3808=((1.0)*sj0);
IkReal x3809=(r11*sj5);
IkReal x3810=(r21*sj5);
IkReal x3811=(r01*sj5);
IkReal x3812=((1.0)*x3806);
IkReal x3813=((1.0)*x3807);
IkReal x3814=(cj5*x3806);
IkReal x3815=(cj5*x3807);
evalcond[0]=(((r22*x3807))+(((-1.0)*x3810*x3812))+((r20*x3814)));
evalcond[1]=((((-1.0)*r22*x3812))+(((-1.0)*x3810*x3813))+((r20*x3815)));
evalcond[2]=((((-1.0)*r12*x3812))+cj0+(((-1.0)*x3809*x3813))+((r10*x3815)));
evalcond[3]=(((r02*x3807))+(((-1.0)*x3811*x3812))+(((-1.0)*cj0))+((r00*x3814)));
evalcond[4]=(((r12*x3807))+(((-1.0)*x3808))+(((-1.0)*x3809*x3812))+((r10*x3814)));
evalcond[5]=((((-1.0)*r02*x3812))+(((-1.0)*x3808))+(((-1.0)*x3811*x3813))+((r00*x3815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3816=cj1*cj1;
IkReal x3817=(r00*sj5);
IkReal x3818=(cj2*sj1);
IkReal x3819=((10000.0)*py);
IkReal x3820=(cj1*sj2);
IkReal x3821=(cj5*r01);
IkReal x3822=(cj2*sj2);
IkReal x3823=(cj1*sj1);
IkReal x3824=((946.0)*cj5*r11);
IkReal x3825=((946.0)*r10*sj5);
CheckValue<IkReal> x3826=IKPowWithIntegerCheck(((((-7844.0)*x3816*x3822))+(((-4250.0)*cj1*x3818))+(((-7844.0)*cj1*cj2*x3818))+(((3922.0)*x3822))+(((3922.0)*x3823))+(((-4250.0)*sj2*x3816))),-1);
if(!x3826.valid){
continue;
}
CheckValue<IkReal> x3827=IKPowWithIntegerCheck(((((-1.0)*x3820))+(((-1.0)*x3818))),-1);
if(!x3827.valid){
continue;
}
if( IKabs(((x3826.value)*((((x3820*x3824))+((x3820*x3825))+((x3818*x3824))+((x3818*x3825))+(((1091.0)*x3817))+(((1091.0)*x3821))+(((-1.0)*x3819*x3820))+(((-1.0)*x3818*x3819)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3827.value)*(((((-1.0)*x3821))+(((-1.0)*x3817)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3826.value)*((((x3820*x3824))+((x3820*x3825))+((x3818*x3824))+((x3818*x3825))+(((1091.0)*x3817))+(((1091.0)*x3821))+(((-1.0)*x3819*x3820))+(((-1.0)*x3818*x3819))))))+IKsqr(((x3827.value)*(((((-1.0)*x3821))+(((-1.0)*x3817))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3826.value)*((((x3820*x3824))+((x3820*x3825))+((x3818*x3824))+((x3818*x3825))+(((1091.0)*x3817))+(((1091.0)*x3821))+(((-1.0)*x3819*x3820))+(((-1.0)*x3818*x3819))))), ((x3827.value)*(((((-1.0)*x3821))+(((-1.0)*x3817))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3828=IKcos(j0);
IkReal x3829=IKsin(j0);
IkReal x3830=(cj5*r01);
IkReal x3831=((0.425)*cj1);
IkReal x3832=(cj5*r11);
IkReal x3833=((1.0)*cj2);
IkReal x3834=(cj1*cj2);
IkReal x3835=(r00*sj5);
IkReal x3836=(r10*sj5);
IkReal x3837=((1.0)*cj1*sj2);
IkReal x3838=(sj1*x3828);
IkReal x3839=((0.3922)*x3829);
evalcond[0]=((((-1.0)*x3828*x3837))+(((-1.0)*x3833*x3838))+x3835+x3830);
evalcond[1]=((((-1.0)*x3829*x3837))+x3836+x3832+(((-1.0)*sj1*x3829*x3833)));
evalcond[2]=(((x3828*x3831))+(((-0.1091)*x3829))+(((-1.0)*px))+(((0.0946)*x3835))+(((0.0946)*x3830))+(((-0.3922)*sj2*x3838))+(((0.3922)*x3828*x3834)));
evalcond[3]=((((-1.0)*sj1*sj2*x3839))+((x3834*x3839))+((x3829*x3831))+(((-1.0)*py))+(((0.0946)*x3832))+(((0.0946)*x3836))+(((0.1091)*x3828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3840=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3840;
j4eval[1]=IKsign(x3840);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3841=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3841;
j4eval[1]=IKsign(x3841);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x3842=((1.0)*sj0);
IkReal x3843=((1.0)*cj0);
IkReal x3844=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3844;
j4eval[1]=IKsign(x3844);
j4eval[2]=((IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x3843))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x3842)))))+(IKabs(((((-1.0)*r02*x3843))+(((-1.0)*r12*x3842))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3846 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3846)==0){
continue;
}
IkReal x3845=pow(x3846,-0.5);
CheckValue<IkReal> x3847 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3847.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3847.value));
IkReal gconst97=((-1.0)*r21*x3845);
IkReal gconst98=(r20*x3845);
CheckValue<IkReal> x3848 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3848.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3848.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3851 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3851.valid){
continue;
}
IkReal x3849=((-1.0)*(x3851.value));
IkReal x3850=x3845;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3849;
IkReal gconst96=x3849;
IkReal gconst97=((-1.0)*r21*x3850);
IkReal gconst98=(r20*x3850);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3854 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3854.valid){
continue;
}
IkReal x3852=((-1.0)*(x3854.value));
IkReal x3853=x3845;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3852;
IkReal gconst96=x3852;
IkReal gconst97=((-1.0)*r21*x3853);
IkReal gconst98=(r20*x3853);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x3857 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3857.valid){
continue;
}
IkReal x3855=((-1.0)*(x3857.value));
IkReal x3856=x3845;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x3855;
IkReal gconst96=x3855;
IkReal gconst97=((-1.0)*r21*x3856);
IkReal gconst98=(r20*x3856);
IkReal x3858=((1.0)*(r22*r22));
CheckValue<IkReal> x3862=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3858))),-1);
if(!x3862.valid){
continue;
}
IkReal x3859=x3862.value;
IkReal x3860=((1.0)*x3859);
IkReal x3861=((((-1.0)*x3858))+(((-1.0)*x3860*(r21*r21*r21*r21)))+(((-1.0)*x3860*(r20*r20*r20*r20)))+(((-2.0)*x3859*(r20*r20)*(r21*r21))));
j4eval[0]=x3861;
j4eval[1]=IKsign(x3861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3863=(cj1*sj2);
IkReal x3864=((1.0)*r22);
IkReal x3865=(gconst97*r21);
IkReal x3866=(cj2*sj1);
IkReal x3867=(gconst98*r20);
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3867*x3867)))+(((2.0)*x3865*x3867))+(((-1.0)*(x3865*x3865)))+(((-1.0)*r22*x3864)))),-1);
if(!x3868.valid){
continue;
}
CheckValue<IkReal> x3869 = IKatan2WithCheck(IkReal(((((-1.0)*x3864*x3866))+(((-1.0)*x3863*x3864)))),IkReal((((x3865*x3866))+(((-1.0)*x3866*x3867))+((x3863*x3865))+(((-1.0)*x3863*x3867)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3868.value)))+(x3869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3870=IKsin(j4);
IkReal x3871=IKcos(j4);
IkReal x3872=(gconst98*r00);
IkReal x3873=(cj1*cj2);
IkReal x3874=((1.0)*sj1);
IkReal x3875=((1.0)*x3871);
IkReal x3876=(gconst98*x3870);
IkReal x3877=(gconst98*x3871);
IkReal x3878=((1.0)*gconst97*x3870);
evalcond[0]=(((r20*x3876))+(((-1.0)*r22*x3875))+(((-1.0)*r21*x3878)));
evalcond[1]=(cj0+(((-1.0)*r12*x3875))+(((-1.0)*r11*x3878))+((r10*x3876)));
evalcond[2]=((((-1.0)*sj0))+((x3870*x3872))+(((-1.0)*r02*x3875))+(((-1.0)*r01*x3878)));
evalcond[3]=((((-1.0)*gconst97*r21*x3875))+((r20*x3877))+(((-1.0)*cj1*sj2))+((r22*x3870))+(((-1.0)*cj2*x3874)));
evalcond[4]=(((x3871*x3872))+(((-1.0)*cj0*sj2*x3874))+(((-1.0)*gconst97*r01*x3875))+((r02*x3870))+((cj0*x3873)));
evalcond[5]=((((-1.0)*sj0*sj2*x3874))+(((-1.0)*gconst97*r11*x3875))+((sj0*x3873))+((r10*x3877))+((r12*x3870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3879 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*gconst97*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3879.valid){
continue;
}
CheckValue<IkReal> x3880=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x3880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3879.value)+(((1.5707963267949)*(x3880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3881=IKsin(j4);
IkReal x3882=IKcos(j4);
IkReal x3883=(gconst98*r00);
IkReal x3884=(cj1*cj2);
IkReal x3885=((1.0)*sj1);
IkReal x3886=((1.0)*x3882);
IkReal x3887=(gconst98*x3881);
IkReal x3888=(gconst98*x3882);
IkReal x3889=((1.0)*gconst97*x3881);
evalcond[0]=((((-1.0)*r22*x3886))+(((-1.0)*r21*x3889))+((r20*x3887)));
evalcond[1]=(cj0+((r10*x3887))+(((-1.0)*r12*x3886))+(((-1.0)*r11*x3889)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3886))+(((-1.0)*r01*x3889))+((x3881*x3883)));
evalcond[3]=(((r22*x3881))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3885))+((r20*x3888))+(((-1.0)*gconst97*r21*x3886)));
evalcond[4]=(((x3882*x3883))+(((-1.0)*cj0*sj2*x3885))+((cj0*x3884))+((r02*x3881))+(((-1.0)*gconst97*r01*x3886)));
evalcond[5]=(((sj0*x3884))+((r10*x3888))+((r12*x3881))+(((-1.0)*gconst97*r11*x3886))+(((-1.0)*sj0*sj2*x3885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3890=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x3890.valid){
continue;
}
CheckValue<IkReal> x3891 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3890.value)))+(x3891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3892=IKsin(j4);
IkReal x3893=IKcos(j4);
IkReal x3894=(gconst98*r00);
IkReal x3895=(cj1*cj2);
IkReal x3896=((1.0)*sj1);
IkReal x3897=((1.0)*x3893);
IkReal x3898=(gconst98*x3892);
IkReal x3899=(gconst98*x3893);
IkReal x3900=((1.0)*gconst97*x3892);
evalcond[0]=(((r20*x3898))+(((-1.0)*r22*x3897))+(((-1.0)*r21*x3900)));
evalcond[1]=(((r10*x3898))+cj0+(((-1.0)*r12*x3897))+(((-1.0)*r11*x3900)));
evalcond[2]=((((-1.0)*sj0))+((x3892*x3894))+(((-1.0)*r01*x3900))+(((-1.0)*r02*x3897)));
evalcond[3]=(((r20*x3899))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst97*r21*x3897))+(((-1.0)*cj2*x3896))+((r22*x3892)));
evalcond[4]=((((-1.0)*gconst97*r01*x3897))+((cj0*x3895))+((x3893*x3894))+(((-1.0)*cj0*sj2*x3896))+((r02*x3892)));
evalcond[5]=((((-1.0)*gconst97*r11*x3897))+((r10*x3899))+((sj0*x3895))+((r12*x3892))+(((-1.0)*sj0*sj2*x3896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3902 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3902)==0){
continue;
}
IkReal x3901=pow(x3902,-0.5);
CheckValue<IkReal> x3903 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3903.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3903.value))));
IkReal gconst100=((1.0)*r21*x3901);
IkReal gconst101=((-1.0)*r20*x3901);
CheckValue<IkReal> x3904 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3904.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x3907 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3907.valid){
continue;
}
IkReal x3905=((1.0)*(x3907.value));
IkReal x3906=x3901;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3905)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3905)));
IkReal gconst100=((1.0)*r21*x3906);
IkReal gconst101=((-1.0)*r20*x3906);
IkReal x3908=r22*r22;
IkReal x3909=((1.0)*x3908);
CheckValue<IkReal> x3913=IKPowWithIntegerCheck(((-1.0)+x3908),-1);
if(!x3913.valid){
continue;
}
IkReal x3910=x3913.value;
if((((1.0)+(((-1.0)*x3909)))) < -0.00001)
continue;
IkReal x3911=IKsqrt(((1.0)+(((-1.0)*x3909))));
IkReal x3912=(cj0*x3910*x3911);
j4eval[0]=((IKabs(((((-1.0)*x3909*x3912))+x3912)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x3916 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3916.valid){
continue;
}
IkReal x3914=((1.0)*(x3916.value));
IkReal x3915=x3901;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3914)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3914)));
IkReal gconst100=((1.0)*r21*x3915);
IkReal gconst101=((-1.0)*r20*x3915);
IkReal x3917=r22*r22;
IkReal x3918=((1.0)*x3917);
CheckValue<IkReal> x3922=IKPowWithIntegerCheck(((-1.0)+x3917),-1);
if(!x3922.valid){
continue;
}
IkReal x3919=x3922.value;
if((((1.0)+(((-1.0)*x3918)))) < -0.00001)
continue;
IkReal x3920=IKsqrt(((1.0)+(((-1.0)*x3918))));
IkReal x3921=(sj0*x3919*x3920);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3918*x3921))+x3921))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x3925 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x3925.valid){
continue;
}
IkReal x3923=((1.0)*(x3925.value));
IkReal x3924=x3901;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3923)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3923)));
IkReal gconst100=((1.0)*r21*x3924);
IkReal gconst101=((-1.0)*r20*x3924);
IkReal x3926=r22*r22;
IkReal x3927=(r12*sj0);
IkReal x3928=(cj0*r02);
CheckValue<IkReal> x3932=IKPowWithIntegerCheck(((-1.0)+x3926),-1);
if(!x3932.valid){
continue;
}
IkReal x3929=x3932.value;
if((((1.0)+(((-1.0)*x3926)))) < -0.00001)
continue;
IkReal x3930=IKsqrt(((1.0)+(((-1.0)*x3926))));
IkReal x3931=(r22*x3929*x3930);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x3927))+(((-1.0)*x3928)))))+(IKabs((((x3928*x3931))+((x3927*x3931))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3933=((1.0)*sj0);
IkReal x3934=((1.0)*cj0);
CheckValue<IkReal> x3935 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3934))+(((-1.0)*r12*x3933)))),IkReal(((((-1.0)*gconst101*r10*x3933))+(((-1.0)*gconst101*r00*x3934))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3935.valid){
continue;
}
CheckValue<IkReal> x3936=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x3936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3935.value)+(((1.5707963267949)*(x3936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3937=IKsin(j4);
IkReal x3938=IKcos(j4);
IkReal x3939=(cj1*cj2);
IkReal x3940=(gconst101*r10);
IkReal x3941=((1.0)*sj1);
IkReal x3942=((1.0)*x3938);
IkReal x3943=(gconst101*x3938);
IkReal x3944=(gconst101*x3937);
IkReal x3945=((1.0)*gconst100*x3937);
evalcond[0]=(((r20*x3944))+(((-1.0)*r22*x3942))+(((-1.0)*r21*x3945)));
evalcond[1]=(cj0+((x3937*x3940))+(((-1.0)*r11*x3945))+(((-1.0)*r12*x3942)));
evalcond[2]=((((-1.0)*sj0))+((r00*x3944))+(((-1.0)*r01*x3945))+(((-1.0)*r02*x3942)));
evalcond[3]=(((r22*x3937))+(((-1.0)*cj1*sj2))+((r20*x3943))+(((-1.0)*cj2*x3941))+(((-1.0)*gconst100*r21*x3942)));
evalcond[4]=(((r00*x3943))+((cj0*x3939))+(((-1.0)*gconst100*r01*x3942))+(((-1.0)*cj0*sj2*x3941))+((r02*x3937)));
evalcond[5]=(((sj0*x3939))+((x3938*x3940))+(((-1.0)*sj0*sj2*x3941))+((r12*x3937))+(((-1.0)*gconst100*r11*x3942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3946=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x3946.valid){
continue;
}
CheckValue<IkReal> x3947 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst100*r21*sj0))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3946.value)))+(x3947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3948=IKsin(j4);
IkReal x3949=IKcos(j4);
IkReal x3950=(cj1*cj2);
IkReal x3951=(gconst101*r10);
IkReal x3952=((1.0)*sj1);
IkReal x3953=((1.0)*x3949);
IkReal x3954=(gconst101*x3949);
IkReal x3955=(gconst101*x3948);
IkReal x3956=((1.0)*gconst100*x3948);
evalcond[0]=(((r20*x3955))+(((-1.0)*r22*x3953))+(((-1.0)*r21*x3956)));
evalcond[1]=(cj0+((x3948*x3951))+(((-1.0)*r12*x3953))+(((-1.0)*r11*x3956)));
evalcond[2]=((((-1.0)*sj0))+((r00*x3955))+(((-1.0)*r01*x3956))+(((-1.0)*r02*x3953)));
evalcond[3]=(((r22*x3948))+((r20*x3954))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3952))+(((-1.0)*gconst100*r21*x3953)));
evalcond[4]=((((-1.0)*cj0*sj2*x3952))+((r00*x3954))+((cj0*x3950))+(((-1.0)*gconst100*r01*x3953))+((r02*x3948)));
evalcond[5]=((((-1.0)*gconst100*r11*x3953))+((sj0*x3950))+((x3949*x3951))+(((-1.0)*sj0*sj2*x3952))+((r12*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3957=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x3957.valid){
continue;
}
CheckValue<IkReal> x3958 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst100*r21))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3957.value)))+(x3958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3959=IKsin(j4);
IkReal x3960=IKcos(j4);
IkReal x3961=(cj1*cj2);
IkReal x3962=(gconst101*r10);
IkReal x3963=((1.0)*sj1);
IkReal x3964=((1.0)*x3960);
IkReal x3965=(gconst101*x3960);
IkReal x3966=(gconst101*x3959);
IkReal x3967=((1.0)*gconst100*x3959);
evalcond[0]=((((-1.0)*r21*x3967))+(((-1.0)*r22*x3964))+((r20*x3966)));
evalcond[1]=(cj0+((x3959*x3962))+(((-1.0)*r12*x3964))+(((-1.0)*r11*x3967)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3964))+((r00*x3966))+(((-1.0)*r01*x3967)));
evalcond[3]=((((-1.0)*cj2*x3963))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst100*r21*x3964))+((r20*x3965))+((r22*x3959)));
evalcond[4]=((((-1.0)*gconst100*r01*x3964))+(((-1.0)*cj0*sj2*x3963))+((r00*x3965))+((r02*x3959))+((cj0*x3961)));
evalcond[5]=((((-1.0)*sj0*sj2*x3963))+((x3960*x3962))+(((-1.0)*gconst100*r11*x3964))+((r12*x3959))+((sj0*x3961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3969 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3969)==0){
continue;
}
IkReal x3968=pow(x3969,-0.5);
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3970.value));
IkReal gconst103=((-1.0)*r11*x3968);
IkReal gconst104=(r10*x3968);
CheckValue<IkReal> x3971 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3971.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3971.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal x3972=((-1.0)*(x3974.value));
IkReal x3973=x3968;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x3972;
IkReal gconst102=x3972;
IkReal gconst103=((-1.0)*r11*x3973);
IkReal gconst104=(r10*x3973);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3975=((1.0)*sj0);
IkReal x3976=((1.0)*cj0);
CheckValue<IkReal> x3977 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3975))+(((-1.0)*r02*x3976)))),IkReal(((((-1.0)*gconst104*r10*x3975))+((cj0*gconst103*r01))+(((-1.0)*gconst104*r00*x3976))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3977.valid){
continue;
}
CheckValue<IkReal> x3978=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x3978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3977.value)+(((1.5707963267949)*(x3978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3979=IKsin(j4);
IkReal x3980=IKcos(j4);
IkReal x3981=(cj1*cj2);
IkReal x3982=((1.0)*sj1);
IkReal x3983=((1.0)*x3980);
IkReal x3984=(gconst104*x3980);
IkReal x3985=(gconst104*x3979);
IkReal x3986=((1.0)*gconst103*x3979);
evalcond[0]=((((-1.0)*r22*x3983))+(((-1.0)*r21*x3986))+((r20*x3985)));
evalcond[1]=(((r10*x3985))+(((-1.0)*r12*x3983))+(((-1.0)*r11*x3986))+cj0);
evalcond[2]=((((-1.0)*sj0))+((r00*x3985))+(((-1.0)*r01*x3986))+(((-1.0)*r02*x3983)));
evalcond[3]=((((-1.0)*cj2*x3982))+(((-1.0)*cj1*sj2))+((r22*x3979))+((r20*x3984))+(((-1.0)*gconst103*r21*x3983)));
evalcond[4]=((((-1.0)*gconst103*r01*x3983))+((r02*x3979))+((r00*x3984))+((cj0*x3981))+(((-1.0)*cj0*sj2*x3982)));
evalcond[5]=(((r10*x3984))+(((-1.0)*sj0*sj2*x3982))+((sj0*x3981))+((r12*x3979))+(((-1.0)*gconst103*r11*x3983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst104*r20))+(((-1.0)*cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x3988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3987.value)+(((1.5707963267949)*(x3988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3989=IKsin(j4);
IkReal x3990=IKcos(j4);
IkReal x3991=(cj1*cj2);
IkReal x3992=((1.0)*sj1);
IkReal x3993=((1.0)*x3990);
IkReal x3994=(gconst104*x3990);
IkReal x3995=(gconst104*x3989);
IkReal x3996=((1.0)*gconst103*x3989);
evalcond[0]=((((-1.0)*r22*x3993))+(((-1.0)*r21*x3996))+((r20*x3995)));
evalcond[1]=(cj0+((r10*x3995))+(((-1.0)*r12*x3993))+(((-1.0)*r11*x3996)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x3993))+((r00*x3995))+(((-1.0)*r01*x3996)));
evalcond[3]=((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x3992))+((r22*x3989))+(((-1.0)*gconst103*r21*x3993))+((r20*x3994)));
evalcond[4]=((((-1.0)*cj0*sj2*x3992))+(((-1.0)*gconst103*r01*x3993))+((r00*x3994))+((r02*x3989))+((cj0*x3991)));
evalcond[5]=((((-1.0)*gconst103*r11*x3993))+((r10*x3994))+(((-1.0)*sj0*sj2*x3992))+((sj0*x3991))+((r12*x3989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3998 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3998)==0){
continue;
}
IkReal x3997=pow(x3998,-0.5);
CheckValue<IkReal> x3999 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x3999.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3999.value))));
IkReal gconst106=((1.0)*r11*x3997);
IkReal gconst107=((-1.0)*r10*x3997);
CheckValue<IkReal> x4000 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4000.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4000.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4003 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4003.valid){
continue;
}
IkReal x4001=((1.0)*(x4003.value));
IkReal x4002=x3997;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4001)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4001)));
IkReal gconst106=((1.0)*r11*x4002);
IkReal gconst107=((-1.0)*r10*x4002);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4006 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4006.valid){
continue;
}
IkReal x4004=((1.0)*(x4006.value));
IkReal x4005=x3997;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4004)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4004)));
IkReal gconst106=((1.0)*r11*x4005);
IkReal gconst107=((-1.0)*r10*x4005);
IkReal x4007=r12*r12;
IkReal x4008=((1.0)*sj0);
IkReal x4009=(cj0*r02);
IkReal x4010=x3997;
j4eval[0]=((IKabs(((((-1.0)*x4009))+(((-1.0)*r12*x4008)))))+(IKabs((((sj0*x4007*x4010))+(((-1.0)*x4008*x4010))+((r12*x4009*x4010))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4013 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4013.valid){
continue;
}
IkReal x4011=((1.0)*(x4013.value));
IkReal x4012=x3997;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4011)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4011)));
IkReal gconst106=((1.0)*r11*x4012);
IkReal gconst107=((-1.0)*r10*x4012);
IkReal x4014=((1.0)+(((-1.0)*(r12*r12))));
IkReal x4015=(cj1*r22*sj2);
IkReal x4016=(cj2*r22*sj1);
CheckValue<IkReal> x4022=IKPowWithIntegerCheck(x4014,-1);
if(!x4022.valid){
continue;
}
IkReal x4017=x4022.value;
IkReal x4018=((1.0)*x4017);
IkReal x4019=x3997;
IkReal x4020=(r12*x4019);
IkReal x4021=((((-1.0)*x4018*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4017))+(((-1.0)*(r22*r22)))+(((-1.0)*x4018*(r10*r10)*(r20*r20))));
j4eval[0]=x4021;
j4eval[1]=((IKabs(((((-1.0)*x4015))+(((-1.0)*x4016)))))+(IKabs((((x4016*x4020))+((x4015*x4020))))));
j4eval[2]=IKsign(x4021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4023=(gconst107*r20);
IkReal x4024=(gconst106*r21);
IkReal x4025=((1.0)*cj1*sj2);
IkReal x4026=((1.0)*cj2*sj1);
CheckValue<IkReal> x4027=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4023*x4023)))+(((-1.0)*(x4024*x4024)))+(((2.0)*x4023*x4024))+(((-1.0)*(r22*r22))))),-1);
if(!x4027.valid){
continue;
}
CheckValue<IkReal> x4028 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4026))+(((-1.0)*r22*x4025)))),IkReal(((((-1.0)*x4023*x4026))+(((-1.0)*x4023*x4025))+((cj2*sj1*x4024))+((cj1*sj2*x4024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4027.value)))+(x4028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4029=IKsin(j4);
IkReal x4030=IKcos(j4);
IkReal x4031=(gconst106*r01);
IkReal x4032=(cj1*cj2);
IkReal x4033=(gconst106*r21);
IkReal x4034=(gconst106*r11);
IkReal x4035=((1.0)*sj1);
IkReal x4036=((1.0)*x4030);
IkReal x4037=((1.0)*x4029);
IkReal x4038=(gconst107*x4029);
IkReal x4039=(gconst107*x4030);
evalcond[0]=((((-1.0)*r22*x4036))+((r20*x4038))+(((-1.0)*x4033*x4037)));
evalcond[1]=((((-1.0)*x4034*x4037))+cj0+(((-1.0)*r12*x4036))+((r10*x4038)));
evalcond[2]=((((-1.0)*x4031*x4037))+(((-1.0)*sj0))+((r00*x4038))+(((-1.0)*r02*x4036)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x4039))+(((-1.0)*cj2*x4035))+(((-1.0)*x4033*x4036))+((r22*x4029)));
evalcond[4]=((((-1.0)*x4031*x4036))+((r00*x4039))+(((-1.0)*cj0*sj2*x4035))+((cj0*x4032))+((r02*x4029)));
evalcond[5]=((((-1.0)*x4034*x4036))+((r10*x4039))+((r12*x4029))+(((-1.0)*sj0*sj2*x4035))+((sj0*x4032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4040=((1.0)*sj0);
IkReal x4041=((1.0)*cj0);
CheckValue<IkReal> x4042=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4042.valid){
continue;
}
CheckValue<IkReal> x4043 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4040))+(((-1.0)*r02*x4041)))),IkReal(((((-1.0)*gconst107*r00*x4041))+((cj0*gconst106*r01))+((gconst106*r11*sj0))+(((-1.0)*gconst107*r10*x4040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4042.value)))+(x4043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4044=IKsin(j4);
IkReal x4045=IKcos(j4);
IkReal x4046=(gconst106*r01);
IkReal x4047=(cj1*cj2);
IkReal x4048=(gconst106*r21);
IkReal x4049=(gconst106*r11);
IkReal x4050=((1.0)*sj1);
IkReal x4051=((1.0)*x4045);
IkReal x4052=((1.0)*x4044);
IkReal x4053=(gconst107*x4044);
IkReal x4054=(gconst107*x4045);
evalcond[0]=(((r20*x4053))+(((-1.0)*r22*x4051))+(((-1.0)*x4048*x4052)));
evalcond[1]=(cj0+(((-1.0)*r12*x4051))+((r10*x4053))+(((-1.0)*x4049*x4052)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4046*x4052))+((r00*x4053))+(((-1.0)*r02*x4051)));
evalcond[3]=(((r22*x4044))+(((-1.0)*cj2*x4050))+(((-1.0)*cj1*sj2))+((r20*x4054))+(((-1.0)*x4048*x4051)));
evalcond[4]=(((r02*x4044))+(((-1.0)*x4046*x4051))+(((-1.0)*cj0*sj2*x4050))+((cj0*x4047))+((r00*x4054)));
evalcond[5]=((((-1.0)*sj0*sj2*x4050))+((r12*x4044))+((r10*x4054))+(((-1.0)*x4049*x4051))+((sj0*x4047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4055=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4055.value)))+(x4056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4057=IKsin(j4);
IkReal x4058=IKcos(j4);
IkReal x4059=(gconst106*r01);
IkReal x4060=(cj1*cj2);
IkReal x4061=(gconst106*r21);
IkReal x4062=(gconst106*r11);
IkReal x4063=((1.0)*sj1);
IkReal x4064=((1.0)*x4058);
IkReal x4065=((1.0)*x4057);
IkReal x4066=(gconst107*x4057);
IkReal x4067=(gconst107*x4058);
evalcond[0]=((((-1.0)*x4061*x4065))+((r20*x4066))+(((-1.0)*r22*x4064)));
evalcond[1]=(cj0+(((-1.0)*r12*x4064))+(((-1.0)*x4062*x4065))+((r10*x4066)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4059*x4065))+((r00*x4066))+(((-1.0)*r02*x4064)));
evalcond[3]=((((-1.0)*cj2*x4063))+(((-1.0)*x4061*x4064))+(((-1.0)*cj1*sj2))+((r20*x4067))+((r22*x4057)));
evalcond[4]=(((r02*x4057))+(((-1.0)*cj0*sj2*x4063))+(((-1.0)*x4059*x4064))+((cj0*x4060))+((r00*x4067)));
evalcond[5]=(((sj0*x4060))+(((-1.0)*sj0*sj2*x4063))+((r12*x4057))+(((-1.0)*x4062*x4064))+((r10*x4067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4068=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4068;
j4eval[1]=IKsign(x4068);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4069=((1.0)*sj5);
IkReal x4070=((((-1.0)*r20*x4069))+(((-1.0)*cj5*r21)));
j4eval[0]=x4070;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4069))+((cj5*r00))))));
j4eval[2]=IKsign(x4070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4071=(sj1*sj2);
IkReal x4072=(cj5*r10);
IkReal x4073=(r11*sj5);
IkReal x4074=(cj1*cj2);
IkReal x4075=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4075;
j4eval[1]=IKsign(x4075);
j4eval[2]=((IKabs((((r12*x4071))+(((-1.0)*r12*x4074)))))+(IKabs((((x4072*x4074))+((x4071*x4073))+(((-1.0)*x4071*x4072))+(((-1.0)*x4073*x4074))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4076=(sj1*sj2);
IkReal x4077=(cj5*r10);
IkReal x4078=(r11*sj5);
IkReal x4079=(cj1*cj2);
CheckValue<IkReal> x4080 = IKatan2WithCheck(IkReal(((((-1.0)*x4076*x4077))+((x4077*x4079))+(((-1.0)*x4078*x4079))+((x4076*x4078)))),IkReal((((r12*x4076))+(((-1.0)*r12*x4079)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4080.valid){
continue;
}
CheckValue<IkReal> x4081=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4081.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4080.value)+(((1.5707963267949)*(x4081.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4082=IKcos(j4);
IkReal x4083=IKsin(j4);
IkReal x4084=(cj5*r10);
IkReal x4085=((1.0)*sj2);
IkReal x4086=((1.0)*x4082);
IkReal x4087=(cj5*x4083);
IkReal x4088=(cj5*x4082);
IkReal x4089=((1.0)*sj5*x4083);
evalcond[0]=(((x4082*x4084))+((r12*x4083))+(((-1.0)*r11*sj5*x4086)));
evalcond[1]=((((-1.0)*r21*x4089))+((r20*x4087))+(((-1.0)*r22*x4086)));
evalcond[2]=(((r00*x4087))+(((-1.0)*r02*x4086))+(((-1.0)*r01*x4089)));
evalcond[3]=((1.0)+((x4083*x4084))+(((-1.0)*r11*x4089))+(((-1.0)*r12*x4086)));
evalcond[4]=(((r00*x4088))+(((-1.0)*sj1*x4085))+(((-1.0)*r01*sj5*x4086))+((cj1*cj2))+((r02*x4083)));
evalcond[5]=((((-1.0)*r21*sj5*x4086))+((r20*x4088))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4085))+((r22*x4083)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4090=((1.0)*sj5);
CheckValue<IkReal> x4091 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4090))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4091.valid){
continue;
}
CheckValue<IkReal> x4092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4090))+(((-1.0)*cj5*r21)))),-1);
if(!x4092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4091.value)+(((1.5707963267949)*(x4092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4093=IKcos(j4);
IkReal x4094=IKsin(j4);
IkReal x4095=(cj5*r10);
IkReal x4096=((1.0)*sj2);
IkReal x4097=((1.0)*x4093);
IkReal x4098=(cj5*x4094);
IkReal x4099=(cj5*x4093);
IkReal x4100=((1.0)*sj5*x4094);
evalcond[0]=((((-1.0)*r11*sj5*x4097))+((r12*x4094))+((x4093*x4095)));
evalcond[1]=(((r20*x4098))+(((-1.0)*r22*x4097))+(((-1.0)*r21*x4100)));
evalcond[2]=(((r00*x4098))+(((-1.0)*r02*x4097))+(((-1.0)*r01*x4100)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4097))+((x4094*x4095))+(((-1.0)*r11*x4100)));
evalcond[4]=(((r00*x4099))+(((-1.0)*r01*sj5*x4097))+(((-1.0)*sj1*x4096))+((r02*x4094))+((cj1*cj2)));
evalcond[5]=(((r20*x4099))+(((-1.0)*cj2*sj1))+((r22*x4094))+(((-1.0)*cj1*x4096))+(((-1.0)*r21*sj5*x4097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4101=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4101.valid){
continue;
}
CheckValue<IkReal> x4102 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4101.value)))+(x4102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4103=IKcos(j4);
IkReal x4104=IKsin(j4);
IkReal x4105=(cj5*r10);
IkReal x4106=((1.0)*sj2);
IkReal x4107=((1.0)*x4103);
IkReal x4108=(cj5*x4104);
IkReal x4109=(cj5*x4103);
IkReal x4110=((1.0)*sj5*x4104);
evalcond[0]=(((x4103*x4105))+((r12*x4104))+(((-1.0)*r11*sj5*x4107)));
evalcond[1]=((((-1.0)*r22*x4107))+((r20*x4108))+(((-1.0)*r21*x4110)));
evalcond[2]=((((-1.0)*r01*x4110))+((r00*x4108))+(((-1.0)*r02*x4107)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4110))+(((-1.0)*r12*x4107))+((x4104*x4105)));
evalcond[4]=((((-1.0)*r01*sj5*x4107))+(((-1.0)*sj1*x4106))+((cj1*cj2))+((r02*x4104))+((r00*x4109)));
evalcond[5]=(((r22*x4104))+(((-1.0)*cj1*x4106))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4107))+((r20*x4109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4111=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4111;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4112=((1.0)*sj5);
IkReal x4113=((((-1.0)*r00*x4112))+(((-1.0)*cj5*r01)));
j4eval[0]=x4113;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4112))))));
j4eval[2]=IKsign(x4113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4114=cj5*cj5;
IkReal x4115=r11*r11;
IkReal x4116=(r11*sj5);
IkReal x4117=(cj5*r10);
IkReal x4118=((((-2.0)*x4116*x4117))+(r12*r12)+(((-1.0)*x4114*x4115))+x4115+((x4114*(r10*r10))));
j4eval[0]=x4118;
j4eval[1]=IKsign(x4118);
j4eval[2]=((IKabs(r12))+(IKabs((x4117+(((-1.0)*x4116))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4119=cj5*cj5;
IkReal x4120=r11*r11;
IkReal x4121=(cj5*r10);
IkReal x4122=(r11*sj5);
CheckValue<IkReal> x4123 = IKatan2WithCheck(IkReal((x4121+(((-1.0)*x4122)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4123.valid){
continue;
}
CheckValue<IkReal> x4124=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x4121*x4122))+((x4119*(r10*r10)))+(((-1.0)*x4119*x4120))+x4120)),-1);
if(!x4124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4123.value)+(((1.5707963267949)*(x4124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4125=IKcos(j4);
IkReal x4126=IKsin(j4);
IkReal x4127=(cj5*r10);
IkReal x4128=((1.0)*cj1);
IkReal x4129=((1.0)*x4125);
IkReal x4130=(cj5*x4126);
IkReal x4131=(cj5*x4125);
IkReal x4132=((1.0)*sj5*x4126);
evalcond[0]=(((r12*x4126))+((x4125*x4127))+(((-1.0)*r11*sj5*x4129)));
evalcond[1]=((((-1.0)*r22*x4129))+(((-1.0)*r21*x4132))+((r20*x4130)));
evalcond[2]=(((r00*x4130))+(((-1.0)*r01*x4132))+(((-1.0)*r02*x4129)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4129))+(((-1.0)*r11*x4132))+((x4126*x4127)));
evalcond[4]=((((-1.0)*cj2*x4128))+((r00*x4131))+((r02*x4126))+(((-1.0)*r01*sj5*x4129))+((sj1*sj2)));
evalcond[5]=((((-1.0)*sj2*x4128))+(((-1.0)*cj2*sj1))+((r20*x4131))+((r22*x4126))+(((-1.0)*r21*sj5*x4129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4133=((1.0)*sj5);
CheckValue<IkReal> x4134=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4133))+(((-1.0)*cj5*r01)))),-1);
if(!x4134.valid){
continue;
}
CheckValue<IkReal> x4135 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4133)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4134.value)))+(x4135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4136=IKcos(j4);
IkReal x4137=IKsin(j4);
IkReal x4138=(cj5*r10);
IkReal x4139=((1.0)*cj1);
IkReal x4140=((1.0)*x4136);
IkReal x4141=(cj5*x4137);
IkReal x4142=(cj5*x4136);
IkReal x4143=((1.0)*sj5*x4137);
evalcond[0]=(((x4136*x4138))+((r12*x4137))+(((-1.0)*r11*sj5*x4140)));
evalcond[1]=(((r20*x4141))+(((-1.0)*r22*x4140))+(((-1.0)*r21*x4143)));
evalcond[2]=((((-1.0)*r02*x4140))+((r00*x4141))+(((-1.0)*r01*x4143)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x4143))+(((-1.0)*r12*x4140))+((x4137*x4138)));
evalcond[4]=((((-1.0)*r01*sj5*x4140))+((r00*x4142))+((sj1*sj2))+(((-1.0)*cj2*x4139))+((r02*x4137)));
evalcond[5]=(((r22*x4137))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4140))+(((-1.0)*sj2*x4139))+((r20*x4142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4144=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4144.valid){
continue;
}
CheckValue<IkReal> x4145 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4144.value)))+(x4145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4146=IKcos(j4);
IkReal x4147=IKsin(j4);
IkReal x4148=(cj5*r10);
IkReal x4149=((1.0)*cj1);
IkReal x4150=((1.0)*x4146);
IkReal x4151=(cj5*x4147);
IkReal x4152=(cj5*x4146);
IkReal x4153=((1.0)*sj5*x4147);
evalcond[0]=(((r12*x4147))+(((-1.0)*r11*sj5*x4150))+((x4146*x4148)));
evalcond[1]=((((-1.0)*r21*x4153))+((r20*x4151))+(((-1.0)*r22*x4150)));
evalcond[2]=(((r00*x4151))+(((-1.0)*r02*x4150))+(((-1.0)*r01*x4153)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4150))+((x4147*x4148))+(((-1.0)*r11*x4153)));
evalcond[4]=(((r02*x4147))+(((-1.0)*r01*sj5*x4150))+((r00*x4152))+((sj1*sj2))+(((-1.0)*cj2*x4149)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4147))+(((-1.0)*r21*sj5*x4150))+((r20*x4152))+(((-1.0)*sj2*x4149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4155 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4155)==0){
continue;
}
IkReal x4154=pow(x4155,-0.5);
CheckValue<IkReal> x4156 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4156.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4156.value));
IkReal gconst109=((-1.0)*r01*x4154);
IkReal gconst110=(r00*x4154);
CheckValue<IkReal> x4157 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4157.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4157.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4160 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4160.valid){
continue;
}
IkReal x4158=((-1.0)*(x4160.value));
IkReal x4159=x4154;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4158;
IkReal gconst108=x4158;
IkReal gconst109=((-1.0)*r01*x4159);
IkReal gconst110=(r00*x4159);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4161=((1.0)*sj0);
IkReal x4162=((1.0)*cj0);
CheckValue<IkReal> x4163 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4162))+(((-1.0)*r12*x4161)))),IkReal(((((-1.0)*gconst110*r00*x4162))+((cj0*gconst109*r01))+(((-1.0)*gconst110*r10*x4161))+((gconst109*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4163.valid){
continue;
}
CheckValue<IkReal> x4164=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4163.value)+(((1.5707963267949)*(x4164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4165=IKsin(j4);
IkReal x4166=IKcos(j4);
IkReal x4167=(cj1*cj2);
IkReal x4168=(gconst110*r20);
IkReal x4169=((1.0)*sj1);
IkReal x4170=(gconst109*r01);
IkReal x4171=(gconst109*r11);
IkReal x4172=(gconst109*r21);
IkReal x4173=((1.0)*x4166);
IkReal x4174=((1.0)*x4165);
IkReal x4175=(gconst110*x4166);
IkReal x4176=(gconst110*x4165);
evalcond[0]=(((x4165*x4168))+(((-1.0)*x4172*x4174))+(((-1.0)*r22*x4173)));
evalcond[1]=((((-1.0)*x4171*x4174))+cj0+((r10*x4176))+(((-1.0)*r12*x4173)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4170*x4174))+((r00*x4176))+(((-1.0)*r02*x4173)));
evalcond[3]=((((-1.0)*cj2*x4169))+((r22*x4165))+(((-1.0)*x4172*x4173))+((x4166*x4168))+(((-1.0)*cj1*sj2)));
evalcond[4]=((((-1.0)*x4170*x4173))+((cj0*x4167))+((r02*x4165))+((r00*x4175))+(((-1.0)*cj0*sj2*x4169)));
evalcond[5]=((((-1.0)*x4171*x4173))+(((-1.0)*sj0*sj2*x4169))+((r12*x4165))+((sj0*x4167))+((r10*x4175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4177 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst109*r21*sj0))+((gconst110*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4177.valid){
continue;
}
CheckValue<IkReal> x4178=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x4178.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4177.value)+(((1.5707963267949)*(x4178.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4179=IKsin(j4);
IkReal x4180=IKcos(j4);
IkReal x4181=(cj1*cj2);
IkReal x4182=(gconst110*r20);
IkReal x4183=((1.0)*sj1);
IkReal x4184=(gconst109*r01);
IkReal x4185=(gconst109*r11);
IkReal x4186=(gconst109*r21);
IkReal x4187=((1.0)*x4180);
IkReal x4188=((1.0)*x4179);
IkReal x4189=(gconst110*x4180);
IkReal x4190=(gconst110*x4179);
evalcond[0]=(((x4179*x4182))+(((-1.0)*x4186*x4188))+(((-1.0)*r22*x4187)));
evalcond[1]=((((-1.0)*r12*x4187))+cj0+((r10*x4190))+(((-1.0)*x4185*x4188)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4187))+((r00*x4190))+(((-1.0)*x4184*x4188)));
evalcond[3]=(((x4180*x4182))+((r22*x4179))+(((-1.0)*cj1*sj2))+(((-1.0)*x4186*x4187))+(((-1.0)*cj2*x4183)));
evalcond[4]=((((-1.0)*cj0*sj2*x4183))+((r00*x4189))+(((-1.0)*x4184*x4187))+((r02*x4179))+((cj0*x4181)));
evalcond[5]=(((sj0*x4181))+((r12*x4179))+(((-1.0)*sj0*sj2*x4183))+((r10*x4189))+(((-1.0)*x4185*x4187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4192 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4192)==0){
continue;
}
IkReal x4191=pow(x4192,-0.5);
CheckValue<IkReal> x4193 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4193.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4193.value))));
IkReal gconst112=((1.0)*r01*x4191);
IkReal gconst113=((-1.0)*r00*x4191);
CheckValue<IkReal> x4194 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4194.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4194.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4197 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4197.valid){
continue;
}
IkReal x4195=((1.0)*(x4197.value));
IkReal x4196=x4191;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4195)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4195)));
IkReal gconst112=((1.0)*r01*x4196);
IkReal gconst113=((-1.0)*r00*x4196);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4200 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4200.valid){
continue;
}
IkReal x4198=((1.0)*(x4200.value));
IkReal x4199=x4191;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4198)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4198)));
IkReal gconst112=((1.0)*r01*x4199);
IkReal gconst113=((-1.0)*r00*x4199);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4203 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4203.valid){
continue;
}
IkReal x4201=((1.0)*(x4203.value));
IkReal x4202=x4191;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4201)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4201)));
IkReal gconst112=((1.0)*r01*x4202);
IkReal gconst113=((-1.0)*r00*x4202);
IkReal x4204=r02*r02;
IkReal x4205=(r12*sj0);
IkReal x4206=((1.0)*cj0);
IkReal x4207=x4191;
j4eval[0]=((IKabs(((((-1.0)*r02*x4206))+(((-1.0)*x4205)))))+(IKabs((((r02*x4205*x4207))+((cj0*x4204*x4207))+(((-1.0)*x4206*x4207))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4208=((1.0)*sj0);
IkReal x4209=((1.0)*cj0);
CheckValue<IkReal> x4210 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4208))+(((-1.0)*r02*x4209)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r00*x4209))+(((-1.0)*gconst113*r10*x4208))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4210.valid){
continue;
}
CheckValue<IkReal> x4211=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4210.value)+(((1.5707963267949)*(x4211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4212=IKsin(j4);
IkReal x4213=IKcos(j4);
IkReal x4214=(gconst113*r10);
IkReal x4215=(cj1*cj2);
IkReal x4216=(gconst112*r01);
IkReal x4217=(gconst112*r11);
IkReal x4218=((1.0)*sj1);
IkReal x4219=(gconst113*r20);
IkReal x4220=(gconst113*r00);
IkReal x4221=(gconst112*r21);
IkReal x4222=((1.0)*x4213);
IkReal x4223=((1.0)*x4212);
evalcond[0]=((((-1.0)*x4221*x4223))+(((-1.0)*r22*x4222))+((x4212*x4219)));
evalcond[1]=(cj0+(((-1.0)*r12*x4222))+((x4212*x4214))+(((-1.0)*x4217*x4223)));
evalcond[2]=((((-1.0)*sj0))+((x4212*x4220))+(((-1.0)*r02*x4222))+(((-1.0)*x4216*x4223)));
evalcond[3]=(((r22*x4212))+(((-1.0)*cj1*sj2))+((x4213*x4219))+(((-1.0)*x4221*x4222))+(((-1.0)*cj2*x4218)));
evalcond[4]=((((-1.0)*cj0*sj2*x4218))+((r02*x4212))+((x4213*x4220))+((cj0*x4215))+(((-1.0)*x4216*x4222)));
evalcond[5]=(((r12*x4212))+((x4213*x4214))+(((-1.0)*sj0*sj2*x4218))+((sj0*x4215))+(((-1.0)*x4217*x4222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4224 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst113*r20*sj0))+(((-1.0)*gconst112*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4224.valid){
continue;
}
CheckValue<IkReal> x4225=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x4225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4224.value)+(((1.5707963267949)*(x4225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4226=IKsin(j4);
IkReal x4227=IKcos(j4);
IkReal x4228=(gconst113*r10);
IkReal x4229=(cj1*cj2);
IkReal x4230=(gconst112*r01);
IkReal x4231=(gconst112*r11);
IkReal x4232=((1.0)*sj1);
IkReal x4233=(gconst113*r20);
IkReal x4234=(gconst113*r00);
IkReal x4235=(gconst112*r21);
IkReal x4236=((1.0)*x4227);
IkReal x4237=((1.0)*x4226);
evalcond[0]=(((x4226*x4233))+(((-1.0)*r22*x4236))+(((-1.0)*x4235*x4237)));
evalcond[1]=((((-1.0)*x4231*x4237))+cj0+(((-1.0)*r12*x4236))+((x4226*x4228)));
evalcond[2]=((((-1.0)*sj0))+((x4226*x4234))+(((-1.0)*r02*x4236))+(((-1.0)*x4230*x4237)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r22*x4226))+((x4227*x4233))+(((-1.0)*x4235*x4236))+(((-1.0)*cj2*x4232)));
evalcond[4]=(((r02*x4226))+((x4227*x4234))+(((-1.0)*cj0*sj2*x4232))+(((-1.0)*x4230*x4236))+((cj0*x4229)));
evalcond[5]=((((-1.0)*x4231*x4236))+((x4227*x4228))+(((-1.0)*sj0*sj2*x4232))+((sj0*x4229))+((r12*x4226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4238 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst112*r21))+((cj0*gconst113*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4238.valid){
continue;
}
CheckValue<IkReal> x4239=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4238.value)+(((1.5707963267949)*(x4239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4240=IKsin(j4);
IkReal x4241=IKcos(j4);
IkReal x4242=(gconst113*r10);
IkReal x4243=(cj1*cj2);
IkReal x4244=(gconst112*r01);
IkReal x4245=(gconst112*r11);
IkReal x4246=((1.0)*sj1);
IkReal x4247=(gconst113*r20);
IkReal x4248=(gconst113*r00);
IkReal x4249=(gconst112*r21);
IkReal x4250=((1.0)*x4241);
IkReal x4251=((1.0)*x4240);
evalcond[0]=(((x4240*x4247))+(((-1.0)*r22*x4250))+(((-1.0)*x4249*x4251)));
evalcond[1]=(((x4240*x4242))+(((-1.0)*x4245*x4251))+cj0+(((-1.0)*r12*x4250)));
evalcond[2]=(((x4240*x4248))+(((-1.0)*sj0))+(((-1.0)*x4244*x4251))+(((-1.0)*r02*x4250)));
evalcond[3]=(((x4241*x4247))+((r22*x4240))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4246))+(((-1.0)*x4249*x4250)));
evalcond[4]=(((x4241*x4248))+((r02*x4240))+(((-1.0)*x4244*x4250))+(((-1.0)*cj0*sj2*x4246))+((cj0*x4243)));
evalcond[5]=((((-1.0)*x4245*x4250))+((x4241*x4242))+((sj0*x4243))+(((-1.0)*sj0*sj2*x4246))+((r12*x4240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4252=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4252;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4253=((1.0)*sj5);
IkReal x4254=((((-1.0)*cj5*r21))+(((-1.0)*r20*x4253)));
j4eval[0]=x4254;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4253))))));
j4eval[2]=IKsign(x4254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4255=cj5*cj5;
IkReal x4256=r01*r01;
IkReal x4257=(cj5*r00);
IkReal x4258=(r01*sj5);
IkReal x4259=((((-2.0)*x4257*x4258))+x4256+(((-1.0)*x4255*x4256))+(r02*r02)+((x4255*(r00*r00))));
j4eval[0]=x4259;
j4eval[1]=((IKabs(r02))+(IKabs((x4257+(((-1.0)*x4258))))));
j4eval[2]=IKsign(x4259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4260=cj5*cj5;
IkReal x4261=r01*r01;
IkReal x4262=(r01*sj5);
IkReal x4263=(cj5*r00);
CheckValue<IkReal> x4264 = IKatan2WithCheck(IkReal((x4263+(((-1.0)*x4262)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4264.valid){
continue;
}
CheckValue<IkReal> x4265=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4262*x4263))+x4261+((x4260*(r00*r00)))+(r02*r02)+(((-1.0)*x4260*x4261)))),-1);
if(!x4265.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4264.value)+(((1.5707963267949)*(x4265.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4266=IKcos(j4);
IkReal x4267=IKsin(j4);
IkReal x4268=((1.0)*sj2);
IkReal x4269=((1.0)*x4266);
IkReal x4270=(cj5*x4266);
IkReal x4271=(cj5*x4267);
IkReal x4272=((1.0)*sj5*x4267);
evalcond[0]=(((r00*x4270))+((r02*x4267))+(((-1.0)*r01*sj5*x4269)));
evalcond[1]=((((-1.0)*r21*x4272))+(((-1.0)*r22*x4269))+((r20*x4271)));
evalcond[2]=((((-1.0)*r11*x4272))+(((-1.0)*r12*x4269))+((r10*x4271)));
evalcond[3]=((-1.0)+((r00*x4271))+(((-1.0)*r01*x4272))+(((-1.0)*r02*x4269)));
evalcond[4]=((((-1.0)*sj1*x4268))+((r12*x4267))+(((-1.0)*r11*sj5*x4269))+((cj1*cj2))+((r10*x4270)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r20*x4270))+(((-1.0)*r21*sj5*x4269))+(((-1.0)*cj1*x4268))+((r22*x4267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4273=((1.0)*sj5);
CheckValue<IkReal> x4274 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4274.valid){
continue;
}
CheckValue<IkReal> x4275=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4273))+(((-1.0)*cj5*r21)))),-1);
if(!x4275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4274.value)+(((1.5707963267949)*(x4275.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4276=IKcos(j4);
IkReal x4277=IKsin(j4);
IkReal x4278=((1.0)*sj2);
IkReal x4279=((1.0)*x4276);
IkReal x4280=(cj5*x4276);
IkReal x4281=(cj5*x4277);
IkReal x4282=((1.0)*sj5*x4277);
evalcond[0]=(((r02*x4277))+(((-1.0)*r01*sj5*x4279))+((r00*x4280)));
evalcond[1]=((((-1.0)*r21*x4282))+(((-1.0)*r22*x4279))+((r20*x4281)));
evalcond[2]=((((-1.0)*r12*x4279))+(((-1.0)*r11*x4282))+((r10*x4281)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4282))+(((-1.0)*r02*x4279))+((r00*x4281)));
evalcond[4]=(((r12*x4277))+(((-1.0)*r11*sj5*x4279))+((r10*x4280))+((cj1*cj2))+(((-1.0)*sj1*x4278)));
evalcond[5]=((((-1.0)*cj1*x4278))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4279))+((r20*x4280))+((r22*x4277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4283=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4283.valid){
continue;
}
CheckValue<IkReal> x4284 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4283.value)))+(x4284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4285=IKcos(j4);
IkReal x4286=IKsin(j4);
IkReal x4287=((1.0)*sj2);
IkReal x4288=((1.0)*x4285);
IkReal x4289=(cj5*x4285);
IkReal x4290=(cj5*x4286);
IkReal x4291=((1.0)*sj5*x4286);
evalcond[0]=(((r02*x4286))+(((-1.0)*r01*sj5*x4288))+((r00*x4289)));
evalcond[1]=(((r20*x4290))+(((-1.0)*r21*x4291))+(((-1.0)*r22*x4288)));
evalcond[2]=(((r10*x4290))+(((-1.0)*r12*x4288))+(((-1.0)*r11*x4291)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x4291))+((r00*x4290))+(((-1.0)*r02*x4288)));
evalcond[4]=(((r12*x4286))+(((-1.0)*sj1*x4287))+(((-1.0)*r11*sj5*x4288))+((r10*x4289))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r21*sj5*x4288))+((r22*x4286))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4287))+((r20*x4289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4292=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4292;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4293=((1.0)*sj5);
IkReal x4294=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4293)));
j4eval[0]=x4294;
j4eval[1]=IKsign(x4294);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4293)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4295=(cj1*cj2);
IkReal x4296=(cj5*r00);
IkReal x4297=(r01*sj5);
IkReal x4298=((1.0)*sj1*sj2);
IkReal x4299=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4299;
j4eval[1]=((IKabs(((((-1.0)*x4295*x4296))+((sj1*sj2*x4296))+(((-1.0)*x4297*x4298))+((x4295*x4297)))))+(IKabs(((((-1.0)*r02*x4298))+((r02*x4295))))));
j4eval[2]=IKsign(x4299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4300=(r01*sj5);
IkReal x4301=(cj1*cj2);
IkReal x4302=(cj5*r00);
IkReal x4303=((1.0)*sj1*sj2);
CheckValue<IkReal> x4304=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4304.valid){
continue;
}
CheckValue<IkReal> x4305 = IKatan2WithCheck(IkReal((((x4300*x4301))+((sj1*sj2*x4302))+(((-1.0)*x4301*x4302))+(((-1.0)*x4300*x4303)))),IkReal((((r02*x4301))+(((-1.0)*r02*x4303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4304.value)))+(x4305.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4306=IKcos(j4);
IkReal x4307=IKsin(j4);
IkReal x4308=((1.0)*cj1);
IkReal x4309=((1.0)*x4306);
IkReal x4310=(cj5*x4306);
IkReal x4311=(cj5*x4307);
IkReal x4312=((1.0)*sj5*x4307);
evalcond[0]=(((r02*x4307))+((r00*x4310))+(((-1.0)*r01*sj5*x4309)));
evalcond[1]=(((r20*x4311))+(((-1.0)*r22*x4309))+(((-1.0)*r21*x4312)));
evalcond[2]=((((-1.0)*r12*x4309))+((r10*x4311))+(((-1.0)*r11*x4312)));
evalcond[3]=((1.0)+((r00*x4311))+(((-1.0)*r02*x4309))+(((-1.0)*r01*x4312)));
evalcond[4]=(((r12*x4307))+(((-1.0)*cj2*x4308))+((sj1*sj2))+((r10*x4310))+(((-1.0)*r11*sj5*x4309)));
evalcond[5]=(((r22*x4307))+((r20*x4310))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4308))+(((-1.0)*r21*sj5*x4309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4313=((1.0)*sj5);
CheckValue<IkReal> x4314=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4313)))),-1);
if(!x4314.valid){
continue;
}
CheckValue<IkReal> x4315 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4313)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4314.value)))+(x4315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4316=IKcos(j4);
IkReal x4317=IKsin(j4);
IkReal x4318=((1.0)*cj1);
IkReal x4319=((1.0)*x4316);
IkReal x4320=(cj5*x4316);
IkReal x4321=(cj5*x4317);
IkReal x4322=((1.0)*sj5*x4317);
evalcond[0]=(((r00*x4320))+(((-1.0)*r01*sj5*x4319))+((r02*x4317)));
evalcond[1]=((((-1.0)*r22*x4319))+((r20*x4321))+(((-1.0)*r21*x4322)));
evalcond[2]=((((-1.0)*r11*x4322))+(((-1.0)*r12*x4319))+((r10*x4321)));
evalcond[3]=((1.0)+(((-1.0)*r01*x4322))+((r00*x4321))+(((-1.0)*r02*x4319)));
evalcond[4]=((((-1.0)*cj2*x4318))+(((-1.0)*r11*sj5*x4319))+((r12*x4317))+((sj1*sj2))+((r10*x4320)));
evalcond[5]=(((r20*x4320))+(((-1.0)*r21*sj5*x4319))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x4318))+((r22*x4317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4323.value)+(((1.5707963267949)*(x4324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4325=IKcos(j4);
IkReal x4326=IKsin(j4);
IkReal x4327=((1.0)*cj1);
IkReal x4328=((1.0)*x4325);
IkReal x4329=(cj5*x4325);
IkReal x4330=(cj5*x4326);
IkReal x4331=((1.0)*sj5*x4326);
evalcond[0]=(((r00*x4329))+(((-1.0)*r01*sj5*x4328))+((r02*x4326)));
evalcond[1]=(((r20*x4330))+(((-1.0)*r21*x4331))+(((-1.0)*r22*x4328)));
evalcond[2]=((((-1.0)*r11*x4331))+(((-1.0)*r12*x4328))+((r10*x4330)));
evalcond[3]=((1.0)+((r00*x4330))+(((-1.0)*r01*x4331))+(((-1.0)*r02*x4328)));
evalcond[4]=(((sj1*sj2))+((r12*x4326))+(((-1.0)*cj2*x4327))+(((-1.0)*r11*sj5*x4328))+((r10*x4329)));
evalcond[5]=((((-1.0)*r21*sj5*x4328))+((r20*x4329))+(((-1.0)*sj2*x4327))+(((-1.0)*cj2*sj1))+((r22*x4326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4332=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4332);
rxp1_1=(px*r21);
rxp1_2=(r11*x4332);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4333=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4333);
rxp1_1=(px*r21);
rxp1_2=(r11*x4333);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4334=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4334);
rxp1_1=(px*r21);
rxp1_2=(r11*x4334);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4337=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x4337.valid){
continue;
}
IkReal x4335=x4337.value;
IkReal x4336=(sj0*x4335);
cj4array[0]=(((sj1*sj2*x4336))+(((-1.0)*cj1*cj2*x4336)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4338=IKsin(j4);
IkReal x4339=IKcos(j4);
IkReal x4340=(cj5*r20);
IkReal x4341=((1.0)*sj5);
evalcond[0]=(r02*x4338);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4339)));
evalcond[2]=((((-1.0)*r21*x4338*x4341))+((x4338*x4340)));
evalcond[3]=(((cj5*r10*x4338))+(((-1.0)*r11*x4338*x4341)));
evalcond[4]=((((-1.0)*r21*x4339*x4341))+((x4339*x4340))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4343=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4343.valid){
continue;
}
IkReal x4342=x4343.value;
cj4array[0]=(((cj1*sj2*x4342))+((cj2*sj1*x4342)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4344=IKsin(j4);
IkReal x4345=IKcos(j4);
IkReal x4346=((1.0)*sj0);
IkReal x4347=(cj5*r10);
IkReal x4348=((1.0)*r11*sj5);
evalcond[0]=(r02*x4344);
evalcond[1]=((((-1.0)*x4346))+(((-1.0)*r02*x4345)));
evalcond[2]=((((-1.0)*r21*sj5*x4344))+((cj5*r20*x4344)));
evalcond[3]=((((-1.0)*x4344*x4348))+((x4344*x4347)));
evalcond[4]=(((x4345*x4347))+((cj1*cj2*sj0))+(((-1.0)*x4345*x4348))+(((-1.0)*sj1*sj2*x4346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4349=IKPowWithIntegerCheck(r02,-1);
if(!x4349.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4349.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4350=IKsin(j4);
IkReal x4351=IKcos(j4);
IkReal x4352=((1.0)*sj2);
IkReal x4353=(cj5*x4351);
IkReal x4354=(cj5*x4350);
IkReal x4355=((1.0)*sj5*x4351);
IkReal x4356=((1.0)*sj5*x4350);
evalcond[0]=(r02*x4350);
evalcond[1]=((((-1.0)*r21*x4356))+((r20*x4354)));
evalcond[2]=((((-1.0)*r11*x4356))+((r10*x4354)));
evalcond[3]=((((-1.0)*r21*x4355))+((r20*x4353))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4352)));
evalcond[4]=(((cj1*cj2*sj0))+(((-1.0)*r11*x4355))+(((-1.0)*sj0*sj1*x4352))+((r10*x4353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4357=((1.0)*sj0);
IkReal x4358=((1.0)*cj0);
CheckValue<IkReal> x4359=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4359.valid){
continue;
}
CheckValue<IkReal> x4360 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4358))+(((-1.0)*r12*x4357)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x4358))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x4357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4359.value)))+(x4360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4361=IKsin(j4);
IkReal x4362=IKcos(j4);
IkReal x4363=(cj1*cj2);
IkReal x4364=((1.0)*sj2);
IkReal x4365=((1.0)*x4362);
IkReal x4366=(cj5*x4362);
IkReal x4367=(cj5*x4361);
IkReal x4368=((1.0)*sj5*x4361);
evalcond[0]=((((-1.0)*r22*x4365))+((r20*x4367))+(((-1.0)*r21*x4368)));
evalcond[1]=(cj0+((r10*x4367))+(((-1.0)*r12*x4365))+(((-1.0)*r11*x4368)));
evalcond[2]=((((-1.0)*sj0))+((r00*x4367))+(((-1.0)*r02*x4365))+(((-1.0)*r01*x4368)));
evalcond[3]=((((-1.0)*cj1*x4364))+(((-1.0)*r21*sj5*x4365))+((r20*x4366))+(((-1.0)*cj2*sj1))+((r22*x4361)));
evalcond[4]=(((r00*x4366))+((cj0*x4363))+(((-1.0)*r01*sj5*x4365))+(((-1.0)*cj0*sj1*x4364))+((r02*x4361)));
evalcond[5]=((((-1.0)*r11*sj5*x4365))+((r10*x4366))+((sj0*x4363))+((r12*x4361))+(((-1.0)*sj0*sj1*x4364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4369 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4369.valid){
continue;
}
CheckValue<IkReal> x4370=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4369.value)+(((1.5707963267949)*(x4370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4371=IKsin(j4);
IkReal x4372=IKcos(j4);
IkReal x4373=(cj1*cj2);
IkReal x4374=((1.0)*sj2);
IkReal x4375=((1.0)*x4372);
IkReal x4376=(cj5*x4372);
IkReal x4377=(cj5*x4371);
IkReal x4378=((1.0)*sj5*x4371);
evalcond[0]=((((-1.0)*r22*x4375))+((r20*x4377))+(((-1.0)*r21*x4378)));
evalcond[1]=(cj0+((r10*x4377))+(((-1.0)*r11*x4378))+(((-1.0)*r12*x4375)));
evalcond[2]=((((-1.0)*sj0))+((r00*x4377))+(((-1.0)*r02*x4375))+(((-1.0)*r01*x4378)));
evalcond[3]=(((r22*x4371))+(((-1.0)*cj2*sj1))+((r20*x4376))+(((-1.0)*r21*sj5*x4375))+(((-1.0)*cj1*x4374)));
evalcond[4]=((((-1.0)*r01*sj5*x4375))+(((-1.0)*cj0*sj1*x4374))+((r02*x4371))+((cj0*x4373))+((r00*x4376)));
evalcond[5]=(((sj0*x4373))+((r12*x4371))+((r10*x4376))+(((-1.0)*r11*sj5*x4375))+(((-1.0)*sj0*sj1*x4374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4379 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4379.valid){
continue;
}
CheckValue<IkReal> x4380=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4379.value)+(((1.5707963267949)*(x4380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4381=IKsin(j4);
IkReal x4382=IKcos(j4);
IkReal x4383=(cj1*cj2);
IkReal x4384=((1.0)*sj2);
IkReal x4385=((1.0)*x4382);
IkReal x4386=(cj5*x4382);
IkReal x4387=(cj5*x4381);
IkReal x4388=((1.0)*sj5*x4381);
evalcond[0]=((((-1.0)*r22*x4385))+((r20*x4387))+(((-1.0)*r21*x4388)));
evalcond[1]=((((-1.0)*r11*x4388))+(((-1.0)*r12*x4385))+cj0+((r10*x4387)));
evalcond[2]=((((-1.0)*r02*x4385))+((r00*x4387))+(((-1.0)*sj0))+(((-1.0)*r01*x4388)));
evalcond[3]=((((-1.0)*cj2*sj1))+((r22*x4381))+(((-1.0)*r21*sj5*x4385))+(((-1.0)*cj1*x4384))+((r20*x4386)));
evalcond[4]=(((r00*x4386))+(((-1.0)*r01*sj5*x4385))+(((-1.0)*cj0*sj1*x4384))+((r02*x4381))+((cj0*x4383)));
evalcond[5]=(((sj0*x4383))+(((-1.0)*r11*sj5*x4385))+((r12*x4381))+(((-1.0)*sj0*sj1*x4384))+((r10*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4389=r21*r21;
IkReal x4390=cj5*cj5;
IkReal x4391=(cj5*r20);
IkReal x4392=(cj1*sj2);
IkReal x4393=(r21*sj5);
IkReal x4394=((1.0)*cj2*sj1);
CheckValue<IkReal> x4395=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4389))+((x4389*x4390))+(((-1.0)*x4390*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x4391*x4393)))),-1);
if(!x4395.valid){
continue;
}
CheckValue<IkReal> x4396 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4392))+(((-1.0)*r22*x4394)))),IkReal((((x4392*x4393))+(((-1.0)*x4391*x4392))+(((-1.0)*x4391*x4394))+((cj2*sj1*x4393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4395.value)))+(x4396.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4397=IKsin(j4);
IkReal x4398=IKcos(j4);
IkReal x4399=(r21*sj5);
IkReal x4400=(cj5*r20);
IkReal x4401=((1.0)*x4398);
evalcond[0]=((((-1.0)*x4397*x4399))+(((-1.0)*r22*x4401))+((x4397*x4400)));
evalcond[1]=(((r22*x4397))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*x4399*x4401))+((x4398*x4400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4402=(cj5*sj4);
IkReal x4403=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r01*x4403))+((r00*x4402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x4403))+(((-1.0)*r10*x4402))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r01*x4403))+((r00*x4402))))+IKsqr((((r11*x4403))+(((-1.0)*r10*x4402))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r01*x4403))+((r00*x4402))), (((r11*x4403))+(((-1.0)*r10*x4402))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4404=IKcos(j0);
IkReal x4405=IKsin(j0);
IkReal x4406=(cj5*r10);
IkReal x4407=(cj5*r00);
IkReal x4408=(cj5*r01);
IkReal x4409=((1.0)*sj2);
IkReal x4410=((0.3922)*cj2);
IkReal x4411=(cj5*r11);
IkReal x4412=((1.0)*cj2);
IkReal x4413=(r00*sj5);
IkReal x4414=(r10*sj5);
IkReal x4415=((0.3922)*sj2);
IkReal x4416=((1.0)*cj4);
IkReal x4417=(sj1*x4405);
IkReal x4418=(cj1*x4404);
IkReal x4419=((1.0)*sj4*sj5);
IkReal x4420=(cj1*x4405);
IkReal x4421=(sj1*x4404);
evalcond[0]=(x4404+(((-1.0)*r11*x4419))+(((-1.0)*r12*x4416))+((sj4*x4406)));
evalcond[1]=((((-1.0)*r01*x4419))+(((-1.0)*r02*x4416))+(((-1.0)*x4405))+((sj4*x4407)));
evalcond[2]=((((-1.0)*x4409*x4418))+x4408+x4413+(((-1.0)*x4412*x4421)));
evalcond[3]=(x4414+x4411+(((-1.0)*x4412*x4417))+(((-1.0)*x4409*x4420)));
evalcond[4]=(((cj4*x4407))+(((-1.0)*r01*sj5*x4416))+((r02*sj4))+(((-1.0)*x4409*x4421))+((cj2*x4418)));
evalcond[5]=((((-1.0)*x4409*x4417))+(((-1.0)*r11*sj5*x4416))+((cj4*x4406))+((r12*sj4))+((cj2*x4420)));
evalcond[6]=((((-1.0)*x4415*x4421))+((x4410*x4418))+(((0.0946)*x4413))+(((0.0946)*x4408))+(((-1.0)*px))+(((-0.1091)*x4405))+(((0.425)*x4418)));
evalcond[7]=((((0.425)*x4420))+(((0.0946)*x4411))+(((0.0946)*x4414))+((x4410*x4420))+(((0.1091)*x4404))+(((-1.0)*py))+(((-1.0)*x4415*x4417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4422=((1.0)*cj5);
IkReal x4423=((1.0)*sj5);
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x4423))+(((-1.0)*r11*x4422)))),IkReal(((((-1.0)*r01*x4422))+(((-1.0)*r00*x4423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
CheckValue<IkReal> x4425=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x4425.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4424.value)+(((1.5707963267949)*(x4425.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4426=IKcos(j0);
IkReal x4427=IKsin(j0);
IkReal x4428=(cj5*r01);
IkReal x4429=((0.425)*cj1);
IkReal x4430=(cj5*r11);
IkReal x4431=((1.0)*cj2);
IkReal x4432=(cj1*cj2);
IkReal x4433=(r00*sj5);
IkReal x4434=(r10*sj5);
IkReal x4435=((1.0)*cj1*sj2);
IkReal x4436=(sj1*x4426);
IkReal x4437=((0.3922)*x4427);
evalcond[0]=(x4433+x4428+(((-1.0)*x4431*x4436))+(((-1.0)*x4426*x4435)));
evalcond[1]=((((-1.0)*x4427*x4435))+x4434+x4430+(((-1.0)*sj1*x4427*x4431)));
evalcond[2]=((((-0.3922)*sj2*x4436))+(((0.0946)*x4433))+((x4426*x4429))+(((-0.1091)*x4427))+(((0.0946)*x4428))+(((-1.0)*px))+(((0.3922)*x4426*x4432)));
evalcond[3]=(((x4432*x4437))+(((0.0946)*x4434))+(((0.0946)*x4430))+(((-1.0)*sj1*sj2*x4437))+((x4427*x4429))+(((-1.0)*py))+(((0.1091)*x4426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4438=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4438;
j4eval[1]=IKsign(x4438);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4439=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4439;
j4eval[1]=IKsign(x4439);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x4440=((1.0)*sj0);
IkReal x4441=((1.0)*cj0);
IkReal x4442=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4442;
j4eval[1]=IKsign(x4442);
j4eval[2]=((IKabs(((((-1.0)*r12*x4440))+(((-1.0)*r02*x4441)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x4440))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x4441))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4444 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4444)==0){
continue;
}
IkReal x4443=pow(x4444,-0.5);
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4445.value));
IkReal gconst97=((-1.0)*r21*x4443);
IkReal gconst98=(r20*x4443);
CheckValue<IkReal> x4446 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4446.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4446.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4449 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4449.valid){
continue;
}
IkReal x4447=((-1.0)*(x4449.value));
IkReal x4448=x4443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4447;
IkReal gconst96=x4447;
IkReal gconst97=((-1.0)*r21*x4448);
IkReal gconst98=(r20*x4448);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4452 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4452.valid){
continue;
}
IkReal x4450=((-1.0)*(x4452.value));
IkReal x4451=x4443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4450;
IkReal gconst96=x4450;
IkReal gconst97=((-1.0)*r21*x4451);
IkReal gconst98=(r20*x4451);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x4455 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4455.valid){
continue;
}
IkReal x4453=((-1.0)*(x4455.value));
IkReal x4454=x4443;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst97;
cj5=gconst98;
j5=x4453;
IkReal gconst96=x4453;
IkReal gconst97=((-1.0)*r21*x4454);
IkReal gconst98=(r20*x4454);
IkReal x4456=((1.0)*(r22*r22));
CheckValue<IkReal> x4460=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4456))),-1);
if(!x4460.valid){
continue;
}
IkReal x4457=x4460.value;
IkReal x4458=((1.0)*x4457);
IkReal x4459=((((-1.0)*x4458*(r21*r21*r21*r21)))+(((-1.0)*x4456))+(((-1.0)*x4458*(r20*r20*r20*r20)))+(((-2.0)*x4457*(r20*r20)*(r21*r21))));
j4eval[0]=x4459;
j4eval[1]=IKsign(x4459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4461=(cj1*sj2);
IkReal x4462=((1.0)*r22);
IkReal x4463=(gconst97*r21);
IkReal x4464=(cj2*sj1);
IkReal x4465=(gconst98*r20);
CheckValue<IkReal> x4466 = IKatan2WithCheck(IkReal(((((-1.0)*x4462*x4464))+(((-1.0)*x4461*x4462)))),IkReal(((((-1.0)*x4461*x4465))+((x4463*x4464))+(((-1.0)*x4464*x4465))+((x4461*x4463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4466.valid){
continue;
}
CheckValue<IkReal> x4467=IKPowWithIntegerCheck(IKsign(((((2.0)*x4463*x4465))+(((-1.0)*(x4465*x4465)))+(((-1.0)*(x4463*x4463)))+(((-1.0)*r22*x4462)))),-1);
if(!x4467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4466.value)+(((1.5707963267949)*(x4467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4468=IKsin(j4);
IkReal x4469=IKcos(j4);
IkReal x4470=(gconst98*r00);
IkReal x4471=(cj1*cj2);
IkReal x4472=((1.0)*sj1);
IkReal x4473=((1.0)*x4469);
IkReal x4474=(gconst98*x4468);
IkReal x4475=(gconst98*x4469);
IkReal x4476=((1.0)*gconst97*x4468);
evalcond[0]=(((r20*x4474))+(((-1.0)*r21*x4476))+(((-1.0)*r22*x4473)));
evalcond[1]=((((-1.0)*r12*x4473))+(((-1.0)*r11*x4476))+cj0+((r10*x4474)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x4476))+((x4468*x4470))+(((-1.0)*r02*x4473)));
evalcond[3]=(((r22*x4468))+((r20*x4475))+(((-1.0)*cj2*x4472))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst97*r21*x4473)));
evalcond[4]=(((cj0*x4471))+(((-1.0)*gconst97*r01*x4473))+(((-1.0)*cj0*sj2*x4472))+((r02*x4468))+((x4469*x4470)));
evalcond[5]=(((sj0*x4471))+(((-1.0)*gconst97*r11*x4473))+((r10*x4475))+((r12*x4468))+(((-1.0)*sj0*sj2*x4472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4477 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst98*r20*sj0))+(((-1.0)*gconst97*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4477.valid){
continue;
}
CheckValue<IkReal> x4478=IKPowWithIntegerCheck(IKsign((((gconst98*r11))+((gconst97*r10)))),-1);
if(!x4478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4477.value)+(((1.5707963267949)*(x4478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4479=IKsin(j4);
IkReal x4480=IKcos(j4);
IkReal x4481=(gconst98*r00);
IkReal x4482=(cj1*cj2);
IkReal x4483=((1.0)*sj1);
IkReal x4484=((1.0)*x4480);
IkReal x4485=(gconst98*x4479);
IkReal x4486=(gconst98*x4480);
IkReal x4487=((1.0)*gconst97*x4479);
evalcond[0]=(((r20*x4485))+(((-1.0)*r21*x4487))+(((-1.0)*r22*x4484)));
evalcond[1]=((((-1.0)*r11*x4487))+(((-1.0)*r12*x4484))+cj0+((r10*x4485)));
evalcond[2]=((((-1.0)*sj0))+((x4479*x4481))+(((-1.0)*r01*x4487))+(((-1.0)*r02*x4484)));
evalcond[3]=(((r20*x4486))+(((-1.0)*cj2*x4483))+(((-1.0)*cj1*sj2))+((r22*x4479))+(((-1.0)*gconst97*r21*x4484)));
evalcond[4]=((((-1.0)*gconst97*r01*x4484))+((cj0*x4482))+(((-1.0)*cj0*sj2*x4483))+((x4480*x4481))+((r02*x4479)));
evalcond[5]=(((sj0*x4482))+((r10*x4486))+(((-1.0)*gconst97*r11*x4484))+(((-1.0)*sj0*sj2*x4483))+((r12*x4479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4488=IKPowWithIntegerCheck(IKsign((((gconst98*r01))+((gconst97*r00)))),-1);
if(!x4488.valid){
continue;
}
CheckValue<IkReal> x4489 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst98*r20))+(((-1.0)*cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4488.value)))+(x4489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4490=IKsin(j4);
IkReal x4491=IKcos(j4);
IkReal x4492=(gconst98*r00);
IkReal x4493=(cj1*cj2);
IkReal x4494=((1.0)*sj1);
IkReal x4495=((1.0)*x4491);
IkReal x4496=(gconst98*x4490);
IkReal x4497=(gconst98*x4491);
IkReal x4498=((1.0)*gconst97*x4490);
evalcond[0]=((((-1.0)*r21*x4498))+(((-1.0)*r22*x4495))+((r20*x4496)));
evalcond[1]=((((-1.0)*r11*x4498))+cj0+((r10*x4496))+(((-1.0)*r12*x4495)));
evalcond[2]=((((-1.0)*r02*x4495))+(((-1.0)*sj0))+((x4490*x4492))+(((-1.0)*r01*x4498)));
evalcond[3]=((((-1.0)*cj2*x4494))+(((-1.0)*gconst97*r21*x4495))+(((-1.0)*cj1*sj2))+((r22*x4490))+((r20*x4497)));
evalcond[4]=((((-1.0)*gconst97*r01*x4495))+((cj0*x4493))+(((-1.0)*cj0*sj2*x4494))+((x4491*x4492))+((r02*x4490)));
evalcond[5]=(((r12*x4490))+(((-1.0)*gconst97*r11*x4495))+((sj0*x4493))+((r10*x4497))+(((-1.0)*sj0*sj2*x4494)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4500 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4500)==0){
continue;
}
IkReal x4499=pow(x4500,-0.5);
CheckValue<IkReal> x4501 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4501.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4501.value))));
IkReal gconst100=((1.0)*r21*x4499);
IkReal gconst101=((-1.0)*r20*x4499);
CheckValue<IkReal> x4502 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4502.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4502.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x4505 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4505.valid){
continue;
}
IkReal x4503=((1.0)*(x4505.value));
IkReal x4504=x4499;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4503)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4503)));
IkReal gconst100=((1.0)*r21*x4504);
IkReal gconst101=((-1.0)*r20*x4504);
IkReal x4506=r22*r22;
IkReal x4507=((1.0)*x4506);
CheckValue<IkReal> x4511=IKPowWithIntegerCheck(((-1.0)+x4506),-1);
if(!x4511.valid){
continue;
}
IkReal x4508=x4511.value;
if((((1.0)+(((-1.0)*x4507)))) < -0.00001)
continue;
IkReal x4509=IKsqrt(((1.0)+(((-1.0)*x4507))));
IkReal x4510=(cj0*x4508*x4509);
j4eval[0]=((IKabs((x4510+(((-1.0)*x4507*x4510)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4514 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4514.valid){
continue;
}
IkReal x4512=((1.0)*(x4514.value));
IkReal x4513=x4499;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4512)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4512)));
IkReal gconst100=((1.0)*r21*x4513);
IkReal gconst101=((-1.0)*r20*x4513);
IkReal x4515=r22*r22;
IkReal x4516=((1.0)*x4515);
CheckValue<IkReal> x4520=IKPowWithIntegerCheck(((-1.0)+x4515),-1);
if(!x4520.valid){
continue;
}
IkReal x4517=x4520.value;
if((((1.0)+(((-1.0)*x4516)))) < -0.00001)
continue;
IkReal x4518=IKsqrt(((1.0)+(((-1.0)*x4516))));
IkReal x4519=(sj0*x4517*x4518);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4516*x4519))+x4519))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4523 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x4523.valid){
continue;
}
IkReal x4521=((1.0)*(x4523.value));
IkReal x4522=x4499;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4521)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4521)));
IkReal gconst100=((1.0)*r21*x4522);
IkReal gconst101=((-1.0)*r20*x4522);
IkReal x4524=r22*r22;
IkReal x4525=(r12*sj0);
IkReal x4526=(cj0*r02);
CheckValue<IkReal> x4530=IKPowWithIntegerCheck(((-1.0)+x4524),-1);
if(!x4530.valid){
continue;
}
IkReal x4527=x4530.value;
if((((1.0)+(((-1.0)*x4524)))) < -0.00001)
continue;
IkReal x4528=IKsqrt(((1.0)+(((-1.0)*x4524))));
IkReal x4529=(r22*x4527*x4528);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x4526))+(((-1.0)*x4525)))))+(IKabs((((x4525*x4529))+((x4526*x4529))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4531=((1.0)*sj0);
IkReal x4532=((1.0)*cj0);
CheckValue<IkReal> x4533 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4532))+(((-1.0)*r12*x4531)))),IkReal(((((-1.0)*gconst101*r00*x4532))+(((-1.0)*gconst101*r10*x4531))+((cj0*gconst100*r01))+((gconst100*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4533.valid){
continue;
}
CheckValue<IkReal> x4534=IKPowWithIntegerCheck(IKsign((((gconst100*r20))+((gconst101*r21)))),-1);
if(!x4534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4533.value)+(((1.5707963267949)*(x4534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4535=IKsin(j4);
IkReal x4536=IKcos(j4);
IkReal x4537=(cj1*cj2);
IkReal x4538=(gconst101*r10);
IkReal x4539=((1.0)*sj1);
IkReal x4540=((1.0)*x4536);
IkReal x4541=(gconst101*x4536);
IkReal x4542=(gconst101*x4535);
IkReal x4543=((1.0)*gconst100*x4535);
evalcond[0]=((((-1.0)*r22*x4540))+((r20*x4542))+(((-1.0)*r21*x4543)));
evalcond[1]=(cj0+(((-1.0)*r12*x4540))+(((-1.0)*r11*x4543))+((x4535*x4538)));
evalcond[2]=((((-1.0)*r02*x4540))+(((-1.0)*sj0))+((r00*x4542))+(((-1.0)*r01*x4543)));
evalcond[3]=((((-1.0)*cj2*x4539))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst100*r21*x4540))+((r22*x4535))+((r20*x4541)));
evalcond[4]=((((-1.0)*gconst100*r01*x4540))+((cj0*x4537))+((r00*x4541))+(((-1.0)*cj0*sj2*x4539))+((r02*x4535)));
evalcond[5]=((((-1.0)*sj0*sj2*x4539))+((r12*x4535))+((sj0*x4537))+((x4536*x4538))+(((-1.0)*gconst100*r11*x4540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4544=IKPowWithIntegerCheck(IKsign((((gconst100*r10))+((gconst101*r11)))),-1);
if(!x4544.valid){
continue;
}
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst100*r21*sj0))+((gconst101*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4544.value)))+(x4545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4546=IKsin(j4);
IkReal x4547=IKcos(j4);
IkReal x4548=(cj1*cj2);
IkReal x4549=(gconst101*r10);
IkReal x4550=((1.0)*sj1);
IkReal x4551=((1.0)*x4547);
IkReal x4552=(gconst101*x4547);
IkReal x4553=(gconst101*x4546);
IkReal x4554=((1.0)*gconst100*x4546);
evalcond[0]=((((-1.0)*r21*x4554))+(((-1.0)*r22*x4551))+((r20*x4553)));
evalcond[1]=((((-1.0)*r11*x4554))+(((-1.0)*r12*x4551))+((x4546*x4549))+cj0);
evalcond[2]=((((-1.0)*r01*x4554))+(((-1.0)*sj0))+((r00*x4553))+(((-1.0)*r02*x4551)));
evalcond[3]=(((r22*x4546))+(((-1.0)*cj2*x4550))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst100*r21*x4551))+((r20*x4552)));
evalcond[4]=(((r02*x4546))+((r00*x4552))+((cj0*x4548))+(((-1.0)*cj0*sj2*x4550))+(((-1.0)*gconst100*r01*x4551)));
evalcond[5]=(((x4547*x4549))+(((-1.0)*sj0*sj2*x4550))+((sj0*x4548))+(((-1.0)*gconst100*r11*x4551))+((r12*x4546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4555=IKPowWithIntegerCheck(IKsign((((gconst100*r00))+((gconst101*r01)))),-1);
if(!x4555.valid){
continue;
}
CheckValue<IkReal> x4556 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst100*r21))+((cj0*gconst101*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4555.value)))+(x4556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4557=IKsin(j4);
IkReal x4558=IKcos(j4);
IkReal x4559=(cj1*cj2);
IkReal x4560=(gconst101*r10);
IkReal x4561=((1.0)*sj1);
IkReal x4562=((1.0)*x4558);
IkReal x4563=(gconst101*x4558);
IkReal x4564=(gconst101*x4557);
IkReal x4565=((1.0)*gconst100*x4557);
evalcond[0]=((((-1.0)*r21*x4565))+(((-1.0)*r22*x4562))+((r20*x4564)));
evalcond[1]=(cj0+((x4557*x4560))+(((-1.0)*r11*x4565))+(((-1.0)*r12*x4562)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x4565))+(((-1.0)*r02*x4562))+((r00*x4564)));
evalcond[3]=((((-1.0)*cj2*x4561))+(((-1.0)*cj1*sj2))+((r22*x4557))+(((-1.0)*gconst100*r21*x4562))+((r20*x4563)));
evalcond[4]=((((-1.0)*gconst100*r01*x4562))+((r02*x4557))+(((-1.0)*cj0*sj2*x4561))+((r00*x4563))+((cj0*x4559)));
evalcond[5]=((((-1.0)*gconst100*r11*x4562))+((r12*x4557))+(((-1.0)*sj0*sj2*x4561))+((sj0*x4559))+((x4558*x4560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4567 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4567)==0){
continue;
}
IkReal x4566=pow(x4567,-0.5);
CheckValue<IkReal> x4568 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4568.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4568.value));
IkReal gconst103=((-1.0)*r11*x4566);
IkReal gconst104=(r10*x4566);
CheckValue<IkReal> x4569 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4569.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4569.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4572 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4572.valid){
continue;
}
IkReal x4570=((-1.0)*(x4572.value));
IkReal x4571=x4566;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst103;
cj5=gconst104;
j5=x4570;
IkReal gconst102=x4570;
IkReal gconst103=((-1.0)*r11*x4571);
IkReal gconst104=(r10*x4571);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4573=((1.0)*sj0);
IkReal x4574=((1.0)*cj0);
CheckValue<IkReal> x4575 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4574))+(((-1.0)*r12*x4573)))),IkReal(((((-1.0)*gconst104*r00*x4574))+((cj0*gconst103*r01))+(((-1.0)*gconst104*r10*x4573))+((gconst103*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4575.valid){
continue;
}
CheckValue<IkReal> x4576=IKPowWithIntegerCheck(IKsign((((gconst104*r21))+((gconst103*r20)))),-1);
if(!x4576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4575.value)+(((1.5707963267949)*(x4576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4577=IKsin(j4);
IkReal x4578=IKcos(j4);
IkReal x4579=(cj1*cj2);
IkReal x4580=((1.0)*sj1);
IkReal x4581=((1.0)*x4578);
IkReal x4582=(gconst104*x4578);
IkReal x4583=(gconst104*x4577);
IkReal x4584=((1.0)*gconst103*x4577);
evalcond[0]=((((-1.0)*r22*x4581))+((r20*x4583))+(((-1.0)*r21*x4584)));
evalcond[1]=(cj0+(((-1.0)*r11*x4584))+(((-1.0)*r12*x4581))+((r10*x4583)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x4584))+(((-1.0)*r02*x4581))+((r00*x4583)));
evalcond[3]=(((r22*x4577))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst103*r21*x4581))+(((-1.0)*cj2*x4580))+((r20*x4582)));
evalcond[4]=(((cj0*x4579))+(((-1.0)*cj0*sj2*x4580))+((r02*x4577))+(((-1.0)*gconst103*r01*x4581))+((r00*x4582)));
evalcond[5]=((((-1.0)*gconst103*r11*x4581))+((r12*x4577))+((sj0*x4579))+(((-1.0)*sj0*sj2*x4580))+((r10*x4582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst104*r20))+(((-1.0)*cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4585.valid){
continue;
}
CheckValue<IkReal> x4586=IKPowWithIntegerCheck(IKsign((((gconst103*r00))+((gconst104*r01)))),-1);
if(!x4586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4585.value)+(((1.5707963267949)*(x4586.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4587=IKsin(j4);
IkReal x4588=IKcos(j4);
IkReal x4589=(cj1*cj2);
IkReal x4590=((1.0)*sj1);
IkReal x4591=((1.0)*x4588);
IkReal x4592=(gconst104*x4588);
IkReal x4593=(gconst104*x4587);
IkReal x4594=((1.0)*gconst103*x4587);
evalcond[0]=((((-1.0)*r22*x4591))+((r20*x4593))+(((-1.0)*r21*x4594)));
evalcond[1]=(cj0+(((-1.0)*r12*x4591))+((r10*x4593))+(((-1.0)*r11*x4594)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r01*x4594))+(((-1.0)*r02*x4591))+((r00*x4593)));
evalcond[3]=(((r22*x4587))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst103*r21*x4591))+(((-1.0)*cj2*x4590))+((r20*x4592)));
evalcond[4]=((((-1.0)*gconst103*r01*x4591))+((r02*x4587))+(((-1.0)*cj0*sj2*x4590))+((cj0*x4589))+((r00*x4592)));
evalcond[5]=(((sj0*x4589))+(((-1.0)*gconst103*r11*x4591))+(((-1.0)*sj0*sj2*x4590))+((r12*x4587))+((r10*x4592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4596 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4596)==0){
continue;
}
IkReal x4595=pow(x4596,-0.5);
CheckValue<IkReal> x4597 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4597.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4597.value))));
IkReal gconst106=((1.0)*r11*x4595);
IkReal gconst107=((-1.0)*r10*x4595);
CheckValue<IkReal> x4598 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4598.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4598.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4601 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4601.valid){
continue;
}
IkReal x4599=((1.0)*(x4601.value));
IkReal x4600=x4595;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4599)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4599)));
IkReal gconst106=((1.0)*r11*x4600);
IkReal gconst107=((-1.0)*r10*x4600);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4604 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4604.valid){
continue;
}
IkReal x4602=((1.0)*(x4604.value));
IkReal x4603=x4595;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4602)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4602)));
IkReal gconst106=((1.0)*r11*x4603);
IkReal gconst107=((-1.0)*r10*x4603);
IkReal x4605=r12*r12;
IkReal x4606=((1.0)*sj0);
IkReal x4607=(cj0*r02);
IkReal x4608=x4595;
j4eval[0]=((IKabs(((((-1.0)*x4606*x4608))+((r12*x4607*x4608))+((sj0*x4605*x4608)))))+(IKabs(((((-1.0)*x4607))+(((-1.0)*r12*x4606))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4611 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x4611.valid){
continue;
}
IkReal x4609=((1.0)*(x4611.value));
IkReal x4610=x4595;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4609)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4609)));
IkReal gconst106=((1.0)*r11*x4610);
IkReal gconst107=((-1.0)*r10*x4610);
IkReal x4612=((1.0)+(((-1.0)*(r12*r12))));
IkReal x4613=(cj1*r22*sj2);
IkReal x4614=(cj2*r22*sj1);
CheckValue<IkReal> x4620=IKPowWithIntegerCheck(x4612,-1);
if(!x4620.valid){
continue;
}
IkReal x4615=x4620.value;
IkReal x4616=((1.0)*x4615);
IkReal x4617=x4595;
IkReal x4618=(r12*x4617);
IkReal x4619=((((-2.0)*r10*r11*r20*r21*x4615))+(((-1.0)*(r22*r22)))+(((-1.0)*x4616*(r10*r10)*(r20*r20)))+(((-1.0)*x4616*(r11*r11)*(r21*r21))));
j4eval[0]=x4619;
j4eval[1]=((IKabs(((((-1.0)*x4614))+(((-1.0)*x4613)))))+(IKabs((((x4614*x4618))+((x4613*x4618))))));
j4eval[2]=IKsign(x4619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4621=(gconst107*r20);
IkReal x4622=(gconst106*r21);
IkReal x4623=((1.0)*cj1*sj2);
IkReal x4624=((1.0)*cj2*sj1);
CheckValue<IkReal> x4625=IKPowWithIntegerCheck(IKsign(((((2.0)*x4621*x4622))+(((-1.0)*(x4622*x4622)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4621*x4621))))),-1);
if(!x4625.valid){
continue;
}
CheckValue<IkReal> x4626 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4624))+(((-1.0)*r22*x4623)))),IkReal((((cj1*sj2*x4622))+(((-1.0)*x4621*x4624))+(((-1.0)*x4621*x4623))+((cj2*sj1*x4622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4625.value)))+(x4626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4627=IKsin(j4);
IkReal x4628=IKcos(j4);
IkReal x4629=(gconst106*r01);
IkReal x4630=(cj1*cj2);
IkReal x4631=(gconst106*r21);
IkReal x4632=(gconst106*r11);
IkReal x4633=((1.0)*sj1);
IkReal x4634=((1.0)*x4628);
IkReal x4635=((1.0)*x4627);
IkReal x4636=(gconst107*x4627);
IkReal x4637=(gconst107*x4628);
evalcond[0]=(((r20*x4636))+(((-1.0)*x4631*x4635))+(((-1.0)*r22*x4634)));
evalcond[1]=(cj0+((r10*x4636))+(((-1.0)*r12*x4634))+(((-1.0)*x4632*x4635)));
evalcond[2]=((((-1.0)*sj0))+((r00*x4636))+(((-1.0)*r02*x4634))+(((-1.0)*x4629*x4635)));
evalcond[3]=((((-1.0)*cj1*sj2))+((r20*x4637))+(((-1.0)*x4631*x4634))+(((-1.0)*cj2*x4633))+((r22*x4627)));
evalcond[4]=(((r00*x4637))+((r02*x4627))+(((-1.0)*cj0*sj2*x4633))+(((-1.0)*x4629*x4634))+((cj0*x4630)));
evalcond[5]=(((r12*x4627))+((sj0*x4630))+((r10*x4637))+(((-1.0)*sj0*sj2*x4633))+(((-1.0)*x4632*x4634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4638=((1.0)*sj0);
IkReal x4639=((1.0)*cj0);
CheckValue<IkReal> x4640=IKPowWithIntegerCheck(IKsign((((gconst107*r21))+((gconst106*r20)))),-1);
if(!x4640.valid){
continue;
}
CheckValue<IkReal> x4641 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4639))+(((-1.0)*r12*x4638)))),IkReal((((cj0*gconst106*r01))+((gconst106*r11*sj0))+(((-1.0)*gconst107*r00*x4639))+(((-1.0)*gconst107*r10*x4638)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4640.value)))+(x4641.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4642=IKsin(j4);
IkReal x4643=IKcos(j4);
IkReal x4644=(gconst106*r01);
IkReal x4645=(cj1*cj2);
IkReal x4646=(gconst106*r21);
IkReal x4647=(gconst106*r11);
IkReal x4648=((1.0)*sj1);
IkReal x4649=((1.0)*x4643);
IkReal x4650=((1.0)*x4642);
IkReal x4651=(gconst107*x4642);
IkReal x4652=(gconst107*x4643);
evalcond[0]=(((r20*x4651))+(((-1.0)*r22*x4649))+(((-1.0)*x4646*x4650)));
evalcond[1]=((((-1.0)*x4647*x4650))+cj0+(((-1.0)*r12*x4649))+((r10*x4651)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4649))+(((-1.0)*x4644*x4650))+((r00*x4651)));
evalcond[3]=(((r20*x4652))+(((-1.0)*cj1*sj2))+((r22*x4642))+(((-1.0)*cj2*x4648))+(((-1.0)*x4646*x4649)));
evalcond[4]=(((r02*x4642))+((r00*x4652))+(((-1.0)*cj0*sj2*x4648))+(((-1.0)*x4644*x4649))+((cj0*x4645)));
evalcond[5]=((((-1.0)*x4647*x4649))+((sj0*x4645))+((r12*x4642))+((r10*x4652))+(((-1.0)*sj0*sj2*x4648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4653=IKPowWithIntegerCheck(IKsign((((gconst107*r01))+((gconst106*r00)))),-1);
if(!x4653.valid){
continue;
}
CheckValue<IkReal> x4654 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst107*r20))+(((-1.0)*cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4653.value)))+(x4654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4655=IKsin(j4);
IkReal x4656=IKcos(j4);
IkReal x4657=(gconst106*r01);
IkReal x4658=(cj1*cj2);
IkReal x4659=(gconst106*r21);
IkReal x4660=(gconst106*r11);
IkReal x4661=((1.0)*sj1);
IkReal x4662=((1.0)*x4656);
IkReal x4663=((1.0)*x4655);
IkReal x4664=(gconst107*x4655);
IkReal x4665=(gconst107*x4656);
evalcond[0]=((((-1.0)*x4659*x4663))+(((-1.0)*r22*x4662))+((r20*x4664)));
evalcond[1]=(cj0+((r10*x4664))+(((-1.0)*x4660*x4663))+(((-1.0)*r12*x4662)));
evalcond[2]=((((-1.0)*sj0))+((r00*x4664))+(((-1.0)*x4657*x4663))+(((-1.0)*r02*x4662)));
evalcond[3]=((((-1.0)*x4659*x4662))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4661))+((r22*x4655))+((r20*x4665)));
evalcond[4]=(((cj0*x4658))+((r02*x4655))+((r00*x4665))+(((-1.0)*cj0*sj2*x4661))+(((-1.0)*x4657*x4662)));
evalcond[5]=(((sj0*x4658))+((r12*x4655))+((r10*x4665))+(((-1.0)*x4660*x4662))+(((-1.0)*sj0*sj2*x4661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4666=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4666;
j4eval[1]=IKsign(x4666);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4667=((1.0)*sj5);
IkReal x4668=((((-1.0)*r20*x4667))+(((-1.0)*cj5*r21)));
j4eval[0]=x4668;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x4667))+((cj5*r00))))));
j4eval[2]=IKsign(x4668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4669=(sj1*sj2);
IkReal x4670=(cj5*r10);
IkReal x4671=(r11*sj5);
IkReal x4672=(cj1*cj2);
IkReal x4673=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4673;
j4eval[1]=IKsign(x4673);
j4eval[2]=((IKabs(((((-1.0)*x4671*x4672))+((x4670*x4672))+((x4669*x4671))+(((-1.0)*x4669*x4670)))))+(IKabs(((((-1.0)*r12*x4672))+((r12*x4669))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4674=(sj1*sj2);
IkReal x4675=(cj5*r10);
IkReal x4676=(r11*sj5);
IkReal x4677=(cj1*cj2);
CheckValue<IkReal> x4678 = IKatan2WithCheck(IkReal(((((-1.0)*x4674*x4675))+((x4674*x4676))+(((-1.0)*x4676*x4677))+((x4675*x4677)))),IkReal(((((-1.0)*r12*x4677))+((r12*x4674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4678.valid){
continue;
}
CheckValue<IkReal> x4679=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4678.value)+(((1.5707963267949)*(x4679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4680=IKcos(j4);
IkReal x4681=IKsin(j4);
IkReal x4682=(cj5*r10);
IkReal x4683=((1.0)*sj2);
IkReal x4684=((1.0)*x4680);
IkReal x4685=(cj5*x4681);
IkReal x4686=(cj5*x4680);
IkReal x4687=((1.0)*sj5*x4681);
evalcond[0]=(((x4680*x4682))+(((-1.0)*r11*sj5*x4684))+((r12*x4681)));
evalcond[1]=(((r20*x4685))+(((-1.0)*r22*x4684))+(((-1.0)*r21*x4687)));
evalcond[2]=((((-1.0)*r01*x4687))+(((-1.0)*r02*x4684))+((r00*x4685)));
evalcond[3]=((1.0)+(((-1.0)*r11*x4687))+((x4681*x4682))+(((-1.0)*r12*x4684)));
evalcond[4]=((((-1.0)*sj1*x4683))+(((-1.0)*r01*sj5*x4684))+((r02*x4681))+((r00*x4686))+((cj1*cj2)));
evalcond[5]=(((r20*x4686))+(((-1.0)*cj1*x4683))+(((-1.0)*cj2*sj1))+((r22*x4681))+(((-1.0)*r21*sj5*x4684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4688=((1.0)*sj5);
CheckValue<IkReal> x4689 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x4688))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4689.valid){
continue;
}
CheckValue<IkReal> x4690=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x4688)))),-1);
if(!x4690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4689.value)+(((1.5707963267949)*(x4690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4691=IKcos(j4);
IkReal x4692=IKsin(j4);
IkReal x4693=(cj5*r10);
IkReal x4694=((1.0)*sj2);
IkReal x4695=((1.0)*x4691);
IkReal x4696=(cj5*x4692);
IkReal x4697=(cj5*x4691);
IkReal x4698=((1.0)*sj5*x4692);
evalcond[0]=((((-1.0)*r11*sj5*x4695))+((r12*x4692))+((x4691*x4693)));
evalcond[1]=((((-1.0)*r22*x4695))+(((-1.0)*r21*x4698))+((r20*x4696)));
evalcond[2]=((((-1.0)*r01*x4698))+(((-1.0)*r02*x4695))+((r00*x4696)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4695))+((x4692*x4693))+(((-1.0)*r11*x4698)));
evalcond[4]=(((r02*x4692))+(((-1.0)*r01*sj5*x4695))+((r00*x4697))+((cj1*cj2))+(((-1.0)*sj1*x4694)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x4694))+((r22*x4692))+(((-1.0)*r21*sj5*x4695))+((r20*x4697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4699=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4699.valid){
continue;
}
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4699.value)))+(x4700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4701=IKcos(j4);
IkReal x4702=IKsin(j4);
IkReal x4703=(cj5*r10);
IkReal x4704=((1.0)*sj2);
IkReal x4705=((1.0)*x4701);
IkReal x4706=(cj5*x4702);
IkReal x4707=(cj5*x4701);
IkReal x4708=((1.0)*sj5*x4702);
evalcond[0]=((((-1.0)*r11*sj5*x4705))+((x4701*x4703))+((r12*x4702)));
evalcond[1]=((((-1.0)*r22*x4705))+((r20*x4706))+(((-1.0)*r21*x4708)));
evalcond[2]=((((-1.0)*r01*x4708))+(((-1.0)*r02*x4705))+((r00*x4706)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4705))+(((-1.0)*r11*x4708))+((x4702*x4703)));
evalcond[4]=((((-1.0)*r01*sj5*x4705))+((r00*x4707))+(((-1.0)*sj1*x4704))+((cj1*cj2))+((r02*x4702)));
evalcond[5]=((((-1.0)*r21*sj5*x4705))+(((-1.0)*cj2*sj1))+((r20*x4707))+(((-1.0)*cj1*x4704))+((r22*x4702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4709=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4709;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x4709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4710=((1.0)*sj5);
IkReal x4711=((((-1.0)*cj5*r01))+(((-1.0)*r00*x4710)));
j4eval[0]=x4711;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x4710))))));
j4eval[2]=IKsign(x4711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4712=cj5*cj5;
IkReal x4713=r11*r11;
IkReal x4714=(r11*sj5);
IkReal x4715=(cj5*r10);
IkReal x4716=((((-1.0)*x4712*x4713))+(r12*r12)+((x4712*(r10*r10)))+x4713+(((-2.0)*x4714*x4715)));
j4eval[0]=x4716;
j4eval[1]=IKsign(x4716);
j4eval[2]=((IKabs(((((-1.0)*x4714))+x4715)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4717=cj5*cj5;
IkReal x4718=r11*r11;
IkReal x4719=(cj5*r10);
IkReal x4720=(r11*sj5);
CheckValue<IkReal> x4721 = IKatan2WithCheck(IkReal(((((-1.0)*x4720))+x4719)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4721.valid){
continue;
}
CheckValue<IkReal> x4722=IKPowWithIntegerCheck(IKsign((((x4717*(r10*r10)))+(r12*r12)+(((-1.0)*x4717*x4718))+x4718+(((-2.0)*x4719*x4720)))),-1);
if(!x4722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4721.value)+(((1.5707963267949)*(x4722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4723=IKcos(j4);
IkReal x4724=IKsin(j4);
IkReal x4725=(cj5*r10);
IkReal x4726=((1.0)*cj1);
IkReal x4727=((1.0)*x4723);
IkReal x4728=(cj5*x4724);
IkReal x4729=(cj5*x4723);
IkReal x4730=((1.0)*sj5*x4724);
evalcond[0]=(((x4723*x4725))+(((-1.0)*r11*sj5*x4727))+((r12*x4724)));
evalcond[1]=(((r20*x4728))+(((-1.0)*r21*x4730))+(((-1.0)*r22*x4727)));
evalcond[2]=((((-1.0)*r01*x4730))+((r00*x4728))+(((-1.0)*r02*x4727)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4727))+(((-1.0)*r11*x4730))+((x4724*x4725)));
evalcond[4]=((((-1.0)*cj2*x4726))+(((-1.0)*r01*sj5*x4727))+((sj1*sj2))+((r02*x4724))+((r00*x4729)));
evalcond[5]=((((-1.0)*sj2*x4726))+((r20*x4729))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4727))+((r22*x4724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4731=((1.0)*sj5);
CheckValue<IkReal> x4732 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4732.valid){
continue;
}
CheckValue<IkReal> x4733=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x4731)))),-1);
if(!x4733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4732.value)+(((1.5707963267949)*(x4733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4734=IKcos(j4);
IkReal x4735=IKsin(j4);
IkReal x4736=(cj5*r10);
IkReal x4737=((1.0)*cj1);
IkReal x4738=((1.0)*x4734);
IkReal x4739=(cj5*x4735);
IkReal x4740=(cj5*x4734);
IkReal x4741=((1.0)*sj5*x4735);
evalcond[0]=(((x4734*x4736))+(((-1.0)*r11*sj5*x4738))+((r12*x4735)));
evalcond[1]=(((r20*x4739))+(((-1.0)*r21*x4741))+(((-1.0)*r22*x4738)));
evalcond[2]=((((-1.0)*r01*x4741))+((r00*x4739))+(((-1.0)*r02*x4738)));
evalcond[3]=((-1.0)+((x4735*x4736))+(((-1.0)*r11*x4741))+(((-1.0)*r12*x4738)));
evalcond[4]=((((-1.0)*cj2*x4737))+((r00*x4740))+(((-1.0)*r01*sj5*x4738))+((sj1*sj2))+((r02*x4735)));
evalcond[5]=((((-1.0)*sj2*x4737))+((r20*x4740))+(((-1.0)*cj2*sj1))+(((-1.0)*r21*sj5*x4738))+((r22*x4735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4742=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4742.valid){
continue;
}
CheckValue<IkReal> x4743 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4742.value)))+(x4743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4744=IKcos(j4);
IkReal x4745=IKsin(j4);
IkReal x4746=(cj5*r10);
IkReal x4747=((1.0)*cj1);
IkReal x4748=((1.0)*x4744);
IkReal x4749=(cj5*x4745);
IkReal x4750=(cj5*x4744);
IkReal x4751=((1.0)*sj5*x4745);
evalcond[0]=(((r12*x4745))+(((-1.0)*r11*sj5*x4748))+((x4744*x4746)));
evalcond[1]=((((-1.0)*r21*x4751))+((r20*x4749))+(((-1.0)*r22*x4748)));
evalcond[2]=((((-1.0)*r01*x4751))+((r00*x4749))+(((-1.0)*r02*x4748)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x4748))+(((-1.0)*r11*x4751))+((x4745*x4746)));
evalcond[4]=((((-1.0)*cj2*x4747))+((r00*x4750))+((sj1*sj2))+((r02*x4745))+(((-1.0)*r01*sj5*x4748)));
evalcond[5]=((((-1.0)*sj2*x4747))+(((-1.0)*cj2*sj1))+((r20*x4750))+((r22*x4745))+(((-1.0)*r21*sj5*x4748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4753 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4753)==0){
continue;
}
IkReal x4752=pow(x4753,-0.5);
CheckValue<IkReal> x4754 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4754.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4754.value));
IkReal gconst109=((-1.0)*r01*x4752);
IkReal gconst110=(r00*x4752);
CheckValue<IkReal> x4755 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4755.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4755.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x4758 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4758.valid){
continue;
}
IkReal x4756=((-1.0)*(x4758.value));
IkReal x4757=x4752;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst109;
cj5=gconst110;
j5=x4756;
IkReal gconst108=x4756;
IkReal gconst109=((-1.0)*r01*x4757);
IkReal gconst110=(r00*x4757);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4759=((1.0)*sj0);
IkReal x4760=((1.0)*cj0);
CheckValue<IkReal> x4761=IKPowWithIntegerCheck(IKsign((((gconst109*r20))+((gconst110*r21)))),-1);
if(!x4761.valid){
continue;
}
CheckValue<IkReal> x4762 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4760))+(((-1.0)*r12*x4759)))),IkReal(((((-1.0)*gconst110*r00*x4760))+((cj0*gconst109*r01))+((gconst109*r11*sj0))+(((-1.0)*gconst110*r10*x4759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4761.value)))+(x4762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4763=IKsin(j4);
IkReal x4764=IKcos(j4);
IkReal x4765=(cj1*cj2);
IkReal x4766=(gconst110*r20);
IkReal x4767=((1.0)*sj1);
IkReal x4768=(gconst109*r01);
IkReal x4769=(gconst109*r11);
IkReal x4770=(gconst109*r21);
IkReal x4771=((1.0)*x4764);
IkReal x4772=((1.0)*x4763);
IkReal x4773=(gconst110*x4764);
IkReal x4774=(gconst110*x4763);
evalcond[0]=((((-1.0)*r22*x4771))+(((-1.0)*x4770*x4772))+((x4763*x4766)));
evalcond[1]=((((-1.0)*x4769*x4772))+cj0+(((-1.0)*r12*x4771))+((r10*x4774)));
evalcond[2]=((((-1.0)*sj0))+((r00*x4774))+(((-1.0)*x4768*x4772))+(((-1.0)*r02*x4771)));
evalcond[3]=(((r22*x4763))+(((-1.0)*cj1*sj2))+((x4764*x4766))+(((-1.0)*x4770*x4771))+(((-1.0)*cj2*x4767)));
evalcond[4]=(((r02*x4763))+(((-1.0)*cj0*sj2*x4767))+((r00*x4773))+((cj0*x4765))+(((-1.0)*x4768*x4771)));
evalcond[5]=((((-1.0)*sj0*sj2*x4767))+(((-1.0)*x4769*x4771))+((sj0*x4765))+((r12*x4763))+((r10*x4773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4775 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst109*r21*sj0))+((gconst110*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4775.valid){
continue;
}
CheckValue<IkReal> x4776=IKPowWithIntegerCheck(IKsign((((gconst109*r10))+((gconst110*r11)))),-1);
if(!x4776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4775.value)+(((1.5707963267949)*(x4776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4777=IKsin(j4);
IkReal x4778=IKcos(j4);
IkReal x4779=(cj1*cj2);
IkReal x4780=(gconst110*r20);
IkReal x4781=((1.0)*sj1);
IkReal x4782=(gconst109*r01);
IkReal x4783=(gconst109*r11);
IkReal x4784=(gconst109*r21);
IkReal x4785=((1.0)*x4778);
IkReal x4786=((1.0)*x4777);
IkReal x4787=(gconst110*x4778);
IkReal x4788=(gconst110*x4777);
evalcond[0]=(((x4777*x4780))+(((-1.0)*r22*x4785))+(((-1.0)*x4784*x4786)));
evalcond[1]=(((r10*x4788))+cj0+(((-1.0)*x4783*x4786))+(((-1.0)*r12*x4785)));
evalcond[2]=((((-1.0)*sj0))+((r00*x4788))+(((-1.0)*x4782*x4786))+(((-1.0)*r02*x4785)));
evalcond[3]=(((x4778*x4780))+(((-1.0)*cj1*sj2))+((r22*x4777))+(((-1.0)*cj2*x4781))+(((-1.0)*x4784*x4785)));
evalcond[4]=(((cj0*x4779))+((r00*x4787))+(((-1.0)*cj0*sj2*x4781))+(((-1.0)*x4782*x4785))+((r02*x4777)));
evalcond[5]=(((r10*x4787))+((r12*x4777))+(((-1.0)*x4783*x4785))+((sj0*x4779))+(((-1.0)*sj0*sj2*x4781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4790 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4790)==0){
continue;
}
IkReal x4789=pow(x4790,-0.5);
CheckValue<IkReal> x4791 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4791.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4791.value))));
IkReal gconst112=((1.0)*r01*x4789);
IkReal gconst113=((-1.0)*r00*x4789);
CheckValue<IkReal> x4792 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4792.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4792.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x4795 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4795.valid){
continue;
}
IkReal x4793=((1.0)*(x4795.value));
IkReal x4794=x4789;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4793)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4793)));
IkReal gconst112=((1.0)*r01*x4794);
IkReal gconst113=((-1.0)*r00*x4794);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x4798 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4798.valid){
continue;
}
IkReal x4796=((1.0)*(x4798.value));
IkReal x4797=x4789;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4796)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4796)));
IkReal gconst112=((1.0)*r01*x4797);
IkReal gconst113=((-1.0)*r00*x4797);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x4801 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x4801.valid){
continue;
}
IkReal x4799=((1.0)*(x4801.value));
IkReal x4800=x4789;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4799)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4799)));
IkReal gconst112=((1.0)*r01*x4800);
IkReal gconst113=((-1.0)*r00*x4800);
IkReal x4802=r02*r02;
IkReal x4803=(r12*sj0);
IkReal x4804=((1.0)*cj0);
IkReal x4805=x4789;
j4eval[0]=((IKabs((((cj0*x4802*x4805))+(((-1.0)*x4804*x4805))+((r02*x4803*x4805)))))+(IKabs(((((-1.0)*r02*x4804))+(((-1.0)*x4803))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4806=((1.0)*sj0);
IkReal x4807=((1.0)*cj0);
CheckValue<IkReal> x4808=IKPowWithIntegerCheck(IKsign((((gconst112*r20))+((gconst113*r21)))),-1);
if(!x4808.valid){
continue;
}
CheckValue<IkReal> x4809 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4806))+(((-1.0)*r02*x4807)))),IkReal((((cj0*gconst112*r01))+(((-1.0)*gconst113*r00*x4807))+(((-1.0)*gconst113*r10*x4806))+((gconst112*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4809.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4808.value)))+(x4809.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4810=IKsin(j4);
IkReal x4811=IKcos(j4);
IkReal x4812=(gconst113*r10);
IkReal x4813=(cj1*cj2);
IkReal x4814=(gconst112*r01);
IkReal x4815=(gconst112*r11);
IkReal x4816=((1.0)*sj1);
IkReal x4817=(gconst113*r20);
IkReal x4818=(gconst113*r00);
IkReal x4819=(gconst112*r21);
IkReal x4820=((1.0)*x4811);
IkReal x4821=((1.0)*x4810);
evalcond[0]=((((-1.0)*r22*x4820))+(((-1.0)*x4819*x4821))+((x4810*x4817)));
evalcond[1]=(cj0+(((-1.0)*x4815*x4821))+((x4810*x4812))+(((-1.0)*r12*x4820)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4814*x4821))+(((-1.0)*r02*x4820))+((x4810*x4818)));
evalcond[3]=(((x4811*x4817))+(((-1.0)*cj1*sj2))+(((-1.0)*x4819*x4820))+(((-1.0)*cj2*x4816))+((r22*x4810)));
evalcond[4]=(((cj0*x4813))+(((-1.0)*x4814*x4820))+((x4811*x4818))+((r02*x4810))+(((-1.0)*cj0*sj2*x4816)));
evalcond[5]=((((-1.0)*x4815*x4820))+((x4811*x4812))+((r12*x4810))+(((-1.0)*sj0*sj2*x4816))+((sj0*x4813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4822 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst113*r20*sj0))+(((-1.0)*gconst112*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4822.valid){
continue;
}
CheckValue<IkReal> x4823=IKPowWithIntegerCheck(IKsign((((gconst113*r11))+((gconst112*r10)))),-1);
if(!x4823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4822.value)+(((1.5707963267949)*(x4823.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4824=IKsin(j4);
IkReal x4825=IKcos(j4);
IkReal x4826=(gconst113*r10);
IkReal x4827=(cj1*cj2);
IkReal x4828=(gconst112*r01);
IkReal x4829=(gconst112*r11);
IkReal x4830=((1.0)*sj1);
IkReal x4831=(gconst113*r20);
IkReal x4832=(gconst113*r00);
IkReal x4833=(gconst112*r21);
IkReal x4834=((1.0)*x4825);
IkReal x4835=((1.0)*x4824);
evalcond[0]=(((x4824*x4831))+(((-1.0)*x4833*x4835))+(((-1.0)*r22*x4834)));
evalcond[1]=(cj0+(((-1.0)*r12*x4834))+(((-1.0)*x4829*x4835))+((x4824*x4826)));
evalcond[2]=(((x4824*x4832))+(((-1.0)*sj0))+(((-1.0)*r02*x4834))+(((-1.0)*x4828*x4835)));
evalcond[3]=(((r22*x4824))+((x4825*x4831))+(((-1.0)*x4833*x4834))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x4830)));
evalcond[4]=(((x4825*x4832))+((r02*x4824))+(((-1.0)*cj0*sj2*x4830))+(((-1.0)*x4828*x4834))+((cj0*x4827)));
evalcond[5]=((((-1.0)*sj0*sj2*x4830))+(((-1.0)*x4829*x4834))+((r12*x4824))+((x4825*x4826))+((sj0*x4827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4836 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst112*r21))+((cj0*gconst113*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4836.valid){
continue;
}
CheckValue<IkReal> x4837=IKPowWithIntegerCheck(IKsign((((gconst112*r00))+((gconst113*r01)))),-1);
if(!x4837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4836.value)+(((1.5707963267949)*(x4837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4838=IKsin(j4);
IkReal x4839=IKcos(j4);
IkReal x4840=(gconst113*r10);
IkReal x4841=(cj1*cj2);
IkReal x4842=(gconst112*r01);
IkReal x4843=(gconst112*r11);
IkReal x4844=((1.0)*sj1);
IkReal x4845=(gconst113*r20);
IkReal x4846=(gconst113*r00);
IkReal x4847=(gconst112*r21);
IkReal x4848=((1.0)*x4839);
IkReal x4849=((1.0)*x4838);
evalcond[0]=((((-1.0)*x4847*x4849))+((x4838*x4845))+(((-1.0)*r22*x4848)));
evalcond[1]=(cj0+((x4838*x4840))+(((-1.0)*r12*x4848))+(((-1.0)*x4843*x4849)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x4842*x4849))+(((-1.0)*r02*x4848))+((x4838*x4846)));
evalcond[3]=((((-1.0)*cj2*x4844))+(((-1.0)*x4847*x4848))+(((-1.0)*cj1*sj2))+((r22*x4838))+((x4839*x4845)));
evalcond[4]=((((-1.0)*x4842*x4848))+(((-1.0)*cj0*sj2*x4844))+((x4839*x4846))+((r02*x4838))+((cj0*x4841)));
evalcond[5]=(((r12*x4838))+((sj0*x4841))+((x4839*x4840))+(((-1.0)*sj0*sj2*x4844))+(((-1.0)*x4843*x4848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4850=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4850;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x4850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4851=((1.0)*sj5);
IkReal x4852=((((-1.0)*r20*x4851))+(((-1.0)*cj5*r21)));
j4eval[0]=x4852;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x4851))))));
j4eval[2]=IKsign(x4852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4853=cj5*cj5;
IkReal x4854=r01*r01;
IkReal x4855=(cj5*r00);
IkReal x4856=(r01*sj5);
IkReal x4857=((((-1.0)*x4853*x4854))+(((-2.0)*x4855*x4856))+(r02*r02)+x4854+((x4853*(r00*r00))));
j4eval[0]=x4857;
j4eval[1]=((IKabs(((((-1.0)*x4856))+x4855)))+(IKabs(r02)));
j4eval[2]=IKsign(x4857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4858=cj5*cj5;
IkReal x4859=r01*r01;
IkReal x4860=(r01*sj5);
IkReal x4861=(cj5*r00);
CheckValue<IkReal> x4862=IKPowWithIntegerCheck(IKsign((((x4858*(r00*r00)))+(((-1.0)*x4858*x4859))+(((-2.0)*x4860*x4861))+(r02*r02)+x4859)),-1);
if(!x4862.valid){
continue;
}
CheckValue<IkReal> x4863 = IKatan2WithCheck(IkReal(((((-1.0)*x4860))+x4861)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4862.value)))+(x4863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4864=IKcos(j4);
IkReal x4865=IKsin(j4);
IkReal x4866=((1.0)*sj2);
IkReal x4867=((1.0)*x4864);
IkReal x4868=(cj5*x4864);
IkReal x4869=(cj5*x4865);
IkReal x4870=((1.0)*sj5*x4865);
evalcond[0]=(((r00*x4868))+(((-1.0)*r01*sj5*x4867))+((r02*x4865)));
evalcond[1]=((((-1.0)*r22*x4867))+(((-1.0)*r21*x4870))+((r20*x4869)));
evalcond[2]=((((-1.0)*r12*x4867))+((r10*x4869))+(((-1.0)*r11*x4870)));
evalcond[3]=((-1.0)+((r00*x4869))+(((-1.0)*r02*x4867))+(((-1.0)*r01*x4870)));
evalcond[4]=((((-1.0)*r11*sj5*x4867))+((r12*x4865))+((r10*x4868))+(((-1.0)*sj1*x4866))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r22*x4865))+(((-1.0)*r21*sj5*x4867))+((r20*x4868))+(((-1.0)*cj1*x4866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4871=((1.0)*sj5);
CheckValue<IkReal> x4872 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x4871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4872.valid){
continue;
}
CheckValue<IkReal> x4873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4871))+(((-1.0)*cj5*r21)))),-1);
if(!x4873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4872.value)+(((1.5707963267949)*(x4873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4874=IKcos(j4);
IkReal x4875=IKsin(j4);
IkReal x4876=((1.0)*sj2);
IkReal x4877=((1.0)*x4874);
IkReal x4878=(cj5*x4874);
IkReal x4879=(cj5*x4875);
IkReal x4880=((1.0)*sj5*x4875);
evalcond[0]=((((-1.0)*r01*sj5*x4877))+((r02*x4875))+((r00*x4878)));
evalcond[1]=(((r20*x4879))+(((-1.0)*r21*x4880))+(((-1.0)*r22*x4877)));
evalcond[2]=((((-1.0)*r11*x4880))+((r10*x4879))+(((-1.0)*r12*x4877)));
evalcond[3]=((-1.0)+((r00*x4879))+(((-1.0)*r02*x4877))+(((-1.0)*r01*x4880)));
evalcond[4]=((((-1.0)*sj1*x4876))+((r10*x4878))+((cj1*cj2))+((r12*x4875))+(((-1.0)*r11*sj5*x4877)));
evalcond[5]=(((r20*x4878))+(((-1.0)*r21*sj5*x4877))+(((-1.0)*cj2*sj1))+((r22*x4875))+(((-1.0)*cj1*x4876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4881=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4881.valid){
continue;
}
CheckValue<IkReal> x4882 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4881.value)))+(x4882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4883=IKcos(j4);
IkReal x4884=IKsin(j4);
IkReal x4885=((1.0)*sj2);
IkReal x4886=((1.0)*x4883);
IkReal x4887=(cj5*x4883);
IkReal x4888=(cj5*x4884);
IkReal x4889=((1.0)*sj5*x4884);
evalcond[0]=((((-1.0)*r01*sj5*x4886))+((r02*x4884))+((r00*x4887)));
evalcond[1]=((((-1.0)*r21*x4889))+((r20*x4888))+(((-1.0)*r22*x4886)));
evalcond[2]=((((-1.0)*r12*x4886))+(((-1.0)*r11*x4889))+((r10*x4888)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4886))+((r00*x4888))+(((-1.0)*r01*x4889)));
evalcond[4]=(((r12*x4884))+(((-1.0)*sj1*x4885))+(((-1.0)*r11*sj5*x4886))+((r10*x4887))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj1*x4885))+(((-1.0)*r21*sj5*x4886))+(((-1.0)*cj2*sj1))+((r20*x4887))+((r22*x4884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4890=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4890;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x4890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4891=((1.0)*sj5);
IkReal x4892=((((-1.0)*cj5*r11))+(((-1.0)*r10*x4891)));
j4eval[0]=x4892;
j4eval[1]=IKsign(x4892);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x4891)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4893=(cj1*cj2);
IkReal x4894=(cj5*r00);
IkReal x4895=(r01*sj5);
IkReal x4896=((1.0)*sj1*sj2);
IkReal x4897=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4897;
j4eval[1]=((IKabs(((((-1.0)*x4893*x4894))+((sj1*sj2*x4894))+(((-1.0)*x4895*x4896))+((x4893*x4895)))))+(IKabs((((r02*x4893))+(((-1.0)*r02*x4896))))));
j4eval[2]=IKsign(x4897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4898=(r01*sj5);
IkReal x4899=(cj1*cj2);
IkReal x4900=(cj5*r00);
IkReal x4901=((1.0)*sj1*sj2);
CheckValue<IkReal> x4902=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4902.valid){
continue;
}
CheckValue<IkReal> x4903 = IKatan2WithCheck(IkReal(((((-1.0)*x4898*x4901))+((sj1*sj2*x4900))+(((-1.0)*x4899*x4900))+((x4898*x4899)))),IkReal((((r02*x4899))+(((-1.0)*r02*x4901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4902.value)))+(x4903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4904=IKcos(j4);
IkReal x4905=IKsin(j4);
IkReal x4906=((1.0)*cj1);
IkReal x4907=((1.0)*x4904);
IkReal x4908=(cj5*x4904);
IkReal x4909=(cj5*x4905);
IkReal x4910=((1.0)*sj5*x4905);
evalcond[0]=((((-1.0)*r01*sj5*x4907))+((r02*x4905))+((r00*x4908)));
evalcond[1]=(((r20*x4909))+(((-1.0)*r22*x4907))+(((-1.0)*r21*x4910)));
evalcond[2]=((((-1.0)*r12*x4907))+(((-1.0)*r11*x4910))+((r10*x4909)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4907))+((r00*x4909))+(((-1.0)*r01*x4910)));
evalcond[4]=(((r10*x4908))+((sj1*sj2))+(((-1.0)*r11*sj5*x4907))+((r12*x4905))+(((-1.0)*cj2*x4906)));
evalcond[5]=((((-1.0)*sj2*x4906))+(((-1.0)*cj2*sj1))+((r20*x4908))+(((-1.0)*r21*sj5*x4907))+((r22*x4905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4911=((1.0)*sj5);
CheckValue<IkReal> x4912=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x4911)))),-1);
if(!x4912.valid){
continue;
}
CheckValue<IkReal> x4913 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x4911)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4912.value)))+(x4913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4914=IKcos(j4);
IkReal x4915=IKsin(j4);
IkReal x4916=((1.0)*cj1);
IkReal x4917=((1.0)*x4914);
IkReal x4918=(cj5*x4914);
IkReal x4919=(cj5*x4915);
IkReal x4920=((1.0)*sj5*x4915);
evalcond[0]=(((r02*x4915))+(((-1.0)*r01*sj5*x4917))+((r00*x4918)));
evalcond[1]=(((r20*x4919))+(((-1.0)*r22*x4917))+(((-1.0)*r21*x4920)));
evalcond[2]=(((r10*x4919))+(((-1.0)*r12*x4917))+(((-1.0)*r11*x4920)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4917))+(((-1.0)*r01*x4920))+((r00*x4919)));
evalcond[4]=((((-1.0)*cj2*x4916))+((r10*x4918))+((sj1*sj2))+((r12*x4915))+(((-1.0)*r11*sj5*x4917)));
evalcond[5]=((((-1.0)*sj2*x4916))+(((-1.0)*cj2*sj1))+((r20*x4918))+(((-1.0)*r21*sj5*x4917))+((r22*x4915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4921 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4921.valid){
continue;
}
CheckValue<IkReal> x4922=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4921.value)+(((1.5707963267949)*(x4922.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4923=IKcos(j4);
IkReal x4924=IKsin(j4);
IkReal x4925=((1.0)*cj1);
IkReal x4926=((1.0)*x4923);
IkReal x4927=(cj5*x4923);
IkReal x4928=(cj5*x4924);
IkReal x4929=((1.0)*sj5*x4924);
evalcond[0]=((((-1.0)*r01*sj5*x4926))+((r00*x4927))+((r02*x4924)));
evalcond[1]=(((r20*x4928))+(((-1.0)*r21*x4929))+(((-1.0)*r22*x4926)));
evalcond[2]=(((r10*x4928))+(((-1.0)*r11*x4929))+(((-1.0)*r12*x4926)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4926))+(((-1.0)*r01*x4929))+((r00*x4928)));
evalcond[4]=(((r10*x4927))+(((-1.0)*cj2*x4925))+((sj1*sj2))+(((-1.0)*r11*sj5*x4926))+((r12*x4924)));
evalcond[5]=((((-1.0)*r21*sj5*x4926))+((r20*x4927))+(((-1.0)*cj2*sj1))+((r22*x4924))+(((-1.0)*sj2*x4925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4930=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4930);
rxp1_1=(px*r21);
rxp1_2=(r11*x4930);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4931=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4931);
rxp1_1=(px*r21);
rxp1_2=(r11*x4931);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4932=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4932);
rxp1_1=(px*r21);
rxp1_2=(r11*x4932);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4935=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x4935.valid){
continue;
}
IkReal x4933=x4935.value;
IkReal x4934=(sj0*x4933);
cj4array[0]=(((sj1*sj2*x4934))+(((-1.0)*cj1*cj2*x4934)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4936=IKsin(j4);
IkReal x4937=IKcos(j4);
IkReal x4938=(cj5*r20);
IkReal x4939=((1.0)*sj5);
evalcond[0]=(r02*x4936);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4937)));
evalcond[2]=(((x4936*x4938))+(((-1.0)*r21*x4936*x4939)));
evalcond[3]=(((cj5*r10*x4936))+(((-1.0)*r11*x4936*x4939)));
evalcond[4]=(((x4937*x4938))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r21*x4937*x4939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4941=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x4941.valid){
continue;
}
IkReal x4940=x4941.value;
cj4array[0]=(((cj1*sj2*x4940))+((cj2*sj1*x4940)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4942=IKsin(j4);
IkReal x4943=IKcos(j4);
IkReal x4944=((1.0)*sj0);
IkReal x4945=(cj5*r10);
IkReal x4946=((1.0)*r11*sj5);
evalcond[0]=(r02*x4942);
evalcond[1]=((((-1.0)*r02*x4943))+(((-1.0)*x4944)));
evalcond[2]=((((-1.0)*r21*sj5*x4942))+((cj5*r20*x4942)));
evalcond[3]=((((-1.0)*x4942*x4946))+((x4942*x4945)));
evalcond[4]=((((-1.0)*x4943*x4946))+((cj1*cj2*sj0))+((x4943*x4945))+(((-1.0)*sj1*sj2*x4944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4947=IKPowWithIntegerCheck(r02,-1);
if(!x4947.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4947.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4948=IKsin(j4);
IkReal x4949=IKcos(j4);
IkReal x4950=((1.0)*sj2);
IkReal x4951=(cj5*x4949);
IkReal x4952=(cj5*x4948);
IkReal x4953=((1.0)*sj5*x4949);
IkReal x4954=((1.0)*sj5*x4948);
evalcond[0]=(r02*x4948);
evalcond[1]=((((-1.0)*r21*x4954))+((r20*x4952)));
evalcond[2]=(((r10*x4952))+(((-1.0)*r11*x4954)));
evalcond[3]=((((-1.0)*r21*x4953))+(((-1.0)*cj2*sj1))+((r20*x4951))+(((-1.0)*cj1*x4950)));
evalcond[4]=(((cj1*cj2*sj0))+((r10*x4951))+(((-1.0)*r11*x4953))+(((-1.0)*sj0*sj1*x4950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4955=((1.0)*sj0);
IkReal x4956=((1.0)*cj0);
CheckValue<IkReal> x4957 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4956))+(((-1.0)*r12*x4955)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x4956))+(((-1.0)*cj5*r10*x4955))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4957.valid){
continue;
}
CheckValue<IkReal> x4958=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4957.value)+(((1.5707963267949)*(x4958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4959=IKsin(j4);
IkReal x4960=IKcos(j4);
IkReal x4961=(cj1*cj2);
IkReal x4962=((1.0)*sj2);
IkReal x4963=((1.0)*x4960);
IkReal x4964=(cj5*x4960);
IkReal x4965=(cj5*x4959);
IkReal x4966=((1.0)*sj5*x4959);
evalcond[0]=((((-1.0)*r21*x4966))+(((-1.0)*r22*x4963))+((r20*x4965)));
evalcond[1]=(cj0+((r10*x4965))+(((-1.0)*r11*x4966))+(((-1.0)*r12*x4963)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4963))+(((-1.0)*r01*x4966))+((r00*x4965)));
evalcond[3]=(((r22*x4959))+(((-1.0)*cj2*sj1))+((r20*x4964))+(((-1.0)*r21*sj5*x4963))+(((-1.0)*cj1*x4962)));
evalcond[4]=((((-1.0)*r01*sj5*x4963))+(((-1.0)*cj0*sj1*x4962))+((r02*x4959))+((cj0*x4961))+((r00*x4964)));
evalcond[5]=(((r12*x4959))+((sj0*x4961))+(((-1.0)*r11*sj5*x4963))+((r10*x4964))+(((-1.0)*sj0*sj1*x4962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4967 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4967.valid){
continue;
}
CheckValue<IkReal> x4968=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4967.value)+(((1.5707963267949)*(x4968.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4969=IKsin(j4);
IkReal x4970=IKcos(j4);
IkReal x4971=(cj1*cj2);
IkReal x4972=((1.0)*sj2);
IkReal x4973=((1.0)*x4970);
IkReal x4974=(cj5*x4970);
IkReal x4975=(cj5*x4969);
IkReal x4976=((1.0)*sj5*x4969);
evalcond[0]=((((-1.0)*r21*x4976))+(((-1.0)*r22*x4973))+((r20*x4975)));
evalcond[1]=(cj0+((r10*x4975))+(((-1.0)*r12*x4973))+(((-1.0)*r11*x4976)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x4973))+(((-1.0)*r01*x4976))+((r00*x4975)));
evalcond[3]=(((r22*x4969))+(((-1.0)*cj2*sj1))+((r20*x4974))+(((-1.0)*cj1*x4972))+(((-1.0)*r21*sj5*x4973)));
evalcond[4]=((((-1.0)*r01*sj5*x4973))+(((-1.0)*cj0*sj1*x4972))+((r02*x4969))+((r00*x4974))+((cj0*x4971)));
evalcond[5]=((((-1.0)*r11*sj5*x4973))+((r12*x4969))+((r10*x4974))+((sj0*x4971))+(((-1.0)*sj0*sj1*x4972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4977 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4977.valid){
continue;
}
CheckValue<IkReal> x4978=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4977.value)+(((1.5707963267949)*(x4978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4979=IKsin(j4);
IkReal x4980=IKcos(j4);
IkReal x4981=(cj1*cj2);
IkReal x4982=((1.0)*sj2);
IkReal x4983=((1.0)*x4980);
IkReal x4984=(cj5*x4980);
IkReal x4985=(cj5*x4979);
IkReal x4986=((1.0)*sj5*x4979);
evalcond[0]=((((-1.0)*r22*x4983))+(((-1.0)*r21*x4986))+((r20*x4985)));
evalcond[1]=(cj0+((r10*x4985))+(((-1.0)*r12*x4983))+(((-1.0)*r11*x4986)));
evalcond[2]=(((r00*x4985))+(((-1.0)*sj0))+(((-1.0)*r01*x4986))+(((-1.0)*r02*x4983)));
evalcond[3]=((((-1.0)*cj1*x4982))+((r22*x4979))+(((-1.0)*cj2*sj1))+((r20*x4984))+(((-1.0)*r21*sj5*x4983)));
evalcond[4]=(((r00*x4984))+((cj0*x4981))+(((-1.0)*cj0*sj1*x4982))+((r02*x4979))+(((-1.0)*r01*sj5*x4983)));
evalcond[5]=(((r12*x4979))+((r10*x4984))+(((-1.0)*r11*sj5*x4983))+(((-1.0)*sj0*sj1*x4982))+((sj0*x4981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4987=((1.0)*cj5);
IkReal x4988=((1.0)*sj5);
IkReal x4989=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x4989;
j0eval[1]=IKsign(x4989);
j0eval[2]=((IKabs(((((-1.0)*r10*x4988))+(((-1.0)*r11*x4987)))))+(IKabs(((((-1.0)*r00*x4988))+(((-1.0)*r01*x4987))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4990=cj5*cj5;
IkReal x4991=r21*r21;
IkReal x4992=(sj1*sj2);
IkReal x4993=(r21*sj5);
IkReal x4994=(cj1*cj2);
IkReal x4995=(cj5*r20);
IkReal x4996=(x4991+(r22*r22)+((x4990*(r20*r20)))+(((-1.0)*x4990*x4991))+(((-2.0)*x4993*x4995)));
j4eval[0]=x4996;
j4eval[1]=IKsign(x4996);
j4eval[2]=((IKabs((((x4993*x4994))+((x4992*x4995))+(((-1.0)*x4992*x4993))+(((-1.0)*x4994*x4995)))))+(IKabs(((((-1.0)*r22*x4994))+((r22*x4992))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20747329957163)*py))+(((-0.566671381137094)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20747329957163)*px))+(((0.566671381137094)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20747329957163)*py))+(((-0.566671381137094)*px))))+IKsqr(((((2.20747329957163)*px))+(((0.566671381137094)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20747329957163)*py))+(((-0.566671381137094)*px))), ((((2.20747329957163)*px))+(((0.566671381137094)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4997=IKsin(j0);
IkReal x4998=IKcos(j0);
evalcond[0]=((((-0.1091)*x4997))+(((0.425)*x4998))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x4997))+(((-1.0)*py))+(((0.1091)*x4998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x4999=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4999;
j4eval[1]=IKsign(x4999);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5000=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5000;
j4eval[1]=IKsign(x5000);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5001=cj5*cj5;
IkReal x5002=(r11*r21);
IkReal x5003=((1.0)*cj5*sj5);
IkReal x5004=((((-1.0)*x5001*x5002))+((r10*r20*x5001))+((r12*r22))+x5002+(((-1.0)*r11*r20*x5003))+(((-1.0)*r10*r21*x5003)));
j4eval[0]=x5004;
j4eval[1]=IKsign(x5004);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5005=cj5*cj5;
IkReal x5006=(r11*r21);
IkReal x5007=((1.0)*cj5*sj5);
CheckValue<IkReal> x5008 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5008.valid){
continue;
}
CheckValue<IkReal> x5009=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5005*x5006))+((r10*r20*x5005))+((r12*r22))+x5006+(((-1.0)*r11*r20*x5007))+(((-1.0)*r10*r21*x5007)))),-1);
if(!x5009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5008.value)+(((1.5707963267949)*(x5009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5010=IKsin(j4);
IkReal x5011=IKcos(j4);
IkReal x5012=((1.0)*sj0);
IkReal x5013=(cj5*r00);
IkReal x5014=(r11*sj5);
IkReal x5015=(cj5*r10);
IkReal x5016=(r01*sj5);
IkReal x5017=(cj5*r20);
IkReal x5018=(r21*sj5);
IkReal x5019=((1.0)*x5011);
IkReal x5020=((1.0)*x5010);
evalcond[0]=(((x5010*x5017))+(((-1.0)*r22*x5019))+(((-1.0)*x5018*x5020)));
evalcond[1]=(((x5011*x5018))+(((-1.0)*x5017*x5019))+(((-1.0)*r22*x5020)));
evalcond[2]=(cj0+((x5010*x5015))+(((-1.0)*x5014*x5020))+(((-1.0)*r12*x5019)));
evalcond[3]=(((x5010*x5013))+(((-1.0)*r02*x5019))+(((-1.0)*x5016*x5020))+(((-1.0)*x5012)));
evalcond[4]=((((-1.0)*r02*x5020))+((x5011*x5016))+(((-1.0)*x5013*x5019))+(((-1.0)*cj0)));
evalcond[5]=(((x5011*x5014))+(((-1.0)*r12*x5020))+(((-1.0)*x5015*x5019))+(((-1.0)*x5012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5021 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5021.valid){
continue;
}
CheckValue<IkReal> x5022=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5021.value)+(((1.5707963267949)*(x5022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5023=IKsin(j4);
IkReal x5024=IKcos(j4);
IkReal x5025=((1.0)*sj0);
IkReal x5026=(cj5*r00);
IkReal x5027=(r11*sj5);
IkReal x5028=(cj5*r10);
IkReal x5029=(r01*sj5);
IkReal x5030=(cj5*r20);
IkReal x5031=(r21*sj5);
IkReal x5032=((1.0)*x5024);
IkReal x5033=((1.0)*x5023);
evalcond[0]=(((x5023*x5030))+(((-1.0)*x5031*x5033))+(((-1.0)*r22*x5032)));
evalcond[1]=((((-1.0)*x5030*x5032))+((x5024*x5031))+(((-1.0)*r22*x5033)));
evalcond[2]=((((-1.0)*x5027*x5033))+((x5023*x5028))+cj0+(((-1.0)*r12*x5032)));
evalcond[3]=(((x5023*x5026))+(((-1.0)*x5029*x5033))+(((-1.0)*r02*x5032))+(((-1.0)*x5025)));
evalcond[4]=(((x5024*x5029))+(((-1.0)*x5026*x5032))+(((-1.0)*r02*x5033))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5028*x5032))+((x5024*x5027))+(((-1.0)*r12*x5033))+(((-1.0)*x5025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5034 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5034.valid){
continue;
}
CheckValue<IkReal> x5035=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5034.value)+(((1.5707963267949)*(x5035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5036=IKsin(j4);
IkReal x5037=IKcos(j4);
IkReal x5038=((1.0)*sj0);
IkReal x5039=(cj5*r00);
IkReal x5040=(r11*sj5);
IkReal x5041=(cj5*r10);
IkReal x5042=(r01*sj5);
IkReal x5043=(cj5*r20);
IkReal x5044=(r21*sj5);
IkReal x5045=((1.0)*x5037);
IkReal x5046=((1.0)*x5036);
evalcond[0]=(((x5036*x5043))+(((-1.0)*r22*x5045))+(((-1.0)*x5044*x5046)));
evalcond[1]=(((x5037*x5044))+(((-1.0)*x5043*x5045))+(((-1.0)*r22*x5046)));
evalcond[2]=((((-1.0)*x5040*x5046))+cj0+((x5036*x5041))+(((-1.0)*r12*x5045)));
evalcond[3]=((((-1.0)*r02*x5045))+(((-1.0)*x5042*x5046))+((x5036*x5039))+(((-1.0)*x5038)));
evalcond[4]=(((x5037*x5042))+(((-1.0)*r02*x5046))+(((-1.0)*x5039*x5045))+(((-1.0)*cj0)));
evalcond[5]=(((x5037*x5040))+(((-1.0)*x5041*x5045))+(((-1.0)*r12*x5046))+(((-1.0)*x5038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20747329957163)*py))+(((-0.566671381137094)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20747329957163)*px))+(((0.566671381137094)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20747329957163)*py))+(((-0.566671381137094)*px))))+IKsqr(((((2.20747329957163)*px))+(((0.566671381137094)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20747329957163)*py))+(((-0.566671381137094)*px))), ((((2.20747329957163)*px))+(((0.566671381137094)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5047=IKsin(j0);
IkReal x5048=IKcos(j0);
evalcond[0]=((((0.425)*x5048))+(((-0.1091)*x5047))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x5047))+(((-1.0)*py))+(((0.1091)*x5048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5049=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5049;
j4eval[1]=IKsign(x5049);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5050=cj5*cj5;
IkReal x5051=((1.0)*r21);
IkReal x5052=(cj5*sj5);
IkReal x5053=((((-1.0)*r01*x5050*x5051))+((r01*r21))+(((-1.0)*r00*x5051*x5052))+(((-1.0)*r01*r20*x5052))+((r02*r22))+((r00*r20*x5050)));
j4eval[0]=x5053;
j4eval[1]=IKsign(x5053);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x5051))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5054=cj5*cj5;
IkReal x5055=(cj5*r20);
IkReal x5056=((1.0)*sj5);
IkReal x5057=(r11*r21);
IkReal x5058=((((-1.0)*cj5*r10*r21*x5056))+(((-1.0)*x5054*x5057))+(((-1.0)*r11*x5055*x5056))+((r12*r22))+x5057+((r10*r20*x5054)));
j4eval[0]=x5058;
j4eval[1]=IKsign(x5058);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x5056))+((sj0*x5055)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5059=cj5*cj5;
IkReal x5060=(cj5*r20);
IkReal x5061=((1.0)*sj5);
IkReal x5062=(r11*r21);
CheckValue<IkReal> x5063 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5061))+((sj0*x5060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5063.valid){
continue;
}
CheckValue<IkReal> x5064=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5059*x5062))+(((-1.0)*r11*x5060*x5061))+((r12*r22))+x5062+(((-1.0)*cj5*r10*r21*x5061))+((r10*r20*x5059)))),-1);
if(!x5064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5063.value)+(((1.5707963267949)*(x5064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5065=IKsin(j4);
IkReal x5066=IKcos(j4);
IkReal x5067=(cj5*r00);
IkReal x5068=(r11*sj5);
IkReal x5069=(cj5*r10);
IkReal x5070=(r01*sj5);
IkReal x5071=(cj5*r20);
IkReal x5072=(r21*sj5);
IkReal x5073=((1.0)*x5066);
IkReal x5074=((1.0)*x5065);
evalcond[0]=((((-1.0)*x5072*x5074))+(((-1.0)*r22*x5073))+((x5065*x5071)));
evalcond[1]=(((x5066*x5072))+(((-1.0)*r22*x5074))+(((-1.0)*x5071*x5073)));
evalcond[2]=(cj0+(((-1.0)*r12*x5073))+(((-1.0)*x5068*x5074))+((x5065*x5069)));
evalcond[3]=((((-1.0)*x5067*x5073))+(((-1.0)*r02*x5074))+cj0+((x5066*x5070)));
evalcond[4]=(sj0+((x5066*x5068))+(((-1.0)*x5069*x5073))+(((-1.0)*r12*x5074)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5073))+(((-1.0)*x5070*x5074))+((x5065*x5067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5075=cj5*cj5;
IkReal x5076=((1.0)*r21);
IkReal x5077=(cj5*sj5);
CheckValue<IkReal> x5078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5076*x5077))+((r00*r20*x5075))+(((-1.0)*r01*r20*x5077))+((r01*r21))+(((-1.0)*r01*x5075*x5076))+((r02*r22)))),-1);
if(!x5078.valid){
continue;
}
CheckValue<IkReal> x5079 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x5076))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5078.value)))+(x5079.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5080=IKsin(j4);
IkReal x5081=IKcos(j4);
IkReal x5082=(cj5*r00);
IkReal x5083=(r11*sj5);
IkReal x5084=(cj5*r10);
IkReal x5085=(r01*sj5);
IkReal x5086=(cj5*r20);
IkReal x5087=(r21*sj5);
IkReal x5088=((1.0)*x5081);
IkReal x5089=((1.0)*x5080);
evalcond[0]=((((-1.0)*x5087*x5089))+((x5080*x5086))+(((-1.0)*r22*x5088)));
evalcond[1]=((((-1.0)*x5086*x5088))+((x5081*x5087))+(((-1.0)*r22*x5089)));
evalcond[2]=((((-1.0)*r12*x5088))+cj0+((x5080*x5084))+(((-1.0)*x5083*x5089)));
evalcond[3]=(cj0+(((-1.0)*x5082*x5088))+(((-1.0)*r02*x5089))+((x5081*x5085)));
evalcond[4]=((((-1.0)*r12*x5089))+sj0+((x5081*x5083))+(((-1.0)*x5084*x5088)));
evalcond[5]=((((-1.0)*sj0))+((x5080*x5082))+(((-1.0)*x5085*x5089))+(((-1.0)*r02*x5088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5090 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5090.valid){
continue;
}
CheckValue<IkReal> x5091=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5090.value)+(((1.5707963267949)*(x5091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5092=IKsin(j4);
IkReal x5093=IKcos(j4);
IkReal x5094=(cj5*r00);
IkReal x5095=(r11*sj5);
IkReal x5096=(cj5*r10);
IkReal x5097=(r01*sj5);
IkReal x5098=(cj5*r20);
IkReal x5099=(r21*sj5);
IkReal x5100=((1.0)*x5093);
IkReal x5101=((1.0)*x5092);
evalcond[0]=((((-1.0)*r22*x5100))+(((-1.0)*x5099*x5101))+((x5092*x5098)));
evalcond[1]=(((x5093*x5099))+(((-1.0)*r22*x5101))+(((-1.0)*x5098*x5100)));
evalcond[2]=(cj0+(((-1.0)*x5095*x5101))+(((-1.0)*r12*x5100))+((x5092*x5096)));
evalcond[3]=(((x5093*x5097))+cj0+(((-1.0)*r02*x5101))+(((-1.0)*x5094*x5100)));
evalcond[4]=((((-1.0)*x5096*x5100))+((x5093*x5095))+sj0+(((-1.0)*r12*x5101)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5097*x5101))+(((-1.0)*r02*x5100))+((x5092*x5094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16590284142988)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16590284142988)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16590284142988)*px))+IKsqr(((9.16590284142988)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16590284142988)*px), ((9.16590284142988)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.1091)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1091)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5102=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5102;
j4eval[1]=IKsign(x5102);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5103=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5103;
j4eval[1]=IKsign(x5103);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5104=cj5*cj5;
IkReal x5105=(r11*r21);
IkReal x5106=((1.0)*cj5*sj5);
IkReal x5107=(((r10*r20*x5104))+((r12*r22))+x5105+(((-1.0)*r11*r20*x5106))+(((-1.0)*x5104*x5105))+(((-1.0)*r10*r21*x5106)));
j4eval[0]=x5107;
j4eval[1]=IKsign(x5107);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5108=cj5*cj5;
IkReal x5109=(r11*r21);
IkReal x5110=((1.0)*cj5*sj5);
CheckValue<IkReal> x5111 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5111.valid){
continue;
}
CheckValue<IkReal> x5112=IKPowWithIntegerCheck(IKsign((((r10*r20*x5108))+((r12*r22))+x5109+(((-1.0)*x5108*x5109))+(((-1.0)*r11*r20*x5110))+(((-1.0)*r10*r21*x5110)))),-1);
if(!x5112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5111.value)+(((1.5707963267949)*(x5112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5113=IKsin(j4);
IkReal x5114=IKcos(j4);
IkReal x5115=((1.0)*sj0);
IkReal x5116=(cj5*r00);
IkReal x5117=(r11*sj5);
IkReal x5118=(cj5*r10);
IkReal x5119=(r01*sj5);
IkReal x5120=(cj5*r20);
IkReal x5121=(r21*sj5);
IkReal x5122=((1.0)*x5114);
IkReal x5123=((1.0)*x5113);
evalcond[0]=((((-1.0)*x5121*x5123))+((x5113*x5120))+(((-1.0)*r22*x5122)));
evalcond[1]=((((-1.0)*x5120*x5122))+((x5114*x5121))+(((-1.0)*r22*x5123)));
evalcond[2]=(((x5113*x5118))+cj0+(((-1.0)*x5117*x5123))+(((-1.0)*r12*x5122)));
evalcond[3]=(((x5113*x5116))+(((-1.0)*r02*x5122))+(((-1.0)*x5119*x5123))+(((-1.0)*x5115)));
evalcond[4]=((((-1.0)*x5116*x5122))+((x5114*x5119))+(((-1.0)*r02*x5123))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5118*x5122))+(((-1.0)*r12*x5123))+((x5114*x5117))+(((-1.0)*x5115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5124 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5124.valid){
continue;
}
CheckValue<IkReal> x5125=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5124.value)+(((1.5707963267949)*(x5125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5126=IKsin(j4);
IkReal x5127=IKcos(j4);
IkReal x5128=((1.0)*sj0);
IkReal x5129=(cj5*r00);
IkReal x5130=(r11*sj5);
IkReal x5131=(cj5*r10);
IkReal x5132=(r01*sj5);
IkReal x5133=(cj5*r20);
IkReal x5134=(r21*sj5);
IkReal x5135=((1.0)*x5127);
IkReal x5136=((1.0)*x5126);
evalcond[0]=(((x5126*x5133))+(((-1.0)*r22*x5135))+(((-1.0)*x5134*x5136)));
evalcond[1]=((((-1.0)*r22*x5136))+((x5127*x5134))+(((-1.0)*x5133*x5135)));
evalcond[2]=(cj0+((x5126*x5131))+(((-1.0)*x5130*x5136))+(((-1.0)*r12*x5135)));
evalcond[3]=((((-1.0)*x5132*x5136))+((x5126*x5129))+(((-1.0)*r02*x5135))+(((-1.0)*x5128)));
evalcond[4]=((((-1.0)*x5129*x5135))+(((-1.0)*r02*x5136))+(((-1.0)*cj0))+((x5127*x5132)));
evalcond[5]=((((-1.0)*x5131*x5135))+(((-1.0)*x5128))+(((-1.0)*r12*x5136))+((x5127*x5130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5137 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5137.valid){
continue;
}
CheckValue<IkReal> x5138=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5137.value)+(((1.5707963267949)*(x5138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5139=IKsin(j4);
IkReal x5140=IKcos(j4);
IkReal x5141=((1.0)*sj0);
IkReal x5142=(cj5*r00);
IkReal x5143=(r11*sj5);
IkReal x5144=(cj5*r10);
IkReal x5145=(r01*sj5);
IkReal x5146=(cj5*r20);
IkReal x5147=(r21*sj5);
IkReal x5148=((1.0)*x5140);
IkReal x5149=((1.0)*x5139);
evalcond[0]=((((-1.0)*x5147*x5149))+(((-1.0)*r22*x5148))+((x5139*x5146)));
evalcond[1]=((((-1.0)*x5146*x5148))+((x5140*x5147))+(((-1.0)*r22*x5149)));
evalcond[2]=(cj0+(((-1.0)*x5143*x5149))+(((-1.0)*r12*x5148))+((x5139*x5144)));
evalcond[3]=((((-1.0)*r02*x5148))+(((-1.0)*x5141))+((x5139*x5142))+(((-1.0)*x5145*x5149)));
evalcond[4]=((((-1.0)*x5142*x5148))+(((-1.0)*r02*x5149))+((x5140*x5145))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5149))+(((-1.0)*x5141))+((x5140*x5143))+(((-1.0)*x5144*x5148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16590284142988)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16590284142988)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16590284142988)*px))+IKsqr(((9.16590284142988)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16590284142988)*px), ((9.16590284142988)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.1091)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1091)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5150=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5150;
j4eval[1]=IKsign(x5150);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5151=cj5*cj5;
IkReal x5152=((1.0)*r21);
IkReal x5153=(cj5*sj5);
IkReal x5154=((((-1.0)*r01*r20*x5153))+(((-1.0)*r01*x5151*x5152))+(((-1.0)*r00*x5152*x5153))+((r01*r21))+((r02*r22))+((r00*r20*x5151)));
j4eval[0]=x5154;
j4eval[1]=IKsign(x5154);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x5152))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5155=cj5*cj5;
IkReal x5156=(cj5*r20);
IkReal x5157=((1.0)*sj5);
IkReal x5158=(r11*r21);
IkReal x5159=(((r12*r22))+x5158+((r10*r20*x5155))+(((-1.0)*x5155*x5158))+(((-1.0)*r11*x5156*x5157))+(((-1.0)*cj5*r10*r21*x5157)));
j4eval[0]=x5159;
j4eval[1]=IKsign(x5159);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x5157))+((sj0*x5156)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5160=cj5*cj5;
IkReal x5161=(cj5*r20);
IkReal x5162=((1.0)*sj5);
IkReal x5163=(r11*r21);
CheckValue<IkReal> x5164 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r21*sj0*x5162))+((sj0*x5161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5164.valid){
continue;
}
CheckValue<IkReal> x5165=IKPowWithIntegerCheck(IKsign((((r12*r22))+x5163+(((-1.0)*cj5*r10*r21*x5162))+((r10*r20*x5160))+(((-1.0)*r11*x5161*x5162))+(((-1.0)*x5160*x5163)))),-1);
if(!x5165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5164.value)+(((1.5707963267949)*(x5165.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5166=IKsin(j4);
IkReal x5167=IKcos(j4);
IkReal x5168=(cj5*r00);
IkReal x5169=(r11*sj5);
IkReal x5170=(cj5*r10);
IkReal x5171=(r01*sj5);
IkReal x5172=(cj5*r20);
IkReal x5173=(r21*sj5);
IkReal x5174=((1.0)*x5167);
IkReal x5175=((1.0)*x5166);
evalcond[0]=((((-1.0)*x5173*x5175))+((x5166*x5172))+(((-1.0)*r22*x5174)));
evalcond[1]=((((-1.0)*x5172*x5174))+((x5167*x5173))+(((-1.0)*r22*x5175)));
evalcond[2]=(cj0+(((-1.0)*x5169*x5175))+(((-1.0)*r12*x5174))+((x5166*x5170)));
evalcond[3]=(cj0+(((-1.0)*r02*x5175))+((x5167*x5171))+(((-1.0)*x5168*x5174)));
evalcond[4]=(sj0+(((-1.0)*x5170*x5174))+(((-1.0)*r12*x5175))+((x5167*x5169)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5174))+((x5166*x5168))+(((-1.0)*x5171*x5175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5176=cj5*cj5;
IkReal x5177=((1.0)*r21);
IkReal x5178=(cj5*sj5);
CheckValue<IkReal> x5179=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5176*x5177))+((r01*r21))+(((-1.0)*r01*r20*x5178))+(((-1.0)*r00*x5177*x5178))+((r00*r20*x5176))+((r02*r22)))),-1);
if(!x5179.valid){
continue;
}
CheckValue<IkReal> x5180 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5177)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5179.value)))+(x5180.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5181=IKsin(j4);
IkReal x5182=IKcos(j4);
IkReal x5183=(cj5*r00);
IkReal x5184=(r11*sj5);
IkReal x5185=(cj5*r10);
IkReal x5186=(r01*sj5);
IkReal x5187=(cj5*r20);
IkReal x5188=(r21*sj5);
IkReal x5189=((1.0)*x5182);
IkReal x5190=((1.0)*x5181);
evalcond[0]=(((x5181*x5187))+(((-1.0)*r22*x5189))+(((-1.0)*x5188*x5190)));
evalcond[1]=(((x5182*x5188))+(((-1.0)*r22*x5190))+(((-1.0)*x5187*x5189)));
evalcond[2]=((((-1.0)*x5184*x5190))+((x5181*x5185))+cj0+(((-1.0)*r12*x5189)));
evalcond[3]=((((-1.0)*x5183*x5189))+cj0+((x5182*x5186))+(((-1.0)*r02*x5190)));
evalcond[4]=((((-1.0)*r12*x5190))+sj0+((x5182*x5184))+(((-1.0)*x5185*x5189)));
evalcond[5]=((((-1.0)*sj0))+((x5181*x5183))+(((-1.0)*r02*x5189))+(((-1.0)*x5186*x5190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5191 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5191.valid){
continue;
}
CheckValue<IkReal> x5192=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5191.value)+(((1.5707963267949)*(x5192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5193=IKsin(j4);
IkReal x5194=IKcos(j4);
IkReal x5195=(cj5*r00);
IkReal x5196=(r11*sj5);
IkReal x5197=(cj5*r10);
IkReal x5198=(r01*sj5);
IkReal x5199=(cj5*r20);
IkReal x5200=(r21*sj5);
IkReal x5201=((1.0)*x5194);
IkReal x5202=((1.0)*x5193);
evalcond[0]=((((-1.0)*x5200*x5202))+((x5193*x5199))+(((-1.0)*r22*x5201)));
evalcond[1]=((((-1.0)*x5199*x5201))+(((-1.0)*r22*x5202))+((x5194*x5200)));
evalcond[2]=(cj0+((x5193*x5197))+(((-1.0)*x5196*x5202))+(((-1.0)*r12*x5201)));
evalcond[3]=((((-1.0)*r02*x5202))+cj0+((x5194*x5198))+(((-1.0)*x5195*x5201)));
evalcond[4]=(sj0+((x5194*x5196))+(((-1.0)*x5197*x5201))+(((-1.0)*r12*x5202)));
evalcond[5]=((((-1.0)*r02*x5201))+(((-1.0)*sj0))+((x5193*x5195))+(((-1.0)*x5198*x5202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20747329957163)*py))+(((-0.566671381137094)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20747329957163)*px))+(((0.566671381137094)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20747329957163)*py))+(((-0.566671381137094)*px))))+IKsqr(((((-2.20747329957163)*px))+(((0.566671381137094)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20747329957163)*py))+(((-0.566671381137094)*px))), ((((-2.20747329957163)*px))+(((0.566671381137094)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5203=IKcos(j0);
IkReal x5204=IKsin(j0);
evalcond[0]=((((-0.425)*x5203))+(((-1.0)*px))+(((-0.1091)*x5204)));
evalcond[1]=((((-0.425)*x5204))+(((-1.0)*py))+(((0.1091)*x5203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5205=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5205;
j4eval[1]=IKsign(x5205);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5206=cj5*cj5;
IkReal x5207=((1.0)*r21);
IkReal x5208=(cj5*sj5);
IkReal x5209=((((-1.0)*r00*x5207*x5208))+(((-1.0)*r01*r20*x5208))+((r01*r21))+((r00*r20*x5206))+(((-1.0)*r01*x5206*x5207))+((r02*r22)));
j4eval[0]=x5209;
j4eval[1]=IKsign(x5209);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5207)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5210=cj5*cj5;
IkReal x5211=(cj5*r20);
IkReal x5212=((1.0)*sj5);
IkReal x5213=(r11*r21);
IkReal x5214=(x5213+(((-1.0)*x5210*x5213))+((r12*r22))+((r10*r20*x5210))+(((-1.0)*cj5*r10*r21*x5212))+(((-1.0)*r11*x5211*x5212)));
j4eval[0]=x5214;
j4eval[1]=IKsign(x5214);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((sj0*x5211))+(((-1.0)*r21*sj0*x5212))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5215=cj5*cj5;
IkReal x5216=(cj5*r20);
IkReal x5217=((1.0)*sj5);
IkReal x5218=(r11*r21);
CheckValue<IkReal> x5219=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5215*x5218))+x5218+((r12*r22))+((r10*r20*x5215))+(((-1.0)*cj5*r10*r21*x5217))+(((-1.0)*r11*x5216*x5217)))),-1);
if(!x5219.valid){
continue;
}
CheckValue<IkReal> x5220 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5216))+(((-1.0)*r21*sj0*x5217)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5219.value)))+(x5220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5221=IKsin(j4);
IkReal x5222=IKcos(j4);
IkReal x5223=(cj5*r00);
IkReal x5224=(r11*sj5);
IkReal x5225=(cj5*r10);
IkReal x5226=(r01*sj5);
IkReal x5227=(cj5*r20);
IkReal x5228=(r21*sj5);
IkReal x5229=((1.0)*x5222);
IkReal x5230=((1.0)*x5221);
evalcond[0]=((((-1.0)*x5228*x5230))+((x5221*x5227))+(((-1.0)*r22*x5229)));
evalcond[1]=((((-1.0)*x5227*x5229))+(((-1.0)*r22*x5230))+((x5222*x5228)));
evalcond[2]=(cj0+((x5221*x5225))+(((-1.0)*r12*x5229))+(((-1.0)*x5224*x5230)));
evalcond[3]=((((-1.0)*x5223*x5229))+cj0+(((-1.0)*r02*x5230))+((x5222*x5226)));
evalcond[4]=(sj0+(((-1.0)*r12*x5230))+((x5222*x5224))+(((-1.0)*x5225*x5229)));
evalcond[5]=((((-1.0)*x5226*x5230))+(((-1.0)*sj0))+((x5221*x5223))+(((-1.0)*r02*x5229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5231=cj5*cj5;
IkReal x5232=((1.0)*r21);
IkReal x5233=(cj5*sj5);
CheckValue<IkReal> x5234=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5231*x5232))+(((-1.0)*r01*r20*x5233))+((r01*r21))+(((-1.0)*r00*x5232*x5233))+((r00*r20*x5231))+((r02*r22)))),-1);
if(!x5234.valid){
continue;
}
CheckValue<IkReal> x5235 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5232)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5234.value)))+(x5235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5236=IKsin(j4);
IkReal x5237=IKcos(j4);
IkReal x5238=(cj5*r00);
IkReal x5239=(r11*sj5);
IkReal x5240=(cj5*r10);
IkReal x5241=(r01*sj5);
IkReal x5242=(cj5*r20);
IkReal x5243=(r21*sj5);
IkReal x5244=((1.0)*x5237);
IkReal x5245=((1.0)*x5236);
evalcond[0]=((((-1.0)*x5243*x5245))+((x5236*x5242))+(((-1.0)*r22*x5244)));
evalcond[1]=(((x5237*x5243))+(((-1.0)*x5242*x5244))+(((-1.0)*r22*x5245)));
evalcond[2]=((((-1.0)*r12*x5244))+cj0+((x5236*x5240))+(((-1.0)*x5239*x5245)));
evalcond[3]=(((x5237*x5241))+cj0+(((-1.0)*r02*x5245))+(((-1.0)*x5238*x5244)));
evalcond[4]=(sj0+(((-1.0)*r12*x5245))+((x5237*x5239))+(((-1.0)*x5240*x5244)));
evalcond[5]=((((-1.0)*sj0))+((x5236*x5238))+(((-1.0)*r02*x5244))+(((-1.0)*x5241*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5246 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5246.valid){
continue;
}
CheckValue<IkReal> x5247=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5246.value)+(((1.5707963267949)*(x5247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5248=IKsin(j4);
IkReal x5249=IKcos(j4);
IkReal x5250=(cj5*r00);
IkReal x5251=(r11*sj5);
IkReal x5252=(cj5*r10);
IkReal x5253=(r01*sj5);
IkReal x5254=(cj5*r20);
IkReal x5255=(r21*sj5);
IkReal x5256=((1.0)*x5249);
IkReal x5257=((1.0)*x5248);
evalcond[0]=((((-1.0)*x5255*x5257))+(((-1.0)*r22*x5256))+((x5248*x5254)));
evalcond[1]=((((-1.0)*x5254*x5256))+(((-1.0)*r22*x5257))+((x5249*x5255)));
evalcond[2]=(cj0+(((-1.0)*r12*x5256))+((x5248*x5252))+(((-1.0)*x5251*x5257)));
evalcond[3]=((((-1.0)*r02*x5257))+cj0+(((-1.0)*x5250*x5256))+((x5249*x5253)));
evalcond[4]=(sj0+(((-1.0)*r12*x5257))+((x5249*x5251))+(((-1.0)*x5252*x5256)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5256))+((x5248*x5250))+(((-1.0)*x5253*x5257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20747329957163)*py))+(((-0.566671381137094)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20747329957163)*px))+(((0.566671381137094)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20747329957163)*py))+(((-0.566671381137094)*px))))+IKsqr(((((-2.20747329957163)*px))+(((0.566671381137094)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20747329957163)*py))+(((-0.566671381137094)*px))), ((((-2.20747329957163)*px))+(((0.566671381137094)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5258=IKcos(j0);
IkReal x5259=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.1091)*x5259))+(((-0.425)*x5258)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x5259))+(((0.1091)*x5258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5260=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5260;
j4eval[1]=IKsign(x5260);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5261=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5261;
j4eval[1]=IKsign(x5261);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5262=cj5*cj5;
IkReal x5263=(r11*r21);
IkReal x5264=((1.0)*cj5*sj5);
IkReal x5265=(((r10*r20*x5262))+(((-1.0)*x5262*x5263))+x5263+((r12*r22))+(((-1.0)*r10*r21*x5264))+(((-1.0)*r11*r20*x5264)));
j4eval[0]=x5265;
j4eval[1]=IKsign(x5265);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5266=cj5*cj5;
IkReal x5267=(r11*r21);
IkReal x5268=((1.0)*cj5*sj5);
CheckValue<IkReal> x5269 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5269.valid){
continue;
}
CheckValue<IkReal> x5270=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5266*x5267))+((r10*r20*x5266))+x5267+((r12*r22))+(((-1.0)*r10*r21*x5268))+(((-1.0)*r11*r20*x5268)))),-1);
if(!x5270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5269.value)+(((1.5707963267949)*(x5270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5271=IKsin(j4);
IkReal x5272=IKcos(j4);
IkReal x5273=((1.0)*sj0);
IkReal x5274=(cj5*r00);
IkReal x5275=(r11*sj5);
IkReal x5276=(cj5*r10);
IkReal x5277=(r01*sj5);
IkReal x5278=(cj5*r20);
IkReal x5279=(r21*sj5);
IkReal x5280=((1.0)*x5272);
IkReal x5281=((1.0)*x5271);
evalcond[0]=((((-1.0)*r22*x5280))+(((-1.0)*x5279*x5281))+((x5271*x5278)));
evalcond[1]=((((-1.0)*r22*x5281))+((x5272*x5279))+(((-1.0)*x5278*x5280)));
evalcond[2]=(cj0+(((-1.0)*x5275*x5281))+(((-1.0)*r12*x5280))+((x5271*x5276)));
evalcond[3]=((((-1.0)*x5273))+((x5271*x5274))+(((-1.0)*r02*x5280))+(((-1.0)*x5277*x5281)));
evalcond[4]=(((x5272*x5277))+(((-1.0)*x5274*x5280))+(((-1.0)*r02*x5281))+(((-1.0)*cj0)));
evalcond[5]=(((x5272*x5275))+(((-1.0)*x5273))+(((-1.0)*x5276*x5280))+(((-1.0)*r12*x5281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5282 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5282.valid){
continue;
}
CheckValue<IkReal> x5283=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5282.value)+(((1.5707963267949)*(x5283.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5284=IKsin(j4);
IkReal x5285=IKcos(j4);
IkReal x5286=((1.0)*sj0);
IkReal x5287=(cj5*r00);
IkReal x5288=(r11*sj5);
IkReal x5289=(cj5*r10);
IkReal x5290=(r01*sj5);
IkReal x5291=(cj5*r20);
IkReal x5292=(r21*sj5);
IkReal x5293=((1.0)*x5285);
IkReal x5294=((1.0)*x5284);
evalcond[0]=((((-1.0)*r22*x5293))+(((-1.0)*x5292*x5294))+((x5284*x5291)));
evalcond[1]=((((-1.0)*r22*x5294))+((x5285*x5292))+(((-1.0)*x5291*x5293)));
evalcond[2]=(cj0+(((-1.0)*x5288*x5294))+(((-1.0)*r12*x5293))+((x5284*x5289)));
evalcond[3]=((((-1.0)*x5286))+(((-1.0)*r02*x5293))+((x5284*x5287))+(((-1.0)*x5290*x5294)));
evalcond[4]=((((-1.0)*x5287*x5293))+(((-1.0)*r02*x5294))+((x5285*x5290))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5289*x5293))+(((-1.0)*x5286))+(((-1.0)*r12*x5294))+((x5285*x5288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5295.valid){
continue;
}
CheckValue<IkReal> x5296=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5295.value)+(((1.5707963267949)*(x5296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5297=IKsin(j4);
IkReal x5298=IKcos(j4);
IkReal x5299=((1.0)*sj0);
IkReal x5300=(cj5*r00);
IkReal x5301=(r11*sj5);
IkReal x5302=(cj5*r10);
IkReal x5303=(r01*sj5);
IkReal x5304=(cj5*r20);
IkReal x5305=(r21*sj5);
IkReal x5306=((1.0)*x5298);
IkReal x5307=((1.0)*x5297);
evalcond[0]=((((-1.0)*r22*x5306))+(((-1.0)*x5305*x5307))+((x5297*x5304)));
evalcond[1]=((((-1.0)*r22*x5307))+((x5298*x5305))+(((-1.0)*x5304*x5306)));
evalcond[2]=(((x5297*x5302))+cj0+(((-1.0)*x5301*x5307))+(((-1.0)*r12*x5306)));
evalcond[3]=((((-1.0)*x5303*x5307))+((x5297*x5300))+(((-1.0)*x5299))+(((-1.0)*r02*x5306)));
evalcond[4]=((((-1.0)*x5300*x5306))+(((-1.0)*r02*x5307))+((x5298*x5303))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5307))+(((-1.0)*x5302*x5306))+(((-1.0)*x5299))+((x5298*x5301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16590284142988)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16590284142988)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16590284142988)*px))+IKsqr(((9.16590284142988)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16590284142988)*px), ((9.16590284142988)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.1091)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1091)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5308=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5308;
j4eval[1]=IKsign(x5308);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5309=cj5*cj5;
IkReal x5310=((1.0)*r21);
IkReal x5311=(cj5*sj5);
IkReal x5312=(((r01*r21))+(((-1.0)*r01*x5309*x5310))+((r00*r20*x5309))+(((-1.0)*r00*x5310*x5311))+((r02*r22))+(((-1.0)*r01*r20*x5311)));
j4eval[0]=x5312;
j4eval[1]=IKsign(x5312);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x5310))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5313=cj5*cj5;
IkReal x5314=(cj5*r20);
IkReal x5315=((1.0)*sj5);
IkReal x5316=(r11*r21);
IkReal x5317=((((-1.0)*cj5*r10*r21*x5315))+(((-1.0)*x5313*x5316))+x5316+(((-1.0)*r11*x5314*x5315))+((r12*r22))+((r10*r20*x5313)));
j4eval[0]=x5317;
j4eval[1]=IKsign(x5317);
j4eval[2]=((IKabs((((sj0*x5314))+(((-1.0)*r21*sj0*x5315)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5318=cj5*cj5;
IkReal x5319=(cj5*r20);
IkReal x5320=((1.0)*sj5);
IkReal x5321=(r11*r21);
CheckValue<IkReal> x5322 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x5319))+(((-1.0)*r21*sj0*x5320)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5322.valid){
continue;
}
CheckValue<IkReal> x5323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5319*x5320))+x5321+((r12*r22))+(((-1.0)*cj5*r10*r21*x5320))+(((-1.0)*x5318*x5321))+((r10*r20*x5318)))),-1);
if(!x5323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5322.value)+(((1.5707963267949)*(x5323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5324=IKsin(j4);
IkReal x5325=IKcos(j4);
IkReal x5326=(cj5*r00);
IkReal x5327=(r11*sj5);
IkReal x5328=(cj5*r10);
IkReal x5329=(r01*sj5);
IkReal x5330=(cj5*r20);
IkReal x5331=(r21*sj5);
IkReal x5332=((1.0)*x5325);
IkReal x5333=((1.0)*x5324);
evalcond[0]=((((-1.0)*x5331*x5333))+((x5324*x5330))+(((-1.0)*r22*x5332)));
evalcond[1]=(((x5325*x5331))+(((-1.0)*x5330*x5332))+(((-1.0)*r22*x5333)));
evalcond[2]=(cj0+((x5324*x5328))+(((-1.0)*r12*x5332))+(((-1.0)*x5327*x5333)));
evalcond[3]=(((x5325*x5329))+cj0+(((-1.0)*r02*x5333))+(((-1.0)*x5326*x5332)));
evalcond[4]=(((x5325*x5327))+sj0+(((-1.0)*x5328*x5332))+(((-1.0)*r12*x5333)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5332))+((x5324*x5326))+(((-1.0)*x5329*x5333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5334=cj5*cj5;
IkReal x5335=((1.0)*r21);
IkReal x5336=(cj5*sj5);
CheckValue<IkReal> x5337=IKPowWithIntegerCheck(IKsign((((r00*r20*x5334))+(((-1.0)*r00*x5335*x5336))+(((-1.0)*r01*r20*x5336))+((r01*r21))+(((-1.0)*r01*x5334*x5335))+((r02*r22)))),-1);
if(!x5337.valid){
continue;
}
CheckValue<IkReal> x5338 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*sj5*x5335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5337.value)))+(x5338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5339=IKsin(j4);
IkReal x5340=IKcos(j4);
IkReal x5341=(cj5*r00);
IkReal x5342=(r11*sj5);
IkReal x5343=(cj5*r10);
IkReal x5344=(r01*sj5);
IkReal x5345=(cj5*r20);
IkReal x5346=(r21*sj5);
IkReal x5347=((1.0)*x5340);
IkReal x5348=((1.0)*x5339);
evalcond[0]=((((-1.0)*x5346*x5348))+((x5339*x5345))+(((-1.0)*r22*x5347)));
evalcond[1]=((((-1.0)*x5345*x5347))+(((-1.0)*r22*x5348))+((x5340*x5346)));
evalcond[2]=(cj0+(((-1.0)*r12*x5347))+((x5339*x5343))+(((-1.0)*x5342*x5348)));
evalcond[3]=((((-1.0)*r02*x5348))+cj0+(((-1.0)*x5341*x5347))+((x5340*x5344)));
evalcond[4]=(sj0+(((-1.0)*r12*x5348))+(((-1.0)*x5343*x5347))+((x5340*x5342)));
evalcond[5]=((((-1.0)*r02*x5347))+(((-1.0)*sj0))+(((-1.0)*x5344*x5348))+((x5339*x5341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5349 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5349.valid){
continue;
}
CheckValue<IkReal> x5350=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5349.value)+(((1.5707963267949)*(x5350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5351=IKsin(j4);
IkReal x5352=IKcos(j4);
IkReal x5353=(cj5*r00);
IkReal x5354=(r11*sj5);
IkReal x5355=(cj5*r10);
IkReal x5356=(r01*sj5);
IkReal x5357=(cj5*r20);
IkReal x5358=(r21*sj5);
IkReal x5359=((1.0)*x5352);
IkReal x5360=((1.0)*x5351);
evalcond[0]=(((x5351*x5357))+(((-1.0)*x5358*x5360))+(((-1.0)*r22*x5359)));
evalcond[1]=((((-1.0)*r22*x5360))+(((-1.0)*x5357*x5359))+((x5352*x5358)));
evalcond[2]=(cj0+((x5351*x5355))+(((-1.0)*r12*x5359))+(((-1.0)*x5354*x5360)));
evalcond[3]=(cj0+(((-1.0)*x5353*x5359))+((x5352*x5356))+(((-1.0)*r02*x5360)));
evalcond[4]=((((-1.0)*x5355*x5359))+sj0+((x5352*x5354))+(((-1.0)*r12*x5360)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5359))+((x5351*x5353))+(((-1.0)*x5356*x5360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16590284142988)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16590284142988)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16590284142988)*px))+IKsqr(((9.16590284142988)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16590284142988)*px), ((9.16590284142988)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.1091)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1091)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5361=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5361;
j4eval[1]=IKsign(x5361);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5362=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5362;
j4eval[1]=IKsign(x5362);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5363=cj5*cj5;
IkReal x5364=(r11*r21);
IkReal x5365=((1.0)*cj5*sj5);
IkReal x5366=(((r10*r20*x5363))+(((-1.0)*r10*r21*x5365))+x5364+((r12*r22))+(((-1.0)*x5363*x5364))+(((-1.0)*r11*r20*x5365)));
j4eval[0]=x5366;
j4eval[1]=IKsign(x5366);
j4eval[2]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5367=cj5*cj5;
IkReal x5368=(r11*r21);
IkReal x5369=((1.0)*cj5*sj5);
CheckValue<IkReal> x5370 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5370.valid){
continue;
}
CheckValue<IkReal> x5371=IKPowWithIntegerCheck(IKsign((((r10*r20*x5367))+(((-1.0)*r10*r21*x5369))+x5368+((r12*r22))+(((-1.0)*r11*r20*x5369))+(((-1.0)*x5367*x5368)))),-1);
if(!x5371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5370.value)+(((1.5707963267949)*(x5371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5372=IKsin(j4);
IkReal x5373=IKcos(j4);
IkReal x5374=((1.0)*sj0);
IkReal x5375=(cj5*r00);
IkReal x5376=(r11*sj5);
IkReal x5377=(cj5*r10);
IkReal x5378=(r01*sj5);
IkReal x5379=(cj5*r20);
IkReal x5380=(r21*sj5);
IkReal x5381=((1.0)*x5373);
IkReal x5382=((1.0)*x5372);
evalcond[0]=(((x5372*x5379))+(((-1.0)*x5380*x5382))+(((-1.0)*r22*x5381)));
evalcond[1]=((((-1.0)*x5379*x5381))+(((-1.0)*r22*x5382))+((x5373*x5380)));
evalcond[2]=(cj0+((x5372*x5377))+(((-1.0)*x5376*x5382))+(((-1.0)*r12*x5381)));
evalcond[3]=((((-1.0)*x5374))+((x5372*x5375))+(((-1.0)*r02*x5381))+(((-1.0)*x5378*x5382)));
evalcond[4]=((((-1.0)*r02*x5382))+(((-1.0)*x5375*x5381))+((x5373*x5378))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5374))+(((-1.0)*r12*x5382))+((x5373*x5376))+(((-1.0)*x5377*x5381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5383 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5383.valid){
continue;
}
CheckValue<IkReal> x5384=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5383.value)+(((1.5707963267949)*(x5384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5385=IKsin(j4);
IkReal x5386=IKcos(j4);
IkReal x5387=((1.0)*sj0);
IkReal x5388=(cj5*r00);
IkReal x5389=(r11*sj5);
IkReal x5390=(cj5*r10);
IkReal x5391=(r01*sj5);
IkReal x5392=(cj5*r20);
IkReal x5393=(r21*sj5);
IkReal x5394=((1.0)*x5386);
IkReal x5395=((1.0)*x5385);
evalcond[0]=((((-1.0)*x5393*x5395))+((x5385*x5392))+(((-1.0)*r22*x5394)));
evalcond[1]=(((x5386*x5393))+(((-1.0)*x5392*x5394))+(((-1.0)*r22*x5395)));
evalcond[2]=(cj0+(((-1.0)*x5389*x5395))+((x5385*x5390))+(((-1.0)*r12*x5394)));
evalcond[3]=((((-1.0)*x5391*x5395))+(((-1.0)*r02*x5394))+((x5385*x5388))+(((-1.0)*x5387)));
evalcond[4]=(((x5386*x5391))+(((-1.0)*x5388*x5394))+(((-1.0)*r02*x5395))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5395))+(((-1.0)*x5390*x5394))+(((-1.0)*x5387))+((x5386*x5389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5396 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5396.valid){
continue;
}
CheckValue<IkReal> x5397=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5396.value)+(((1.5707963267949)*(x5397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5398=IKsin(j4);
IkReal x5399=IKcos(j4);
IkReal x5400=((1.0)*sj0);
IkReal x5401=(cj5*r00);
IkReal x5402=(r11*sj5);
IkReal x5403=(cj5*r10);
IkReal x5404=(r01*sj5);
IkReal x5405=(cj5*r20);
IkReal x5406=(r21*sj5);
IkReal x5407=((1.0)*x5399);
IkReal x5408=((1.0)*x5398);
evalcond[0]=((((-1.0)*x5406*x5408))+((x5398*x5405))+(((-1.0)*r22*x5407)));
evalcond[1]=(((x5399*x5406))+(((-1.0)*r22*x5408))+(((-1.0)*x5405*x5407)));
evalcond[2]=(cj0+((x5398*x5403))+(((-1.0)*r12*x5407))+(((-1.0)*x5402*x5408)));
evalcond[3]=((((-1.0)*r02*x5407))+(((-1.0)*x5404*x5408))+((x5398*x5401))+(((-1.0)*x5400)));
evalcond[4]=((((-1.0)*r02*x5408))+((x5399*x5404))+(((-1.0)*cj0))+(((-1.0)*x5401*x5407)));
evalcond[5]=((((-1.0)*x5403*x5407))+(((-1.0)*r12*x5408))+(((-1.0)*x5400))+((x5399*x5402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5409=(cj1*cj2);
IkReal x5410=((10000.0)*px);
IkReal x5411=(cj5*r01);
IkReal x5412=(r00*sj5);
IkReal x5413=((4250.0)*cj1);
IkReal x5414=(sj1*sj2);
IkReal x5415=((2976.0)*x5414);
CheckValue<IkReal> x5416=IKPowWithIntegerCheck(((((1091.0)*x5409))+(((-1091.0)*x5414))),-1);
if(!x5416.valid){
continue;
}
CheckValue<IkReal> x5417=IKPowWithIntegerCheck(((((-1.0)*x5414))+x5409),-1);
if(!x5417.valid){
continue;
}
if( IKabs(((x5416.value)*(((((-1.0)*x5412*x5413))+((x5410*x5414))+((x5412*x5415))+((x5411*x5415))+(((-2976.0)*x5409*x5412))+(((-2976.0)*x5409*x5411))+(((-1.0)*x5411*x5413))+(((-1.0)*x5409*x5410)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5417.value)*(((((-1.0)*x5411))+(((-1.0)*x5412)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5416.value)*(((((-1.0)*x5412*x5413))+((x5410*x5414))+((x5412*x5415))+((x5411*x5415))+(((-2976.0)*x5409*x5412))+(((-2976.0)*x5409*x5411))+(((-1.0)*x5411*x5413))+(((-1.0)*x5409*x5410))))))+IKsqr(((x5417.value)*(((((-1.0)*x5411))+(((-1.0)*x5412))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5416.value)*(((((-1.0)*x5412*x5413))+((x5410*x5414))+((x5412*x5415))+((x5411*x5415))+(((-2976.0)*x5409*x5412))+(((-2976.0)*x5409*x5411))+(((-1.0)*x5411*x5413))+(((-1.0)*x5409*x5410))))), ((x5417.value)*(((((-1.0)*x5411))+(((-1.0)*x5412))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5418=IKcos(j0);
IkReal x5419=IKsin(j0);
IkReal x5420=(cj5*r01);
IkReal x5421=(cj1*cj2);
IkReal x5422=((0.425)*cj1);
IkReal x5423=(cj5*r11);
IkReal x5424=(r00*sj5);
IkReal x5425=(r10*sj5);
IkReal x5426=(sj1*sj2);
IkReal x5427=((1.0)*x5426);
IkReal x5428=((0.3922)*x5419);
IkReal x5429=((0.3922)*x5418);
evalcond[0]=(x5424+x5420+((x5418*x5421))+(((-1.0)*x5418*x5427)));
evalcond[1]=(x5425+x5423+((x5419*x5421))+(((-1.0)*x5419*x5427)));
evalcond[2]=((((-0.1091)*x5419))+((x5418*x5422))+(((-1.0)*x5426*x5429))+((x5421*x5429))+(((-1.0)*px))+(((0.0946)*x5424))+(((0.0946)*x5420)));
evalcond[3]=((((-1.0)*x5426*x5428))+((x5419*x5422))+((x5421*x5428))+(((-1.0)*py))+(((0.0946)*x5425))+(((0.0946)*x5423))+(((0.1091)*x5418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5430=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5430;
j4eval[1]=IKsign(x5430);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5431=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5431;
j4eval[1]=IKsign(x5431);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5432=((1.0)*sj0);
IkReal x5433=((1.0)*cj0);
IkReal x5434=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5434;
j4eval[1]=IKsign(x5434);
j4eval[2]=((IKabs(((((-1.0)*r02*x5433))+(((-1.0)*r12*x5432)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x5432))+(((-1.0)*cj5*r00*x5433))+((cj0*r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5436 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5436)==0){
continue;
}
IkReal x5435=pow(x5436,-0.5);
CheckValue<IkReal> x5437 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5437.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5437.value));
IkReal gconst115=((-1.0)*r21*x5435);
IkReal gconst116=(r20*x5435);
CheckValue<IkReal> x5438 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5438.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5441 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5441.valid){
continue;
}
IkReal x5439=((-1.0)*(x5441.value));
IkReal x5440=x5435;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5439;
IkReal gconst114=x5439;
IkReal gconst115=((-1.0)*r21*x5440);
IkReal gconst116=(r20*x5440);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5444 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5444.valid){
continue;
}
IkReal x5442=((-1.0)*(x5444.value));
IkReal x5443=x5435;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5442;
IkReal gconst114=x5442;
IkReal gconst115=((-1.0)*r21*x5443);
IkReal gconst116=(r20*x5443);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x5447 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5447.valid){
continue;
}
IkReal x5445=((-1.0)*(x5447.value));
IkReal x5446=x5435;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x5445;
IkReal gconst114=x5445;
IkReal gconst115=((-1.0)*r21*x5446);
IkReal gconst116=(r20*x5446);
IkReal x5448=r22*r22;
CheckValue<IkReal> x5451=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5448))),-1);
if(!x5451.valid){
continue;
}
IkReal x5449=x5451.value;
IkReal x5450=(((x5449*(r20*r20*r20*r20)))+x5448+((x5449*(r21*r21*r21*r21)))+(((2.0)*x5449*(r20*r20)*(r21*r21))));
j4eval[0]=x5450;
j4eval[1]=IKsign(x5450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5452=(sj1*sj2);
IkReal x5453=(gconst115*r21);
IkReal x5454=(cj1*cj2);
IkReal x5455=(gconst116*r20);
CheckValue<IkReal> x5456=IKPowWithIntegerCheck(IKsign(((x5453*x5453)+(r22*r22)+(x5455*x5455)+(((-2.0)*x5453*x5455)))),-1);
if(!x5456.valid){
continue;
}
CheckValue<IkReal> x5457 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x5454))+((r22*x5452)))),IkReal(((((-1.0)*x5452*x5453))+(((-1.0)*x5454*x5455))+((x5453*x5454))+((x5452*x5455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5456.value)))+(x5457.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5458=IKsin(j4);
IkReal x5459=IKcos(j4);
IkReal x5460=((1.0)*cj2);
IkReal x5461=((1.0)*sj0);
IkReal x5462=(cj1*sj2);
IkReal x5463=((1.0)*x5459);
IkReal x5464=(gconst116*x5458);
IkReal x5465=(gconst115*x5459);
IkReal x5466=((1.0)*x5458);
evalcond[0]=((((-1.0)*gconst115*r21*x5466))+((r20*x5464))+(((-1.0)*r22*x5463)));
evalcond[1]=(cj0+(((-1.0)*r12*x5463))+(((-1.0)*gconst115*r11*x5466))+((r10*x5464)));
evalcond[2]=((((-1.0)*r02*x5463))+(((-1.0)*x5461))+(((-1.0)*gconst115*r01*x5466))+((r00*x5464)));
evalcond[3]=((((-1.0)*cj1*x5460))+((sj1*sj2))+((r21*x5465))+(((-1.0)*gconst116*r20*x5463))+(((-1.0)*r22*x5466)));
evalcond[4]=(((r01*x5465))+(((-1.0)*cj0*x5462))+(((-1.0)*cj0*sj1*x5460))+(((-1.0)*gconst116*r00*x5463))+(((-1.0)*r02*x5466)));
evalcond[5]=(((r11*x5465))+(((-1.0)*x5461*x5462))+(((-1.0)*gconst116*r10*x5463))+(((-1.0)*sj0*sj1*x5460))+(((-1.0)*r12*x5466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5467=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x5467.valid){
continue;
}
CheckValue<IkReal> x5468 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst115*r21*sj0))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5467.value)))+(x5468.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5469=IKsin(j4);
IkReal x5470=IKcos(j4);
IkReal x5471=((1.0)*cj2);
IkReal x5472=((1.0)*sj0);
IkReal x5473=(cj1*sj2);
IkReal x5474=((1.0)*x5470);
IkReal x5475=(gconst116*x5469);
IkReal x5476=(gconst115*x5470);
IkReal x5477=((1.0)*x5469);
evalcond[0]=(((r20*x5475))+(((-1.0)*gconst115*r21*x5477))+(((-1.0)*r22*x5474)));
evalcond[1]=(cj0+((r10*x5475))+(((-1.0)*r12*x5474))+(((-1.0)*gconst115*r11*x5477)));
evalcond[2]=((((-1.0)*gconst115*r01*x5477))+(((-1.0)*x5472))+((r00*x5475))+(((-1.0)*r02*x5474)));
evalcond[3]=((((-1.0)*gconst116*r20*x5474))+(((-1.0)*cj1*x5471))+((sj1*sj2))+(((-1.0)*r22*x5477))+((r21*x5476)));
evalcond[4]=((((-1.0)*cj0*sj1*x5471))+((r01*x5476))+(((-1.0)*cj0*x5473))+(((-1.0)*gconst116*r00*x5474))+(((-1.0)*r02*x5477)));
evalcond[5]=((((-1.0)*gconst116*r10*x5474))+(((-1.0)*sj0*sj1*x5471))+(((-1.0)*r12*x5477))+(((-1.0)*x5472*x5473))+((r11*x5476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5478.valid){
continue;
}
CheckValue<IkReal> x5479=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x5479.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5478.value)+(((1.5707963267949)*(x5479.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5480=IKsin(j4);
IkReal x5481=IKcos(j4);
IkReal x5482=((1.0)*cj2);
IkReal x5483=((1.0)*sj0);
IkReal x5484=(cj1*sj2);
IkReal x5485=((1.0)*x5481);
IkReal x5486=(gconst116*x5480);
IkReal x5487=(gconst115*x5481);
IkReal x5488=((1.0)*x5480);
evalcond[0]=((((-1.0)*gconst115*r21*x5488))+((r20*x5486))+(((-1.0)*r22*x5485)));
evalcond[1]=((((-1.0)*r12*x5485))+cj0+((r10*x5486))+(((-1.0)*gconst115*r11*x5488)));
evalcond[2]=((((-1.0)*x5483))+((r00*x5486))+(((-1.0)*gconst115*r01*x5488))+(((-1.0)*r02*x5485)));
evalcond[3]=((((-1.0)*gconst116*r20*x5485))+(((-1.0)*r22*x5488))+((sj1*sj2))+((r21*x5487))+(((-1.0)*cj1*x5482)));
evalcond[4]=((((-1.0)*gconst116*r00*x5485))+((r01*x5487))+(((-1.0)*cj0*x5484))+(((-1.0)*cj0*sj1*x5482))+(((-1.0)*r02*x5488)));
evalcond[5]=((((-1.0)*r12*x5488))+(((-1.0)*sj0*sj1*x5482))+(((-1.0)*x5483*x5484))+((r11*x5487))+(((-1.0)*gconst116*r10*x5485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5490 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5490)==0){
continue;
}
IkReal x5489=pow(x5490,-0.5);
CheckValue<IkReal> x5491 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5491.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5491.value))));
IkReal gconst118=((1.0)*r21*x5489);
IkReal gconst119=((-1.0)*r20*x5489);
CheckValue<IkReal> x5492 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5492.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5492.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x5495 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5495.valid){
continue;
}
IkReal x5493=((1.0)*(x5495.value));
IkReal x5494=x5489;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5493)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5493)));
IkReal gconst118=((1.0)*r21*x5494);
IkReal gconst119=((-1.0)*r20*x5494);
IkReal x5496=r22*r22;
IkReal x5497=((1.0)*x5496);
CheckValue<IkReal> x5501=IKPowWithIntegerCheck(((-1.0)+x5496),-1);
if(!x5501.valid){
continue;
}
IkReal x5498=x5501.value;
if((((1.0)+(((-1.0)*x5497)))) < -0.00001)
continue;
IkReal x5499=IKsqrt(((1.0)+(((-1.0)*x5497))));
IkReal x5500=(cj0*x5498*x5499);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5500+(((-1.0)*x5497*x5500))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5504 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5504.valid){
continue;
}
IkReal x5502=((1.0)*(x5504.value));
IkReal x5503=x5489;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5502)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5502)));
IkReal gconst118=((1.0)*r21*x5503);
IkReal gconst119=((-1.0)*r20*x5503);
IkReal x5505=r22*r22;
IkReal x5506=((1.0)*x5505);
CheckValue<IkReal> x5510=IKPowWithIntegerCheck(((-1.0)+x5505),-1);
if(!x5510.valid){
continue;
}
IkReal x5507=x5510.value;
if((((1.0)+(((-1.0)*x5506)))) < -0.00001)
continue;
IkReal x5508=IKsqrt(((1.0)+(((-1.0)*x5506))));
IkReal x5509=(sj0*x5507*x5508);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5509+(((-1.0)*x5506*x5509))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5513 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x5513.valid){
continue;
}
IkReal x5511=((1.0)*(x5513.value));
IkReal x5512=x5489;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5511)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5511)));
IkReal gconst118=((1.0)*r21*x5512);
IkReal gconst119=((-1.0)*r20*x5512);
IkReal x5514=r22*r22;
IkReal x5515=(r12*sj0);
IkReal x5516=(cj0*r02);
CheckValue<IkReal> x5520=IKPowWithIntegerCheck(((-1.0)+x5514),-1);
if(!x5520.valid){
continue;
}
IkReal x5517=x5520.value;
if((((1.0)+(((-1.0)*x5514)))) < -0.00001)
continue;
IkReal x5518=IKsqrt(((1.0)+(((-1.0)*x5514))));
IkReal x5519=(r22*x5517*x5518);
j4eval[0]=0;
j4eval[1]=((IKabs((((x5515*x5519))+((x5516*x5519)))))+(IKabs(((((-1.0)*x5516))+(((-1.0)*x5515))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5521=((1.0)*sj0);
IkReal x5522=((1.0)*cj0);
CheckValue<IkReal> x5523=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x5523.valid){
continue;
}
CheckValue<IkReal> x5524 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5522))+(((-1.0)*r12*x5521)))),IkReal((((gconst118*r11*sj0))+(((-1.0)*gconst119*r00*x5522))+((cj0*gconst118*r01))+(((-1.0)*gconst119*r10*x5521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5523.value)))+(x5524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5525=IKsin(j4);
IkReal x5526=IKcos(j4);
IkReal x5527=(gconst118*r01);
IkReal x5528=((1.0)*cj2);
IkReal x5529=(gconst119*r10);
IkReal x5530=(gconst119*r20);
IkReal x5531=(gconst118*r21);
IkReal x5532=(gconst119*r00);
IkReal x5533=(gconst118*r11);
IkReal x5534=((1.0)*sj0);
IkReal x5535=(cj1*sj2);
IkReal x5536=((1.0)*x5526);
IkReal x5537=((1.0)*x5525);
evalcond[0]=((((-1.0)*r22*x5536))+((x5525*x5530))+(((-1.0)*x5531*x5537)));
evalcond[1]=(cj0+((x5525*x5529))+(((-1.0)*r12*x5536))+(((-1.0)*x5533*x5537)));
evalcond[2]=((((-1.0)*x5534))+(((-1.0)*r02*x5536))+(((-1.0)*x5527*x5537))+((x5525*x5532)));
evalcond[3]=(((x5526*x5531))+(((-1.0)*r22*x5537))+((sj1*sj2))+(((-1.0)*cj1*x5528))+(((-1.0)*x5530*x5536)));
evalcond[4]=(((x5526*x5527))+(((-1.0)*r02*x5537))+(((-1.0)*cj0*x5535))+(((-1.0)*cj0*sj1*x5528))+(((-1.0)*x5532*x5536)));
evalcond[5]=(((x5526*x5533))+(((-1.0)*x5534*x5535))+(((-1.0)*sj0*sj1*x5528))+(((-1.0)*r12*x5537))+(((-1.0)*x5529*x5536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5538=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x5538.valid){
continue;
}
CheckValue<IkReal> x5539 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst118*r21*sj0))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5538.value)))+(x5539.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5540=IKsin(j4);
IkReal x5541=IKcos(j4);
IkReal x5542=(gconst118*r01);
IkReal x5543=((1.0)*cj2);
IkReal x5544=(gconst119*r10);
IkReal x5545=(gconst119*r20);
IkReal x5546=(gconst118*r21);
IkReal x5547=(gconst119*r00);
IkReal x5548=(gconst118*r11);
IkReal x5549=((1.0)*sj0);
IkReal x5550=(cj1*sj2);
IkReal x5551=((1.0)*x5541);
IkReal x5552=((1.0)*x5540);
evalcond[0]=(((x5540*x5545))+(((-1.0)*r22*x5551))+(((-1.0)*x5546*x5552)));
evalcond[1]=(cj0+(((-1.0)*r12*x5551))+(((-1.0)*x5548*x5552))+((x5540*x5544)));
evalcond[2]=((((-1.0)*x5542*x5552))+((x5540*x5547))+(((-1.0)*r02*x5551))+(((-1.0)*x5549)));
evalcond[3]=((((-1.0)*cj1*x5543))+(((-1.0)*x5545*x5551))+((x5541*x5546))+((sj1*sj2))+(((-1.0)*r22*x5552)));
evalcond[4]=((((-1.0)*cj0*x5550))+((x5541*x5542))+(((-1.0)*cj0*sj1*x5543))+(((-1.0)*r02*x5552))+(((-1.0)*x5547*x5551)));
evalcond[5]=((((-1.0)*x5544*x5551))+((x5541*x5548))+(((-1.0)*x5549*x5550))+(((-1.0)*r12*x5552))+(((-1.0)*sj0*sj1*x5543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5553=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x5553.valid){
continue;
}
CheckValue<IkReal> x5554 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst118*r21))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5553.value)))+(x5554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5555=IKsin(j4);
IkReal x5556=IKcos(j4);
IkReal x5557=(gconst118*r01);
IkReal x5558=((1.0)*cj2);
IkReal x5559=(gconst119*r10);
IkReal x5560=(gconst119*r20);
IkReal x5561=(gconst118*r21);
IkReal x5562=(gconst119*r00);
IkReal x5563=(gconst118*r11);
IkReal x5564=((1.0)*sj0);
IkReal x5565=(cj1*sj2);
IkReal x5566=((1.0)*x5556);
IkReal x5567=((1.0)*x5555);
evalcond[0]=((((-1.0)*r22*x5566))+((x5555*x5560))+(((-1.0)*x5561*x5567)));
evalcond[1]=((((-1.0)*r12*x5566))+cj0+((x5555*x5559))+(((-1.0)*x5563*x5567)));
evalcond[2]=((((-1.0)*x5557*x5567))+(((-1.0)*r02*x5566))+((x5555*x5562))+(((-1.0)*x5564)));
evalcond[3]=((((-1.0)*r22*x5567))+(((-1.0)*cj1*x5558))+((x5556*x5561))+((sj1*sj2))+(((-1.0)*x5560*x5566)));
evalcond[4]=((((-1.0)*cj0*sj1*x5558))+(((-1.0)*r02*x5567))+((x5556*x5557))+(((-1.0)*x5562*x5566))+(((-1.0)*cj0*x5565)));
evalcond[5]=((((-1.0)*x5564*x5565))+(((-1.0)*r12*x5567))+((x5556*x5563))+(((-1.0)*sj0*sj1*x5558))+(((-1.0)*x5559*x5566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5569 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5569)==0){
continue;
}
IkReal x5568=pow(x5569,-0.5);
CheckValue<IkReal> x5570 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5570.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5570.value));
IkReal gconst121=((-1.0)*r11*x5568);
IkReal gconst122=(r10*x5568);
CheckValue<IkReal> x5571 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5571.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5571.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5574 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5574.valid){
continue;
}
IkReal x5572=((-1.0)*(x5574.value));
IkReal x5573=x5568;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x5572;
IkReal gconst120=x5572;
IkReal gconst121=((-1.0)*r11*x5573);
IkReal gconst122=(r10*x5573);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5575=((1.0)*sj0);
IkReal x5576=((1.0)*cj0);
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5575))+(((-1.0)*r02*x5576)))),IkReal(((((-1.0)*gconst122*r00*x5576))+(((-1.0)*gconst122*r10*x5575))+((cj0*gconst121*r01))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
CheckValue<IkReal> x5578=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x5578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5577.value)+(((1.5707963267949)*(x5578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5579=IKsin(j4);
IkReal x5580=IKcos(j4);
IkReal x5581=((1.0)*r22);
IkReal x5582=(gconst121*r11);
IkReal x5583=(gconst122*r00);
IkReal x5584=((1.0)*cj2);
IkReal x5585=(gconst122*r10);
IkReal x5586=((1.0)*sj0);
IkReal x5587=(gconst122*r20);
IkReal x5588=(cj1*sj2);
IkReal x5589=((1.0)*x5580);
IkReal x5590=((1.0)*x5579);
IkReal x5591=(gconst121*x5580);
IkReal x5592=(gconst121*x5590);
evalcond[0]=((((-1.0)*r21*x5592))+((x5579*x5587))+(((-1.0)*x5580*x5581)));
evalcond[1]=((((-1.0)*r12*x5589))+cj0+(((-1.0)*x5582*x5590))+((x5579*x5585)));
evalcond[2]=((((-1.0)*r02*x5589))+((x5579*x5583))+(((-1.0)*r01*x5592))+(((-1.0)*x5586)));
evalcond[3]=(((r21*x5591))+(((-1.0)*x5579*x5581))+((sj1*sj2))+(((-1.0)*cj1*x5584))+(((-1.0)*x5587*x5589)));
evalcond[4]=((((-1.0)*cj0*x5588))+(((-1.0)*r02*x5590))+(((-1.0)*cj0*sj1*x5584))+(((-1.0)*x5583*x5589))+((r01*x5591)));
evalcond[5]=((((-1.0)*x5586*x5588))+(((-1.0)*r12*x5590))+(((-1.0)*x5585*x5589))+(((-1.0)*sj0*sj1*x5584))+((x5580*x5582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5593 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst121*r21))+((cj0*gconst122*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5593.valid){
continue;
}
CheckValue<IkReal> x5594=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x5594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5593.value)+(((1.5707963267949)*(x5594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5595=IKsin(j4);
IkReal x5596=IKcos(j4);
IkReal x5597=((1.0)*r22);
IkReal x5598=(gconst121*r11);
IkReal x5599=(gconst122*r00);
IkReal x5600=((1.0)*cj2);
IkReal x5601=(gconst122*r10);
IkReal x5602=((1.0)*sj0);
IkReal x5603=(gconst122*r20);
IkReal x5604=(cj1*sj2);
IkReal x5605=((1.0)*x5596);
IkReal x5606=((1.0)*x5595);
IkReal x5607=(gconst121*x5596);
IkReal x5608=(gconst121*x5606);
evalcond[0]=(((x5595*x5603))+(((-1.0)*x5596*x5597))+(((-1.0)*r21*x5608)));
evalcond[1]=(cj0+(((-1.0)*r12*x5605))+((x5595*x5601))+(((-1.0)*x5598*x5606)));
evalcond[2]=((((-1.0)*r01*x5608))+((x5595*x5599))+(((-1.0)*r02*x5605))+(((-1.0)*x5602)));
evalcond[3]=((((-1.0)*x5595*x5597))+((sj1*sj2))+(((-1.0)*x5603*x5605))+((r21*x5607))+(((-1.0)*cj1*x5600)));
evalcond[4]=((((-1.0)*x5599*x5605))+((r01*x5607))+(((-1.0)*cj0*x5604))+(((-1.0)*cj0*sj1*x5600))+(((-1.0)*r02*x5606)));
evalcond[5]=((((-1.0)*x5602*x5604))+(((-1.0)*r12*x5606))+(((-1.0)*x5601*x5605))+((x5596*x5598))+(((-1.0)*sj0*sj1*x5600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5610 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5610)==0){
continue;
}
IkReal x5609=pow(x5610,-0.5);
CheckValue<IkReal> x5611 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5611.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5611.value))));
IkReal gconst124=((1.0)*r11*x5609);
IkReal gconst125=((-1.0)*r10*x5609);
CheckValue<IkReal> x5612 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5612.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5612.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5615 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5615.valid){
continue;
}
IkReal x5613=((1.0)*(x5615.value));
IkReal x5614=x5609;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5613)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5613)));
IkReal gconst124=((1.0)*r11*x5614);
IkReal gconst125=((-1.0)*r10*x5614);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5618 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5618.valid){
continue;
}
IkReal x5616=((1.0)*(x5618.value));
IkReal x5617=x5609;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5616)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5616)));
IkReal gconst124=((1.0)*r11*x5617);
IkReal gconst125=((-1.0)*r10*x5617);
IkReal x5619=r12*r12;
IkReal x5620=((1.0)*sj0);
IkReal x5621=(cj0*r02);
IkReal x5622=x5609;
j4eval[0]=((IKabs((((sj0*x5619*x5622))+((r12*x5621*x5622))+(((-1.0)*x5620*x5622)))))+(IKabs(((((-1.0)*r12*x5620))+(((-1.0)*x5621))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
IkReal x5623=((1.0)*(x5625.value));
IkReal x5624=x5609;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5623)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5623)));
IkReal gconst124=((1.0)*r11*x5624);
IkReal gconst125=((-1.0)*r10*x5624);
IkReal x5626=r12*r12;
IkReal x5627=(cj1*cj2*r22);
IkReal x5628=(r22*sj1*sj2);
CheckValue<IkReal> x5632=IKPowWithIntegerCheck(((-1.0)+x5626),-1);
if(!x5632.valid){
continue;
}
IkReal x5629=x5632.value;
if((((1.0)+(((-1.0)*x5626)))) < -0.00001)
continue;
IkReal x5630=IKsqrt(((1.0)+(((-1.0)*x5626))));
IkReal x5631=(r12*x5629*x5630);
j4eval[0]=((IKabs((x5628+(((-1.0)*x5627)))))+(IKabs((((x5627*x5631))+(((-1.0)*x5628*x5631))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5633=(gconst125*r20);
IkReal x5634=(sj1*sj2);
IkReal x5635=(cj1*cj2);
IkReal x5636=(gconst124*r21);
CheckValue<IkReal> x5637=IKPowWithIntegerCheck(IKsign(((((-2.0)*x5633*x5636))+(r22*r22)+(x5636*x5636)+(x5633*x5633))),-1);
if(!x5637.valid){
continue;
}
CheckValue<IkReal> x5638 = IKatan2WithCheck(IkReal((((r22*x5634))+(((-1.0)*r22*x5635)))),IkReal(((((-1.0)*x5634*x5636))+(((-1.0)*x5633*x5635))+((x5633*x5634))+((x5635*x5636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5637.value)))+(x5638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5639=IKsin(j4);
IkReal x5640=IKcos(j4);
IkReal x5641=((1.0)*cj2);
IkReal x5642=((1.0)*sj0);
IkReal x5643=(cj1*sj2);
IkReal x5644=((1.0)*x5640);
IkReal x5645=(gconst125*x5639);
IkReal x5646=(gconst124*x5640);
IkReal x5647=((1.0)*x5639);
evalcond[0]=((((-1.0)*r22*x5644))+(((-1.0)*gconst124*r21*x5647))+((r20*x5645)));
evalcond[1]=(cj0+(((-1.0)*r12*x5644))+(((-1.0)*gconst124*r11*x5647))+((r10*x5645)));
evalcond[2]=(((r00*x5645))+(((-1.0)*r02*x5644))+(((-1.0)*x5642))+(((-1.0)*gconst124*r01*x5647)));
evalcond[3]=((((-1.0)*gconst125*r20*x5644))+(((-1.0)*r22*x5647))+(((-1.0)*cj1*x5641))+((sj1*sj2))+((r21*x5646)));
evalcond[4]=((((-1.0)*cj0*x5643))+((r01*x5646))+(((-1.0)*gconst125*r00*x5644))+(((-1.0)*cj0*sj1*x5641))+(((-1.0)*r02*x5647)));
evalcond[5]=((((-1.0)*x5642*x5643))+(((-1.0)*r12*x5647))+(((-1.0)*sj0*sj1*x5641))+(((-1.0)*gconst125*r10*x5644))+((r11*x5646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5648=((1.0)*sj0);
IkReal x5649=((1.0)*cj0);
CheckValue<IkReal> x5650 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5648))+(((-1.0)*r02*x5649)))),IkReal(((((-1.0)*gconst125*r00*x5649))+((cj0*gconst124*r01))+(((-1.0)*gconst125*r10*x5648))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5650.valid){
continue;
}
CheckValue<IkReal> x5651=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x5651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5650.value)+(((1.5707963267949)*(x5651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5652=IKsin(j4);
IkReal x5653=IKcos(j4);
IkReal x5654=((1.0)*cj2);
IkReal x5655=((1.0)*sj0);
IkReal x5656=(cj1*sj2);
IkReal x5657=((1.0)*x5653);
IkReal x5658=(gconst125*x5652);
IkReal x5659=(gconst124*x5653);
IkReal x5660=((1.0)*x5652);
evalcond[0]=(((r20*x5658))+(((-1.0)*r22*x5657))+(((-1.0)*gconst124*r21*x5660)));
evalcond[1]=((((-1.0)*r12*x5657))+cj0+((r10*x5658))+(((-1.0)*gconst124*r11*x5660)));
evalcond[2]=((((-1.0)*gconst124*r01*x5660))+((r00*x5658))+(((-1.0)*r02*x5657))+(((-1.0)*x5655)));
evalcond[3]=((((-1.0)*cj1*x5654))+(((-1.0)*gconst125*r20*x5657))+(((-1.0)*r22*x5660))+((sj1*sj2))+((r21*x5659)));
evalcond[4]=((((-1.0)*gconst125*r00*x5657))+(((-1.0)*cj0*x5656))+((r01*x5659))+(((-1.0)*r02*x5660))+(((-1.0)*cj0*sj1*x5654)));
evalcond[5]=((((-1.0)*x5655*x5656))+((r11*x5659))+(((-1.0)*sj0*sj1*x5654))+(((-1.0)*gconst125*r10*x5657))+(((-1.0)*r12*x5660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5661=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x5661.valid){
continue;
}
CheckValue<IkReal> x5662 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst124*r21))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5661.value)))+(x5662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5663=IKsin(j4);
IkReal x5664=IKcos(j4);
IkReal x5665=((1.0)*cj2);
IkReal x5666=((1.0)*sj0);
IkReal x5667=(cj1*sj2);
IkReal x5668=((1.0)*x5664);
IkReal x5669=(gconst125*x5663);
IkReal x5670=(gconst124*x5664);
IkReal x5671=((1.0)*x5663);
evalcond[0]=((((-1.0)*gconst124*r21*x5671))+(((-1.0)*r22*x5668))+((r20*x5669)));
evalcond[1]=(cj0+(((-1.0)*gconst124*r11*x5671))+(((-1.0)*r12*x5668))+((r10*x5669)));
evalcond[2]=((((-1.0)*x5666))+((r00*x5669))+(((-1.0)*r02*x5668))+(((-1.0)*gconst124*r01*x5671)));
evalcond[3]=((((-1.0)*cj1*x5665))+(((-1.0)*r22*x5671))+(((-1.0)*gconst125*r20*x5668))+((sj1*sj2))+((r21*x5670)));
evalcond[4]=((((-1.0)*gconst125*r00*x5668))+((r01*x5670))+(((-1.0)*cj0*sj1*x5665))+(((-1.0)*cj0*x5667))+(((-1.0)*r02*x5671)));
evalcond[5]=((((-1.0)*gconst125*r10*x5668))+(((-1.0)*sj0*sj1*x5665))+(((-1.0)*x5666*x5667))+(((-1.0)*r12*x5671))+((r11*x5670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5672=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5672;
j4eval[1]=IKsign(x5672);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5673=((1.0)*sj5);
IkReal x5674=((((-1.0)*cj5*r21))+(((-1.0)*r20*x5673)));
j4eval[0]=x5674;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x5673))+((cj5*r00))))));
j4eval[2]=IKsign(x5674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5675=cj5*cj5;
IkReal x5676=r11*r11;
IkReal x5677=(r11*sj5);
IkReal x5678=(cj5*r10);
IkReal x5679=(x5676+(r12*r12)+(((-2.0)*x5677*x5678))+(((-1.0)*x5675*x5676))+((x5675*(r10*r10))));
j4eval[0]=x5679;
j4eval[1]=IKsign(x5679);
j4eval[2]=((IKabs((x5677+(((-1.0)*x5678)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5680=cj5*cj5;
IkReal x5681=r11*r11;
IkReal x5682=(cj5*r10);
IkReal x5683=(r11*sj5);
CheckValue<IkReal> x5684=IKPowWithIntegerCheck(IKsign((x5681+(r12*r12)+(((-2.0)*x5682*x5683))+(((-1.0)*x5680*x5681))+((x5680*(r10*r10))))),-1);
if(!x5684.valid){
continue;
}
CheckValue<IkReal> x5685 = IKatan2WithCheck(IkReal((x5683+(((-1.0)*x5682)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5684.value)))+(x5685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5686=IKsin(j4);
IkReal x5687=IKcos(j4);
IkReal x5688=(cj5*r00);
IkReal x5689=((1.0)*cj1);
IkReal x5690=((1.0)*x5687);
IkReal x5691=(sj5*x5687);
IkReal x5692=(cj5*x5686);
IkReal x5693=((1.0)*x5686);
IkReal x5694=(sj5*x5693);
evalcond[0]=((((-1.0)*r22*x5690))+((r20*x5692))+(((-1.0)*r21*x5694)));
evalcond[1]=(((x5686*x5688))+(((-1.0)*r02*x5690))+(((-1.0)*r01*x5694)));
evalcond[2]=((((-1.0)*cj5*r10*x5690))+((r11*x5691))+(((-1.0)*r12*x5693)));
evalcond[3]=((1.0)+((r10*x5692))+(((-1.0)*r12*x5690))+(((-1.0)*r11*x5694)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x5693))+(((-1.0)*cj2*x5689))+((r21*x5691))+(((-1.0)*cj5*r20*x5690)));
evalcond[5]=((((-1.0)*r02*x5693))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x5689))+(((-1.0)*x5688*x5690))+((r01*x5691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5695=((1.0)*sj5);
CheckValue<IkReal> x5696=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x5695)))),-1);
if(!x5696.valid){
continue;
}
CheckValue<IkReal> x5697 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x5695))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5696.value)))+(x5697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5698=IKsin(j4);
IkReal x5699=IKcos(j4);
IkReal x5700=(cj5*r00);
IkReal x5701=((1.0)*cj1);
IkReal x5702=((1.0)*x5699);
IkReal x5703=(sj5*x5699);
IkReal x5704=(cj5*x5698);
IkReal x5705=((1.0)*x5698);
IkReal x5706=(sj5*x5705);
evalcond[0]=(((r20*x5704))+(((-1.0)*r22*x5702))+(((-1.0)*r21*x5706)));
evalcond[1]=((((-1.0)*r02*x5702))+(((-1.0)*r01*x5706))+((x5698*x5700)));
evalcond[2]=((((-1.0)*r12*x5705))+((r11*x5703))+(((-1.0)*cj5*r10*x5702)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5702))+((r10*x5704))+(((-1.0)*r11*x5706)));
evalcond[4]=((((-1.0)*cj5*r20*x5702))+(((-1.0)*r22*x5705))+((sj1*sj2))+((r21*x5703))+(((-1.0)*cj2*x5701)));
evalcond[5]=((((-1.0)*sj2*x5701))+(((-1.0)*x5700*x5702))+(((-1.0)*cj2*sj1))+((r01*x5703))+(((-1.0)*r02*x5705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5707=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5707.valid){
continue;
}
CheckValue<IkReal> x5708 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5707.value)))+(x5708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5709=IKsin(j4);
IkReal x5710=IKcos(j4);
IkReal x5711=(cj5*r00);
IkReal x5712=((1.0)*cj1);
IkReal x5713=((1.0)*x5710);
IkReal x5714=(sj5*x5710);
IkReal x5715=(cj5*x5709);
IkReal x5716=((1.0)*x5709);
IkReal x5717=(sj5*x5716);
evalcond[0]=((((-1.0)*r22*x5713))+(((-1.0)*r21*x5717))+((r20*x5715)));
evalcond[1]=((((-1.0)*r01*x5717))+((x5709*x5711))+(((-1.0)*r02*x5713)));
evalcond[2]=((((-1.0)*cj5*r10*x5713))+((r11*x5714))+(((-1.0)*r12*x5716)));
evalcond[3]=((1.0)+((r10*x5715))+(((-1.0)*r12*x5713))+(((-1.0)*r11*x5717)));
evalcond[4]=((((-1.0)*r22*x5716))+((sj1*sj2))+(((-1.0)*cj5*r20*x5713))+(((-1.0)*cj2*x5712))+((r21*x5714)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x5711*x5713))+((r01*x5714))+(((-1.0)*sj2*x5712))+(((-1.0)*r02*x5716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5718=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5718;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x5718);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5719=((1.0)*sj5);
IkReal x5720=((((-1.0)*r00*x5719))+(((-1.0)*cj5*r01)));
j4eval[0]=x5720;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5719)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5720);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5721=cj5*cj5;
IkReal x5722=r11*r11;
IkReal x5723=(cj5*r10);
IkReal x5724=(r11*sj5);
IkReal x5725=(((x5721*x5722))+(((-1.0)*(r12*r12)))+(((2.0)*x5723*x5724))+(((-1.0)*x5722))+(((-1.0)*x5721*(r10*r10))));
j4eval[0]=x5725;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x5723))+x5724))));
j4eval[2]=IKsign(x5725);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5726=cj5*cj5;
IkReal x5727=r11*r11;
IkReal x5728=(cj5*r10);
IkReal x5729=(r11*sj5);
CheckValue<IkReal> x5730=IKPowWithIntegerCheck(IKsign((((x5726*x5727))+(((2.0)*x5728*x5729))+(((-1.0)*(r12*r12)))+(((-1.0)*x5727))+(((-1.0)*x5726*(r10*r10))))),-1);
if(!x5730.valid){
continue;
}
CheckValue<IkReal> x5731 = IKatan2WithCheck(IkReal(((((-1.0)*x5728))+x5729)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x5731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5730.value)))+(x5731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5732=IKsin(j4);
IkReal x5733=IKcos(j4);
IkReal x5734=(cj5*r00);
IkReal x5735=((1.0)*x5733);
IkReal x5736=(sj5*x5733);
IkReal x5737=(cj5*x5732);
IkReal x5738=((1.0)*x5732);
IkReal x5739=(sj5*x5738);
evalcond[0]=((((-1.0)*r21*x5739))+((r20*x5737))+(((-1.0)*r22*x5735)));
evalcond[1]=(((x5732*x5734))+(((-1.0)*r02*x5735))+(((-1.0)*r01*x5739)));
evalcond[2]=(((r11*x5736))+(((-1.0)*r12*x5738))+(((-1.0)*cj5*r10*x5735)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x5739))+(((-1.0)*r12*x5735))+((r10*x5737)));
evalcond[4]=(((cj2*sj1))+((r01*x5736))+(((-1.0)*x5734*x5735))+((cj1*sj2))+(((-1.0)*r02*x5738)));
evalcond[5]=(((r21*x5736))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5738))+(((-1.0)*cj5*r20*x5735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5740=((1.0)*sj5);
CheckValue<IkReal> x5741=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x5740))+(((-1.0)*cj5*r01)))),-1);
if(!x5741.valid){
continue;
}
CheckValue<IkReal> x5742 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5740)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5741.value)))+(x5742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5743=IKsin(j4);
IkReal x5744=IKcos(j4);
IkReal x5745=(cj5*r00);
IkReal x5746=((1.0)*x5744);
IkReal x5747=(sj5*x5744);
IkReal x5748=(cj5*x5743);
IkReal x5749=((1.0)*x5743);
IkReal x5750=(sj5*x5749);
evalcond[0]=((((-1.0)*r21*x5750))+(((-1.0)*r22*x5746))+((r20*x5748)));
evalcond[1]=((((-1.0)*r01*x5750))+(((-1.0)*r02*x5746))+((x5743*x5745)));
evalcond[2]=(((r11*x5747))+(((-1.0)*cj5*r10*x5746))+(((-1.0)*r12*x5749)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x5750))+(((-1.0)*r12*x5746))+((r10*x5748)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5745*x5746))+((r01*x5747))+(((-1.0)*r02*x5749)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5749))+(((-1.0)*cj5*r20*x5746))+((r21*x5747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5751=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5751.valid){
continue;
}
CheckValue<IkReal> x5752 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5751.value)))+(x5752.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5753=IKsin(j4);
IkReal x5754=IKcos(j4);
IkReal x5755=(cj5*r00);
IkReal x5756=((1.0)*x5754);
IkReal x5757=(sj5*x5754);
IkReal x5758=(cj5*x5753);
IkReal x5759=((1.0)*x5753);
IkReal x5760=(sj5*x5759);
evalcond[0]=((((-1.0)*r21*x5760))+(((-1.0)*r22*x5756))+((r20*x5758)));
evalcond[1]=((((-1.0)*r01*x5760))+(((-1.0)*r02*x5756))+((x5753*x5755)));
evalcond[2]=((((-1.0)*r12*x5759))+((r11*x5757))+(((-1.0)*cj5*r10*x5756)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x5760))+(((-1.0)*r12*x5756))+((r10*x5758)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x5757))+(((-1.0)*r02*x5759))+(((-1.0)*x5755*x5756)));
evalcond[5]=((((-1.0)*cj5*r20*x5756))+((r21*x5757))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x5759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5762 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5762)==0){
continue;
}
IkReal x5761=pow(x5762,-0.5);
CheckValue<IkReal> x5763 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5763.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5763.value));
IkReal gconst127=((-1.0)*r01*x5761);
IkReal gconst128=(r00*x5761);
CheckValue<IkReal> x5764 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5764.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5764.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x5767 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5767.valid){
continue;
}
IkReal x5765=((-1.0)*(x5767.value));
IkReal x5766=x5761;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x5765;
IkReal gconst126=x5765;
IkReal gconst127=((-1.0)*r01*x5766);
IkReal gconst128=(r00*x5766);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5768=((1.0)*sj0);
IkReal x5769=((1.0)*cj0);
CheckValue<IkReal> x5770 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5768))+(((-1.0)*r02*x5769)))),IkReal(((((-1.0)*gconst128*r10*x5768))+((cj0*gconst127*r01))+((gconst127*r11*sj0))+(((-1.0)*gconst128*r00*x5769)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5770.valid){
continue;
}
CheckValue<IkReal> x5771=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x5771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5770.value)+(((1.5707963267949)*(x5771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5772=IKsin(j4);
IkReal x5773=IKcos(j4);
IkReal x5774=(gconst128*r10);
IkReal x5775=((1.0)*cj2);
IkReal x5776=((1.0)*sj0);
IkReal x5777=(cj1*sj2);
IkReal x5778=((1.0)*x5773);
IkReal x5779=(gconst127*x5773);
IkReal x5780=((1.0)*x5772);
IkReal x5781=(gconst128*x5772);
evalcond[0]=((((-1.0)*gconst127*r21*x5780))+((r20*x5781))+(((-1.0)*r22*x5778)));
evalcond[1]=(cj0+(((-1.0)*r12*x5778))+(((-1.0)*gconst127*r11*x5780))+((x5772*x5774)));
evalcond[2]=((((-1.0)*gconst127*r01*x5780))+((r00*x5781))+(((-1.0)*r02*x5778))+(((-1.0)*x5776)));
evalcond[3]=((((-1.0)*cj1*x5775))+((sj1*sj2))+((r21*x5779))+(((-1.0)*r22*x5780))+(((-1.0)*gconst128*r20*x5778)));
evalcond[4]=((((-1.0)*gconst128*r00*x5778))+((r01*x5779))+(((-1.0)*cj0*sj1*x5775))+(((-1.0)*cj0*x5777))+(((-1.0)*r02*x5780)));
evalcond[5]=((((-1.0)*x5776*x5777))+(((-1.0)*sj0*sj1*x5775))+(((-1.0)*x5774*x5778))+(((-1.0)*r12*x5780))+((r11*x5779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5782=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x5782.valid){
continue;
}
CheckValue<IkReal> x5783 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst128*r20*sj0))+(((-1.0)*gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5782.value)))+(x5783.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5784=IKsin(j4);
IkReal x5785=IKcos(j4);
IkReal x5786=(gconst128*r10);
IkReal x5787=((1.0)*cj2);
IkReal x5788=((1.0)*sj0);
IkReal x5789=(cj1*sj2);
IkReal x5790=((1.0)*x5785);
IkReal x5791=(gconst127*x5785);
IkReal x5792=((1.0)*x5784);
IkReal x5793=(gconst128*x5784);
evalcond[0]=(((r20*x5793))+(((-1.0)*r22*x5790))+(((-1.0)*gconst127*r21*x5792)));
evalcond[1]=(cj0+((x5784*x5786))+(((-1.0)*gconst127*r11*x5792))+(((-1.0)*r12*x5790)));
evalcond[2]=((((-1.0)*gconst127*r01*x5792))+(((-1.0)*x5788))+((r00*x5793))+(((-1.0)*r02*x5790)));
evalcond[3]=((((-1.0)*cj1*x5787))+((r21*x5791))+((sj1*sj2))+(((-1.0)*r22*x5792))+(((-1.0)*gconst128*r20*x5790)));
evalcond[4]=((((-1.0)*cj0*x5789))+((r01*x5791))+(((-1.0)*gconst128*r00*x5790))+(((-1.0)*r02*x5792))+(((-1.0)*cj0*sj1*x5787)));
evalcond[5]=(((r11*x5791))+(((-1.0)*x5786*x5790))+(((-1.0)*r12*x5792))+(((-1.0)*x5788*x5789))+(((-1.0)*sj0*sj1*x5787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5795 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5795)==0){
continue;
}
IkReal x5794=pow(x5795,-0.5);
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5796.value))));
IkReal gconst130=((1.0)*r01*x5794);
IkReal gconst131=((-1.0)*r00*x5794);
CheckValue<IkReal> x5797 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5797.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5797.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x5800 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5800.valid){
continue;
}
IkReal x5798=((1.0)*(x5800.value));
IkReal x5799=x5794;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5798)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5798)));
IkReal gconst130=((1.0)*r01*x5799);
IkReal gconst131=((-1.0)*r00*x5799);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x5803 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5803.valid){
continue;
}
IkReal x5801=((1.0)*(x5803.value));
IkReal x5802=x5794;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5801)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5801)));
IkReal gconst130=((1.0)*r01*x5802);
IkReal gconst131=((-1.0)*r00*x5802);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x5806 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x5806.valid){
continue;
}
IkReal x5804=((1.0)*(x5806.value));
IkReal x5805=x5794;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5804)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5804)));
IkReal gconst130=((1.0)*r01*x5805);
IkReal gconst131=((-1.0)*r00*x5805);
IkReal x5807=r02*r02;
IkReal x5808=(r12*sj0);
IkReal x5809=((1.0)*cj0);
IkReal x5810=x5794;
j4eval[0]=((IKabs(((((-1.0)*x5808))+(((-1.0)*r02*x5809)))))+(IKabs((((r02*x5808*x5810))+((cj0*x5807*x5810))+(((-1.0)*x5809*x5810))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5811=((1.0)*sj0);
IkReal x5812=((1.0)*cj0);
CheckValue<IkReal> x5813=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x5813.valid){
continue;
}
CheckValue<IkReal> x5814 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5811))+(((-1.0)*r02*x5812)))),IkReal((((cj0*gconst130*r01))+((gconst130*r11*sj0))+(((-1.0)*gconst131*r00*x5812))+(((-1.0)*gconst131*r10*x5811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5813.value)))+(x5814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5815=IKsin(j4);
IkReal x5816=IKcos(j4);
IkReal x5817=(gconst131*r10);
IkReal x5818=((1.0)*cj2);
IkReal x5819=(gconst131*r20);
IkReal x5820=((1.0)*sj0);
IkReal x5821=(gconst131*r00);
IkReal x5822=(cj1*sj2);
IkReal x5823=((1.0)*x5816);
IkReal x5824=(gconst130*x5816);
IkReal x5825=((1.0)*x5815);
evalcond[0]=((((-1.0)*r22*x5823))+((x5815*x5819))+(((-1.0)*gconst130*r21*x5825)));
evalcond[1]=(((x5815*x5817))+cj0+(((-1.0)*gconst130*r11*x5825))+(((-1.0)*r12*x5823)));
evalcond[2]=((((-1.0)*x5820))+(((-1.0)*r02*x5823))+(((-1.0)*gconst130*r01*x5825))+((x5815*x5821)));
evalcond[3]=((((-1.0)*r22*x5825))+(((-1.0)*cj1*x5818))+((r21*x5824))+((sj1*sj2))+(((-1.0)*x5819*x5823)));
evalcond[4]=((((-1.0)*r02*x5825))+(((-1.0)*x5821*x5823))+((r01*x5824))+(((-1.0)*cj0*x5822))+(((-1.0)*cj0*sj1*x5818)));
evalcond[5]=((((-1.0)*x5820*x5822))+(((-1.0)*x5817*x5823))+((r11*x5824))+(((-1.0)*sj0*sj1*x5818))+(((-1.0)*r12*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5826=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x5826.valid){
continue;
}
CheckValue<IkReal> x5827 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst131*r20*sj0))+(((-1.0)*gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5826.value)))+(x5827.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5828=IKsin(j4);
IkReal x5829=IKcos(j4);
IkReal x5830=(gconst131*r10);
IkReal x5831=((1.0)*cj2);
IkReal x5832=(gconst131*r20);
IkReal x5833=((1.0)*sj0);
IkReal x5834=(gconst131*r00);
IkReal x5835=(cj1*sj2);
IkReal x5836=((1.0)*x5829);
IkReal x5837=(gconst130*x5829);
IkReal x5838=((1.0)*x5828);
evalcond[0]=((((-1.0)*gconst130*r21*x5838))+(((-1.0)*r22*x5836))+((x5828*x5832)));
evalcond[1]=(cj0+(((-1.0)*gconst130*r11*x5838))+(((-1.0)*r12*x5836))+((x5828*x5830)));
evalcond[2]=((((-1.0)*x5833))+(((-1.0)*r02*x5836))+(((-1.0)*gconst130*r01*x5838))+((x5828*x5834)));
evalcond[3]=(((r21*x5837))+(((-1.0)*r22*x5838))+(((-1.0)*cj1*x5831))+(((-1.0)*x5832*x5836))+((sj1*sj2)));
evalcond[4]=((((-1.0)*r02*x5838))+(((-1.0)*cj0*sj1*x5831))+(((-1.0)*cj0*x5835))+((r01*x5837))+(((-1.0)*x5834*x5836)));
evalcond[5]=((((-1.0)*x5833*x5835))+(((-1.0)*x5830*x5836))+((r11*x5837))+(((-1.0)*sj0*sj1*x5831))+(((-1.0)*r12*x5838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5839=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x5839.valid){
continue;
}
CheckValue<IkReal> x5840 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5839.value)))+(x5840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5841=IKsin(j4);
IkReal x5842=IKcos(j4);
IkReal x5843=(gconst131*r10);
IkReal x5844=((1.0)*cj2);
IkReal x5845=(gconst131*r20);
IkReal x5846=((1.0)*sj0);
IkReal x5847=(gconst131*r00);
IkReal x5848=(cj1*sj2);
IkReal x5849=((1.0)*x5842);
IkReal x5850=(gconst130*x5842);
IkReal x5851=((1.0)*x5841);
evalcond[0]=(((x5841*x5845))+(((-1.0)*gconst130*r21*x5851))+(((-1.0)*r22*x5849)));
evalcond[1]=(cj0+((x5841*x5843))+(((-1.0)*gconst130*r11*x5851))+(((-1.0)*r12*x5849)));
evalcond[2]=((((-1.0)*r02*x5849))+((x5841*x5847))+(((-1.0)*x5846))+(((-1.0)*gconst130*r01*x5851)));
evalcond[3]=((((-1.0)*cj1*x5844))+((sj1*sj2))+(((-1.0)*x5845*x5849))+(((-1.0)*r22*x5851))+((r21*x5850)));
evalcond[4]=((((-1.0)*x5847*x5849))+(((-1.0)*cj0*sj1*x5844))+((r01*x5850))+(((-1.0)*cj0*x5848))+(((-1.0)*r02*x5851)));
evalcond[5]=((((-1.0)*sj0*sj1*x5844))+((r11*x5850))+(((-1.0)*r12*x5851))+(((-1.0)*x5846*x5848))+(((-1.0)*x5843*x5849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5852=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5852;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x5852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5853=((1.0)*sj5);
IkReal x5854=((((-1.0)*r20*x5853))+(((-1.0)*cj5*r21)));
j4eval[0]=x5854;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x5853))))));
j4eval[2]=IKsign(x5854);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5855=cj5*cj5;
IkReal x5856=r01*r01;
IkReal x5857=(r01*sj5);
IkReal x5858=(cj5*r00);
IkReal x5859=((((2.0)*x5857*x5858))+((x5855*x5856))+(((-1.0)*(r02*r02)))+(((-1.0)*x5856))+(((-1.0)*x5855*(r00*r00))));
j4eval[0]=x5859;
j4eval[1]=IKsign(x5859);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x5858))+x5857))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5860=cj5*cj5;
IkReal x5861=r01*r01;
IkReal x5862=(r01*sj5);
IkReal x5863=(cj5*r00);
CheckValue<IkReal> x5864=IKPowWithIntegerCheck(IKsign((((x5860*x5861))+(((-1.0)*x5861))+(((2.0)*x5862*x5863))+(((-1.0)*x5860*(r00*r00)))+(((-1.0)*(r02*r02))))),-1);
if(!x5864.valid){
continue;
}
CheckValue<IkReal> x5865 = IKatan2WithCheck(IkReal(((((-1.0)*x5863))+x5862)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5864.value)))+(x5865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5866=IKsin(j4);
IkReal x5867=IKcos(j4);
IkReal x5868=(cj5*r00);
IkReal x5869=((1.0)*cj1);
IkReal x5870=(cj5*r20);
IkReal x5871=(cj5*r10);
IkReal x5872=((1.0)*x5867);
IkReal x5873=(sj5*x5867);
IkReal x5874=((1.0)*x5866);
IkReal x5875=(sj5*x5874);
evalcond[0]=(((x5866*x5870))+(((-1.0)*r22*x5872))+(((-1.0)*r21*x5875)));
evalcond[1]=(((x5866*x5871))+(((-1.0)*r12*x5872))+(((-1.0)*r11*x5875)));
evalcond[2]=((((-1.0)*r02*x5874))+(((-1.0)*x5868*x5872))+((r01*x5873)));
evalcond[3]=((-1.0)+((x5866*x5868))+(((-1.0)*r02*x5872))+(((-1.0)*r01*x5875)));
evalcond[4]=((((-1.0)*r22*x5874))+((sj1*sj2))+(((-1.0)*cj2*x5869))+(((-1.0)*x5870*x5872))+((r21*x5873)));
evalcond[5]=((((-1.0)*r12*x5874))+(((-1.0)*cj2*sj1))+((r11*x5873))+(((-1.0)*x5871*x5872))+(((-1.0)*sj2*x5869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5876=((1.0)*sj5);
CheckValue<IkReal> x5877=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5876))+(((-1.0)*cj5*r21)))),-1);
if(!x5877.valid){
continue;
}
CheckValue<IkReal> x5878 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x5876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5877.value)))+(x5878.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5879=IKsin(j4);
IkReal x5880=IKcos(j4);
IkReal x5881=(cj5*r00);
IkReal x5882=((1.0)*cj1);
IkReal x5883=(cj5*r20);
IkReal x5884=(cj5*r10);
IkReal x5885=((1.0)*x5880);
IkReal x5886=(sj5*x5880);
IkReal x5887=((1.0)*x5879);
IkReal x5888=(sj5*x5887);
evalcond[0]=(((x5879*x5883))+(((-1.0)*r22*x5885))+(((-1.0)*r21*x5888)));
evalcond[1]=(((x5879*x5884))+(((-1.0)*r12*x5885))+(((-1.0)*r11*x5888)));
evalcond[2]=(((r01*x5886))+(((-1.0)*r02*x5887))+(((-1.0)*x5881*x5885)));
evalcond[3]=((-1.0)+((x5879*x5881))+(((-1.0)*r01*x5888))+(((-1.0)*r02*x5885)));
evalcond[4]=((((-1.0)*x5883*x5885))+((sj1*sj2))+(((-1.0)*cj2*x5882))+((r21*x5886))+(((-1.0)*r22*x5887)));
evalcond[5]=((((-1.0)*sj2*x5882))+((r11*x5886))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x5887))+(((-1.0)*x5884*x5885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5889=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5889.valid){
continue;
}
CheckValue<IkReal> x5890 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5889.value)))+(x5890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5891=IKsin(j4);
IkReal x5892=IKcos(j4);
IkReal x5893=(cj5*r00);
IkReal x5894=((1.0)*cj1);
IkReal x5895=(cj5*r20);
IkReal x5896=(cj5*r10);
IkReal x5897=((1.0)*x5892);
IkReal x5898=(sj5*x5892);
IkReal x5899=((1.0)*x5891);
IkReal x5900=(sj5*x5899);
evalcond[0]=((((-1.0)*r22*x5897))+(((-1.0)*r21*x5900))+((x5891*x5895)));
evalcond[1]=((((-1.0)*r11*x5900))+(((-1.0)*r12*x5897))+((x5891*x5896)));
evalcond[2]=((((-1.0)*x5893*x5897))+(((-1.0)*r02*x5899))+((r01*x5898)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x5900))+(((-1.0)*r02*x5897))+((x5891*x5893)));
evalcond[4]=(((r21*x5898))+(((-1.0)*r22*x5899))+(((-1.0)*cj2*x5894))+((sj1*sj2))+(((-1.0)*x5895*x5897)));
evalcond[5]=((((-1.0)*r12*x5899))+(((-1.0)*x5896*x5897))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x5894))+((r11*x5898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5901=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5901;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x5901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5902=((1.0)*sj5);
IkReal x5903=((((-1.0)*cj5*r11))+(((-1.0)*r10*x5902)));
j4eval[0]=x5903;
j4eval[1]=IKsign(x5903);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x5902)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5904=cj5*cj5;
IkReal x5905=r01*r01;
IkReal x5906=(cj5*r00);
IkReal x5907=(r01*sj5);
IkReal x5908=((((-1.0)*x5904*x5905))+((x5904*(r00*r00)))+(((-2.0)*x5906*x5907))+(r02*r02)+x5905);
j4eval[0]=x5908;
j4eval[1]=((IKabs(r02))+(IKabs((x5907+(((-1.0)*x5906))))));
j4eval[2]=IKsign(x5908);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5909=cj5*cj5;
IkReal x5910=r01*r01;
IkReal x5911=(r01*sj5);
IkReal x5912=(cj5*r00);
CheckValue<IkReal> x5913 = IKatan2WithCheck(IkReal((x5911+(((-1.0)*x5912)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x5913.valid){
continue;
}
CheckValue<IkReal> x5914=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5909*x5910))+(((-2.0)*x5911*x5912))+((x5909*(r00*r00)))+(r02*r02)+x5910)),-1);
if(!x5914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5913.value)+(((1.5707963267949)*(x5914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5915=IKsin(j4);
IkReal x5916=IKcos(j4);
IkReal x5917=(cj5*r00);
IkReal x5918=(cj5*r20);
IkReal x5919=(cj5*r10);
IkReal x5920=((1.0)*x5916);
IkReal x5921=(sj5*x5916);
IkReal x5922=((1.0)*x5915);
IkReal x5923=(sj5*x5922);
evalcond[0]=((((-1.0)*r22*x5920))+((x5915*x5918))+(((-1.0)*r21*x5923)));
evalcond[1]=(((x5915*x5919))+(((-1.0)*r12*x5920))+(((-1.0)*r11*x5923)));
evalcond[2]=((((-1.0)*r02*x5922))+(((-1.0)*x5917*x5920))+((r01*x5921)));
evalcond[3]=((1.0)+((x5915*x5917))+(((-1.0)*r01*x5923))+(((-1.0)*r02*x5920)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x5921))+(((-1.0)*r12*x5922))+(((-1.0)*x5919*x5920)));
evalcond[5]=((((-1.0)*r22*x5922))+(((-1.0)*x5918*x5920))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5924=((1.0)*sj5);
CheckValue<IkReal> x5925 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x5924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5925.valid){
continue;
}
CheckValue<IkReal> x5926=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x5924)))),-1);
if(!x5926.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5925.value)+(((1.5707963267949)*(x5926.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5927=IKsin(j4);
IkReal x5928=IKcos(j4);
IkReal x5929=(cj5*r00);
IkReal x5930=(cj5*r20);
IkReal x5931=(cj5*r10);
IkReal x5932=((1.0)*x5928);
IkReal x5933=(sj5*x5928);
IkReal x5934=((1.0)*x5927);
IkReal x5935=(sj5*x5934);
evalcond[0]=(((x5927*x5930))+(((-1.0)*r21*x5935))+(((-1.0)*r22*x5932)));
evalcond[1]=(((x5927*x5931))+(((-1.0)*r11*x5935))+(((-1.0)*r12*x5932)));
evalcond[2]=((((-1.0)*x5929*x5932))+(((-1.0)*r02*x5934))+((r01*x5933)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5935))+(((-1.0)*r02*x5932))+((x5927*x5929)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5931*x5932))+((r11*x5933))+(((-1.0)*r12*x5934)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x5933))+(((-1.0)*x5930*x5932))+(((-1.0)*r22*x5934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5936 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5936.valid){
continue;
}
CheckValue<IkReal> x5937=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5936.value)+(((1.5707963267949)*(x5937.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5938=IKsin(j4);
IkReal x5939=IKcos(j4);
IkReal x5940=(cj5*r00);
IkReal x5941=(cj5*r20);
IkReal x5942=(cj5*r10);
IkReal x5943=((1.0)*x5939);
IkReal x5944=(sj5*x5939);
IkReal x5945=((1.0)*x5938);
IkReal x5946=(sj5*x5945);
evalcond[0]=((((-1.0)*r22*x5943))+(((-1.0)*r21*x5946))+((x5938*x5941)));
evalcond[1]=((((-1.0)*r11*x5946))+(((-1.0)*r12*x5943))+((x5938*x5942)));
evalcond[2]=(((r01*x5944))+(((-1.0)*x5940*x5943))+(((-1.0)*r02*x5945)));
evalcond[3]=((1.0)+(((-1.0)*r01*x5946))+((x5938*x5940))+(((-1.0)*r02*x5943)));
evalcond[4]=((((-1.0)*x5942*x5943))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x5945))+((r11*x5944)));
evalcond[5]=((((-1.0)*r22*x5945))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5941*x5943))+((r21*x5944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5947=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5947);
rxp1_1=(px*r21);
rxp1_2=(r11*x5947);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5948=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5948);
rxp1_1=(px*r21);
rxp1_2=(r11*x5948);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5949=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x5949);
rxp1_1=(px*r21);
rxp1_2=(r11*x5949);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5952=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x5952.valid){
continue;
}
IkReal x5950=x5952.value;
IkReal x5951=(sj0*x5950);
cj4array[0]=(((cj2*sj1*x5951))+((cj1*sj2*x5951)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5953=IKsin(j4);
IkReal x5954=IKcos(j4);
IkReal x5955=(cj5*x5953);
IkReal x5956=((1.0)*x5954);
IkReal x5957=((1.0)*sj5*x5953);
evalcond[0]=((-1.0)*r02*x5953);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x5956)));
evalcond[2]=(((r20*x5955))+(((-1.0)*r21*x5957)));
evalcond[3]=(((r10*x5955))+(((-1.0)*r11*x5957)));
evalcond[4]=(((r21*sj5*x5954))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x5956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5959=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x5959.valid){
continue;
}
IkReal x5958=x5959.value;
cj4array[0]=((((-1.0)*sj1*sj2*x5958))+((cj1*cj2*x5958)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5960=IKsin(j4);
IkReal x5961=IKcos(j4);
IkReal x5962=((1.0)*sj0);
IkReal x5963=(cj5*r10);
IkReal x5964=((1.0)*x5961);
IkReal x5965=((1.0)*sj5*x5960);
evalcond[0]=((-1.0)*r02*x5960);
evalcond[1]=((((-1.0)*x5962))+(((-1.0)*r02*x5964)));
evalcond[2]=((((-1.0)*r21*x5965))+((cj5*r20*x5960)));
evalcond[3]=(((x5960*x5963))+(((-1.0)*r11*x5965)));
evalcond[4]=((((-1.0)*cj2*sj1*x5962))+(((-1.0)*cj1*sj2*x5962))+((r11*sj5*x5961))+(((-1.0)*x5963*x5964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x5966=IKPowWithIntegerCheck(r02,-1);
if(!x5966.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x5966.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x5967=IKsin(j4);
IkReal x5968=IKcos(j4);
IkReal x5969=((1.0)*sj0);
IkReal x5970=(sj5*x5968);
IkReal x5971=(cj5*x5967);
IkReal x5972=((1.0)*sj5*x5967);
IkReal x5973=((1.0)*cj5*x5968);
evalcond[0]=((-1.0)*r02*x5967);
evalcond[1]=((((-1.0)*r21*x5972))+((r20*x5971)));
evalcond[2]=((((-1.0)*r11*x5972))+((r10*x5971)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x5973))+((r21*x5970)));
evalcond[4]=((((-1.0)*cj2*sj1*x5969))+(((-1.0)*cj1*sj2*x5969))+((r11*x5970))+(((-1.0)*r10*x5973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5974=((1.0)*sj0);
IkReal x5975=((1.0)*cj0);
CheckValue<IkReal> x5976=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5976.valid){
continue;
}
CheckValue<IkReal> x5977 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5975))+(((-1.0)*r12*x5974)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x5974))+(((-1.0)*cj5*r00*x5975))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5976.value)))+(x5977.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5978=IKsin(j4);
IkReal x5979=IKcos(j4);
IkReal x5980=(cj5*r00);
IkReal x5981=((1.0)*cj2);
IkReal x5982=(cj5*r20);
IkReal x5983=((1.0)*sj0);
IkReal x5984=(cj5*r10);
IkReal x5985=(cj1*sj2);
IkReal x5986=((1.0)*x5979);
IkReal x5987=(sj5*x5979);
IkReal x5988=((1.0)*x5978);
IkReal x5989=(sj5*x5988);
evalcond[0]=(((x5978*x5982))+(((-1.0)*r22*x5986))+(((-1.0)*r21*x5989)));
evalcond[1]=((((-1.0)*r12*x5986))+cj0+(((-1.0)*r11*x5989))+((x5978*x5984)));
evalcond[2]=((((-1.0)*x5983))+((x5978*x5980))+(((-1.0)*r02*x5986))+(((-1.0)*r01*x5989)));
evalcond[3]=(((r21*x5987))+((sj1*sj2))+(((-1.0)*cj1*x5981))+(((-1.0)*x5982*x5986))+(((-1.0)*r22*x5988)));
evalcond[4]=((((-1.0)*x5980*x5986))+(((-1.0)*cj0*x5985))+(((-1.0)*r02*x5988))+(((-1.0)*cj0*sj1*x5981))+((r01*x5987)));
evalcond[5]=((((-1.0)*sj0*sj1*x5981))+(((-1.0)*r12*x5988))+(((-1.0)*x5984*x5986))+((r11*x5987))+(((-1.0)*x5983*x5985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5990 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5990.valid){
continue;
}
CheckValue<IkReal> x5991=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5990.value)+(((1.5707963267949)*(x5991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5992=IKsin(j4);
IkReal x5993=IKcos(j4);
IkReal x5994=(cj5*r00);
IkReal x5995=((1.0)*cj2);
IkReal x5996=(cj5*r20);
IkReal x5997=((1.0)*sj0);
IkReal x5998=(cj5*r10);
IkReal x5999=(cj1*sj2);
IkReal x6000=((1.0)*x5993);
IkReal x6001=(sj5*x5993);
IkReal x6002=((1.0)*x5992);
IkReal x6003=(sj5*x6002);
evalcond[0]=(((x5992*x5996))+(((-1.0)*r22*x6000))+(((-1.0)*r21*x6003)));
evalcond[1]=(cj0+((x5992*x5998))+(((-1.0)*r11*x6003))+(((-1.0)*r12*x6000)));
evalcond[2]=(((x5992*x5994))+(((-1.0)*r01*x6003))+(((-1.0)*r02*x6000))+(((-1.0)*x5997)));
evalcond[3]=(((r21*x6001))+(((-1.0)*x5996*x6000))+((sj1*sj2))+(((-1.0)*cj1*x5995))+(((-1.0)*r22*x6002)));
evalcond[4]=((((-1.0)*cj0*x5999))+((r01*x6001))+(((-1.0)*x5994*x6000))+(((-1.0)*r02*x6002))+(((-1.0)*cj0*sj1*x5995)));
evalcond[5]=((((-1.0)*x5998*x6000))+(((-1.0)*x5997*x5999))+((r11*x6001))+(((-1.0)*r12*x6002))+(((-1.0)*sj0*sj1*x5995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6004 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6004.valid){
continue;
}
CheckValue<IkReal> x6005=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6004.value)+(((1.5707963267949)*(x6005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6006=IKsin(j4);
IkReal x6007=IKcos(j4);
IkReal x6008=(cj5*r00);
IkReal x6009=((1.0)*cj2);
IkReal x6010=(cj5*r20);
IkReal x6011=((1.0)*sj0);
IkReal x6012=(cj5*r10);
IkReal x6013=(cj1*sj2);
IkReal x6014=((1.0)*x6007);
IkReal x6015=(sj5*x6007);
IkReal x6016=((1.0)*x6006);
IkReal x6017=(sj5*x6016);
evalcond[0]=((((-1.0)*r21*x6017))+((x6006*x6010))+(((-1.0)*r22*x6014)));
evalcond[1]=(cj0+((x6006*x6012))+(((-1.0)*r12*x6014))+(((-1.0)*r11*x6017)));
evalcond[2]=((((-1.0)*r02*x6014))+((x6006*x6008))+(((-1.0)*r01*x6017))+(((-1.0)*x6011)));
evalcond[3]=((((-1.0)*cj1*x6009))+((r21*x6015))+(((-1.0)*x6010*x6014))+((sj1*sj2))+(((-1.0)*r22*x6016)));
evalcond[4]=(((r01*x6015))+(((-1.0)*r02*x6016))+(((-1.0)*x6008*x6014))+(((-1.0)*cj0*sj1*x6009))+(((-1.0)*cj0*x6013)));
evalcond[5]=(((r11*x6015))+(((-1.0)*r12*x6016))+(((-1.0)*sj0*sj1*x6009))+(((-1.0)*x6011*x6013))+(((-1.0)*x6012*x6014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6018=cj5*cj5;
IkReal x6019=r21*r21;
IkReal x6020=(sj1*sj2);
IkReal x6021=(r21*sj5);
IkReal x6022=(cj1*cj2);
IkReal x6023=(cj5*r20);
CheckValue<IkReal> x6024=IKPowWithIntegerCheck(IKsign(((r22*r22)+x6019+((x6018*(r20*r20)))+(((-2.0)*x6021*x6023))+(((-1.0)*x6018*x6019)))),-1);
if(!x6024.valid){
continue;
}
CheckValue<IkReal> x6025 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6022))+((r22*x6020)))),IkReal((((x6020*x6023))+((x6021*x6022))+(((-1.0)*x6020*x6021))+(((-1.0)*x6022*x6023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6024.value)))+(x6025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6026=IKsin(j4);
IkReal x6027=IKcos(j4);
IkReal x6028=(cj5*r20);
IkReal x6029=(r21*sj5);
IkReal x6030=((1.0)*x6027);
IkReal x6031=((1.0)*x6026);
evalcond[0]=((((-1.0)*x6029*x6031))+((x6026*x6028))+(((-1.0)*r22*x6030)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x6027*x6029))+(((-1.0)*r22*x6031))+(((-1.0)*x6028*x6030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6032=(cj5*sj4);
IkReal x6033=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r01*x6033))+((r00*x6032)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x6033))+(((-1.0)*r10*x6032))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r01*x6033))+((r00*x6032))))+IKsqr((((r11*x6033))+(((-1.0)*r10*x6032))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r01*x6033))+((r00*x6032))), (((r11*x6033))+(((-1.0)*r10*x6032))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6034=IKcos(j0);
IkReal x6035=IKsin(j0);
IkReal x6036=(cj5*r00);
IkReal x6037=(cj5*r01);
IkReal x6038=((1.0)*sj2);
IkReal x6039=((1.0)*sj4);
IkReal x6040=(r01*sj5);
IkReal x6041=((1.0)*cj4);
IkReal x6042=((0.3922)*cj2);
IkReal x6043=(cj5*r11);
IkReal x6044=((1.0)*cj2);
IkReal x6045=(cj5*r10);
IkReal x6046=(r00*sj5);
IkReal x6047=(r10*sj5);
IkReal x6048=((0.3922)*sj2);
IkReal x6049=(r11*sj5);
IkReal x6050=(sj1*x6035);
IkReal x6051=(cj1*x6034);
IkReal x6052=(cj1*x6035);
IkReal x6053=(sj1*x6034);
evalcond[0]=(x6034+(((-1.0)*x6039*x6049))+((sj4*x6045))+(((-1.0)*r12*x6041)));
evalcond[1]=((((-1.0)*r02*x6041))+((sj4*x6036))+(((-1.0)*x6039*x6040))+(((-1.0)*x6035)));
evalcond[2]=(x6037+x6046+((cj2*x6051))+(((-1.0)*x6038*x6053)));
evalcond[3]=(x6043+x6047+((cj2*x6052))+(((-1.0)*x6038*x6050)));
evalcond[4]=(((cj4*x6040))+(((-1.0)*x6036*x6041))+(((-1.0)*x6044*x6053))+(((-1.0)*x6038*x6051))+(((-1.0)*r02*x6039)));
evalcond[5]=(((cj4*x6049))+(((-1.0)*r12*x6039))+(((-1.0)*x6044*x6050))+(((-1.0)*x6038*x6052))+(((-1.0)*x6041*x6045)));
evalcond[6]=(((x6042*x6051))+(((0.0946)*x6037))+(((0.0946)*x6046))+(((-1.0)*x6048*x6053))+(((-1.0)*px))+(((0.425)*x6051))+(((-0.1091)*x6035)));
evalcond[7]=(((x6042*x6052))+(((0.0946)*x6043))+(((0.0946)*x6047))+(((-1.0)*x6048*x6050))+(((0.1091)*x6034))+(((-1.0)*py))+(((0.425)*x6052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6054=((1.0)*cj5);
IkReal x6055=((1.0)*sj5);
CheckValue<IkReal> x6056 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6055))+(((-1.0)*r11*x6054)))),IkReal(((((-1.0)*r00*x6055))+(((-1.0)*r01*x6054)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6056.valid){
continue;
}
CheckValue<IkReal> x6057=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x6057.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6056.value)+(((1.5707963267949)*(x6057.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6058=IKcos(j0);
IkReal x6059=IKsin(j0);
IkReal x6060=(cj5*r01);
IkReal x6061=(cj1*cj2);
IkReal x6062=((0.425)*cj1);
IkReal x6063=(cj5*r11);
IkReal x6064=(r00*sj5);
IkReal x6065=(r10*sj5);
IkReal x6066=(sj1*sj2);
IkReal x6067=((1.0)*x6066);
IkReal x6068=((0.3922)*x6059);
IkReal x6069=((0.3922)*x6058);
evalcond[0]=(x6064+x6060+(((-1.0)*x6058*x6067))+((x6058*x6061)));
evalcond[1]=(x6065+x6063+(((-1.0)*x6059*x6067))+((x6059*x6061)));
evalcond[2]=(((x6061*x6069))+(((-0.1091)*x6059))+(((-1.0)*px))+(((-1.0)*x6066*x6069))+(((0.0946)*x6060))+(((0.0946)*x6064))+((x6058*x6062)));
evalcond[3]=(((x6061*x6068))+((x6059*x6062))+(((-1.0)*py))+(((0.1091)*x6058))+(((-1.0)*x6066*x6068))+(((0.0946)*x6063))+(((0.0946)*x6065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6070=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6070;
j4eval[1]=IKsign(x6070);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6071=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6071;
j4eval[1]=IKsign(x6071);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6072=((1.0)*sj0);
IkReal x6073=((1.0)*cj0);
IkReal x6074=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6074;
j4eval[1]=IKsign(x6074);
j4eval[2]=((IKabs(((((-1.0)*r02*x6073))+(((-1.0)*r12*x6072)))))+(IKabs((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x6073))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x6072))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6076 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6076)==0){
continue;
}
IkReal x6075=pow(x6076,-0.5);
CheckValue<IkReal> x6077 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6077.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6077.value));
IkReal gconst115=((-1.0)*r21*x6075);
IkReal gconst116=(r20*x6075);
CheckValue<IkReal> x6078 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6078.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6078.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6081 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6081.valid){
continue;
}
IkReal x6079=((-1.0)*(x6081.value));
IkReal x6080=x6075;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6079;
IkReal gconst114=x6079;
IkReal gconst115=((-1.0)*r21*x6080);
IkReal gconst116=(r20*x6080);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6084 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6084.valid){
continue;
}
IkReal x6082=((-1.0)*(x6084.value));
IkReal x6083=x6075;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6082;
IkReal gconst114=x6082;
IkReal gconst115=((-1.0)*r21*x6083);
IkReal gconst116=(r20*x6083);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x6087 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6087.valid){
continue;
}
IkReal x6085=((-1.0)*(x6087.value));
IkReal x6086=x6075;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst115;
cj5=gconst116;
j5=x6085;
IkReal gconst114=x6085;
IkReal gconst115=((-1.0)*r21*x6086);
IkReal gconst116=(r20*x6086);
IkReal x6088=r22*r22;
CheckValue<IkReal> x6091=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6088))),-1);
if(!x6091.valid){
continue;
}
IkReal x6089=x6091.value;
IkReal x6090=((((2.0)*x6089*(r20*r20)*(r21*r21)))+x6088+((x6089*(r21*r21*r21*r21)))+((x6089*(r20*r20*r20*r20))));
j4eval[0]=x6090;
j4eval[1]=IKsign(x6090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6092=(sj1*sj2);
IkReal x6093=(gconst115*r21);
IkReal x6094=(cj1*cj2);
IkReal x6095=(gconst116*r20);
CheckValue<IkReal> x6096=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x6093*x6095))+(x6095*x6095)+(x6093*x6093))),-1);
if(!x6096.valid){
continue;
}
CheckValue<IkReal> x6097 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x6094))+((r22*x6092)))),IkReal((((x6093*x6094))+((x6092*x6095))+(((-1.0)*x6094*x6095))+(((-1.0)*x6092*x6093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6096.value)))+(x6097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6098=IKsin(j4);
IkReal x6099=IKcos(j4);
IkReal x6100=((1.0)*cj2);
IkReal x6101=((1.0)*sj0);
IkReal x6102=(cj1*sj2);
IkReal x6103=((1.0)*x6099);
IkReal x6104=(gconst116*x6098);
IkReal x6105=(gconst115*x6099);
IkReal x6106=((1.0)*x6098);
evalcond[0]=((((-1.0)*r22*x6103))+((r20*x6104))+(((-1.0)*gconst115*r21*x6106)));
evalcond[1]=(cj0+((r10*x6104))+(((-1.0)*r12*x6103))+(((-1.0)*gconst115*r11*x6106)));
evalcond[2]=((((-1.0)*r02*x6103))+(((-1.0)*gconst115*r01*x6106))+(((-1.0)*x6101))+((r00*x6104)));
evalcond[3]=(((r21*x6105))+((sj1*sj2))+(((-1.0)*r22*x6106))+(((-1.0)*gconst116*r20*x6103))+(((-1.0)*cj1*x6100)));
evalcond[4]=((((-1.0)*r02*x6106))+(((-1.0)*gconst116*r00*x6103))+(((-1.0)*cj0*sj1*x6100))+(((-1.0)*cj0*x6102))+((r01*x6105)));
evalcond[5]=(((r11*x6105))+(((-1.0)*gconst116*r10*x6103))+(((-1.0)*x6101*x6102))+(((-1.0)*sj0*sj1*x6100))+(((-1.0)*r12*x6106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6107=IKPowWithIntegerCheck(IKsign((((gconst115*r10))+((gconst116*r11)))),-1);
if(!x6107.valid){
continue;
}
CheckValue<IkReal> x6108 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst115*r21*sj0))+((gconst116*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6107.value)))+(x6108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6109=IKsin(j4);
IkReal x6110=IKcos(j4);
IkReal x6111=((1.0)*cj2);
IkReal x6112=((1.0)*sj0);
IkReal x6113=(cj1*sj2);
IkReal x6114=((1.0)*x6110);
IkReal x6115=(gconst116*x6109);
IkReal x6116=(gconst115*x6110);
IkReal x6117=((1.0)*x6109);
evalcond[0]=((((-1.0)*r22*x6114))+((r20*x6115))+(((-1.0)*gconst115*r21*x6117)));
evalcond[1]=((((-1.0)*gconst115*r11*x6117))+cj0+(((-1.0)*r12*x6114))+((r10*x6115)));
evalcond[2]=((((-1.0)*x6112))+((r00*x6115))+(((-1.0)*gconst115*r01*x6117))+(((-1.0)*r02*x6114)));
evalcond[3]=((((-1.0)*r22*x6117))+(((-1.0)*gconst116*r20*x6114))+((sj1*sj2))+(((-1.0)*cj1*x6111))+((r21*x6116)));
evalcond[4]=((((-1.0)*cj0*sj1*x6111))+(((-1.0)*gconst116*r00*x6114))+(((-1.0)*r02*x6117))+((r01*x6116))+(((-1.0)*cj0*x6113)));
evalcond[5]=((((-1.0)*gconst116*r10*x6114))+(((-1.0)*r12*x6117))+(((-1.0)*x6112*x6113))+(((-1.0)*sj0*sj1*x6111))+((r11*x6116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6118 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst116*r20))+(((-1.0)*cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6118.valid){
continue;
}
CheckValue<IkReal> x6119=IKPowWithIntegerCheck(IKsign((((gconst115*r00))+((gconst116*r01)))),-1);
if(!x6119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6118.value)+(((1.5707963267949)*(x6119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6120=IKsin(j4);
IkReal x6121=IKcos(j4);
IkReal x6122=((1.0)*cj2);
IkReal x6123=((1.0)*sj0);
IkReal x6124=(cj1*sj2);
IkReal x6125=((1.0)*x6121);
IkReal x6126=(gconst116*x6120);
IkReal x6127=(gconst115*x6121);
IkReal x6128=((1.0)*x6120);
evalcond[0]=((((-1.0)*r22*x6125))+((r20*x6126))+(((-1.0)*gconst115*r21*x6128)));
evalcond[1]=(cj0+(((-1.0)*r12*x6125))+((r10*x6126))+(((-1.0)*gconst115*r11*x6128)));
evalcond[2]=((((-1.0)*r02*x6125))+(((-1.0)*x6123))+(((-1.0)*gconst115*r01*x6128))+((r00*x6126)));
evalcond[3]=(((r21*x6127))+(((-1.0)*r22*x6128))+((sj1*sj2))+(((-1.0)*gconst116*r20*x6125))+(((-1.0)*cj1*x6122)));
evalcond[4]=((((-1.0)*cj0*x6124))+((r01*x6127))+(((-1.0)*r02*x6128))+(((-1.0)*cj0*sj1*x6122))+(((-1.0)*gconst116*r00*x6125)));
evalcond[5]=((((-1.0)*sj0*sj1*x6122))+(((-1.0)*r12*x6128))+(((-1.0)*gconst116*r10*x6125))+(((-1.0)*x6123*x6124))+((r11*x6127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6130 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6130)==0){
continue;
}
IkReal x6129=pow(x6130,-0.5);
CheckValue<IkReal> x6131 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6131.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6131.value))));
IkReal gconst118=((1.0)*r21*x6129);
IkReal gconst119=((-1.0)*r20*x6129);
CheckValue<IkReal> x6132 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6132.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6132.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x6135 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6135.valid){
continue;
}
IkReal x6133=((1.0)*(x6135.value));
IkReal x6134=x6129;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6133)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6133)));
IkReal gconst118=((1.0)*r21*x6134);
IkReal gconst119=((-1.0)*r20*x6134);
IkReal x6136=r22*r22;
IkReal x6137=((1.0)*x6136);
CheckValue<IkReal> x6141=IKPowWithIntegerCheck(((-1.0)+x6136),-1);
if(!x6141.valid){
continue;
}
IkReal x6138=x6141.value;
if((((1.0)+(((-1.0)*x6137)))) < -0.00001)
continue;
IkReal x6139=IKsqrt(((1.0)+(((-1.0)*x6137))));
IkReal x6140=(cj0*x6138*x6139);
j4eval[0]=((IKabs((x6140+(((-1.0)*x6137*x6140)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6144 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6144.valid){
continue;
}
IkReal x6142=((1.0)*(x6144.value));
IkReal x6143=x6129;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6142)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6142)));
IkReal gconst118=((1.0)*r21*x6143);
IkReal gconst119=((-1.0)*r20*x6143);
IkReal x6145=r22*r22;
IkReal x6146=((1.0)*x6145);
CheckValue<IkReal> x6150=IKPowWithIntegerCheck(((-1.0)+x6145),-1);
if(!x6150.valid){
continue;
}
IkReal x6147=x6150.value;
if((((1.0)+(((-1.0)*x6146)))) < -0.00001)
continue;
IkReal x6148=IKsqrt(((1.0)+(((-1.0)*x6146))));
IkReal x6149=(sj0*x6147*x6148);
j4eval[0]=((IKabs((x6149+(((-1.0)*x6146*x6149)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6153 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x6153.valid){
continue;
}
IkReal x6151=((1.0)*(x6153.value));
IkReal x6152=x6129;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6151)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6151)));
IkReal gconst118=((1.0)*r21*x6152);
IkReal gconst119=((-1.0)*r20*x6152);
IkReal x6154=r22*r22;
IkReal x6155=(r12*sj0);
IkReal x6156=(cj0*r02);
CheckValue<IkReal> x6160=IKPowWithIntegerCheck(((-1.0)+x6154),-1);
if(!x6160.valid){
continue;
}
IkReal x6157=x6160.value;
if((((1.0)+(((-1.0)*x6154)))) < -0.00001)
continue;
IkReal x6158=IKsqrt(((1.0)+(((-1.0)*x6154))));
IkReal x6159=(r22*x6157*x6158);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x6156))+(((-1.0)*x6155)))))+(IKabs((((x6155*x6159))+((x6156*x6159))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6161=((1.0)*sj0);
IkReal x6162=((1.0)*cj0);
CheckValue<IkReal> x6163=IKPowWithIntegerCheck(IKsign((((gconst119*r21))+((gconst118*r20)))),-1);
if(!x6163.valid){
continue;
}
CheckValue<IkReal> x6164 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6161))+(((-1.0)*r02*x6162)))),IkReal((((gconst118*r11*sj0))+(((-1.0)*gconst119*r00*x6162))+((cj0*gconst118*r01))+(((-1.0)*gconst119*r10*x6161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6163.value)))+(x6164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6165=IKsin(j4);
IkReal x6166=IKcos(j4);
IkReal x6167=(gconst118*r01);
IkReal x6168=((1.0)*cj2);
IkReal x6169=(gconst119*r10);
IkReal x6170=(gconst119*r20);
IkReal x6171=(gconst118*r21);
IkReal x6172=(gconst119*r00);
IkReal x6173=(gconst118*r11);
IkReal x6174=((1.0)*sj0);
IkReal x6175=(cj1*sj2);
IkReal x6176=((1.0)*x6166);
IkReal x6177=((1.0)*x6165);
evalcond[0]=(((x6165*x6170))+(((-1.0)*x6171*x6177))+(((-1.0)*r22*x6176)));
evalcond[1]=(cj0+(((-1.0)*r12*x6176))+((x6165*x6169))+(((-1.0)*x6173*x6177)));
evalcond[2]=((((-1.0)*x6167*x6177))+(((-1.0)*x6174))+((x6165*x6172))+(((-1.0)*r02*x6176)));
evalcond[3]=(((x6166*x6171))+((sj1*sj2))+(((-1.0)*x6170*x6176))+(((-1.0)*cj1*x6168))+(((-1.0)*r22*x6177)));
evalcond[4]=(((x6166*x6167))+(((-1.0)*cj0*sj1*x6168))+(((-1.0)*cj0*x6175))+(((-1.0)*x6172*x6176))+(((-1.0)*r02*x6177)));
evalcond[5]=(((x6166*x6173))+(((-1.0)*sj0*sj1*x6168))+(((-1.0)*r12*x6177))+(((-1.0)*x6174*x6175))+(((-1.0)*x6169*x6176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6178=IKPowWithIntegerCheck(IKsign((((gconst118*r10))+((gconst119*r11)))),-1);
if(!x6178.valid){
continue;
}
CheckValue<IkReal> x6179 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst118*r21*sj0))+((gconst119*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6178.value)))+(x6179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6180=IKsin(j4);
IkReal x6181=IKcos(j4);
IkReal x6182=(gconst118*r01);
IkReal x6183=((1.0)*cj2);
IkReal x6184=(gconst119*r10);
IkReal x6185=(gconst119*r20);
IkReal x6186=(gconst118*r21);
IkReal x6187=(gconst119*r00);
IkReal x6188=(gconst118*r11);
IkReal x6189=((1.0)*sj0);
IkReal x6190=(cj1*sj2);
IkReal x6191=((1.0)*x6181);
IkReal x6192=((1.0)*x6180);
evalcond[0]=((((-1.0)*x6186*x6192))+(((-1.0)*r22*x6191))+((x6180*x6185)));
evalcond[1]=(cj0+(((-1.0)*r12*x6191))+((x6180*x6184))+(((-1.0)*x6188*x6192)));
evalcond[2]=((((-1.0)*x6182*x6192))+((x6180*x6187))+(((-1.0)*x6189))+(((-1.0)*r02*x6191)));
evalcond[3]=((((-1.0)*cj1*x6183))+((sj1*sj2))+(((-1.0)*r22*x6192))+((x6181*x6186))+(((-1.0)*x6185*x6191)));
evalcond[4]=((((-1.0)*cj0*sj1*x6183))+(((-1.0)*cj0*x6190))+((x6181*x6182))+(((-1.0)*r02*x6192))+(((-1.0)*x6187*x6191)));
evalcond[5]=((((-1.0)*r12*x6192))+(((-1.0)*x6189*x6190))+(((-1.0)*sj0*sj1*x6183))+((x6181*x6188))+(((-1.0)*x6184*x6191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6193=IKPowWithIntegerCheck(IKsign((((gconst118*r00))+((gconst119*r01)))),-1);
if(!x6193.valid){
continue;
}
CheckValue<IkReal> x6194 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst118*r21))+((cj0*gconst119*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6193.value)))+(x6194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6195=IKsin(j4);
IkReal x6196=IKcos(j4);
IkReal x6197=(gconst118*r01);
IkReal x6198=((1.0)*cj2);
IkReal x6199=(gconst119*r10);
IkReal x6200=(gconst119*r20);
IkReal x6201=(gconst118*r21);
IkReal x6202=(gconst119*r00);
IkReal x6203=(gconst118*r11);
IkReal x6204=((1.0)*sj0);
IkReal x6205=(cj1*sj2);
IkReal x6206=((1.0)*x6196);
IkReal x6207=((1.0)*x6195);
evalcond[0]=((((-1.0)*r22*x6206))+((x6195*x6200))+(((-1.0)*x6201*x6207)));
evalcond[1]=(((x6195*x6199))+cj0+(((-1.0)*r12*x6206))+(((-1.0)*x6203*x6207)));
evalcond[2]=((((-1.0)*x6197*x6207))+(((-1.0)*r02*x6206))+(((-1.0)*x6204))+((x6195*x6202)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x6207))+((x6196*x6201))+(((-1.0)*cj1*x6198))+(((-1.0)*x6200*x6206)));
evalcond[4]=((((-1.0)*x6202*x6206))+(((-1.0)*cj0*x6205))+(((-1.0)*cj0*sj1*x6198))+(((-1.0)*r02*x6207))+((x6196*x6197)));
evalcond[5]=((((-1.0)*sj0*sj1*x6198))+(((-1.0)*x6199*x6206))+((x6196*x6203))+(((-1.0)*x6204*x6205))+(((-1.0)*r12*x6207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6209 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6209)==0){
continue;
}
IkReal x6208=pow(x6209,-0.5);
CheckValue<IkReal> x6210 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6210.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6210.value));
IkReal gconst121=((-1.0)*r11*x6208);
IkReal gconst122=(r10*x6208);
CheckValue<IkReal> x6211 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6211.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6211.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6214 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6214.valid){
continue;
}
IkReal x6212=((-1.0)*(x6214.value));
IkReal x6213=x6208;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst121;
cj5=gconst122;
j5=x6212;
IkReal gconst120=x6212;
IkReal gconst121=((-1.0)*r11*x6213);
IkReal gconst122=(r10*x6213);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6215=((1.0)*sj0);
IkReal x6216=((1.0)*cj0);
CheckValue<IkReal> x6217 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6215))+(((-1.0)*r02*x6216)))),IkReal(((((-1.0)*gconst122*r00*x6216))+((cj0*gconst121*r01))+(((-1.0)*gconst122*r10*x6215))+((gconst121*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6217.valid){
continue;
}
CheckValue<IkReal> x6218=IKPowWithIntegerCheck(IKsign((((gconst122*r21))+((gconst121*r20)))),-1);
if(!x6218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6217.value)+(((1.5707963267949)*(x6218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6219=IKsin(j4);
IkReal x6220=IKcos(j4);
IkReal x6221=((1.0)*r22);
IkReal x6222=(gconst121*r11);
IkReal x6223=(gconst122*r00);
IkReal x6224=((1.0)*cj2);
IkReal x6225=(gconst122*r10);
IkReal x6226=((1.0)*sj0);
IkReal x6227=(gconst122*r20);
IkReal x6228=(cj1*sj2);
IkReal x6229=((1.0)*x6220);
IkReal x6230=((1.0)*x6219);
IkReal x6231=(gconst121*x6220);
IkReal x6232=(gconst121*x6230);
evalcond[0]=(((x6219*x6227))+(((-1.0)*r21*x6232))+(((-1.0)*x6220*x6221)));
evalcond[1]=((((-1.0)*x6222*x6230))+cj0+(((-1.0)*r12*x6229))+((x6219*x6225)));
evalcond[2]=((((-1.0)*x6226))+((x6219*x6223))+(((-1.0)*r02*x6229))+(((-1.0)*r01*x6232)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x6219*x6221))+((r21*x6231))+(((-1.0)*cj1*x6224))+(((-1.0)*x6227*x6229)));
evalcond[4]=((((-1.0)*cj0*x6228))+(((-1.0)*cj0*sj1*x6224))+((r01*x6231))+(((-1.0)*r02*x6230))+(((-1.0)*x6223*x6229)));
evalcond[5]=((((-1.0)*r12*x6230))+(((-1.0)*x6226*x6228))+(((-1.0)*sj0*sj1*x6224))+((x6220*x6222))+(((-1.0)*x6225*x6229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6233 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst121*r21))+((cj0*gconst122*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6233.valid){
continue;
}
CheckValue<IkReal> x6234=IKPowWithIntegerCheck(IKsign((((gconst122*r01))+((gconst121*r00)))),-1);
if(!x6234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6233.value)+(((1.5707963267949)*(x6234.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6235=IKsin(j4);
IkReal x6236=IKcos(j4);
IkReal x6237=((1.0)*r22);
IkReal x6238=(gconst121*r11);
IkReal x6239=(gconst122*r00);
IkReal x6240=((1.0)*cj2);
IkReal x6241=(gconst122*r10);
IkReal x6242=((1.0)*sj0);
IkReal x6243=(gconst122*r20);
IkReal x6244=(cj1*sj2);
IkReal x6245=((1.0)*x6236);
IkReal x6246=((1.0)*x6235);
IkReal x6247=(gconst121*x6236);
IkReal x6248=(gconst121*x6246);
evalcond[0]=(((x6235*x6243))+(((-1.0)*x6236*x6237))+(((-1.0)*r21*x6248)));
evalcond[1]=((((-1.0)*x6238*x6246))+cj0+((x6235*x6241))+(((-1.0)*r12*x6245)));
evalcond[2]=((((-1.0)*r02*x6245))+(((-1.0)*x6242))+(((-1.0)*r01*x6248))+((x6235*x6239)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x6235*x6237))+((r21*x6247))+(((-1.0)*cj1*x6240))+(((-1.0)*x6243*x6245)));
evalcond[4]=((((-1.0)*r02*x6246))+(((-1.0)*x6239*x6245))+(((-1.0)*cj0*sj1*x6240))+(((-1.0)*cj0*x6244))+((r01*x6247)));
evalcond[5]=((((-1.0)*x6242*x6244))+((x6236*x6238))+(((-1.0)*r12*x6246))+(((-1.0)*x6241*x6245))+(((-1.0)*sj0*sj1*x6240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6250 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6250)==0){
continue;
}
IkReal x6249=pow(x6250,-0.5);
CheckValue<IkReal> x6251 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6251.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6251.value))));
IkReal gconst124=((1.0)*r11*x6249);
IkReal gconst125=((-1.0)*r10*x6249);
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6252.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6255 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6255.valid){
continue;
}
IkReal x6253=((1.0)*(x6255.value));
IkReal x6254=x6249;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6253)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6253)));
IkReal gconst124=((1.0)*r11*x6254);
IkReal gconst125=((-1.0)*r10*x6254);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6258 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6258.valid){
continue;
}
IkReal x6256=((1.0)*(x6258.value));
IkReal x6257=x6249;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6256)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6256)));
IkReal gconst124=((1.0)*r11*x6257);
IkReal gconst125=((-1.0)*r10*x6257);
IkReal x6259=r12*r12;
IkReal x6260=((1.0)*sj0);
IkReal x6261=(cj0*r02);
IkReal x6262=x6249;
j4eval[0]=((IKabs(((((-1.0)*x6261))+(((-1.0)*r12*x6260)))))+(IKabs((((r12*x6261*x6262))+((sj0*x6259*x6262))+(((-1.0)*x6260*x6262))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6265 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x6265.valid){
continue;
}
IkReal x6263=((1.0)*(x6265.value));
IkReal x6264=x6249;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6263)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6263)));
IkReal gconst124=((1.0)*r11*x6264);
IkReal gconst125=((-1.0)*r10*x6264);
IkReal x6266=r12*r12;
IkReal x6267=(cj1*cj2*r22);
IkReal x6268=(r22*sj1*sj2);
CheckValue<IkReal> x6272=IKPowWithIntegerCheck(((-1.0)+x6266),-1);
if(!x6272.valid){
continue;
}
IkReal x6269=x6272.value;
if((((1.0)+(((-1.0)*x6266)))) < -0.00001)
continue;
IkReal x6270=IKsqrt(((1.0)+(((-1.0)*x6266))));
IkReal x6271=(r12*x6269*x6270);
j4eval[0]=((IKabs((x6268+(((-1.0)*x6267)))))+(IKabs(((((-1.0)*x6268*x6271))+((x6267*x6271))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6273=(gconst125*r20);
IkReal x6274=(sj1*sj2);
IkReal x6275=(cj1*cj2);
IkReal x6276=(gconst124*r21);
CheckValue<IkReal> x6277=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6273*x6276))+(r22*r22)+(x6276*x6276)+(x6273*x6273))),-1);
if(!x6277.valid){
continue;
}
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal((((r22*x6274))+(((-1.0)*r22*x6275)))),IkReal((((x6273*x6274))+(((-1.0)*x6273*x6275))+(((-1.0)*x6274*x6276))+((x6275*x6276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6277.value)))+(x6278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6279=IKsin(j4);
IkReal x6280=IKcos(j4);
IkReal x6281=((1.0)*cj2);
IkReal x6282=((1.0)*sj0);
IkReal x6283=(cj1*sj2);
IkReal x6284=((1.0)*x6280);
IkReal x6285=(gconst125*x6279);
IkReal x6286=(gconst124*x6280);
IkReal x6287=((1.0)*x6279);
evalcond[0]=((((-1.0)*r22*x6284))+((r20*x6285))+(((-1.0)*gconst124*r21*x6287)));
evalcond[1]=(cj0+(((-1.0)*gconst124*r11*x6287))+(((-1.0)*r12*x6284))+((r10*x6285)));
evalcond[2]=((((-1.0)*r02*x6284))+(((-1.0)*gconst124*r01*x6287))+(((-1.0)*x6282))+((r00*x6285)));
evalcond[3]=((((-1.0)*gconst125*r20*x6284))+((sj1*sj2))+(((-1.0)*r22*x6287))+((r21*x6286))+(((-1.0)*cj1*x6281)));
evalcond[4]=((((-1.0)*cj0*sj1*x6281))+(((-1.0)*r02*x6287))+(((-1.0)*gconst125*r00*x6284))+(((-1.0)*cj0*x6283))+((r01*x6286)));
evalcond[5]=((((-1.0)*x6282*x6283))+(((-1.0)*sj0*sj1*x6281))+(((-1.0)*gconst125*r10*x6284))+((r11*x6286))+(((-1.0)*r12*x6287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6288=((1.0)*sj0);
IkReal x6289=((1.0)*cj0);
CheckValue<IkReal> x6290 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6289))+(((-1.0)*r12*x6288)))),IkReal(((((-1.0)*gconst125*r00*x6289))+((cj0*gconst124*r01))+(((-1.0)*gconst125*r10*x6288))+((gconst124*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6290.valid){
continue;
}
CheckValue<IkReal> x6291=IKPowWithIntegerCheck(IKsign((((gconst124*r20))+((gconst125*r21)))),-1);
if(!x6291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6290.value)+(((1.5707963267949)*(x6291.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6292=IKsin(j4);
IkReal x6293=IKcos(j4);
IkReal x6294=((1.0)*cj2);
IkReal x6295=((1.0)*sj0);
IkReal x6296=(cj1*sj2);
IkReal x6297=((1.0)*x6293);
IkReal x6298=(gconst125*x6292);
IkReal x6299=(gconst124*x6293);
IkReal x6300=((1.0)*x6292);
evalcond[0]=((((-1.0)*r22*x6297))+((r20*x6298))+(((-1.0)*gconst124*r21*x6300)));
evalcond[1]=(cj0+(((-1.0)*gconst124*r11*x6300))+(((-1.0)*r12*x6297))+((r10*x6298)));
evalcond[2]=(((r00*x6298))+(((-1.0)*r02*x6297))+(((-1.0)*x6295))+(((-1.0)*gconst124*r01*x6300)));
evalcond[3]=((((-1.0)*cj1*x6294))+((sj1*sj2))+(((-1.0)*r22*x6300))+(((-1.0)*gconst125*r20*x6297))+((r21*x6299)));
evalcond[4]=((((-1.0)*cj0*x6296))+((r01*x6299))+(((-1.0)*r02*x6300))+(((-1.0)*gconst125*r00*x6297))+(((-1.0)*cj0*sj1*x6294)));
evalcond[5]=((((-1.0)*sj0*sj1*x6294))+(((-1.0)*r12*x6300))+((r11*x6299))+(((-1.0)*gconst125*r10*x6297))+(((-1.0)*x6295*x6296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6301=IKPowWithIntegerCheck(IKsign((((gconst124*r00))+((gconst125*r01)))),-1);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst124*r21))+((cj0*gconst125*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6301.value)))+(x6302.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j4);
IkReal x6304=IKcos(j4);
IkReal x6305=((1.0)*cj2);
IkReal x6306=((1.0)*sj0);
IkReal x6307=(cj1*sj2);
IkReal x6308=((1.0)*x6304);
IkReal x6309=(gconst125*x6303);
IkReal x6310=(gconst124*x6304);
IkReal x6311=((1.0)*x6303);
evalcond[0]=((((-1.0)*gconst124*r21*x6311))+(((-1.0)*r22*x6308))+((r20*x6309)));
evalcond[1]=(cj0+(((-1.0)*r12*x6308))+(((-1.0)*gconst124*r11*x6311))+((r10*x6309)));
evalcond[2]=((((-1.0)*r02*x6308))+(((-1.0)*x6306))+((r00*x6309))+(((-1.0)*gconst124*r01*x6311)));
evalcond[3]=((((-1.0)*r22*x6311))+(((-1.0)*gconst125*r20*x6308))+((sj1*sj2))+(((-1.0)*cj1*x6305))+((r21*x6310)));
evalcond[4]=((((-1.0)*cj0*sj1*x6305))+(((-1.0)*gconst125*r00*x6308))+(((-1.0)*r02*x6311))+((r01*x6310))+(((-1.0)*cj0*x6307)));
evalcond[5]=((((-1.0)*r12*x6311))+(((-1.0)*gconst125*r10*x6308))+((r11*x6310))+(((-1.0)*sj0*sj1*x6305))+(((-1.0)*x6306*x6307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6312=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6312;
j4eval[1]=IKsign(x6312);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6313=((1.0)*sj5);
IkReal x6314=((((-1.0)*cj5*r21))+(((-1.0)*r20*x6313)));
j4eval[0]=x6314;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x6313))+((cj5*r00))))));
j4eval[2]=IKsign(x6314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6315=cj5*cj5;
IkReal x6316=r11*r11;
IkReal x6317=(r11*sj5);
IkReal x6318=(cj5*r10);
IkReal x6319=((r12*r12)+((x6315*(r10*r10)))+x6316+(((-2.0)*x6317*x6318))+(((-1.0)*x6315*x6316)));
j4eval[0]=x6319;
j4eval[1]=IKsign(x6319);
j4eval[2]=((IKabs(r12))+(IKabs((x6317+(((-1.0)*x6318))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6320=cj5*cj5;
IkReal x6321=r11*r11;
IkReal x6322=(cj5*r10);
IkReal x6323=(r11*sj5);
CheckValue<IkReal> x6324=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6321+(((-1.0)*x6320*x6321))+(((-2.0)*x6322*x6323))+((x6320*(r10*r10))))),-1);
if(!x6324.valid){
continue;
}
CheckValue<IkReal> x6325 = IKatan2WithCheck(IkReal(((((-1.0)*x6322))+x6323)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6324.value)))+(x6325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6326=IKsin(j4);
IkReal x6327=IKcos(j4);
IkReal x6328=(cj5*r00);
IkReal x6329=((1.0)*cj1);
IkReal x6330=((1.0)*x6327);
IkReal x6331=(sj5*x6327);
IkReal x6332=(cj5*x6326);
IkReal x6333=((1.0)*x6326);
IkReal x6334=(sj5*x6333);
evalcond[0]=((((-1.0)*r21*x6334))+((r20*x6332))+(((-1.0)*r22*x6330)));
evalcond[1]=(((x6326*x6328))+(((-1.0)*r02*x6330))+(((-1.0)*r01*x6334)));
evalcond[2]=((((-1.0)*r12*x6333))+((r11*x6331))+(((-1.0)*cj5*r10*x6330)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6334))+(((-1.0)*r12*x6330))+((r10*x6332)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x6329))+((r21*x6331))+(((-1.0)*r22*x6333))+(((-1.0)*cj5*r20*x6330)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x6331))+(((-1.0)*r02*x6333))+(((-1.0)*sj2*x6329))+(((-1.0)*x6328*x6330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6335=((1.0)*sj5);
CheckValue<IkReal> x6336=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6335))+(((-1.0)*cj5*r21)))),-1);
if(!x6336.valid){
continue;
}
CheckValue<IkReal> x6337 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x6335))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6336.value)))+(x6337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6338=IKsin(j4);
IkReal x6339=IKcos(j4);
IkReal x6340=(cj5*r00);
IkReal x6341=((1.0)*cj1);
IkReal x6342=((1.0)*x6339);
IkReal x6343=(sj5*x6339);
IkReal x6344=(cj5*x6338);
IkReal x6345=((1.0)*x6338);
IkReal x6346=(sj5*x6345);
evalcond[0]=((((-1.0)*r22*x6342))+(((-1.0)*r21*x6346))+((r20*x6344)));
evalcond[1]=(((x6338*x6340))+(((-1.0)*r02*x6342))+(((-1.0)*r01*x6346)));
evalcond[2]=(((r11*x6343))+(((-1.0)*r12*x6345))+(((-1.0)*cj5*r10*x6342)));
evalcond[3]=((1.0)+(((-1.0)*r11*x6346))+((r10*x6344))+(((-1.0)*r12*x6342)));
evalcond[4]=((((-1.0)*cj2*x6341))+(((-1.0)*r22*x6345))+((sj1*sj2))+((r21*x6343))+(((-1.0)*cj5*r20*x6342)));
evalcond[5]=((((-1.0)*x6340*x6342))+(((-1.0)*sj2*x6341))+(((-1.0)*cj2*sj1))+((r01*x6343))+(((-1.0)*r02*x6345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6347=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6347.valid){
continue;
}
CheckValue<IkReal> x6348 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6347.value)))+(x6348.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6349=IKsin(j4);
IkReal x6350=IKcos(j4);
IkReal x6351=(cj5*r00);
IkReal x6352=((1.0)*cj1);
IkReal x6353=((1.0)*x6350);
IkReal x6354=(sj5*x6350);
IkReal x6355=(cj5*x6349);
IkReal x6356=((1.0)*x6349);
IkReal x6357=(sj5*x6356);
evalcond[0]=((((-1.0)*r21*x6357))+((r20*x6355))+(((-1.0)*r22*x6353)));
evalcond[1]=((((-1.0)*r01*x6357))+((x6349*x6351))+(((-1.0)*r02*x6353)));
evalcond[2]=(((r11*x6354))+(((-1.0)*r12*x6356))+(((-1.0)*cj5*r10*x6353)));
evalcond[3]=((1.0)+((r10*x6355))+(((-1.0)*r12*x6353))+(((-1.0)*r11*x6357)));
evalcond[4]=(((r21*x6354))+(((-1.0)*cj5*r20*x6353))+((sj1*sj2))+(((-1.0)*cj2*x6352))+(((-1.0)*r22*x6356)));
evalcond[5]=((((-1.0)*x6351*x6353))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x6352))+(((-1.0)*r02*x6356))+((r01*x6354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6358=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6358;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x6358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6359=((1.0)*sj5);
IkReal x6360=((((-1.0)*r00*x6359))+(((-1.0)*cj5*r01)));
j4eval[0]=x6360;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6359)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6361=cj5*cj5;
IkReal x6362=r11*r11;
IkReal x6363=(cj5*r10);
IkReal x6364=(r11*sj5);
IkReal x6365=((((2.0)*x6363*x6364))+((x6361*x6362))+(((-1.0)*x6361*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x6362)));
j4eval[0]=x6365;
j4eval[1]=((IKabs((x6364+(((-1.0)*x6363)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6366=cj5*cj5;
IkReal x6367=r11*r11;
IkReal x6368=(cj5*r10);
IkReal x6369=(r11*sj5);
CheckValue<IkReal> x6370 = IKatan2WithCheck(IkReal((x6369+(((-1.0)*x6368)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x6370.valid){
continue;
}
CheckValue<IkReal> x6371=IKPowWithIntegerCheck(IKsign((((x6366*x6367))+(((-1.0)*(r12*r12)))+(((-1.0)*x6367))+(((2.0)*x6368*x6369))+(((-1.0)*x6366*(r10*r10))))),-1);
if(!x6371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6370.value)+(((1.5707963267949)*(x6371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6372=IKsin(j4);
IkReal x6373=IKcos(j4);
IkReal x6374=(cj5*r00);
IkReal x6375=((1.0)*x6373);
IkReal x6376=(sj5*x6373);
IkReal x6377=(cj5*x6372);
IkReal x6378=((1.0)*x6372);
IkReal x6379=(sj5*x6378);
evalcond[0]=(((r20*x6377))+(((-1.0)*r22*x6375))+(((-1.0)*r21*x6379)));
evalcond[1]=((((-1.0)*r01*x6379))+(((-1.0)*r02*x6375))+((x6372*x6374)));
evalcond[2]=(((r11*x6376))+(((-1.0)*r12*x6378))+(((-1.0)*cj5*r10*x6375)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6375))+(((-1.0)*r11*x6379))+((r10*x6377)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x6378))+((r01*x6376))+(((-1.0)*x6374*x6375)));
evalcond[5]=(((r21*x6376))+(((-1.0)*cj5*r20*x6375))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6380=((1.0)*sj5);
CheckValue<IkReal> x6381=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6380))+(((-1.0)*cj5*r01)))),-1);
if(!x6381.valid){
continue;
}
CheckValue<IkReal> x6382 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6380)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6381.value)))+(x6382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6383=IKsin(j4);
IkReal x6384=IKcos(j4);
IkReal x6385=(cj5*r00);
IkReal x6386=((1.0)*x6384);
IkReal x6387=(sj5*x6384);
IkReal x6388=(cj5*x6383);
IkReal x6389=((1.0)*x6383);
IkReal x6390=(sj5*x6389);
evalcond[0]=((((-1.0)*r21*x6390))+(((-1.0)*r22*x6386))+((r20*x6388)));
evalcond[1]=(((x6383*x6385))+(((-1.0)*r02*x6386))+(((-1.0)*r01*x6390)));
evalcond[2]=((((-1.0)*r12*x6389))+(((-1.0)*cj5*r10*x6386))+((r11*x6387)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6386))+((r10*x6388))+(((-1.0)*r11*x6390)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6385*x6386))+((r01*x6387))+(((-1.0)*r02*x6389)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*cj5*r20*x6386))+(((-1.0)*r22*x6389))+((r21*x6387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6391=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6391.valid){
continue;
}
CheckValue<IkReal> x6392 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6391.value)))+(x6392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6393=IKsin(j4);
IkReal x6394=IKcos(j4);
IkReal x6395=(cj5*r00);
IkReal x6396=((1.0)*x6394);
IkReal x6397=(sj5*x6394);
IkReal x6398=(cj5*x6393);
IkReal x6399=((1.0)*x6393);
IkReal x6400=(sj5*x6399);
evalcond[0]=((((-1.0)*r21*x6400))+((r20*x6398))+(((-1.0)*r22*x6396)));
evalcond[1]=(((x6393*x6395))+(((-1.0)*r02*x6396))+(((-1.0)*r01*x6400)));
evalcond[2]=(((r11*x6397))+(((-1.0)*cj5*r10*x6396))+(((-1.0)*r12*x6399)));
evalcond[3]=((-1.0)+((r10*x6398))+(((-1.0)*r11*x6400))+(((-1.0)*r12*x6396)));
evalcond[4]=((((-1.0)*x6395*x6396))+((cj2*sj1))+((cj1*sj2))+((r01*x6397))+(((-1.0)*r02*x6399)));
evalcond[5]=((((-1.0)*cj5*r20*x6396))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6399))+((r21*x6397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6402 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6402)==0){
continue;
}
IkReal x6401=pow(x6402,-0.5);
CheckValue<IkReal> x6403 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6403.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6403.value));
IkReal gconst127=((-1.0)*r01*x6401);
IkReal gconst128=(r00*x6401);
CheckValue<IkReal> x6404 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6404.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6404.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x6407 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6407.valid){
continue;
}
IkReal x6405=((-1.0)*(x6407.value));
IkReal x6406=x6401;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst127;
cj5=gconst128;
j5=x6405;
IkReal gconst126=x6405;
IkReal gconst127=((-1.0)*r01*x6406);
IkReal gconst128=(r00*x6406);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6408=((1.0)*sj0);
IkReal x6409=((1.0)*cj0);
CheckValue<IkReal> x6410 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6409))+(((-1.0)*r12*x6408)))),IkReal(((((-1.0)*gconst128*r10*x6408))+(((-1.0)*gconst128*r00*x6409))+((cj0*gconst127*r01))+((gconst127*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6410.valid){
continue;
}
CheckValue<IkReal> x6411=IKPowWithIntegerCheck(IKsign((((gconst127*r20))+((gconst128*r21)))),-1);
if(!x6411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6410.value)+(((1.5707963267949)*(x6411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6412=IKsin(j4);
IkReal x6413=IKcos(j4);
IkReal x6414=(gconst128*r10);
IkReal x6415=((1.0)*cj2);
IkReal x6416=((1.0)*sj0);
IkReal x6417=(cj1*sj2);
IkReal x6418=((1.0)*x6413);
IkReal x6419=(gconst127*x6413);
IkReal x6420=((1.0)*x6412);
IkReal x6421=(gconst128*x6412);
evalcond[0]=((((-1.0)*gconst127*r21*x6420))+((r20*x6421))+(((-1.0)*r22*x6418)));
evalcond[1]=(cj0+(((-1.0)*gconst127*r11*x6420))+(((-1.0)*r12*x6418))+((x6412*x6414)));
evalcond[2]=((((-1.0)*gconst127*r01*x6420))+(((-1.0)*r02*x6418))+(((-1.0)*x6416))+((r00*x6421)));
evalcond[3]=(((r21*x6419))+(((-1.0)*r22*x6420))+(((-1.0)*cj1*x6415))+(((-1.0)*gconst128*r20*x6418))+((sj1*sj2)));
evalcond[4]=(((r01*x6419))+(((-1.0)*gconst128*r00*x6418))+(((-1.0)*cj0*x6417))+(((-1.0)*cj0*sj1*x6415))+(((-1.0)*r02*x6420)));
evalcond[5]=((((-1.0)*sj0*sj1*x6415))+(((-1.0)*x6414*x6418))+(((-1.0)*x6416*x6417))+((r11*x6419))+(((-1.0)*r12*x6420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6422=IKPowWithIntegerCheck(IKsign((((gconst128*r11))+((gconst127*r10)))),-1);
if(!x6422.valid){
continue;
}
CheckValue<IkReal> x6423 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst128*r20*sj0))+(((-1.0)*gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6422.value)))+(x6423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6424=IKsin(j4);
IkReal x6425=IKcos(j4);
IkReal x6426=(gconst128*r10);
IkReal x6427=((1.0)*cj2);
IkReal x6428=((1.0)*sj0);
IkReal x6429=(cj1*sj2);
IkReal x6430=((1.0)*x6425);
IkReal x6431=(gconst127*x6425);
IkReal x6432=((1.0)*x6424);
IkReal x6433=(gconst128*x6424);
evalcond[0]=((((-1.0)*r22*x6430))+(((-1.0)*gconst127*r21*x6432))+((r20*x6433)));
evalcond[1]=(cj0+(((-1.0)*r12*x6430))+((x6424*x6426))+(((-1.0)*gconst127*r11*x6432)));
evalcond[2]=((((-1.0)*r02*x6430))+(((-1.0)*x6428))+(((-1.0)*gconst127*r01*x6432))+((r00*x6433)));
evalcond[3]=((((-1.0)*gconst128*r20*x6430))+(((-1.0)*r22*x6432))+((sj1*sj2))+(((-1.0)*cj1*x6427))+((r21*x6431)));
evalcond[4]=(((r01*x6431))+(((-1.0)*r02*x6432))+(((-1.0)*cj0*x6429))+(((-1.0)*gconst128*r00*x6430))+(((-1.0)*cj0*sj1*x6427)));
evalcond[5]=((((-1.0)*sj0*sj1*x6427))+(((-1.0)*x6426*x6430))+((r11*x6431))+(((-1.0)*r12*x6432))+(((-1.0)*x6428*x6429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6435 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6435)==0){
continue;
}
IkReal x6434=pow(x6435,-0.5);
CheckValue<IkReal> x6436 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6436.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6436.value))));
IkReal gconst130=((1.0)*r01*x6434);
IkReal gconst131=((-1.0)*r00*x6434);
CheckValue<IkReal> x6437 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6437.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6437.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x6440 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6440.valid){
continue;
}
IkReal x6438=((1.0)*(x6440.value));
IkReal x6439=x6434;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6438)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6438)));
IkReal gconst130=((1.0)*r01*x6439);
IkReal gconst131=((-1.0)*r00*x6439);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x6443 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6443.valid){
continue;
}
IkReal x6441=((1.0)*(x6443.value));
IkReal x6442=x6434;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6441)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6441)));
IkReal gconst130=((1.0)*r01*x6442);
IkReal gconst131=((-1.0)*r00*x6442);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x6446 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x6446.valid){
continue;
}
IkReal x6444=((1.0)*(x6446.value));
IkReal x6445=x6434;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6444)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6444)));
IkReal gconst130=((1.0)*r01*x6445);
IkReal gconst131=((-1.0)*r00*x6445);
IkReal x6447=r02*r02;
IkReal x6448=(r12*sj0);
IkReal x6449=((1.0)*cj0);
IkReal x6450=x6434;
j4eval[0]=((IKabs(((((-1.0)*x6449*x6450))+((cj0*x6447*x6450))+((r02*x6448*x6450)))))+(IKabs(((((-1.0)*r02*x6449))+(((-1.0)*x6448))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6451=((1.0)*sj0);
IkReal x6452=((1.0)*cj0);
CheckValue<IkReal> x6453=IKPowWithIntegerCheck(IKsign((((gconst131*r21))+((gconst130*r20)))),-1);
if(!x6453.valid){
continue;
}
CheckValue<IkReal> x6454 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6452))+(((-1.0)*r12*x6451)))),IkReal((((cj0*gconst130*r01))+(((-1.0)*gconst131*r00*x6452))+(((-1.0)*gconst131*r10*x6451))+((gconst130*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6453.value)))+(x6454.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6455=IKsin(j4);
IkReal x6456=IKcos(j4);
IkReal x6457=(gconst131*r10);
IkReal x6458=((1.0)*cj2);
IkReal x6459=(gconst131*r20);
IkReal x6460=((1.0)*sj0);
IkReal x6461=(gconst131*r00);
IkReal x6462=(cj1*sj2);
IkReal x6463=((1.0)*x6456);
IkReal x6464=(gconst130*x6456);
IkReal x6465=((1.0)*x6455);
evalcond[0]=((((-1.0)*gconst130*r21*x6465))+((x6455*x6459))+(((-1.0)*r22*x6463)));
evalcond[1]=(cj0+((x6455*x6457))+(((-1.0)*gconst130*r11*x6465))+(((-1.0)*r12*x6463)));
evalcond[2]=((((-1.0)*gconst130*r01*x6465))+((x6455*x6461))+(((-1.0)*x6460))+(((-1.0)*r02*x6463)));
evalcond[3]=((((-1.0)*cj1*x6458))+((r21*x6464))+((sj1*sj2))+(((-1.0)*r22*x6465))+(((-1.0)*x6459*x6463)));
evalcond[4]=(((r01*x6464))+(((-1.0)*cj0*sj1*x6458))+(((-1.0)*r02*x6465))+(((-1.0)*x6461*x6463))+(((-1.0)*cj0*x6462)));
evalcond[5]=((((-1.0)*x6457*x6463))+(((-1.0)*r12*x6465))+(((-1.0)*sj0*sj1*x6458))+((r11*x6464))+(((-1.0)*x6460*x6462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6466=IKPowWithIntegerCheck(IKsign((((gconst131*r11))+((gconst130*r10)))),-1);
if(!x6466.valid){
continue;
}
CheckValue<IkReal> x6467 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst131*r20*sj0))+(((-1.0)*gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6466.value)))+(x6467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6468=IKsin(j4);
IkReal x6469=IKcos(j4);
IkReal x6470=(gconst131*r10);
IkReal x6471=((1.0)*cj2);
IkReal x6472=(gconst131*r20);
IkReal x6473=((1.0)*sj0);
IkReal x6474=(gconst131*r00);
IkReal x6475=(cj1*sj2);
IkReal x6476=((1.0)*x6469);
IkReal x6477=(gconst130*x6469);
IkReal x6478=((1.0)*x6468);
evalcond[0]=((((-1.0)*r22*x6476))+(((-1.0)*gconst130*r21*x6478))+((x6468*x6472)));
evalcond[1]=((((-1.0)*gconst130*r11*x6478))+(((-1.0)*r12*x6476))+cj0+((x6468*x6470)));
evalcond[2]=(((x6468*x6474))+(((-1.0)*gconst130*r01*x6478))+(((-1.0)*r02*x6476))+(((-1.0)*x6473)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x6478))+(((-1.0)*x6472*x6476))+(((-1.0)*cj1*x6471))+((r21*x6477)));
evalcond[4]=((((-1.0)*cj0*sj1*x6471))+(((-1.0)*cj0*x6475))+((r01*x6477))+(((-1.0)*r02*x6478))+(((-1.0)*x6474*x6476)));
evalcond[5]=((((-1.0)*r12*x6478))+(((-1.0)*x6473*x6475))+(((-1.0)*sj0*sj1*x6471))+((r11*x6477))+(((-1.0)*x6470*x6476)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6479=IKPowWithIntegerCheck(IKsign((((gconst131*r01))+((gconst130*r00)))),-1);
if(!x6479.valid){
continue;
}
CheckValue<IkReal> x6480 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst131*r20))+(((-1.0)*cj0*gconst130*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6479.value)))+(x6480.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6481=IKsin(j4);
IkReal x6482=IKcos(j4);
IkReal x6483=(gconst131*r10);
IkReal x6484=((1.0)*cj2);
IkReal x6485=(gconst131*r20);
IkReal x6486=((1.0)*sj0);
IkReal x6487=(gconst131*r00);
IkReal x6488=(cj1*sj2);
IkReal x6489=((1.0)*x6482);
IkReal x6490=(gconst130*x6482);
IkReal x6491=((1.0)*x6481);
evalcond[0]=((((-1.0)*r22*x6489))+(((-1.0)*gconst130*r21*x6491))+((x6481*x6485)));
evalcond[1]=(cj0+(((-1.0)*r12*x6489))+(((-1.0)*gconst130*r11*x6491))+((x6481*x6483)));
evalcond[2]=((((-1.0)*x6486))+(((-1.0)*r02*x6489))+(((-1.0)*gconst130*r01*x6491))+((x6481*x6487)));
evalcond[3]=((((-1.0)*x6485*x6489))+(((-1.0)*r22*x6491))+(((-1.0)*cj1*x6484))+((sj1*sj2))+((r21*x6490)));
evalcond[4]=(((r01*x6490))+(((-1.0)*x6487*x6489))+(((-1.0)*cj0*sj1*x6484))+(((-1.0)*r02*x6491))+(((-1.0)*cj0*x6488)));
evalcond[5]=(((r11*x6490))+(((-1.0)*r12*x6491))+(((-1.0)*x6486*x6488))+(((-1.0)*sj0*sj1*x6484))+(((-1.0)*x6483*x6489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6492=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6492;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x6492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6493=((1.0)*sj5);
IkReal x6494=((((-1.0)*r20*x6493))+(((-1.0)*cj5*r21)));
j4eval[0]=x6494;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x6493))))));
j4eval[2]=IKsign(x6494);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6495=cj5*cj5;
IkReal x6496=r01*r01;
IkReal x6497=(r01*sj5);
IkReal x6498=(cj5*r00);
IkReal x6499=((((-1.0)*x6496))+((x6495*x6496))+(((-1.0)*(r02*r02)))+(((2.0)*x6497*x6498))+(((-1.0)*x6495*(r00*r00))));
j4eval[0]=x6499;
j4eval[1]=IKsign(x6499);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6498))+x6497))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6500=cj5*cj5;
IkReal x6501=r01*r01;
IkReal x6502=(r01*sj5);
IkReal x6503=(cj5*r00);
CheckValue<IkReal> x6504=IKPowWithIntegerCheck(IKsign((((x6500*x6501))+(((-1.0)*x6500*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x6501))+(((2.0)*x6502*x6503)))),-1);
if(!x6504.valid){
continue;
}
CheckValue<IkReal> x6505 = IKatan2WithCheck(IkReal(((((-1.0)*x6503))+x6502)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6504.value)))+(x6505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6506=IKsin(j4);
IkReal x6507=IKcos(j4);
IkReal x6508=(cj5*r00);
IkReal x6509=((1.0)*cj1);
IkReal x6510=(cj5*r20);
IkReal x6511=(cj5*r10);
IkReal x6512=((1.0)*x6507);
IkReal x6513=(sj5*x6507);
IkReal x6514=((1.0)*x6506);
IkReal x6515=(sj5*x6514);
evalcond[0]=((((-1.0)*r21*x6515))+(((-1.0)*r22*x6512))+((x6506*x6510)));
evalcond[1]=(((x6506*x6511))+(((-1.0)*r12*x6512))+(((-1.0)*r11*x6515)));
evalcond[2]=((((-1.0)*r02*x6514))+((r01*x6513))+(((-1.0)*x6508*x6512)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6512))+((x6506*x6508))+(((-1.0)*r01*x6515)));
evalcond[4]=((((-1.0)*r22*x6514))+((sj1*sj2))+(((-1.0)*cj2*x6509))+((r21*x6513))+(((-1.0)*x6510*x6512)));
evalcond[5]=(((r11*x6513))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x6514))+(((-1.0)*sj2*x6509))+(((-1.0)*x6511*x6512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6516=((1.0)*sj5);
CheckValue<IkReal> x6517 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x6516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6517.valid){
continue;
}
CheckValue<IkReal> x6518=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x6516)))),-1);
if(!x6518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6517.value)+(((1.5707963267949)*(x6518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6519=IKsin(j4);
IkReal x6520=IKcos(j4);
IkReal x6521=(cj5*r00);
IkReal x6522=((1.0)*cj1);
IkReal x6523=(cj5*r20);
IkReal x6524=(cj5*r10);
IkReal x6525=((1.0)*x6520);
IkReal x6526=(sj5*x6520);
IkReal x6527=((1.0)*x6519);
IkReal x6528=(sj5*x6527);
evalcond[0]=((((-1.0)*r22*x6525))+(((-1.0)*r21*x6528))+((x6519*x6523)));
evalcond[1]=((((-1.0)*r11*x6528))+(((-1.0)*r12*x6525))+((x6519*x6524)));
evalcond[2]=((((-1.0)*x6521*x6525))+(((-1.0)*r02*x6527))+((r01*x6526)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6525))+(((-1.0)*r01*x6528))+((x6519*x6521)));
evalcond[4]=((((-1.0)*cj2*x6522))+(((-1.0)*r22*x6527))+((sj1*sj2))+((r21*x6526))+(((-1.0)*x6523*x6525)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x6522))+(((-1.0)*r12*x6527))+(((-1.0)*x6524*x6525))+((r11*x6526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6529=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6529.valid){
continue;
}
CheckValue<IkReal> x6530 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6529.value)))+(x6530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6531=IKsin(j4);
IkReal x6532=IKcos(j4);
IkReal x6533=(cj5*r00);
IkReal x6534=((1.0)*cj1);
IkReal x6535=(cj5*r20);
IkReal x6536=(cj5*r10);
IkReal x6537=((1.0)*x6532);
IkReal x6538=(sj5*x6532);
IkReal x6539=((1.0)*x6531);
IkReal x6540=(sj5*x6539);
evalcond[0]=((((-1.0)*r22*x6537))+((x6531*x6535))+(((-1.0)*r21*x6540)));
evalcond[1]=((((-1.0)*r12*x6537))+(((-1.0)*r11*x6540))+((x6531*x6536)));
evalcond[2]=((((-1.0)*r02*x6539))+(((-1.0)*x6533*x6537))+((r01*x6538)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6537))+((x6531*x6533))+(((-1.0)*r01*x6540)));
evalcond[4]=((((-1.0)*x6535*x6537))+((r21*x6538))+((sj1*sj2))+(((-1.0)*cj2*x6534))+(((-1.0)*r22*x6539)));
evalcond[5]=((((-1.0)*r12*x6539))+(((-1.0)*x6536*x6537))+(((-1.0)*cj2*sj1))+((r11*x6538))+(((-1.0)*sj2*x6534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6541=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6541;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x6541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6542=((1.0)*sj5);
IkReal x6543=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6542)));
j4eval[0]=x6543;
j4eval[1]=IKsign(x6543);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x6542)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6544=cj5*cj5;
IkReal x6545=r01*r01;
IkReal x6546=(cj5*r00);
IkReal x6547=(r01*sj5);
IkReal x6548=(x6545+(((-1.0)*x6544*x6545))+(r02*r02)+((x6544*(r00*r00)))+(((-2.0)*x6546*x6547)));
j4eval[0]=x6548;
j4eval[1]=((IKabs(r02))+(IKabs((x6547+(((-1.0)*x6546))))));
j4eval[2]=IKsign(x6548);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6549=cj5*cj5;
IkReal x6550=r01*r01;
IkReal x6551=(r01*sj5);
IkReal x6552=(cj5*r00);
CheckValue<IkReal> x6553 = IKatan2WithCheck(IkReal((x6551+(((-1.0)*x6552)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x6553.valid){
continue;
}
CheckValue<IkReal> x6554=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6551*x6552))+(((-1.0)*x6549*x6550))+x6550+((x6549*(r00*r00)))+(r02*r02))),-1);
if(!x6554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6553.value)+(((1.5707963267949)*(x6554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6555=IKsin(j4);
IkReal x6556=IKcos(j4);
IkReal x6557=(cj5*r00);
IkReal x6558=(cj5*r20);
IkReal x6559=(cj5*r10);
IkReal x6560=((1.0)*x6556);
IkReal x6561=(sj5*x6556);
IkReal x6562=((1.0)*x6555);
IkReal x6563=(sj5*x6562);
evalcond[0]=((((-1.0)*r22*x6560))+(((-1.0)*r21*x6563))+((x6555*x6558)));
evalcond[1]=((((-1.0)*r11*x6563))+((x6555*x6559))+(((-1.0)*r12*x6560)));
evalcond[2]=((((-1.0)*x6557*x6560))+(((-1.0)*r02*x6562))+((r01*x6561)));
evalcond[3]=((1.0)+(((-1.0)*r01*x6563))+(((-1.0)*r02*x6560))+((x6555*x6557)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x6561))+(((-1.0)*x6559*x6560))+(((-1.0)*r12*x6562)));
evalcond[5]=((((-1.0)*r22*x6562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6561))+(((-1.0)*x6558*x6560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6564=((1.0)*sj5);
CheckValue<IkReal> x6565=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6564)))),-1);
if(!x6565.valid){
continue;
}
CheckValue<IkReal> x6566 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x6564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6565.value)))+(x6566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6567=IKsin(j4);
IkReal x6568=IKcos(j4);
IkReal x6569=(cj5*r00);
IkReal x6570=(cj5*r20);
IkReal x6571=(cj5*r10);
IkReal x6572=((1.0)*x6568);
IkReal x6573=(sj5*x6568);
IkReal x6574=((1.0)*x6567);
IkReal x6575=(sj5*x6574);
evalcond[0]=(((x6567*x6570))+(((-1.0)*r22*x6572))+(((-1.0)*r21*x6575)));
evalcond[1]=(((x6567*x6571))+(((-1.0)*r12*x6572))+(((-1.0)*r11*x6575)));
evalcond[2]=(((r01*x6573))+(((-1.0)*x6569*x6572))+(((-1.0)*r02*x6574)));
evalcond[3]=((1.0)+((x6567*x6569))+(((-1.0)*r01*x6575))+(((-1.0)*r02*x6572)));
evalcond[4]=((((-1.0)*x6571*x6572))+((cj2*sj1))+((cj1*sj2))+((r11*x6573))+(((-1.0)*r12*x6574)));
evalcond[5]=((((-1.0)*r22*x6574))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x6573))+(((-1.0)*x6570*x6572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6576 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6576.valid){
continue;
}
CheckValue<IkReal> x6577=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6576.value)+(((1.5707963267949)*(x6577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6578=IKsin(j4);
IkReal x6579=IKcos(j4);
IkReal x6580=(cj5*r00);
IkReal x6581=(cj5*r20);
IkReal x6582=(cj5*r10);
IkReal x6583=((1.0)*x6579);
IkReal x6584=(sj5*x6579);
IkReal x6585=((1.0)*x6578);
IkReal x6586=(sj5*x6585);
evalcond[0]=(((x6578*x6581))+(((-1.0)*r22*x6583))+(((-1.0)*r21*x6586)));
evalcond[1]=((((-1.0)*r11*x6586))+(((-1.0)*r12*x6583))+((x6578*x6582)));
evalcond[2]=((((-1.0)*r02*x6585))+((r01*x6584))+(((-1.0)*x6580*x6583)));
evalcond[3]=((1.0)+(((-1.0)*r01*x6586))+(((-1.0)*r02*x6583))+((x6578*x6580)));
evalcond[4]=(((cj2*sj1))+((r11*x6584))+((cj1*sj2))+(((-1.0)*r12*x6585))+(((-1.0)*x6582*x6583)));
evalcond[5]=(((r21*x6584))+(((-1.0)*x6581*x6583))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x6585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6587=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6587);
rxp1_1=(px*r21);
rxp1_2=(r11*x6587);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6588=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6588);
rxp1_1=(px*r21);
rxp1_2=(r11*x6588);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6589=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6589);
rxp1_1=(px*r21);
rxp1_2=(r11*x6589);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6592=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6592.valid){
continue;
}
IkReal x6590=x6592.value;
IkReal x6591=(sj0*x6590);
cj4array[0]=(((cj2*sj1*x6591))+((cj1*sj2*x6591)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6593=IKsin(j4);
IkReal x6594=IKcos(j4);
IkReal x6595=(cj5*x6593);
IkReal x6596=((1.0)*x6594);
IkReal x6597=((1.0)*sj5*x6593);
evalcond[0]=((-1.0)*r02*x6593);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6596)));
evalcond[2]=(((r20*x6595))+(((-1.0)*r21*x6597)));
evalcond[3]=((((-1.0)*r11*x6597))+((r10*x6595)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*sj5*x6594))+(((-1.0)*cj5*r20*x6596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6599=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6599.valid){
continue;
}
IkReal x6598=x6599.value;
cj4array[0]=((((-1.0)*sj1*sj2*x6598))+((cj1*cj2*x6598)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6600=IKsin(j4);
IkReal x6601=IKcos(j4);
IkReal x6602=((1.0)*sj0);
IkReal x6603=(cj5*r10);
IkReal x6604=((1.0)*x6601);
IkReal x6605=((1.0)*sj5*x6600);
evalcond[0]=((-1.0)*r02*x6600);
evalcond[1]=((((-1.0)*r02*x6604))+(((-1.0)*x6602)));
evalcond[2]=(((cj5*r20*x6600))+(((-1.0)*r21*x6605)));
evalcond[3]=(((x6600*x6603))+(((-1.0)*r11*x6605)));
evalcond[4]=((((-1.0)*x6603*x6604))+(((-1.0)*cj2*sj1*x6602))+(((-1.0)*cj1*sj2*x6602))+((r11*sj5*x6601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6606=IKPowWithIntegerCheck(r02,-1);
if(!x6606.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6606.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6607=IKsin(j4);
IkReal x6608=IKcos(j4);
IkReal x6609=((1.0)*sj0);
IkReal x6610=(sj5*x6608);
IkReal x6611=(cj5*x6607);
IkReal x6612=((1.0)*sj5*x6607);
IkReal x6613=((1.0)*cj5*x6608);
evalcond[0]=((-1.0)*r02*x6607);
evalcond[1]=((((-1.0)*r21*x6612))+((r20*x6611)));
evalcond[2]=((((-1.0)*r11*x6612))+((r10*x6611)));
evalcond[3]=(((r21*x6610))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x6613)));
evalcond[4]=(((r11*x6610))+(((-1.0)*cj2*sj1*x6609))+(((-1.0)*cj1*sj2*x6609))+(((-1.0)*r10*x6613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6614=((1.0)*sj0);
IkReal x6615=((1.0)*cj0);
CheckValue<IkReal> x6616=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6616.valid){
continue;
}
CheckValue<IkReal> x6617 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6614))+(((-1.0)*r02*x6615)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x6615))+(((-1.0)*cj5*r10*x6614))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6616.value)))+(x6617.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6618=IKsin(j4);
IkReal x6619=IKcos(j4);
IkReal x6620=(cj5*r00);
IkReal x6621=((1.0)*cj2);
IkReal x6622=(cj5*r20);
IkReal x6623=((1.0)*sj0);
IkReal x6624=(cj5*r10);
IkReal x6625=(cj1*sj2);
IkReal x6626=((1.0)*x6619);
IkReal x6627=(sj5*x6619);
IkReal x6628=((1.0)*x6618);
IkReal x6629=(sj5*x6628);
evalcond[0]=((((-1.0)*r22*x6626))+((x6618*x6622))+(((-1.0)*r21*x6629)));
evalcond[1]=((((-1.0)*r11*x6629))+(((-1.0)*r12*x6626))+cj0+((x6618*x6624)));
evalcond[2]=((((-1.0)*x6623))+((x6618*x6620))+(((-1.0)*r02*x6626))+(((-1.0)*r01*x6629)));
evalcond[3]=((((-1.0)*r22*x6628))+((sj1*sj2))+(((-1.0)*x6622*x6626))+(((-1.0)*cj1*x6621))+((r21*x6627)));
evalcond[4]=((((-1.0)*cj0*sj1*x6621))+((r01*x6627))+(((-1.0)*x6620*x6626))+(((-1.0)*r02*x6628))+(((-1.0)*cj0*x6625)));
evalcond[5]=((((-1.0)*sj0*sj1*x6621))+(((-1.0)*r12*x6628))+((r11*x6627))+(((-1.0)*x6624*x6626))+(((-1.0)*x6623*x6625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6630 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6630.valid){
continue;
}
CheckValue<IkReal> x6631=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6630.value)+(((1.5707963267949)*(x6631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6632=IKsin(j4);
IkReal x6633=IKcos(j4);
IkReal x6634=(cj5*r00);
IkReal x6635=((1.0)*cj2);
IkReal x6636=(cj5*r20);
IkReal x6637=((1.0)*sj0);
IkReal x6638=(cj5*r10);
IkReal x6639=(cj1*sj2);
IkReal x6640=((1.0)*x6633);
IkReal x6641=(sj5*x6633);
IkReal x6642=((1.0)*x6632);
IkReal x6643=(sj5*x6642);
evalcond[0]=((((-1.0)*r21*x6643))+(((-1.0)*r22*x6640))+((x6632*x6636)));
evalcond[1]=((((-1.0)*r11*x6643))+cj0+((x6632*x6638))+(((-1.0)*r12*x6640)));
evalcond[2]=(((x6632*x6634))+(((-1.0)*r02*x6640))+(((-1.0)*r01*x6643))+(((-1.0)*x6637)));
evalcond[3]=((((-1.0)*cj1*x6635))+(((-1.0)*r22*x6642))+((r21*x6641))+(((-1.0)*x6636*x6640))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj0*x6639))+((r01*x6641))+(((-1.0)*x6634*x6640))+(((-1.0)*r02*x6642))+(((-1.0)*cj0*sj1*x6635)));
evalcond[5]=((((-1.0)*sj0*sj1*x6635))+(((-1.0)*x6638*x6640))+(((-1.0)*x6637*x6639))+((r11*x6641))+(((-1.0)*r12*x6642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6644 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6644.valid){
continue;
}
CheckValue<IkReal> x6645=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6644.value)+(((1.5707963267949)*(x6645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6646=IKsin(j4);
IkReal x6647=IKcos(j4);
IkReal x6648=(cj5*r00);
IkReal x6649=((1.0)*cj2);
IkReal x6650=(cj5*r20);
IkReal x6651=((1.0)*sj0);
IkReal x6652=(cj5*r10);
IkReal x6653=(cj1*sj2);
IkReal x6654=((1.0)*x6647);
IkReal x6655=(sj5*x6647);
IkReal x6656=((1.0)*x6646);
IkReal x6657=(sj5*x6656);
evalcond[0]=((((-1.0)*r22*x6654))+(((-1.0)*r21*x6657))+((x6646*x6650)));
evalcond[1]=(((x6646*x6652))+cj0+(((-1.0)*r12*x6654))+(((-1.0)*r11*x6657)));
evalcond[2]=((((-1.0)*x6651))+(((-1.0)*r01*x6657))+((x6646*x6648))+(((-1.0)*r02*x6654)));
evalcond[3]=((((-1.0)*r22*x6656))+((sj1*sj2))+(((-1.0)*x6650*x6654))+((r21*x6655))+(((-1.0)*cj1*x6649)));
evalcond[4]=((((-1.0)*x6648*x6654))+(((-1.0)*cj0*x6653))+((r01*x6655))+(((-1.0)*cj0*sj1*x6649))+(((-1.0)*r02*x6656)));
evalcond[5]=((((-1.0)*x6651*x6653))+(((-1.0)*sj0*sj1*x6649))+(((-1.0)*x6652*x6654))+((r11*x6655))+(((-1.0)*r12*x6656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6658=((((-1.0)*sj1*sj2))+((cj1*cj2)));
j0eval[0]=x6658;
j0eval[1]=IKsign(x6658);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x6659=r21*r21;
IkReal x6660=cj5*cj5;
IkReal x6661=(sj1*sj2);
IkReal x6662=(r21*sj5);
IkReal x6663=(cj1*cj2);
IkReal x6664=(cj5*r20);
IkReal x6665=(((x6659*x6660))+(((-1.0)*x6659))+(((2.0)*x6662*x6664))+(((-1.0)*(r22*r22)))+(((-1.0)*x6660*(r20*r20))));
j4eval[0]=x6665;
j4eval[1]=((IKabs(((((-1.0)*x6661*x6662))+(((-1.0)*x6663*x6664))+((x6662*x6663))+((x6661*x6664)))))+(IKabs(((((-1.0)*r22*x6663))+((r22*x6661))))));
j4eval[2]=IKsign(x6665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20747329957163)*py))+(((-0.566671381137094)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20747329957163)*px))+(((0.566671381137094)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20747329957163)*py))+(((-0.566671381137094)*px))))+IKsqr(((((2.20747329957163)*px))+(((0.566671381137094)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20747329957163)*py))+(((-0.566671381137094)*px))), ((((2.20747329957163)*px))+(((0.566671381137094)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6666=IKsin(j0);
IkReal x6667=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.1091)*x6666))+(((0.425)*x6667)));
evalcond[1]=((((0.1091)*x6667))+(((-1.0)*py))+(((0.425)*x6666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6668=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6668;
j4eval[1]=IKsign(x6668);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6669=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6669;
j4eval[1]=IKsign(x6669);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6670=((1.0)*sj5);
IkReal x6671=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6670)));
j4eval[0]=x6671;
j4eval[1]=IKsign(x6671);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6670))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6672=((1.0)*sj5);
CheckValue<IkReal> x6673=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6672)))),-1);
if(!x6673.valid){
continue;
}
CheckValue<IkReal> x6674 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6672))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6673.value)))+(x6674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6675=IKcos(j4);
IkReal x6676=IKsin(j4);
IkReal x6677=((1.0)*sj0);
IkReal x6678=(r11*sj5);
IkReal x6679=(r21*sj5);
IkReal x6680=(r01*sj5);
IkReal x6681=((1.0)*x6675);
IkReal x6682=((1.0)*x6676);
IkReal x6683=(cj5*x6675);
IkReal x6684=(cj5*x6676);
evalcond[0]=((((-1.0)*x6679*x6681))+((r22*x6676))+((r20*x6683)));
evalcond[1]=((((-1.0)*x6679*x6682))+((r20*x6684))+(((-1.0)*r22*x6681)));
evalcond[2]=(cj0+(((-1.0)*x6678*x6682))+((r10*x6684))+(((-1.0)*r12*x6681)));
evalcond[3]=((((-1.0)*x6680*x6681))+((r02*x6676))+((r00*x6683))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6678*x6681))+(((-1.0)*x6677))+((r10*x6683))+((r12*x6676)));
evalcond[5]=((((-1.0)*r02*x6681))+(((-1.0)*x6680*x6682))+(((-1.0)*x6677))+((r00*x6684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6685 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6685.valid){
continue;
}
CheckValue<IkReal> x6686=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6685.value)+(((1.5707963267949)*(x6686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6687=IKcos(j4);
IkReal x6688=IKsin(j4);
IkReal x6689=((1.0)*sj0);
IkReal x6690=(r11*sj5);
IkReal x6691=(r21*sj5);
IkReal x6692=(r01*sj5);
IkReal x6693=((1.0)*x6687);
IkReal x6694=((1.0)*x6688);
IkReal x6695=(cj5*x6687);
IkReal x6696=(cj5*x6688);
evalcond[0]=(((r22*x6688))+(((-1.0)*x6691*x6693))+((r20*x6695)));
evalcond[1]=((((-1.0)*x6691*x6694))+((r20*x6696))+(((-1.0)*r22*x6693)));
evalcond[2]=(cj0+((r10*x6696))+(((-1.0)*x6690*x6694))+(((-1.0)*r12*x6693)));
evalcond[3]=(((r02*x6688))+((r00*x6695))+(((-1.0)*x6692*x6693))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x6688))+((r10*x6695))+(((-1.0)*x6690*x6693))+(((-1.0)*x6689)));
evalcond[5]=((((-1.0)*r02*x6693))+((r00*x6696))+(((-1.0)*x6689))+(((-1.0)*x6692*x6694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6697 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6697.valid){
continue;
}
CheckValue<IkReal> x6698=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6697.value)+(((1.5707963267949)*(x6698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6699=IKcos(j4);
IkReal x6700=IKsin(j4);
IkReal x6701=((1.0)*sj0);
IkReal x6702=(r11*sj5);
IkReal x6703=(r21*sj5);
IkReal x6704=(r01*sj5);
IkReal x6705=((1.0)*x6699);
IkReal x6706=((1.0)*x6700);
IkReal x6707=(cj5*x6699);
IkReal x6708=(cj5*x6700);
evalcond[0]=(((r20*x6707))+(((-1.0)*x6703*x6705))+((r22*x6700)));
evalcond[1]=((((-1.0)*r22*x6705))+((r20*x6708))+(((-1.0)*x6703*x6706)));
evalcond[2]=(((r10*x6708))+cj0+(((-1.0)*x6702*x6706))+(((-1.0)*r12*x6705)));
evalcond[3]=(((r00*x6707))+(((-1.0)*x6704*x6705))+(((-1.0)*cj0))+((r02*x6700)));
evalcond[4]=(((r10*x6707))+(((-1.0)*x6701))+(((-1.0)*x6702*x6705))+((r12*x6700)));
evalcond[5]=((((-1.0)*r02*x6705))+((r00*x6708))+(((-1.0)*x6701))+(((-1.0)*x6704*x6706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20747329957163)*py))+(((-0.566671381137094)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20747329957163)*px))+(((0.566671381137094)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20747329957163)*py))+(((-0.566671381137094)*px))))+IKsqr(((((2.20747329957163)*px))+(((0.566671381137094)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20747329957163)*py))+(((-0.566671381137094)*px))), ((((2.20747329957163)*px))+(((0.566671381137094)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6709=IKsin(j0);
IkReal x6710=IKcos(j0);
evalcond[0]=((((0.425)*x6710))+(((-1.0)*px))+(((-0.1091)*x6709)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x6709))+(((0.1091)*x6710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6711=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6711;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6712=((1.0)*sj5);
IkReal x6713=((((-1.0)*r00*x6712))+(((-1.0)*cj5*r01)));
j4eval[0]=x6713;
j4eval[1]=IKsign(x6713);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6712))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6714=cj5*cj5;
IkReal x6715=((1.0)*r21);
IkReal x6716=(cj5*r20);
IkReal x6717=((((-1.0)*r00*r20*x6714))+(((-1.0)*r02*r22))+((r01*sj5*x6716))+((r01*r21*x6714))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6715)));
j4eval[0]=x6717;
j4eval[1]=IKsign(x6717);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6716))+(((-1.0)*cj0*sj5*x6715))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6718=cj5*cj5;
IkReal x6719=((1.0)*r21);
IkReal x6720=(cj5*r20);
CheckValue<IkReal> x6721 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x6720))+(((-1.0)*cj0*sj5*x6719)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6721.valid){
continue;
}
CheckValue<IkReal> x6722=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r20*x6718))+(((-1.0)*r02*r22))+((r01*sj5*x6720))+((r01*r21*x6718))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6719)))),-1);
if(!x6722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6721.value)+(((1.5707963267949)*(x6722.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6723=IKcos(j4);
IkReal x6724=IKsin(j4);
IkReal x6725=(r11*sj5);
IkReal x6726=(r21*sj5);
IkReal x6727=(r01*sj5);
IkReal x6728=((1.0)*x6723);
IkReal x6729=((1.0)*x6724);
IkReal x6730=(cj5*x6723);
IkReal x6731=(cj5*x6724);
evalcond[0]=(((r22*x6724))+((r20*x6730))+(((-1.0)*x6726*x6728)));
evalcond[1]=((((-1.0)*r22*x6728))+((r20*x6731))+(((-1.0)*x6726*x6729)));
evalcond[2]=(cj0+((r02*x6724))+(((-1.0)*x6727*x6728))+((r00*x6730)));
evalcond[3]=(((r12*x6724))+sj0+((r10*x6730))+(((-1.0)*x6725*x6728)));
evalcond[4]=(cj0+((r10*x6731))+(((-1.0)*r12*x6728))+(((-1.0)*x6725*x6729)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6728))+(((-1.0)*x6727*x6729))+((r00*x6731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6732=((1.0)*sj5);
CheckValue<IkReal> x6733 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6732)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6733.valid){
continue;
}
CheckValue<IkReal> x6734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6732))+(((-1.0)*cj5*r01)))),-1);
if(!x6734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6733.value)+(((1.5707963267949)*(x6734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6735=IKcos(j4);
IkReal x6736=IKsin(j4);
IkReal x6737=(r11*sj5);
IkReal x6738=(r21*sj5);
IkReal x6739=(r01*sj5);
IkReal x6740=((1.0)*x6735);
IkReal x6741=((1.0)*x6736);
IkReal x6742=(cj5*x6735);
IkReal x6743=(cj5*x6736);
evalcond[0]=(((r22*x6736))+(((-1.0)*x6738*x6740))+((r20*x6742)));
evalcond[1]=((((-1.0)*r22*x6740))+(((-1.0)*x6738*x6741))+((r20*x6743)));
evalcond[2]=(cj0+((r00*x6742))+(((-1.0)*x6739*x6740))+((r02*x6736)));
evalcond[3]=(sj0+((r12*x6736))+((r10*x6742))+(((-1.0)*x6737*x6740)));
evalcond[4]=((((-1.0)*r12*x6740))+cj0+((r10*x6743))+(((-1.0)*x6737*x6741)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6740))+((r00*x6743))+(((-1.0)*x6739*x6741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6744 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6744.valid){
continue;
}
CheckValue<IkReal> x6745=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6744.value)+(((1.5707963267949)*(x6745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6746=IKcos(j4);
IkReal x6747=IKsin(j4);
IkReal x6748=(r11*sj5);
IkReal x6749=(r21*sj5);
IkReal x6750=(r01*sj5);
IkReal x6751=((1.0)*x6746);
IkReal x6752=((1.0)*x6747);
IkReal x6753=(cj5*x6746);
IkReal x6754=(cj5*x6747);
evalcond[0]=(((r20*x6753))+(((-1.0)*x6749*x6751))+((r22*x6747)));
evalcond[1]=(((r20*x6754))+(((-1.0)*r22*x6751))+(((-1.0)*x6749*x6752)));
evalcond[2]=(((r02*x6747))+(((-1.0)*x6750*x6751))+cj0+((r00*x6753)));
evalcond[3]=(sj0+(((-1.0)*x6748*x6751))+((r12*x6747))+((r10*x6753)));
evalcond[4]=(cj0+(((-1.0)*x6748*x6752))+((r10*x6754))+(((-1.0)*r12*x6751)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6750*x6752))+((r00*x6754))+(((-1.0)*r02*x6751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16590284142988)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16590284142988)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16590284142988)*px))+IKsqr(((9.16590284142988)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16590284142988)*px), ((9.16590284142988)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.1091)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1091)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6755=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6755;
j4eval[1]=IKsign(x6755);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6756=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6756;
j4eval[1]=IKsign(x6756);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6757=((1.0)*sj5);
IkReal x6758=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6757)));
j4eval[0]=x6758;
j4eval[1]=IKsign(x6758);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6757))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6759=((1.0)*sj5);
CheckValue<IkReal> x6760=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6759)))),-1);
if(!x6760.valid){
continue;
}
CheckValue<IkReal> x6761 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6759)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6760.value)))+(x6761.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6762=IKcos(j4);
IkReal x6763=IKsin(j4);
IkReal x6764=((1.0)*sj0);
IkReal x6765=(r11*sj5);
IkReal x6766=(r21*sj5);
IkReal x6767=(r01*sj5);
IkReal x6768=((1.0)*x6762);
IkReal x6769=((1.0)*x6763);
IkReal x6770=(cj5*x6762);
IkReal x6771=(cj5*x6763);
evalcond[0]=(((r22*x6763))+(((-1.0)*x6766*x6768))+((r20*x6770)));
evalcond[1]=((((-1.0)*x6766*x6769))+(((-1.0)*r22*x6768))+((r20*x6771)));
evalcond[2]=(cj0+(((-1.0)*x6765*x6769))+(((-1.0)*r12*x6768))+((r10*x6771)));
evalcond[3]=((((-1.0)*x6767*x6768))+((r02*x6763))+(((-1.0)*cj0))+((r00*x6770)));
evalcond[4]=(((r12*x6763))+(((-1.0)*x6765*x6768))+(((-1.0)*x6764))+((r10*x6770)));
evalcond[5]=((((-1.0)*x6767*x6769))+(((-1.0)*x6764))+(((-1.0)*r02*x6768))+((r00*x6771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6772 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6772.valid){
continue;
}
CheckValue<IkReal> x6773=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6772.value)+(((1.5707963267949)*(x6773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6774=IKcos(j4);
IkReal x6775=IKsin(j4);
IkReal x6776=((1.0)*sj0);
IkReal x6777=(r11*sj5);
IkReal x6778=(r21*sj5);
IkReal x6779=(r01*sj5);
IkReal x6780=((1.0)*x6774);
IkReal x6781=((1.0)*x6775);
IkReal x6782=(cj5*x6774);
IkReal x6783=(cj5*x6775);
evalcond[0]=(((r20*x6782))+(((-1.0)*x6778*x6780))+((r22*x6775)));
evalcond[1]=(((r20*x6783))+(((-1.0)*x6778*x6781))+(((-1.0)*r22*x6780)));
evalcond[2]=(cj0+(((-1.0)*r12*x6780))+((r10*x6783))+(((-1.0)*x6777*x6781)));
evalcond[3]=(((r02*x6775))+(((-1.0)*x6779*x6780))+((r00*x6782))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6776))+((r12*x6775))+((r10*x6782))+(((-1.0)*x6777*x6780)));
evalcond[5]=((((-1.0)*x6776))+(((-1.0)*x6779*x6781))+(((-1.0)*r02*x6780))+((r00*x6783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6784 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6784.valid){
continue;
}
CheckValue<IkReal> x6785=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6784.value)+(((1.5707963267949)*(x6785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6786=IKcos(j4);
IkReal x6787=IKsin(j4);
IkReal x6788=((1.0)*sj0);
IkReal x6789=(r11*sj5);
IkReal x6790=(r21*sj5);
IkReal x6791=(r01*sj5);
IkReal x6792=((1.0)*x6786);
IkReal x6793=((1.0)*x6787);
IkReal x6794=(cj5*x6786);
IkReal x6795=(cj5*x6787);
evalcond[0]=(((r20*x6794))+((r22*x6787))+(((-1.0)*x6790*x6792)));
evalcond[1]=(((r20*x6795))+(((-1.0)*r22*x6792))+(((-1.0)*x6790*x6793)));
evalcond[2]=(cj0+(((-1.0)*x6789*x6793))+((r10*x6795))+(((-1.0)*r12*x6792)));
evalcond[3]=(((r00*x6794))+((r02*x6787))+(((-1.0)*x6791*x6792))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6788))+((r12*x6787))+(((-1.0)*x6789*x6792))+((r10*x6794)));
evalcond[5]=((((-1.0)*x6788))+((r00*x6795))+(((-1.0)*x6791*x6793))+(((-1.0)*r02*x6792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16590284142988)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16590284142988)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16590284142988)*px))+IKsqr(((9.16590284142988)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16590284142988)*px), ((9.16590284142988)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.1091)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1091)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6796=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6796;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6797=((1.0)*sj5);
IkReal x6798=((((-1.0)*r00*x6797))+(((-1.0)*cj5*r01)));
j4eval[0]=x6798;
j4eval[1]=IKsign(x6798);
j4eval[2]=((IKabs(((((-1.0)*r21*sj0*x6797))+((cj5*r20*sj0)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6799=cj5*cj5;
IkReal x6800=((1.0)*r21);
IkReal x6801=(cj5*r20);
IkReal x6802=(((r01*sj5*x6801))+(((-1.0)*r02*r22))+((r01*r21*x6799))+(((-1.0)*r00*r20*x6799))+(((-1.0)*r01*x6800))+((cj5*r00*r21*sj5)));
j4eval[0]=x6802;
j4eval[1]=IKsign(x6802);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*sj5*x6800))+((cj0*x6801))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6803=cj5*cj5;
IkReal x6804=((1.0)*r21);
IkReal x6805=(cj5*r20);
CheckValue<IkReal> x6806=IKPowWithIntegerCheck(IKsign((((r01*sj5*x6805))+((r01*r21*x6803))+(((-1.0)*r02*r22))+(((-1.0)*r00*r20*x6803))+(((-1.0)*r01*x6804))+((cj5*r00*r21*sj5)))),-1);
if(!x6806.valid){
continue;
}
CheckValue<IkReal> x6807 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6804))+((cj0*x6805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6806.value)))+(x6807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6808=IKcos(j4);
IkReal x6809=IKsin(j4);
IkReal x6810=(r11*sj5);
IkReal x6811=(r21*sj5);
IkReal x6812=(r01*sj5);
IkReal x6813=((1.0)*x6808);
IkReal x6814=((1.0)*x6809);
IkReal x6815=(cj5*x6808);
IkReal x6816=(cj5*x6809);
evalcond[0]=(((r22*x6809))+(((-1.0)*x6811*x6813))+((r20*x6815)));
evalcond[1]=((((-1.0)*x6811*x6814))+(((-1.0)*r22*x6813))+((r20*x6816)));
evalcond[2]=(cj0+(((-1.0)*x6812*x6813))+((r02*x6809))+((r00*x6815)));
evalcond[3]=(sj0+((r10*x6815))+(((-1.0)*x6810*x6813))+((r12*x6809)));
evalcond[4]=(((r10*x6816))+cj0+(((-1.0)*x6810*x6814))+(((-1.0)*r12*x6813)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6812*x6814))+(((-1.0)*r02*x6813))+((r00*x6816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6817=((1.0)*sj5);
CheckValue<IkReal> x6818 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6817)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6818.valid){
continue;
}
CheckValue<IkReal> x6819=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6817))+(((-1.0)*cj5*r01)))),-1);
if(!x6819.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6818.value)+(((1.5707963267949)*(x6819.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6820=IKcos(j4);
IkReal x6821=IKsin(j4);
IkReal x6822=(r11*sj5);
IkReal x6823=(r21*sj5);
IkReal x6824=(r01*sj5);
IkReal x6825=((1.0)*x6820);
IkReal x6826=((1.0)*x6821);
IkReal x6827=(cj5*x6820);
IkReal x6828=(cj5*x6821);
evalcond[0]=(((r22*x6821))+(((-1.0)*x6823*x6825))+((r20*x6827)));
evalcond[1]=((((-1.0)*x6823*x6826))+((r20*x6828))+(((-1.0)*r22*x6825)));
evalcond[2]=(((r02*x6821))+cj0+((r00*x6827))+(((-1.0)*x6824*x6825)));
evalcond[3]=(sj0+((r10*x6827))+((r12*x6821))+(((-1.0)*x6822*x6825)));
evalcond[4]=(cj0+((r10*x6828))+(((-1.0)*r12*x6825))+(((-1.0)*x6822*x6826)));
evalcond[5]=((((-1.0)*sj0))+((r00*x6828))+(((-1.0)*r02*x6825))+(((-1.0)*x6824*x6826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6829 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6829.valid){
continue;
}
CheckValue<IkReal> x6830=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6829.value)+(((1.5707963267949)*(x6830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6831=IKcos(j4);
IkReal x6832=IKsin(j4);
IkReal x6833=(r11*sj5);
IkReal x6834=(r21*sj5);
IkReal x6835=(r01*sj5);
IkReal x6836=((1.0)*x6831);
IkReal x6837=((1.0)*x6832);
IkReal x6838=(cj5*x6831);
IkReal x6839=(cj5*x6832);
evalcond[0]=(((r22*x6832))+((r20*x6838))+(((-1.0)*x6834*x6836)));
evalcond[1]=(((r20*x6839))+(((-1.0)*r22*x6836))+(((-1.0)*x6834*x6837)));
evalcond[2]=(((r02*x6832))+cj0+((r00*x6838))+(((-1.0)*x6835*x6836)));
evalcond[3]=(sj0+(((-1.0)*x6833*x6836))+((r10*x6838))+((r12*x6832)));
evalcond[4]=(cj0+(((-1.0)*r12*x6836))+(((-1.0)*x6833*x6837))+((r10*x6839)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6836))+((r00*x6839))+(((-1.0)*x6835*x6837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20747329957163)*py))+(((-0.566671381137094)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20747329957163)*px))+(((0.566671381137094)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20747329957163)*py))+(((-0.566671381137094)*px))))+IKsqr(((((-2.20747329957163)*px))+(((0.566671381137094)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20747329957163)*py))+(((-0.566671381137094)*px))), ((((-2.20747329957163)*px))+(((0.566671381137094)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6840=IKcos(j0);
IkReal x6841=IKsin(j0);
evalcond[0]=((((-0.1091)*x6841))+(((-1.0)*px))+(((-0.425)*x6840)));
evalcond[1]=((((0.1091)*x6840))+(((-1.0)*py))+(((-0.425)*x6841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6842=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6842;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6843=((1.0)*sj5);
IkReal x6844=((((-1.0)*r00*x6843))+(((-1.0)*cj5*r01)));
j4eval[0]=x6844;
j4eval[1]=IKsign(x6844);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x6845=cj5*cj5;
IkReal x6846=((1.0)*r21);
IkReal x6847=(cj5*r20);
IkReal x6848=((((-1.0)*r01*x6846))+(((-1.0)*r02*r22))+((r01*sj5*x6847))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x6845))+((r01*r21*x6845)));
j4eval[0]=x6848;
j4eval[1]=IKsign(x6848);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs((((cj0*x6847))+(((-1.0)*cj0*sj5*x6846))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6849=cj5*cj5;
IkReal x6850=((1.0)*r21);
IkReal x6851=(cj5*r20);
CheckValue<IkReal> x6852 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6850))+((cj0*x6851)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6852.valid){
continue;
}
CheckValue<IkReal> x6853=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+(((-1.0)*r01*x6850))+((cj5*r00*r21*sj5))+(((-1.0)*r00*r20*x6849))+((r01*r21*x6849))+((r01*sj5*x6851)))),-1);
if(!x6853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6852.value)+(((1.5707963267949)*(x6853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6854=IKcos(j4);
IkReal x6855=IKsin(j4);
IkReal x6856=(r11*sj5);
IkReal x6857=(r21*sj5);
IkReal x6858=(r01*sj5);
IkReal x6859=((1.0)*x6854);
IkReal x6860=((1.0)*x6855);
IkReal x6861=(cj5*x6854);
IkReal x6862=(cj5*x6855);
evalcond[0]=((((-1.0)*x6857*x6859))+((r22*x6855))+((r20*x6861)));
evalcond[1]=((((-1.0)*x6857*x6860))+(((-1.0)*r22*x6859))+((r20*x6862)));
evalcond[2]=(((r02*x6855))+cj0+(((-1.0)*x6858*x6859))+((r00*x6861)));
evalcond[3]=(sj0+(((-1.0)*x6856*x6859))+((r12*x6855))+((r10*x6861)));
evalcond[4]=(cj0+(((-1.0)*r12*x6859))+((r10*x6862))+(((-1.0)*x6856*x6860)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6859))+((r00*x6862))+(((-1.0)*x6858*x6860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6863=((1.0)*sj5);
CheckValue<IkReal> x6864 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6863)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6864.valid){
continue;
}
CheckValue<IkReal> x6865=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x6863))+(((-1.0)*cj5*r01)))),-1);
if(!x6865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6864.value)+(((1.5707963267949)*(x6865.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6866=IKcos(j4);
IkReal x6867=IKsin(j4);
IkReal x6868=(r11*sj5);
IkReal x6869=(r21*sj5);
IkReal x6870=(r01*sj5);
IkReal x6871=((1.0)*x6866);
IkReal x6872=((1.0)*x6867);
IkReal x6873=(cj5*x6866);
IkReal x6874=(cj5*x6867);
evalcond[0]=(((r22*x6867))+(((-1.0)*x6869*x6871))+((r20*x6873)));
evalcond[1]=((((-1.0)*x6869*x6872))+(((-1.0)*r22*x6871))+((r20*x6874)));
evalcond[2]=(((r02*x6867))+cj0+(((-1.0)*x6870*x6871))+((r00*x6873)));
evalcond[3]=((((-1.0)*x6868*x6871))+sj0+((r12*x6867))+((r10*x6873)));
evalcond[4]=((((-1.0)*x6868*x6872))+cj0+(((-1.0)*r12*x6871))+((r10*x6874)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6870*x6872))+(((-1.0)*r02*x6871))+((r00*x6874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6875 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6875.valid){
continue;
}
CheckValue<IkReal> x6876=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6875.value)+(((1.5707963267949)*(x6876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6877=IKcos(j4);
IkReal x6878=IKsin(j4);
IkReal x6879=(r11*sj5);
IkReal x6880=(r21*sj5);
IkReal x6881=(r01*sj5);
IkReal x6882=((1.0)*x6877);
IkReal x6883=((1.0)*x6878);
IkReal x6884=(cj5*x6877);
IkReal x6885=(cj5*x6878);
evalcond[0]=(((r20*x6884))+((r22*x6878))+(((-1.0)*x6880*x6882)));
evalcond[1]=(((r20*x6885))+(((-1.0)*x6880*x6883))+(((-1.0)*r22*x6882)));
evalcond[2]=(((r02*x6878))+(((-1.0)*x6881*x6882))+cj0+((r00*x6884)));
evalcond[3]=(sj0+((r12*x6878))+(((-1.0)*x6879*x6882))+((r10*x6884)));
evalcond[4]=(cj0+(((-1.0)*x6879*x6883))+(((-1.0)*r12*x6882))+((r10*x6885)));
evalcond[5]=((((-1.0)*x6881*x6883))+(((-1.0)*sj0))+(((-1.0)*r02*x6882))+((r00*x6885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20747329957163)*py))+(((-0.566671381137094)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2.20747329957163)*px))+(((0.566671381137094)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20747329957163)*py))+(((-0.566671381137094)*px))))+IKsqr(((((-2.20747329957163)*px))+(((0.566671381137094)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20747329957163)*py))+(((-0.566671381137094)*px))), ((((-2.20747329957163)*px))+(((0.566671381137094)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6886=IKcos(j0);
IkReal x6887=IKsin(j0);
evalcond[0]=((((-0.1091)*x6887))+(((-1.0)*px))+(((-0.425)*x6886)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x6887))+(((0.1091)*x6886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6888=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6888;
j4eval[1]=IKsign(x6888);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6889=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6889;
j4eval[1]=IKsign(x6889);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x6890=((1.0)*sj5);
IkReal x6891=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6890)));
j4eval[0]=x6891;
j4eval[1]=IKsign(x6891);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6890))+((cj0*cj5*r20)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6892=((1.0)*sj5);
CheckValue<IkReal> x6893=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6892)))),-1);
if(!x6893.valid){
continue;
}
CheckValue<IkReal> x6894 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6892))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6893.value)))+(x6894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6895=IKcos(j4);
IkReal x6896=IKsin(j4);
IkReal x6897=((1.0)*sj0);
IkReal x6898=(r11*sj5);
IkReal x6899=(r21*sj5);
IkReal x6900=(r01*sj5);
IkReal x6901=((1.0)*x6895);
IkReal x6902=((1.0)*x6896);
IkReal x6903=(cj5*x6895);
IkReal x6904=(cj5*x6896);
evalcond[0]=(((r22*x6896))+(((-1.0)*x6899*x6901))+((r20*x6903)));
evalcond[1]=((((-1.0)*r22*x6901))+(((-1.0)*x6899*x6902))+((r20*x6904)));
evalcond[2]=(cj0+(((-1.0)*r12*x6901))+(((-1.0)*x6898*x6902))+((r10*x6904)));
evalcond[3]=(((r00*x6903))+(((-1.0)*x6900*x6901))+((r02*x6896))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x6896))+(((-1.0)*x6898*x6901))+((r10*x6903))+(((-1.0)*x6897)));
evalcond[5]=((((-1.0)*r02*x6901))+((r00*x6904))+(((-1.0)*x6900*x6902))+(((-1.0)*x6897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6905 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6905.valid){
continue;
}
CheckValue<IkReal> x6906=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6905.value)+(((1.5707963267949)*(x6906.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6907=IKcos(j4);
IkReal x6908=IKsin(j4);
IkReal x6909=((1.0)*sj0);
IkReal x6910=(r11*sj5);
IkReal x6911=(r21*sj5);
IkReal x6912=(r01*sj5);
IkReal x6913=((1.0)*x6907);
IkReal x6914=((1.0)*x6908);
IkReal x6915=(cj5*x6907);
IkReal x6916=(cj5*x6908);
evalcond[0]=(((r22*x6908))+(((-1.0)*x6911*x6913))+((r20*x6915)));
evalcond[1]=((((-1.0)*x6911*x6914))+(((-1.0)*r22*x6913))+((r20*x6916)));
evalcond[2]=(cj0+(((-1.0)*x6910*x6914))+((r10*x6916))+(((-1.0)*r12*x6913)));
evalcond[3]=((((-1.0)*x6912*x6913))+((r00*x6915))+((r02*x6908))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x6910*x6913))+((r10*x6915))+(((-1.0)*x6909))+((r12*x6908)));
evalcond[5]=((((-1.0)*x6912*x6914))+((r00*x6916))+(((-1.0)*x6909))+(((-1.0)*r02*x6913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6917 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6917.valid){
continue;
}
CheckValue<IkReal> x6918=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6917.value)+(((1.5707963267949)*(x6918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6919=IKcos(j4);
IkReal x6920=IKsin(j4);
IkReal x6921=((1.0)*sj0);
IkReal x6922=(r11*sj5);
IkReal x6923=(r21*sj5);
IkReal x6924=(r01*sj5);
IkReal x6925=((1.0)*x6919);
IkReal x6926=((1.0)*x6920);
IkReal x6927=(cj5*x6919);
IkReal x6928=(cj5*x6920);
evalcond[0]=(((r20*x6927))+((r22*x6920))+(((-1.0)*x6923*x6925)));
evalcond[1]=(((r20*x6928))+(((-1.0)*r22*x6925))+(((-1.0)*x6923*x6926)));
evalcond[2]=(cj0+((r10*x6928))+(((-1.0)*r12*x6925))+(((-1.0)*x6922*x6926)));
evalcond[3]=((((-1.0)*x6924*x6925))+((r00*x6927))+((r02*x6920))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x6927))+((r12*x6920))+(((-1.0)*x6921))+(((-1.0)*x6922*x6925)));
evalcond[5]=((((-1.0)*r02*x6925))+(((-1.0)*x6924*x6926))+((r00*x6928))+(((-1.0)*x6921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16590284142988)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16590284142988)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16590284142988)*px))+IKsqr(((9.16590284142988)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16590284142988)*px), ((9.16590284142988)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.1091)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1091)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6929=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6929;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
j4eval[2]=IKsign(x6929);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6930=((1.0)*sj5);
IkReal x6931=((((-1.0)*r00*x6930))+(((-1.0)*cj5*r01)));
j4eval[0]=x6931;
j4eval[1]=IKsign(x6931);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6930))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6932=cj5*cj5;
IkReal x6933=((1.0)*r21);
IkReal x6934=(cj5*r20);
IkReal x6935=((((-1.0)*r02*r22))+((r01*sj5*x6934))+(((-1.0)*r00*r20*x6932))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6933))+((r01*r21*x6932)));
j4eval[0]=x6935;
j4eval[1]=IKsign(x6935);
j4eval[2]=((IKabs(((((-1.0)*cj0*sj5*x6933))+((cj0*x6934)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6936=cj5*cj5;
IkReal x6937=((1.0)*r21);
IkReal x6938=(cj5*r20);
CheckValue<IkReal> x6939=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22))+((r01*sj5*x6938))+(((-1.0)*r00*r20*x6936))+((cj5*r00*r21*sj5))+(((-1.0)*r01*x6937))+((r01*r21*x6936)))),-1);
if(!x6939.valid){
continue;
}
CheckValue<IkReal> x6940 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*sj5*x6937))+((cj0*x6938)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6939.value)))+(x6940.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6941=IKcos(j4);
IkReal x6942=IKsin(j4);
IkReal x6943=(r11*sj5);
IkReal x6944=(r21*sj5);
IkReal x6945=(r01*sj5);
IkReal x6946=((1.0)*x6941);
IkReal x6947=((1.0)*x6942);
IkReal x6948=(cj5*x6941);
IkReal x6949=(cj5*x6942);
evalcond[0]=(((r22*x6942))+((r20*x6948))+(((-1.0)*x6944*x6946)));
evalcond[1]=(((r20*x6949))+(((-1.0)*r22*x6946))+(((-1.0)*x6944*x6947)));
evalcond[2]=(cj0+((r02*x6942))+(((-1.0)*x6945*x6946))+((r00*x6948)));
evalcond[3]=((((-1.0)*x6943*x6946))+sj0+((r10*x6948))+((r12*x6942)));
evalcond[4]=((((-1.0)*x6943*x6947))+cj0+((r10*x6949))+(((-1.0)*r12*x6946)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x6945*x6947))+(((-1.0)*r02*x6946))+((r00*x6949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6950=((1.0)*sj5);
CheckValue<IkReal> x6951=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01))+(((-1.0)*r00*x6950)))),-1);
if(!x6951.valid){
continue;
}
CheckValue<IkReal> x6952 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*x6950)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6951.value)))+(x6952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6953=IKcos(j4);
IkReal x6954=IKsin(j4);
IkReal x6955=(r11*sj5);
IkReal x6956=(r21*sj5);
IkReal x6957=(r01*sj5);
IkReal x6958=((1.0)*x6953);
IkReal x6959=((1.0)*x6954);
IkReal x6960=(cj5*x6953);
IkReal x6961=(cj5*x6954);
evalcond[0]=((((-1.0)*x6956*x6958))+((r22*x6954))+((r20*x6960)));
evalcond[1]=((((-1.0)*x6956*x6959))+(((-1.0)*r22*x6958))+((r20*x6961)));
evalcond[2]=(cj0+((r00*x6960))+((r02*x6954))+(((-1.0)*x6957*x6958)));
evalcond[3]=(((r10*x6960))+sj0+(((-1.0)*x6955*x6958))+((r12*x6954)));
evalcond[4]=(((r10*x6961))+cj0+(((-1.0)*x6955*x6959))+(((-1.0)*r12*x6958)));
evalcond[5]=((((-1.0)*sj0))+((r00*x6961))+(((-1.0)*r02*x6958))+(((-1.0)*x6957*x6959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6962 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6962.valid){
continue;
}
CheckValue<IkReal> x6963=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6962.value)+(((1.5707963267949)*(x6963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6964=IKcos(j4);
IkReal x6965=IKsin(j4);
IkReal x6966=(r11*sj5);
IkReal x6967=(r21*sj5);
IkReal x6968=(r01*sj5);
IkReal x6969=((1.0)*x6964);
IkReal x6970=((1.0)*x6965);
IkReal x6971=(cj5*x6964);
IkReal x6972=(cj5*x6965);
evalcond[0]=(((r22*x6965))+(((-1.0)*x6967*x6969))+((r20*x6971)));
evalcond[1]=((((-1.0)*x6967*x6970))+(((-1.0)*r22*x6969))+((r20*x6972)));
evalcond[2]=(((r00*x6971))+cj0+(((-1.0)*x6968*x6969))+((r02*x6965)));
evalcond[3]=(sj0+(((-1.0)*x6966*x6969))+((r10*x6971))+((r12*x6965)));
evalcond[4]=(cj0+(((-1.0)*x6966*x6970))+(((-1.0)*r12*x6969))+((r10*x6972)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6969))+((r00*x6972))+(((-1.0)*x6968*x6970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16590284142988)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16590284142988)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16590284142988)*px))+IKsqr(((9.16590284142988)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16590284142988)*px), ((9.16590284142988)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-1.0)*px))+(((-0.1091)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*py))+(((0.1091)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6973=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6973;
j4eval[1]=IKsign(x6973);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6974=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6974;
j4eval[1]=IKsign(x6974);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6975=((1.0)*sj5);
IkReal x6976=((((-1.0)*cj5*r11))+(((-1.0)*r10*x6975)));
j4eval[0]=x6976;
j4eval[1]=IKsign(x6976);
j4eval[2]=((IKabs((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6975)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6977=((1.0)*sj5);
CheckValue<IkReal> x6978=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x6977)))),-1);
if(!x6978.valid){
continue;
}
CheckValue<IkReal> x6979 = IKatan2WithCheck(IkReal((((cj0*cj5*r20))+(((-1.0)*cj0*r21*x6977)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6978.value)))+(x6979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6980=IKcos(j4);
IkReal x6981=IKsin(j4);
IkReal x6982=((1.0)*sj0);
IkReal x6983=(r11*sj5);
IkReal x6984=(r21*sj5);
IkReal x6985=(r01*sj5);
IkReal x6986=((1.0)*x6980);
IkReal x6987=((1.0)*x6981);
IkReal x6988=(cj5*x6980);
IkReal x6989=(cj5*x6981);
evalcond[0]=(((r22*x6981))+(((-1.0)*x6984*x6986))+((r20*x6988)));
evalcond[1]=((((-1.0)*x6984*x6987))+((r20*x6989))+(((-1.0)*r22*x6986)));
evalcond[2]=(cj0+((r10*x6989))+(((-1.0)*r12*x6986))+(((-1.0)*x6983*x6987)));
evalcond[3]=((((-1.0)*x6985*x6986))+((r02*x6981))+((r00*x6988))+(((-1.0)*cj0)));
evalcond[4]=(((r10*x6988))+(((-1.0)*x6982))+(((-1.0)*x6983*x6986))+((r12*x6981)));
evalcond[5]=((((-1.0)*x6985*x6987))+(((-1.0)*x6982))+((r00*x6989))+(((-1.0)*r02*x6986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6990 = IKatan2WithCheck(IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x6990.valid){
continue;
}
CheckValue<IkReal> x6991=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6990.value)+(((1.5707963267949)*(x6991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6992=IKcos(j4);
IkReal x6993=IKsin(j4);
IkReal x6994=((1.0)*sj0);
IkReal x6995=(r11*sj5);
IkReal x6996=(r21*sj5);
IkReal x6997=(r01*sj5);
IkReal x6998=((1.0)*x6992);
IkReal x6999=((1.0)*x6993);
IkReal x7000=(cj5*x6992);
IkReal x7001=(cj5*x6993);
evalcond[0]=(((r20*x7000))+(((-1.0)*x6996*x6998))+((r22*x6993)));
evalcond[1]=(((r20*x7001))+(((-1.0)*r22*x6998))+(((-1.0)*x6996*x6999)));
evalcond[2]=((((-1.0)*r12*x6998))+cj0+(((-1.0)*x6995*x6999))+((r10*x7001)));
evalcond[3]=(((r02*x6993))+((r00*x7000))+(((-1.0)*x6997*x6998))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x6993))+(((-1.0)*x6995*x6998))+((r10*x7000))+(((-1.0)*x6994)));
evalcond[5]=((((-1.0)*r02*x6998))+((r00*x7001))+(((-1.0)*x6997*x6999))+(((-1.0)*x6994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7002 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7002.valid){
continue;
}
CheckValue<IkReal> x7003=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7002.value)+(((1.5707963267949)*(x7003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7004=IKcos(j4);
IkReal x7005=IKsin(j4);
IkReal x7006=((1.0)*sj0);
IkReal x7007=(r11*sj5);
IkReal x7008=(r21*sj5);
IkReal x7009=(r01*sj5);
IkReal x7010=((1.0)*x7004);
IkReal x7011=((1.0)*x7005);
IkReal x7012=(cj5*x7004);
IkReal x7013=(cj5*x7005);
evalcond[0]=((((-1.0)*x7008*x7010))+((r20*x7012))+((r22*x7005)));
evalcond[1]=((((-1.0)*r22*x7010))+(((-1.0)*x7008*x7011))+((r20*x7013)));
evalcond[2]=(cj0+(((-1.0)*r12*x7010))+((r10*x7013))+(((-1.0)*x7007*x7011)));
evalcond[3]=((((-1.0)*x7009*x7010))+((r02*x7005))+((r00*x7012))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x7005))+(((-1.0)*x7006))+((r10*x7012))+(((-1.0)*x7007*x7010)));
evalcond[5]=((((-1.0)*x7009*x7011))+(((-1.0)*x7006))+((r00*x7013))+(((-1.0)*r02*x7010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7014=(cj1*cj2);
IkReal x7015=((10000.0)*px);
IkReal x7016=(sj1*sj2);
IkReal x7017=(r00*sj5);
IkReal x7018=(cj5*r01);
IkReal x7019=((4250.0)*cj1);
CheckValue<IkReal> x7020=IKPowWithIntegerCheck(((((1091.0)*x7014))+(((-1091.0)*x7016))),-1);
if(!x7020.valid){
continue;
}
CheckValue<IkReal> x7021=IKPowWithIntegerCheck((x7014+(((-1.0)*x7016))),-1);
if(!x7021.valid){
continue;
}
if( IKabs(((x7020.value)*((((x7015*x7016))+(((-4868.0)*x7016*x7018))+(((-4868.0)*x7016*x7017))+(((4868.0)*x7014*x7018))+(((4868.0)*x7014*x7017))+((x7018*x7019))+(((-1.0)*x7014*x7015))+((x7017*x7019)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7021.value)*((x7018+x7017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7020.value)*((((x7015*x7016))+(((-4868.0)*x7016*x7018))+(((-4868.0)*x7016*x7017))+(((4868.0)*x7014*x7018))+(((4868.0)*x7014*x7017))+((x7018*x7019))+(((-1.0)*x7014*x7015))+((x7017*x7019))))))+IKsqr(((x7021.value)*((x7018+x7017))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7020.value)*((((x7015*x7016))+(((-4868.0)*x7016*x7018))+(((-4868.0)*x7016*x7017))+(((4868.0)*x7014*x7018))+(((4868.0)*x7014*x7017))+((x7018*x7019))+(((-1.0)*x7014*x7015))+((x7017*x7019))))), ((x7021.value)*((x7018+x7017))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7022=IKcos(j0);
IkReal x7023=IKsin(j0);
IkReal x7024=(cj1*cj2);
IkReal x7025=((0.0946)*cj5);
IkReal x7026=((1.0)*cj5);
IkReal x7027=((1.0)*sj5);
IkReal x7028=((0.0946)*sj5);
IkReal x7029=((0.425)*cj1);
IkReal x7030=(sj1*sj2);
IkReal x7031=((1.0)*x7030);
IkReal x7032=((0.3922)*x7023);
IkReal x7033=((0.3922)*x7022);
evalcond[0]=(((x7022*x7024))+(((-1.0)*r00*x7027))+(((-1.0)*r01*x7026))+(((-1.0)*x7022*x7031)));
evalcond[1]=((((-1.0)*r11*x7026))+(((-1.0)*r10*x7027))+((x7023*x7024))+(((-1.0)*x7023*x7031)));
evalcond[2]=(((x7024*x7033))+((r00*x7028))+((r01*x7025))+(((-1.0)*px))+((x7022*x7029))+(((-1.0)*x7030*x7033))+(((-0.1091)*x7023)));
evalcond[3]=(((r11*x7025))+((x7024*x7032))+(((0.1091)*x7022))+((r10*x7028))+((x7023*x7029))+(((-1.0)*py))+(((-1.0)*x7030*x7032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7034=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7034;
j4eval[1]=IKsign(x7034);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7035=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7035;
j4eval[1]=IKsign(x7035);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7036=((1.0)*sj0);
IkReal x7037=((1.0)*cj0);
IkReal x7038=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7038;
j4eval[1]=IKsign(x7038);
j4eval[2]=((IKabs(((((-1.0)*cj5*r00*x7037))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7036)))))+(IKabs(((((-1.0)*r02*x7037))+(((-1.0)*r12*x7036))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7040 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7040)==0){
continue;
}
IkReal x7039=pow(x7040,-0.5);
CheckValue<IkReal> x7041 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7041.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7041.value));
IkReal gconst133=((-1.0)*r21*x7039);
IkReal gconst134=(r20*x7039);
CheckValue<IkReal> x7042 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7042.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7042.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7045 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7045.valid){
continue;
}
IkReal x7043=((-1.0)*(x7045.value));
IkReal x7044=x7039;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7043;
IkReal gconst132=x7043;
IkReal gconst133=((-1.0)*r21*x7044);
IkReal gconst134=(r20*x7044);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7048 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7048.valid){
continue;
}
IkReal x7046=((-1.0)*(x7048.value));
IkReal x7047=x7039;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7046;
IkReal gconst132=x7046;
IkReal gconst133=((-1.0)*r21*x7047);
IkReal gconst134=(r20*x7047);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7051 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7051.valid){
continue;
}
IkReal x7049=((-1.0)*(x7051.value));
IkReal x7050=x7039;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7049;
IkReal gconst132=x7049;
IkReal gconst133=((-1.0)*r21*x7050);
IkReal gconst134=(r20*x7050);
IkReal x7052=((1.0)*(r22*r22));
CheckValue<IkReal> x7056=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7052))),-1);
if(!x7056.valid){
continue;
}
IkReal x7053=x7056.value;
IkReal x7054=((1.0)*x7053);
IkReal x7055=((((-2.0)*x7053*(r20*r20)*(r21*r21)))+(((-1.0)*x7052))+(((-1.0)*x7054*(r21*r21*r21*r21)))+(((-1.0)*x7054*(r20*r20*r20*r20))));
j4eval[0]=x7055;
j4eval[1]=IKsign(x7055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7057=(gconst134*r20);
IkReal x7058=(cj1*cj2);
IkReal x7059=(gconst133*r21);
IkReal x7060=(sj1*sj2);
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal((((r22*x7060))+(((-1.0)*r22*x7058)))),IkReal(((((-1.0)*x7057*x7058))+((x7057*x7060))+((x7058*x7059))+(((-1.0)*x7059*x7060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
CheckValue<IkReal> x7062=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7059*x7059)))+(((2.0)*x7057*x7059))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7057*x7057))))),-1);
if(!x7062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7061.value)+(((1.5707963267949)*(x7062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7063=IKsin(j4);
IkReal x7064=IKcos(j4);
IkReal x7065=(gconst134*r10);
IkReal x7066=(gconst133*r11);
IkReal x7067=((1.0)*cj2);
IkReal x7068=(gconst133*r01);
IkReal x7069=(gconst133*r21);
IkReal x7070=((1.0)*sj0);
IkReal x7071=(cj1*sj2);
IkReal x7072=((1.0)*x7064);
IkReal x7073=((1.0)*x7063);
IkReal x7074=(gconst134*x7064);
IkReal x7075=(gconst134*x7063);
evalcond[0]=((((-1.0)*x7069*x7073))+((r20*x7075))+(((-1.0)*r22*x7072)));
evalcond[1]=(cj0+(((-1.0)*x7066*x7073))+((x7063*x7065))+(((-1.0)*r12*x7072)));
evalcond[2]=((((-1.0)*x7070))+(((-1.0)*x7068*x7073))+((r00*x7075))+(((-1.0)*r02*x7072)));
evalcond[3]=((((-1.0)*x7069*x7072))+((r22*x7063))+((sj1*sj2))+((r20*x7074))+(((-1.0)*cj1*x7067)));
evalcond[4]=((((-1.0)*x7068*x7072))+((r00*x7074))+((r02*x7063))+(((-1.0)*cj0*x7071))+(((-1.0)*cj0*sj1*x7067)));
evalcond[5]=(((r12*x7063))+(((-1.0)*x7066*x7072))+((x7064*x7065))+(((-1.0)*x7070*x7071))+(((-1.0)*sj0*sj1*x7067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7076 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst134*r20*sj0))+(((-1.0)*gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7076.valid){
continue;
}
CheckValue<IkReal> x7077=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7076.value)+(((1.5707963267949)*(x7077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7078=IKsin(j4);
IkReal x7079=IKcos(j4);
IkReal x7080=(gconst134*r10);
IkReal x7081=(gconst133*r11);
IkReal x7082=((1.0)*cj2);
IkReal x7083=(gconst133*r01);
IkReal x7084=(gconst133*r21);
IkReal x7085=((1.0)*sj0);
IkReal x7086=(cj1*sj2);
IkReal x7087=((1.0)*x7079);
IkReal x7088=((1.0)*x7078);
IkReal x7089=(gconst134*x7079);
IkReal x7090=(gconst134*x7078);
evalcond[0]=((((-1.0)*x7084*x7088))+(((-1.0)*r22*x7087))+((r20*x7090)));
evalcond[1]=(cj0+(((-1.0)*r12*x7087))+((x7078*x7080))+(((-1.0)*x7081*x7088)));
evalcond[2]=(((r00*x7090))+(((-1.0)*x7083*x7088))+(((-1.0)*r02*x7087))+(((-1.0)*x7085)));
evalcond[3]=((((-1.0)*x7084*x7087))+((r22*x7078))+(((-1.0)*cj1*x7082))+((sj1*sj2))+((r20*x7089)));
evalcond[4]=((((-1.0)*cj0*x7086))+((r00*x7089))+(((-1.0)*cj0*sj1*x7082))+(((-1.0)*x7083*x7087))+((r02*x7078)));
evalcond[5]=((((-1.0)*sj0*sj1*x7082))+((x7079*x7080))+(((-1.0)*x7085*x7086))+((r12*x7078))+(((-1.0)*x7081*x7087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7091=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7091.valid){
continue;
}
CheckValue<IkReal> x7092 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7091.value)))+(x7092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7093=IKsin(j4);
IkReal x7094=IKcos(j4);
IkReal x7095=(gconst134*r10);
IkReal x7096=(gconst133*r11);
IkReal x7097=((1.0)*cj2);
IkReal x7098=(gconst133*r01);
IkReal x7099=(gconst133*r21);
IkReal x7100=((1.0)*sj0);
IkReal x7101=(cj1*sj2);
IkReal x7102=((1.0)*x7094);
IkReal x7103=((1.0)*x7093);
IkReal x7104=(gconst134*x7094);
IkReal x7105=(gconst134*x7093);
evalcond[0]=((((-1.0)*r22*x7102))+(((-1.0)*x7099*x7103))+((r20*x7105)));
evalcond[1]=(cj0+(((-1.0)*r12*x7102))+((x7093*x7095))+(((-1.0)*x7096*x7103)));
evalcond[2]=((((-1.0)*x7100))+(((-1.0)*r02*x7102))+(((-1.0)*x7098*x7103))+((r00*x7105)));
evalcond[3]=((((-1.0)*cj1*x7097))+((r22*x7093))+((sj1*sj2))+(((-1.0)*x7099*x7102))+((r20*x7104)));
evalcond[4]=((((-1.0)*cj0*x7101))+(((-1.0)*cj0*sj1*x7097))+((r02*x7093))+(((-1.0)*x7098*x7102))+((r00*x7104)));
evalcond[5]=(((r12*x7093))+(((-1.0)*x7100*x7101))+(((-1.0)*sj0*sj1*x7097))+((x7094*x7095))+(((-1.0)*x7096*x7102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7107 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7107)==0){
continue;
}
IkReal x7106=pow(x7107,-0.5);
CheckValue<IkReal> x7108 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7108.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7108.value))));
IkReal gconst136=((1.0)*r21*x7106);
IkReal gconst137=((-1.0)*r20*x7106);
CheckValue<IkReal> x7109 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7109.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7109.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7112 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7112.valid){
continue;
}
IkReal x7110=((1.0)*(x7112.value));
IkReal x7111=x7106;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7110)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7110)));
IkReal gconst136=((1.0)*r21*x7111);
IkReal gconst137=((-1.0)*r20*x7111);
IkReal x7113=r22*r22;
IkReal x7114=((1.0)*x7113);
CheckValue<IkReal> x7118=IKPowWithIntegerCheck(((-1.0)+x7113),-1);
if(!x7118.valid){
continue;
}
IkReal x7115=x7118.value;
if((((1.0)+(((-1.0)*x7114)))) < -0.00001)
continue;
IkReal x7116=IKsqrt(((1.0)+(((-1.0)*x7114))));
IkReal x7117=(cj0*x7115*x7116);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x7117+(((-1.0)*x7114*x7117))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7121 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7121.valid){
continue;
}
IkReal x7119=((1.0)*(x7121.value));
IkReal x7120=x7106;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7119)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7119)));
IkReal gconst136=((1.0)*r21*x7120);
IkReal gconst137=((-1.0)*r20*x7120);
IkReal x7122=r22*r22;
IkReal x7123=((1.0)*x7122);
CheckValue<IkReal> x7127=IKPowWithIntegerCheck(((-1.0)+x7122),-1);
if(!x7127.valid){
continue;
}
IkReal x7124=x7127.value;
if((((1.0)+(((-1.0)*x7123)))) < -0.00001)
continue;
IkReal x7125=IKsqrt(((1.0)+(((-1.0)*x7123))));
IkReal x7126=(sj0*x7124*x7125);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x7126+(((-1.0)*x7123*x7126))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7130 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7130.valid){
continue;
}
IkReal x7128=((1.0)*(x7130.value));
IkReal x7129=x7106;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7128)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7128)));
IkReal gconst136=((1.0)*r21*x7129);
IkReal gconst137=((-1.0)*r20*x7129);
IkReal x7131=r22*r22;
IkReal x7132=(r12*sj0);
IkReal x7133=(cj0*r02);
CheckValue<IkReal> x7137=IKPowWithIntegerCheck(((-1.0)+x7131),-1);
if(!x7137.valid){
continue;
}
IkReal x7134=x7137.value;
if((((1.0)+(((-1.0)*x7131)))) < -0.00001)
continue;
IkReal x7135=IKsqrt(((1.0)+(((-1.0)*x7131))));
IkReal x7136=(r22*x7134*x7135);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7132))+(((-1.0)*x7133)))))+(IKabs((((x7133*x7136))+((x7132*x7136))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7138=((1.0)*sj0);
IkReal x7139=((1.0)*cj0);
CheckValue<IkReal> x7140 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7138))+(((-1.0)*r02*x7139)))),IkReal((((gconst136*r11*sj0))+(((-1.0)*gconst137*r10*x7138))+((cj0*gconst136*r01))+(((-1.0)*gconst137*r00*x7139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7140.valid){
continue;
}
CheckValue<IkReal> x7141=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7140.value)+(((1.5707963267949)*(x7141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7142=IKsin(j4);
IkReal x7143=IKcos(j4);
IkReal x7144=(gconst136*r01);
IkReal x7145=(gconst137*r10);
IkReal x7146=((1.0)*cj2);
IkReal x7147=(gconst136*r21);
IkReal x7148=(gconst136*r11);
IkReal x7149=((1.0)*sj0);
IkReal x7150=(cj1*sj2);
IkReal x7151=((1.0)*x7143);
IkReal x7152=((1.0)*x7142);
IkReal x7153=(gconst137*x7143);
IkReal x7154=(gconst137*x7142);
evalcond[0]=((((-1.0)*r22*x7151))+((r20*x7154))+(((-1.0)*x7147*x7152)));
evalcond[1]=((((-1.0)*r12*x7151))+cj0+(((-1.0)*x7148*x7152))+((x7142*x7145)));
evalcond[2]=(((r00*x7154))+(((-1.0)*x7149))+(((-1.0)*x7144*x7152))+(((-1.0)*r02*x7151)));
evalcond[3]=(((sj1*sj2))+((r20*x7153))+((r22*x7142))+(((-1.0)*x7147*x7151))+(((-1.0)*cj1*x7146)));
evalcond[4]=((((-1.0)*cj0*sj1*x7146))+(((-1.0)*cj0*x7150))+((r00*x7153))+((r02*x7142))+(((-1.0)*x7144*x7151)));
evalcond[5]=((((-1.0)*x7148*x7151))+(((-1.0)*x7149*x7150))+((r12*x7142))+(((-1.0)*sj0*sj1*x7146))+((x7143*x7145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7155 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7155.valid){
continue;
}
CheckValue<IkReal> x7156=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7155.value)+(((1.5707963267949)*(x7156.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7157=IKsin(j4);
IkReal x7158=IKcos(j4);
IkReal x7159=(gconst136*r01);
IkReal x7160=(gconst137*r10);
IkReal x7161=((1.0)*cj2);
IkReal x7162=(gconst136*r21);
IkReal x7163=(gconst136*r11);
IkReal x7164=((1.0)*sj0);
IkReal x7165=(cj1*sj2);
IkReal x7166=((1.0)*x7158);
IkReal x7167=((1.0)*x7157);
IkReal x7168=(gconst137*x7158);
IkReal x7169=(gconst137*x7157);
evalcond[0]=((((-1.0)*r22*x7166))+((r20*x7169))+(((-1.0)*x7162*x7167)));
evalcond[1]=(cj0+(((-1.0)*x7163*x7167))+((x7157*x7160))+(((-1.0)*r12*x7166)));
evalcond[2]=((((-1.0)*r02*x7166))+(((-1.0)*x7159*x7167))+((r00*x7169))+(((-1.0)*x7164)));
evalcond[3]=((((-1.0)*cj1*x7161))+((r22*x7157))+((r20*x7168))+((sj1*sj2))+(((-1.0)*x7162*x7166)));
evalcond[4]=(((r02*x7157))+(((-1.0)*x7159*x7166))+(((-1.0)*cj0*sj1*x7161))+((r00*x7168))+(((-1.0)*cj0*x7165)));
evalcond[5]=((((-1.0)*x7163*x7166))+(((-1.0)*x7164*x7165))+(((-1.0)*sj0*sj1*x7161))+((x7158*x7160))+((r12*x7157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7170 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst136*r21))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7170.valid){
continue;
}
CheckValue<IkReal> x7171=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7170.value)+(((1.5707963267949)*(x7171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7172=IKsin(j4);
IkReal x7173=IKcos(j4);
IkReal x7174=(gconst136*r01);
IkReal x7175=(gconst137*r10);
IkReal x7176=((1.0)*cj2);
IkReal x7177=(gconst136*r21);
IkReal x7178=(gconst136*r11);
IkReal x7179=((1.0)*sj0);
IkReal x7180=(cj1*sj2);
IkReal x7181=((1.0)*x7173);
IkReal x7182=((1.0)*x7172);
IkReal x7183=(gconst137*x7173);
IkReal x7184=(gconst137*x7172);
evalcond[0]=((((-1.0)*x7177*x7182))+((r20*x7184))+(((-1.0)*r22*x7181)));
evalcond[1]=((((-1.0)*x7178*x7182))+cj0+((x7172*x7175))+(((-1.0)*r12*x7181)));
evalcond[2]=((((-1.0)*x7179))+((r00*x7184))+(((-1.0)*x7174*x7182))+(((-1.0)*r02*x7181)));
evalcond[3]=((((-1.0)*x7177*x7181))+((r20*x7183))+((sj1*sj2))+(((-1.0)*cj1*x7176))+((r22*x7172)));
evalcond[4]=((((-1.0)*cj0*x7180))+((r00*x7183))+(((-1.0)*x7174*x7181))+((r02*x7172))+(((-1.0)*cj0*sj1*x7176)));
evalcond[5]=((((-1.0)*x7178*x7181))+(((-1.0)*x7179*x7180))+((x7173*x7175))+(((-1.0)*sj0*sj1*x7176))+((r12*x7172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7186 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7186)==0){
continue;
}
IkReal x7185=pow(x7186,-0.5);
CheckValue<IkReal> x7187 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7187.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7187.value));
IkReal gconst139=((-1.0)*r11*x7185);
IkReal gconst140=(r10*x7185);
CheckValue<IkReal> x7188 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7188.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7188.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7191 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7191.valid){
continue;
}
IkReal x7189=((-1.0)*(x7191.value));
IkReal x7190=x7185;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7189;
IkReal gconst138=x7189;
IkReal gconst139=((-1.0)*r11*x7190);
IkReal gconst140=(r10*x7190);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7192=((1.0)*sj0);
IkReal x7193=((1.0)*cj0);
CheckValue<IkReal> x7194=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7194.valid){
continue;
}
CheckValue<IkReal> x7195 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7192))+(((-1.0)*r02*x7193)))),IkReal((((gconst139*r11*sj0))+((cj0*gconst139*r01))+(((-1.0)*gconst140*r00*x7193))+(((-1.0)*gconst140*r10*x7192)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7194.value)))+(x7195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7196=IKsin(j4);
IkReal x7197=IKcos(j4);
IkReal x7198=(gconst140*r10);
IkReal x7199=((1.0)*cj2);
IkReal x7200=((1.0)*sj0);
IkReal x7201=(cj1*sj2);
IkReal x7202=((1.0)*x7197);
IkReal x7203=(gconst140*x7197);
IkReal x7204=(gconst140*x7196);
IkReal x7205=((1.0)*gconst139*x7196);
evalcond[0]=((((-1.0)*r21*x7205))+((r20*x7204))+(((-1.0)*r22*x7202)));
evalcond[1]=(cj0+((x7196*x7198))+(((-1.0)*r12*x7202))+(((-1.0)*r11*x7205)));
evalcond[2]=(((r00*x7204))+(((-1.0)*r01*x7205))+(((-1.0)*x7200))+(((-1.0)*r02*x7202)));
evalcond[3]=(((sj1*sj2))+((r20*x7203))+((r22*x7196))+(((-1.0)*cj1*x7199))+(((-1.0)*gconst139*r21*x7202)));
evalcond[4]=((((-1.0)*gconst139*r01*x7202))+(((-1.0)*cj0*sj1*x7199))+((r00*x7203))+(((-1.0)*cj0*x7201))+((r02*x7196)));
evalcond[5]=(((r12*x7196))+((x7197*x7198))+(((-1.0)*x7200*x7201))+(((-1.0)*gconst139*r11*x7202))+(((-1.0)*sj0*sj1*x7199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7206=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x7206.valid){
continue;
}
CheckValue<IkReal> x7207 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst139*r21))+((cj0*gconst140*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7206.value)))+(x7207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7208=IKsin(j4);
IkReal x7209=IKcos(j4);
IkReal x7210=(gconst140*r10);
IkReal x7211=((1.0)*cj2);
IkReal x7212=((1.0)*sj0);
IkReal x7213=(cj1*sj2);
IkReal x7214=((1.0)*x7209);
IkReal x7215=(gconst140*x7209);
IkReal x7216=(gconst140*x7208);
IkReal x7217=((1.0)*gconst139*x7208);
evalcond[0]=((((-1.0)*r21*x7217))+((r20*x7216))+(((-1.0)*r22*x7214)));
evalcond[1]=(cj0+((x7208*x7210))+(((-1.0)*r11*x7217))+(((-1.0)*r12*x7214)));
evalcond[2]=(((r00*x7216))+(((-1.0)*r01*x7217))+(((-1.0)*x7212))+(((-1.0)*r02*x7214)));
evalcond[3]=((((-1.0)*cj1*x7211))+((sj1*sj2))+(((-1.0)*gconst139*r21*x7214))+((r22*x7208))+((r20*x7215)));
evalcond[4]=(((r00*x7215))+(((-1.0)*cj0*x7213))+(((-1.0)*gconst139*r01*x7214))+(((-1.0)*cj0*sj1*x7211))+((r02*x7208)));
evalcond[5]=((((-1.0)*x7212*x7213))+((x7209*x7210))+(((-1.0)*sj0*sj1*x7211))+((r12*x7208))+(((-1.0)*gconst139*r11*x7214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7219 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7219)==0){
continue;
}
IkReal x7218=pow(x7219,-0.5);
CheckValue<IkReal> x7220 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7220.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7220.value))));
IkReal gconst142=((1.0)*r11*x7218);
IkReal gconst143=((-1.0)*r10*x7218);
CheckValue<IkReal> x7221 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7221.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7221.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7224 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7224.valid){
continue;
}
IkReal x7222=((1.0)*(x7224.value));
IkReal x7223=x7218;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7222)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7222)));
IkReal gconst142=((1.0)*r11*x7223);
IkReal gconst143=((-1.0)*r10*x7223);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7227 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7227.valid){
continue;
}
IkReal x7225=((1.0)*(x7227.value));
IkReal x7226=x7218;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7225)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7225)));
IkReal gconst142=((1.0)*r11*x7226);
IkReal gconst143=((-1.0)*r10*x7226);
IkReal x7228=r12*r12;
IkReal x7229=((1.0)*sj0);
IkReal x7230=(cj0*r02);
IkReal x7231=x7218;
j4eval[0]=((IKabs(((((-1.0)*r12*x7229))+(((-1.0)*x7230)))))+(IKabs((((sj0*x7228*x7231))+(((-1.0)*x7229*x7231))+((r12*x7230*x7231))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7234 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7234.valid){
continue;
}
IkReal x7232=((1.0)*(x7234.value));
IkReal x7233=x7218;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7232)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7232)));
IkReal gconst142=((1.0)*r11*x7233);
IkReal gconst143=((-1.0)*r10*x7233);
IkReal x7235=r12*r12;
IkReal x7236=((1.0)+(((-1.0)*x7235)));
IkReal x7237=(r22*sj1*sj2);
IkReal x7238=(cj1*cj2*r22);
CheckValue<IkReal> x7245=IKPowWithIntegerCheck(x7236,-1);
if(!x7245.valid){
continue;
}
IkReal x7239=x7245.value;
CheckValue<IkReal> x7246=IKPowWithIntegerCheck(((-1.0)+x7235),-1);
if(!x7246.valid){
continue;
}
IkReal x7240=x7246.value;
IkReal x7241=((1.0)*x7239);
if((x7236) < -0.00001)
continue;
IkReal x7242=IKsqrt(x7236);
IkReal x7243=(r12*x7240*x7242);
IkReal x7244=((((-1.0)*x7241*(r10*r10)*(r20*r20)))+(((-1.0)*x7241*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x7239))+(((-1.0)*(r22*r22))));
j4eval[0]=x7244;
j4eval[1]=((IKabs(((((-1.0)*x7237*x7243))+((x7238*x7243)))))+(IKabs((x7237+(((-1.0)*x7238))))));
j4eval[2]=IKsign(x7244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7247=(gconst143*r20);
IkReal x7248=(sj1*sj2);
IkReal x7249=(cj1*cj2);
IkReal x7250=(gconst142*r21);
CheckValue<IkReal> x7251 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7249))+((r22*x7248)))),IkReal(((((-1.0)*x7247*x7249))+((x7249*x7250))+((x7247*x7248))+(((-1.0)*x7248*x7250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7251.valid){
continue;
}
CheckValue<IkReal> x7252=IKPowWithIntegerCheck(IKsign(((((2.0)*x7247*x7250))+(((-1.0)*(x7247*x7247)))+(((-1.0)*(x7250*x7250)))+(((-1.0)*(r22*r22))))),-1);
if(!x7252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7251.value)+(((1.5707963267949)*(x7252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7253=IKsin(j4);
IkReal x7254=IKcos(j4);
IkReal x7255=(gconst143*r00);
IkReal x7256=(gconst142*r21);
IkReal x7257=((1.0)*cj2);
IkReal x7258=((1.0)*sj0);
IkReal x7259=(gconst142*r11);
IkReal x7260=(gconst142*r01);
IkReal x7261=(cj1*sj2);
IkReal x7262=((1.0)*x7254);
IkReal x7263=((1.0)*x7253);
IkReal x7264=(gconst143*x7254);
IkReal x7265=(gconst143*x7253);
evalcond[0]=((((-1.0)*r22*x7262))+(((-1.0)*x7256*x7263))+((r20*x7265)));
evalcond[1]=(cj0+(((-1.0)*x7259*x7263))+((r10*x7265))+(((-1.0)*r12*x7262)));
evalcond[2]=((((-1.0)*x7258))+(((-1.0)*x7260*x7263))+(((-1.0)*r02*x7262))+((x7253*x7255)));
evalcond[3]=(((r22*x7253))+((sj1*sj2))+(((-1.0)*x7256*x7262))+(((-1.0)*cj1*x7257))+((r20*x7264)));
evalcond[4]=(((r02*x7253))+(((-1.0)*x7260*x7262))+(((-1.0)*cj0*sj1*x7257))+(((-1.0)*cj0*x7261))+((x7254*x7255)));
evalcond[5]=((((-1.0)*x7258*x7261))+((r12*x7253))+(((-1.0)*x7259*x7262))+((r10*x7264))+(((-1.0)*sj0*sj1*x7257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7266=((1.0)*sj0);
IkReal x7267=((1.0)*cj0);
CheckValue<IkReal> x7268=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7268.valid){
continue;
}
CheckValue<IkReal> x7269 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7266))+(((-1.0)*r02*x7267)))),IkReal(((((-1.0)*gconst143*r00*x7267))+((cj0*gconst142*r01))+(((-1.0)*gconst143*r10*x7266))+((gconst142*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7268.value)))+(x7269.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7270=IKsin(j4);
IkReal x7271=IKcos(j4);
IkReal x7272=(gconst143*r00);
IkReal x7273=(gconst142*r21);
IkReal x7274=((1.0)*cj2);
IkReal x7275=((1.0)*sj0);
IkReal x7276=(gconst142*r11);
IkReal x7277=(gconst142*r01);
IkReal x7278=(cj1*sj2);
IkReal x7279=((1.0)*x7271);
IkReal x7280=((1.0)*x7270);
IkReal x7281=(gconst143*x7271);
IkReal x7282=(gconst143*x7270);
evalcond[0]=((((-1.0)*x7273*x7280))+(((-1.0)*r22*x7279))+((r20*x7282)));
evalcond[1]=(cj0+(((-1.0)*r12*x7279))+(((-1.0)*x7276*x7280))+((r10*x7282)));
evalcond[2]=((((-1.0)*x7277*x7280))+(((-1.0)*r02*x7279))+((x7270*x7272))+(((-1.0)*x7275)));
evalcond[3]=((((-1.0)*x7273*x7279))+((sj1*sj2))+((r20*x7281))+(((-1.0)*cj1*x7274))+((r22*x7270)));
evalcond[4]=(((x7271*x7272))+(((-1.0)*cj0*x7278))+(((-1.0)*x7277*x7279))+(((-1.0)*cj0*sj1*x7274))+((r02*x7270)));
evalcond[5]=((((-1.0)*sj0*sj1*x7274))+((r12*x7270))+((r10*x7281))+(((-1.0)*x7276*x7279))+(((-1.0)*x7275*x7278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7283=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7283.valid){
continue;
}
CheckValue<IkReal> x7284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst142*r21))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7283.value)))+(x7284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7285=IKsin(j4);
IkReal x7286=IKcos(j4);
IkReal x7287=(gconst143*r00);
IkReal x7288=(gconst142*r21);
IkReal x7289=((1.0)*cj2);
IkReal x7290=((1.0)*sj0);
IkReal x7291=(gconst142*r11);
IkReal x7292=(gconst142*r01);
IkReal x7293=(cj1*sj2);
IkReal x7294=((1.0)*x7286);
IkReal x7295=((1.0)*x7285);
IkReal x7296=(gconst143*x7286);
IkReal x7297=(gconst143*x7285);
evalcond[0]=((((-1.0)*r22*x7294))+(((-1.0)*x7288*x7295))+((r20*x7297)));
evalcond[1]=((((-1.0)*x7291*x7295))+cj0+((r10*x7297))+(((-1.0)*r12*x7294)));
evalcond[2]=((((-1.0)*x7290))+((x7285*x7287))+(((-1.0)*r02*x7294))+(((-1.0)*x7292*x7295)));
evalcond[3]=((((-1.0)*cj1*x7289))+((r22*x7285))+(((-1.0)*x7288*x7294))+((sj1*sj2))+((r20*x7296)));
evalcond[4]=(((r02*x7285))+((x7286*x7287))+(((-1.0)*cj0*x7293))+(((-1.0)*x7292*x7294))+(((-1.0)*cj0*sj1*x7289)));
evalcond[5]=((((-1.0)*x7291*x7294))+(((-1.0)*x7290*x7293))+((r12*x7285))+((r10*x7296))+(((-1.0)*sj0*sj1*x7289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7298=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7298;
j4eval[1]=IKsign(x7298);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7299=((1.0)*sj5);
IkReal x7300=((((-1.0)*r20*x7299))+(((-1.0)*cj5*r21)));
j4eval[0]=x7300;
j4eval[1]=((IKabs(((((-1.0)*r01*x7299))+((cj5*r00)))))+(IKabs(r02)));
j4eval[2]=IKsign(x7300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7301=(sj1*sj2);
IkReal x7302=(cj1*cj2);
IkReal x7303=(r11*sj5);
IkReal x7304=(cj5*r10);
IkReal x7305=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7305;
j4eval[1]=IKsign(x7305);
j4eval[2]=((IKabs((((x7301*x7304))+((x7302*x7303))+(((-1.0)*x7302*x7304))+(((-1.0)*x7301*x7303)))))+(IKabs((((r12*x7302))+(((-1.0)*r12*x7301))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7306=(sj1*sj2);
IkReal x7307=(cj1*cj2);
IkReal x7308=(cj5*r10);
IkReal x7309=(r11*sj5);
CheckValue<IkReal> x7310 = IKatan2WithCheck(IkReal(((((-1.0)*x7307*x7308))+(((-1.0)*x7306*x7309))+((x7307*x7309))+((x7306*x7308)))),IkReal((((r12*x7307))+(((-1.0)*r12*x7306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7310.valid){
continue;
}
CheckValue<IkReal> x7311=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7310.value)+(((1.5707963267949)*(x7311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7312=IKcos(j4);
IkReal x7313=IKsin(j4);
IkReal x7314=(cj5*r10);
IkReal x7315=((1.0)*cj1);
IkReal x7316=((1.0)*x7312);
IkReal x7317=(cj5*x7313);
IkReal x7318=(cj5*x7312);
IkReal x7319=((1.0)*sj5*x7313);
evalcond[0]=(((r12*x7313))+((x7312*x7314))+(((-1.0)*r11*sj5*x7316)));
evalcond[1]=((((-1.0)*r21*x7319))+((r20*x7317))+(((-1.0)*r22*x7316)));
evalcond[2]=((((-1.0)*r01*x7319))+((r00*x7317))+(((-1.0)*r02*x7316)));
evalcond[3]=((1.0)+((x7313*x7314))+(((-1.0)*r11*x7319))+(((-1.0)*r12*x7316)));
evalcond[4]=((((-1.0)*cj2*x7315))+((r22*x7313))+((sj1*sj2))+((r20*x7318))+(((-1.0)*r21*sj5*x7316)));
evalcond[5]=(((r02*x7313))+(((-1.0)*r01*sj5*x7316))+(((-1.0)*sj2*x7315))+(((-1.0)*cj2*sj1))+((r00*x7318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7320=((1.0)*sj5);
CheckValue<IkReal> x7321=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7320))+(((-1.0)*cj5*r21)))),-1);
if(!x7321.valid){
continue;
}
CheckValue<IkReal> x7322 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7320))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7322.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7321.value)))+(x7322.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7323=IKcos(j4);
IkReal x7324=IKsin(j4);
IkReal x7325=(cj5*r10);
IkReal x7326=((1.0)*cj1);
IkReal x7327=((1.0)*x7323);
IkReal x7328=(cj5*x7324);
IkReal x7329=(cj5*x7323);
IkReal x7330=((1.0)*sj5*x7324);
evalcond[0]=((((-1.0)*r11*sj5*x7327))+((x7323*x7325))+((r12*x7324)));
evalcond[1]=((((-1.0)*r22*x7327))+(((-1.0)*r21*x7330))+((r20*x7328)));
evalcond[2]=(((r00*x7328))+(((-1.0)*r01*x7330))+(((-1.0)*r02*x7327)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7330))+(((-1.0)*r12*x7327))+((x7324*x7325)));
evalcond[4]=((((-1.0)*cj2*x7326))+((r22*x7324))+((sj1*sj2))+((r20*x7329))+(((-1.0)*r21*sj5*x7327)));
evalcond[5]=((((-1.0)*sj2*x7326))+(((-1.0)*cj2*sj1))+((r00*x7329))+(((-1.0)*r01*sj5*x7327))+((r02*x7324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7331=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7331.valid){
continue;
}
CheckValue<IkReal> x7332 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7331.value)))+(x7332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7333=IKcos(j4);
IkReal x7334=IKsin(j4);
IkReal x7335=(cj5*r10);
IkReal x7336=((1.0)*cj1);
IkReal x7337=((1.0)*x7333);
IkReal x7338=(cj5*x7334);
IkReal x7339=(cj5*x7333);
IkReal x7340=((1.0)*sj5*x7334);
evalcond[0]=(((r12*x7334))+((x7333*x7335))+(((-1.0)*r11*sj5*x7337)));
evalcond[1]=(((r20*x7338))+(((-1.0)*r22*x7337))+(((-1.0)*r21*x7340)));
evalcond[2]=((((-1.0)*r02*x7337))+(((-1.0)*r01*x7340))+((r00*x7338)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7340))+(((-1.0)*r12*x7337))+((x7334*x7335)));
evalcond[4]=((((-1.0)*cj2*x7336))+((r22*x7334))+(((-1.0)*r21*sj5*x7337))+((sj1*sj2))+((r20*x7339)));
evalcond[5]=((((-1.0)*r01*sj5*x7337))+((r02*x7334))+(((-1.0)*sj2*x7336))+(((-1.0)*cj2*sj1))+((r00*x7339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7341=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7341;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7342=((1.0)*sj5);
IkReal x7343=((((-1.0)*r00*x7342))+(((-1.0)*cj5*r01)));
j4eval[0]=x7343;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x7342))))));
j4eval[2]=IKsign(x7343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7344=cj5*cj5;
IkReal x7345=r11*r11;
IkReal x7346=(r11*sj5);
IkReal x7347=(cj5*r10);
IkReal x7348=(x7345+(r12*r12)+((x7344*(r10*r10)))+(((-1.0)*x7344*x7345))+(((-2.0)*x7346*x7347)));
j4eval[0]=x7348;
j4eval[1]=IKsign(x7348);
j4eval[2]=((IKabs(r12))+(IKabs((x7347+(((-1.0)*x7346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7349=cj5*cj5;
IkReal x7350=r11*r11;
IkReal x7351=(cj5*r10);
IkReal x7352=(r11*sj5);
CheckValue<IkReal> x7353=IKPowWithIntegerCheck(IKsign((x7350+(r12*r12)+(((-1.0)*x7349*x7350))+(((-2.0)*x7351*x7352))+((x7349*(r10*r10))))),-1);
if(!x7353.valid){
continue;
}
CheckValue<IkReal> x7354 = IKatan2WithCheck(IkReal((x7351+(((-1.0)*x7352)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7353.value)))+(x7354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7355=IKcos(j4);
IkReal x7356=IKsin(j4);
IkReal x7357=(cj5*r10);
IkReal x7358=((1.0)*x7355);
IkReal x7359=(cj5*x7356);
IkReal x7360=(cj5*x7355);
IkReal x7361=((1.0)*sj5*x7356);
evalcond[0]=((((-1.0)*r11*sj5*x7358))+((r12*x7356))+((x7355*x7357)));
evalcond[1]=((((-1.0)*r22*x7358))+(((-1.0)*r21*x7361))+((r20*x7359)));
evalcond[2]=(((r00*x7359))+(((-1.0)*r02*x7358))+(((-1.0)*r01*x7361)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7358))+((x7356*x7357))+(((-1.0)*r11*x7361)));
evalcond[4]=(((r00*x7360))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*sj5*x7358))+((r02*x7356)));
evalcond[5]=(((r20*x7360))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x7358))+((r22*x7356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7362=((1.0)*sj5);
CheckValue<IkReal> x7363 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7362)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7363.valid){
continue;
}
CheckValue<IkReal> x7364=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7362))+(((-1.0)*cj5*r01)))),-1);
if(!x7364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7363.value)+(((1.5707963267949)*(x7364.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7365=IKcos(j4);
IkReal x7366=IKsin(j4);
IkReal x7367=(cj5*r10);
IkReal x7368=((1.0)*x7365);
IkReal x7369=(cj5*x7366);
IkReal x7370=(cj5*x7365);
IkReal x7371=((1.0)*sj5*x7366);
evalcond[0]=(((r12*x7366))+(((-1.0)*r11*sj5*x7368))+((x7365*x7367)));
evalcond[1]=(((r20*x7369))+(((-1.0)*r22*x7368))+(((-1.0)*r21*x7371)));
evalcond[2]=(((r00*x7369))+(((-1.0)*r01*x7371))+(((-1.0)*r02*x7368)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x7371))+(((-1.0)*r12*x7368))+((x7366*x7367)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x7370))+((r02*x7366))+(((-1.0)*r01*sj5*x7368)));
evalcond[5]=((((-1.0)*r21*sj5*x7368))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7370))+((r22*x7366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7372=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7372.valid){
continue;
}
CheckValue<IkReal> x7373 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7372.value)))+(x7373.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7374=IKcos(j4);
IkReal x7375=IKsin(j4);
IkReal x7376=(cj5*r10);
IkReal x7377=((1.0)*x7374);
IkReal x7378=(cj5*x7375);
IkReal x7379=(cj5*x7374);
IkReal x7380=((1.0)*sj5*x7375);
evalcond[0]=((((-1.0)*r11*sj5*x7377))+((r12*x7375))+((x7374*x7376)));
evalcond[1]=((((-1.0)*r22*x7377))+((r20*x7378))+(((-1.0)*r21*x7380)));
evalcond[2]=(((r00*x7378))+(((-1.0)*r01*x7380))+(((-1.0)*r02*x7377)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7377))+((x7375*x7376))+(((-1.0)*r11*x7380)));
evalcond[4]=(((r02*x7375))+((cj2*sj1))+((cj1*sj2))+((r00*x7379))+(((-1.0)*r01*sj5*x7377)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7379))+((r22*x7375))+(((-1.0)*r21*sj5*x7377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7382 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7382)==0){
continue;
}
IkReal x7381=pow(x7382,-0.5);
CheckValue<IkReal> x7383 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7383.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7383.value));
IkReal gconst145=((-1.0)*r01*x7381);
IkReal gconst146=(r00*x7381);
CheckValue<IkReal> x7384 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7384.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7384.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7387 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7387.valid){
continue;
}
IkReal x7385=((-1.0)*(x7387.value));
IkReal x7386=x7381;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x7385;
IkReal gconst144=x7385;
IkReal gconst145=((-1.0)*r01*x7386);
IkReal gconst146=(r00*x7386);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7388=((1.0)*sj0);
IkReal x7389=((1.0)*cj0);
CheckValue<IkReal> x7390=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x7390.valid){
continue;
}
CheckValue<IkReal> x7391 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7389))+(((-1.0)*r12*x7388)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*gconst146*r10*x7388))+(((-1.0)*gconst146*r00*x7389))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7390.value)))+(x7391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7392=IKsin(j4);
IkReal x7393=IKcos(j4);
IkReal x7394=(gconst145*r11);
IkReal x7395=((1.0)*cj2);
IkReal x7396=(gconst145*r01);
IkReal x7397=(gconst145*r21);
IkReal x7398=((1.0)*sj0);
IkReal x7399=(cj1*sj2);
IkReal x7400=((1.0)*x7393);
IkReal x7401=(gconst146*x7393);
IkReal x7402=(gconst146*x7392);
IkReal x7403=((1.0)*x7392);
evalcond[0]=(((r20*x7402))+(((-1.0)*x7397*x7403))+(((-1.0)*r22*x7400)));
evalcond[1]=((((-1.0)*x7394*x7403))+(((-1.0)*r12*x7400))+cj0+((r10*x7402)));
evalcond[2]=((((-1.0)*x7396*x7403))+((r00*x7402))+(((-1.0)*x7398))+(((-1.0)*r02*x7400)));
evalcond[3]=(((r20*x7401))+(((-1.0)*x7397*x7400))+((r22*x7392))+((sj1*sj2))+(((-1.0)*cj1*x7395)));
evalcond[4]=((((-1.0)*cj0*sj1*x7395))+((r02*x7392))+(((-1.0)*x7396*x7400))+((r00*x7401))+(((-1.0)*cj0*x7399)));
evalcond[5]=((((-1.0)*x7394*x7400))+(((-1.0)*x7398*x7399))+((r12*x7392))+((r10*x7401))+(((-1.0)*sj0*sj1*x7395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst146*r20*sj0))+(((-1.0)*gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7404.valid){
continue;
}
CheckValue<IkReal> x7405=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x7405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7404.value)+(((1.5707963267949)*(x7405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7406=IKsin(j4);
IkReal x7407=IKcos(j4);
IkReal x7408=(gconst145*r11);
IkReal x7409=((1.0)*cj2);
IkReal x7410=(gconst145*r01);
IkReal x7411=(gconst145*r21);
IkReal x7412=((1.0)*sj0);
IkReal x7413=(cj1*sj2);
IkReal x7414=((1.0)*x7407);
IkReal x7415=(gconst146*x7407);
IkReal x7416=(gconst146*x7406);
IkReal x7417=((1.0)*x7406);
evalcond[0]=(((r20*x7416))+(((-1.0)*x7411*x7417))+(((-1.0)*r22*x7414)));
evalcond[1]=((((-1.0)*r12*x7414))+cj0+(((-1.0)*x7408*x7417))+((r10*x7416)));
evalcond[2]=((((-1.0)*x7412))+((r00*x7416))+(((-1.0)*x7410*x7417))+(((-1.0)*r02*x7414)));
evalcond[3]=((((-1.0)*cj1*x7409))+((r20*x7415))+((sj1*sj2))+(((-1.0)*x7411*x7414))+((r22*x7406)));
evalcond[4]=(((r02*x7406))+(((-1.0)*cj0*x7413))+(((-1.0)*cj0*sj1*x7409))+((r00*x7415))+(((-1.0)*x7410*x7414)));
evalcond[5]=((((-1.0)*x7408*x7414))+(((-1.0)*sj0*sj1*x7409))+(((-1.0)*x7412*x7413))+((r12*x7406))+((r10*x7415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7419 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7419)==0){
continue;
}
IkReal x7418=pow(x7419,-0.5);
CheckValue<IkReal> x7420 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7420.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x7420.value))));
IkReal gconst148=((1.0)*r01*x7418);
IkReal gconst149=((-1.0)*r00*x7418);
CheckValue<IkReal> x7421 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7421.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7421.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x7424 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7424.valid){
continue;
}
IkReal x7422=((1.0)*(x7424.value));
IkReal x7423=x7418;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7422)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7422)));
IkReal gconst148=((1.0)*r01*x7423);
IkReal gconst149=((-1.0)*r00*x7423);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7427 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7427.valid){
continue;
}
IkReal x7425=((1.0)*(x7427.value));
IkReal x7426=x7418;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7425)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7425)));
IkReal gconst148=((1.0)*r01*x7426);
IkReal gconst149=((-1.0)*r00*x7426);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7430 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x7430.valid){
continue;
}
IkReal x7428=((1.0)*(x7430.value));
IkReal x7429=x7418;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x7428)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x7428)));
IkReal gconst148=((1.0)*r01*x7429);
IkReal gconst149=((-1.0)*r00*x7429);
IkReal x7431=r02*r02;
IkReal x7432=(r12*sj0);
IkReal x7433=((1.0)*cj0);
IkReal x7434=x7418;
j4eval[0]=((IKabs((((cj0*x7431*x7434))+((r02*x7432*x7434))+(((-1.0)*x7433*x7434)))))+(IKabs(((((-1.0)*x7432))+(((-1.0)*r02*x7433))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7435=((1.0)*sj0);
IkReal x7436=((1.0)*cj0);
CheckValue<IkReal> x7437 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7436))+(((-1.0)*r12*x7435)))),IkReal(((((-1.0)*gconst149*r00*x7436))+(((-1.0)*gconst149*r10*x7435))+((cj0*gconst148*r01))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7437.valid){
continue;
}
CheckValue<IkReal> x7438=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x7438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7437.value)+(((1.5707963267949)*(x7438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7439=IKsin(j4);
IkReal x7440=IKcos(j4);
IkReal x7441=(gconst148*r11);
IkReal x7442=(gconst148*r21);
IkReal x7443=((1.0)*cj2);
IkReal x7444=((1.0)*sj0);
IkReal x7445=(gconst148*r01);
IkReal x7446=(cj1*sj2);
IkReal x7447=((1.0)*x7440);
IkReal x7448=(gconst149*x7440);
IkReal x7449=(gconst149*x7439);
IkReal x7450=((1.0)*x7439);
evalcond[0]=(((r20*x7449))+(((-1.0)*x7442*x7450))+(((-1.0)*r22*x7447)));
evalcond[1]=(cj0+((r10*x7449))+(((-1.0)*r12*x7447))+(((-1.0)*x7441*x7450)));
evalcond[2]=((((-1.0)*x7444))+((r00*x7449))+(((-1.0)*r02*x7447))+(((-1.0)*x7445*x7450)));
evalcond[3]=(((r20*x7448))+(((-1.0)*cj1*x7443))+(((-1.0)*x7442*x7447))+((sj1*sj2))+((r22*x7439)));
evalcond[4]=((((-1.0)*cj0*x7446))+(((-1.0)*cj0*sj1*x7443))+((r02*x7439))+((r00*x7448))+(((-1.0)*x7445*x7447)));
evalcond[5]=((((-1.0)*sj0*sj1*x7443))+((r12*x7439))+((r10*x7448))+(((-1.0)*x7444*x7446))+(((-1.0)*x7441*x7447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7451 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst149*r20*sj0))+(((-1.0)*gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7451.valid){
continue;
}
CheckValue<IkReal> x7452=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x7452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7451.value)+(((1.5707963267949)*(x7452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7453=IKsin(j4);
IkReal x7454=IKcos(j4);
IkReal x7455=(gconst148*r11);
IkReal x7456=(gconst148*r21);
IkReal x7457=((1.0)*cj2);
IkReal x7458=((1.0)*sj0);
IkReal x7459=(gconst148*r01);
IkReal x7460=(cj1*sj2);
IkReal x7461=((1.0)*x7454);
IkReal x7462=(gconst149*x7454);
IkReal x7463=(gconst149*x7453);
IkReal x7464=((1.0)*x7453);
evalcond[0]=((((-1.0)*r22*x7461))+(((-1.0)*x7456*x7464))+((r20*x7463)));
evalcond[1]=(((r10*x7463))+cj0+(((-1.0)*r12*x7461))+(((-1.0)*x7455*x7464)));
evalcond[2]=((((-1.0)*x7458))+(((-1.0)*r02*x7461))+(((-1.0)*x7459*x7464))+((r00*x7463)));
evalcond[3]=((((-1.0)*cj1*x7457))+((sj1*sj2))+((r22*x7453))+(((-1.0)*x7456*x7461))+((r20*x7462)));
evalcond[4]=(((r02*x7453))+(((-1.0)*cj0*x7460))+(((-1.0)*x7459*x7461))+((r00*x7462))+(((-1.0)*cj0*sj1*x7457)));
evalcond[5]=(((r10*x7462))+((r12*x7453))+(((-1.0)*x7458*x7460))+(((-1.0)*sj0*sj1*x7457))+(((-1.0)*x7455*x7461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7465=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x7465.valid){
continue;
}
CheckValue<IkReal> x7466 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst148*r21))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7465.value)))+(x7466.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7467=IKsin(j4);
IkReal x7468=IKcos(j4);
IkReal x7469=(gconst148*r11);
IkReal x7470=(gconst148*r21);
IkReal x7471=((1.0)*cj2);
IkReal x7472=((1.0)*sj0);
IkReal x7473=(gconst148*r01);
IkReal x7474=(cj1*sj2);
IkReal x7475=((1.0)*x7468);
IkReal x7476=(gconst149*x7468);
IkReal x7477=(gconst149*x7467);
IkReal x7478=((1.0)*x7467);
evalcond[0]=(((r20*x7477))+(((-1.0)*r22*x7475))+(((-1.0)*x7470*x7478)));
evalcond[1]=(((r10*x7477))+cj0+(((-1.0)*x7469*x7478))+(((-1.0)*r12*x7475)));
evalcond[2]=((((-1.0)*r02*x7475))+(((-1.0)*x7472))+(((-1.0)*x7473*x7478))+((r00*x7477)));
evalcond[3]=(((r20*x7476))+(((-1.0)*cj1*x7471))+((sj1*sj2))+(((-1.0)*x7470*x7475))+((r22*x7467)));
evalcond[4]=((((-1.0)*cj0*sj1*x7471))+(((-1.0)*cj0*x7474))+((r02*x7467))+(((-1.0)*x7473*x7475))+((r00*x7476)));
evalcond[5]=(((r10*x7476))+((r12*x7467))+(((-1.0)*sj0*sj1*x7471))+(((-1.0)*x7472*x7474))+(((-1.0)*x7469*x7475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7479=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7479;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x7479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7480=((1.0)*sj5);
IkReal x7481=((((-1.0)*r20*x7480))+(((-1.0)*cj5*r21)));
j4eval[0]=x7481;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x7480)))))+(IKabs(r12)));
j4eval[2]=IKsign(x7481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7482=cj5*cj5;
IkReal x7483=r01*r01;
IkReal x7484=(cj5*r00);
IkReal x7485=(r01*sj5);
IkReal x7486=(((x7482*(r00*r00)))+(((-2.0)*x7484*x7485))+(r02*r02)+x7483+(((-1.0)*x7482*x7483)));
j4eval[0]=x7486;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x7485))+x7484))));
j4eval[2]=IKsign(x7486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7487=cj5*cj5;
IkReal x7488=r01*r01;
IkReal x7489=(r01*sj5);
IkReal x7490=(cj5*r00);
CheckValue<IkReal> x7491 = IKatan2WithCheck(IkReal(((((-1.0)*x7489))+x7490)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x7491.valid){
continue;
}
CheckValue<IkReal> x7492=IKPowWithIntegerCheck(IKsign(((((-2.0)*x7489*x7490))+((x7487*(r00*r00)))+(r02*r02)+x7488+(((-1.0)*x7487*x7488)))),-1);
if(!x7492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7491.value)+(((1.5707963267949)*(x7492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7493=IKcos(j4);
IkReal x7494=IKsin(j4);
IkReal x7495=((1.0)*cj1);
IkReal x7496=((1.0)*x7493);
IkReal x7497=(cj5*x7493);
IkReal x7498=(cj5*x7494);
IkReal x7499=((1.0)*sj5*x7494);
evalcond[0]=(((r00*x7497))+((r02*x7494))+(((-1.0)*r01*sj5*x7496)));
evalcond[1]=(((r20*x7498))+(((-1.0)*r21*x7499))+(((-1.0)*r22*x7496)));
evalcond[2]=(((r10*x7498))+(((-1.0)*r11*x7499))+(((-1.0)*r12*x7496)));
evalcond[3]=((-1.0)+((r00*x7498))+(((-1.0)*r01*x7499))+(((-1.0)*r02*x7496)));
evalcond[4]=(((r22*x7494))+((sj1*sj2))+((r20*x7497))+(((-1.0)*r21*sj5*x7496))+(((-1.0)*cj2*x7495)));
evalcond[5]=((((-1.0)*sj2*x7495))+(((-1.0)*cj2*sj1))+((r12*x7494))+((r10*x7497))+(((-1.0)*r11*sj5*x7496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7500=((1.0)*sj5);
CheckValue<IkReal> x7501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7500))+(((-1.0)*cj5*r21)))),-1);
if(!x7501.valid){
continue;
}
CheckValue<IkReal> x7502 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x7500)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7501.value)))+(x7502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7503=IKcos(j4);
IkReal x7504=IKsin(j4);
IkReal x7505=((1.0)*cj1);
IkReal x7506=((1.0)*x7503);
IkReal x7507=(cj5*x7503);
IkReal x7508=(cj5*x7504);
IkReal x7509=((1.0)*sj5*x7504);
evalcond[0]=(((r00*x7507))+(((-1.0)*r01*sj5*x7506))+((r02*x7504)));
evalcond[1]=((((-1.0)*r22*x7506))+(((-1.0)*r21*x7509))+((r20*x7508)));
evalcond[2]=(((r10*x7508))+(((-1.0)*r11*x7509))+(((-1.0)*r12*x7506)));
evalcond[3]=((-1.0)+((r00*x7508))+(((-1.0)*r01*x7509))+(((-1.0)*r02*x7506)));
evalcond[4]=(((r20*x7507))+((sj1*sj2))+(((-1.0)*cj2*x7505))+((r22*x7504))+(((-1.0)*r21*sj5*x7506)));
evalcond[5]=(((r12*x7504))+(((-1.0)*cj2*sj1))+((r10*x7507))+(((-1.0)*sj2*x7505))+(((-1.0)*r11*sj5*x7506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7510=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7510.valid){
continue;
}
CheckValue<IkReal> x7511 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7510.value)))+(x7511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7512=IKcos(j4);
IkReal x7513=IKsin(j4);
IkReal x7514=((1.0)*cj1);
IkReal x7515=((1.0)*x7512);
IkReal x7516=(cj5*x7512);
IkReal x7517=(cj5*x7513);
IkReal x7518=((1.0)*sj5*x7513);
evalcond[0]=(((r00*x7516))+((r02*x7513))+(((-1.0)*r01*sj5*x7515)));
evalcond[1]=(((r20*x7517))+(((-1.0)*r21*x7518))+(((-1.0)*r22*x7515)));
evalcond[2]=(((r10*x7517))+(((-1.0)*r12*x7515))+(((-1.0)*r11*x7518)));
evalcond[3]=((-1.0)+((r00*x7517))+(((-1.0)*r01*x7518))+(((-1.0)*r02*x7515)));
evalcond[4]=(((r20*x7516))+((sj1*sj2))+(((-1.0)*cj2*x7514))+((r22*x7513))+(((-1.0)*r21*sj5*x7515)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r12*x7513))+(((-1.0)*sj2*x7514))+((r10*x7516))+(((-1.0)*r11*sj5*x7515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7519=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7519;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x7519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7520=((1.0)*sj5);
IkReal x7521=((((-1.0)*r10*x7520))+(((-1.0)*cj5*r11)));
j4eval[0]=x7521;
j4eval[1]=IKsign(x7521);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x7520)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7522=(cj1*sj2);
IkReal x7523=(cj5*r00);
IkReal x7524=((1.0)*r02);
IkReal x7525=(cj2*sj1);
IkReal x7526=((1.0)*r01*sj5);
IkReal x7527=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7527;
j4eval[1]=((IKabs(((((-1.0)*x7522*x7524))+(((-1.0)*x7524*x7525)))))+(IKabs(((((-1.0)*x7522*x7526))+(((-1.0)*x7525*x7526))+((x7523*x7525))+((x7522*x7523))))));
j4eval[2]=IKsign(x7527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7528=(cj1*sj2);
IkReal x7529=(cj5*r00);
IkReal x7530=((1.0)*r02);
IkReal x7531=(cj2*sj1);
IkReal x7532=((1.0)*r01*sj5);
CheckValue<IkReal> x7533=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7533.valid){
continue;
}
CheckValue<IkReal> x7534 = IKatan2WithCheck(IkReal(((((-1.0)*x7528*x7532))+(((-1.0)*x7531*x7532))+((x7528*x7529))+((x7529*x7531)))),IkReal(((((-1.0)*x7528*x7530))+(((-1.0)*x7530*x7531)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7533.value)))+(x7534.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7535=IKcos(j4);
IkReal x7536=IKsin(j4);
IkReal x7537=((1.0)*x7535);
IkReal x7538=(cj5*x7535);
IkReal x7539=(cj5*x7536);
IkReal x7540=((1.0)*sj5*x7536);
evalcond[0]=((((-1.0)*r01*sj5*x7537))+((r00*x7538))+((r02*x7536)));
evalcond[1]=((((-1.0)*r22*x7537))+((r20*x7539))+(((-1.0)*r21*x7540)));
evalcond[2]=(((r10*x7539))+(((-1.0)*r12*x7537))+(((-1.0)*r11*x7540)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7540))+((r00*x7539))+(((-1.0)*r02*x7537)));
evalcond[4]=(((cj2*sj1))+((r10*x7538))+((cj1*sj2))+(((-1.0)*r11*sj5*x7537))+((r12*x7536)));
evalcond[5]=(((r22*x7536))+(((-1.0)*r21*sj5*x7537))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x7538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7541=((1.0)*sj5);
CheckValue<IkReal> x7542 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x7541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7542.valid){
continue;
}
CheckValue<IkReal> x7543=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7541)))),-1);
if(!x7543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7542.value)+(((1.5707963267949)*(x7543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7544=IKcos(j4);
IkReal x7545=IKsin(j4);
IkReal x7546=((1.0)*x7544);
IkReal x7547=(cj5*x7544);
IkReal x7548=(cj5*x7545);
IkReal x7549=((1.0)*sj5*x7545);
evalcond[0]=(((r02*x7545))+(((-1.0)*r01*sj5*x7546))+((r00*x7547)));
evalcond[1]=(((r20*x7548))+(((-1.0)*r22*x7546))+(((-1.0)*r21*x7549)));
evalcond[2]=(((r10*x7548))+(((-1.0)*r11*x7549))+(((-1.0)*r12*x7546)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7549))+((r00*x7548))+(((-1.0)*r02*x7546)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x7546))+((r10*x7547))+((cj1*sj2))+((r12*x7545)));
evalcond[5]=(((r20*x7547))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7545))+(((-1.0)*r21*sj5*x7546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7550 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7550.valid){
continue;
}
CheckValue<IkReal> x7551=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7550.value)+(((1.5707963267949)*(x7551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7552=IKcos(j4);
IkReal x7553=IKsin(j4);
IkReal x7554=((1.0)*x7552);
IkReal x7555=(cj5*x7552);
IkReal x7556=(cj5*x7553);
IkReal x7557=((1.0)*sj5*x7553);
evalcond[0]=(((r02*x7553))+(((-1.0)*r01*sj5*x7554))+((r00*x7555)));
evalcond[1]=((((-1.0)*r22*x7554))+(((-1.0)*r21*x7557))+((r20*x7556)));
evalcond[2]=(((r10*x7556))+(((-1.0)*r11*x7557))+(((-1.0)*r12*x7554)));
evalcond[3]=((1.0)+(((-1.0)*r01*x7557))+((r00*x7556))+(((-1.0)*r02*x7554)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x7554))+((r10*x7555))+((cj1*sj2))+((r12*x7553)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7553))+(((-1.0)*r21*sj5*x7554))+((r20*x7555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7558=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7558);
rxp1_1=(px*r21);
rxp1_2=(r11*x7558);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7559=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7559);
rxp1_1=(px*r21);
rxp1_2=(r11*x7559);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7560=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x7560);
rxp1_1=(px*r21);
rxp1_2=(r11*x7560);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7563=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x7563.valid){
continue;
}
IkReal x7561=x7563.value;
IkReal x7562=(sj0*x7561);
cj4array[0]=(((cj2*sj1*x7562))+((cj1*sj2*x7562)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7564=IKsin(j4);
IkReal x7565=IKcos(j4);
IkReal x7566=(cj5*r20);
IkReal x7567=((1.0)*sj5);
evalcond[0]=(r02*x7564);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x7565)));
evalcond[2]=(((x7564*x7566))+(((-1.0)*r21*x7564*x7567)));
evalcond[3]=((((-1.0)*r11*x7564*x7567))+((cj5*r10*x7564)));
evalcond[4]=((((-1.0)*r21*x7565*x7567))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x7565*x7566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7569=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x7569.valid){
continue;
}
IkReal x7568=x7569.value;
cj4array[0]=(((cj1*cj2*x7568))+(((-1.0)*sj1*sj2*x7568)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7570=IKsin(j4);
IkReal x7571=IKcos(j4);
IkReal x7572=((1.0)*sj0);
IkReal x7573=(cj5*r10);
IkReal x7574=((1.0)*r11*sj5);
evalcond[0]=(r02*x7570);
evalcond[1]=((((-1.0)*x7572))+(((-1.0)*r02*x7571)));
evalcond[2]=(((cj5*r20*x7570))+(((-1.0)*r21*sj5*x7570)));
evalcond[3]=(((x7570*x7573))+(((-1.0)*x7570*x7574)));
evalcond[4]=((((-1.0)*x7571*x7574))+(((-1.0)*cj1*sj2*x7572))+(((-1.0)*cj2*sj1*x7572))+((x7571*x7573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x7575=IKPowWithIntegerCheck(r02,-1);
if(!x7575.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x7575.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x7576=IKsin(j4);
IkReal x7577=IKcos(j4);
IkReal x7578=((1.0)*cj1);
IkReal x7579=(cj5*x7577);
IkReal x7580=(cj5*x7576);
IkReal x7581=((1.0)*sj5*x7577);
IkReal x7582=((1.0)*sj5*x7576);
evalcond[0]=(r02*x7576);
evalcond[1]=((((-1.0)*r21*x7582))+((r20*x7580)));
evalcond[2]=(((r10*x7580))+(((-1.0)*r11*x7582)));
evalcond[3]=((((-1.0)*cj2*x7578))+((sj1*sj2))+((r20*x7579))+(((-1.0)*r21*x7581)));
evalcond[4]=((((-1.0)*sj0*sj2*x7578))+(((-1.0)*cj2*sj0*sj1))+((r10*x7579))+(((-1.0)*r11*x7581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7583=((1.0)*sj0);
IkReal x7584=((1.0)*cj0);
CheckValue<IkReal> x7585=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7585.valid){
continue;
}
CheckValue<IkReal> x7586 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7584))+(((-1.0)*r12*x7583)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r00*x7584))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7586.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7585.value)))+(x7586.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7587=IKsin(j4);
IkReal x7588=IKcos(j4);
IkReal x7589=((1.0)*cj2);
IkReal x7590=((1.0)*sj0);
IkReal x7591=(cj1*sj2);
IkReal x7592=((1.0)*x7588);
IkReal x7593=(cj5*x7588);
IkReal x7594=(cj5*x7587);
IkReal x7595=((1.0)*sj5*x7587);
evalcond[0]=(((r20*x7594))+(((-1.0)*r22*x7592))+(((-1.0)*r21*x7595)));
evalcond[1]=(cj0+(((-1.0)*r12*x7592))+(((-1.0)*r11*x7595))+((r10*x7594)));
evalcond[2]=((((-1.0)*r02*x7592))+((r00*x7594))+(((-1.0)*x7590))+(((-1.0)*r01*x7595)));
evalcond[3]=((((-1.0)*cj1*x7589))+((r20*x7593))+((sj1*sj2))+((r22*x7587))+(((-1.0)*r21*sj5*x7592)));
evalcond[4]=(((r02*x7587))+(((-1.0)*r01*sj5*x7592))+(((-1.0)*cj0*sj1*x7589))+((r00*x7593))+(((-1.0)*cj0*x7591)));
evalcond[5]=(((r12*x7587))+(((-1.0)*x7590*x7591))+(((-1.0)*sj0*sj1*x7589))+(((-1.0)*r11*sj5*x7592))+((r10*x7593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7596 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7596.valid){
continue;
}
CheckValue<IkReal> x7597=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7596.value)+(((1.5707963267949)*(x7597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7598=IKsin(j4);
IkReal x7599=IKcos(j4);
IkReal x7600=((1.0)*cj2);
IkReal x7601=((1.0)*sj0);
IkReal x7602=(cj1*sj2);
IkReal x7603=((1.0)*x7599);
IkReal x7604=(cj5*x7599);
IkReal x7605=(cj5*x7598);
IkReal x7606=((1.0)*sj5*x7598);
evalcond[0]=(((r20*x7605))+(((-1.0)*r22*x7603))+(((-1.0)*r21*x7606)));
evalcond[1]=((((-1.0)*r11*x7606))+cj0+((r10*x7605))+(((-1.0)*r12*x7603)));
evalcond[2]=((((-1.0)*x7601))+((r00*x7605))+(((-1.0)*r01*x7606))+(((-1.0)*r02*x7603)));
evalcond[3]=(((r20*x7604))+((sj1*sj2))+(((-1.0)*r21*sj5*x7603))+(((-1.0)*cj1*x7600))+((r22*x7598)));
evalcond[4]=(((r00*x7604))+(((-1.0)*r01*sj5*x7603))+(((-1.0)*cj0*sj1*x7600))+((r02*x7598))+(((-1.0)*cj0*x7602)));
evalcond[5]=((((-1.0)*r11*sj5*x7603))+((r10*x7604))+(((-1.0)*sj0*sj1*x7600))+(((-1.0)*x7601*x7602))+((r12*x7598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7607 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7607.valid){
continue;
}
CheckValue<IkReal> x7608=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7607.value)+(((1.5707963267949)*(x7608.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7609=IKsin(j4);
IkReal x7610=IKcos(j4);
IkReal x7611=((1.0)*cj2);
IkReal x7612=((1.0)*sj0);
IkReal x7613=(cj1*sj2);
IkReal x7614=((1.0)*x7610);
IkReal x7615=(cj5*x7610);
IkReal x7616=(cj5*x7609);
IkReal x7617=((1.0)*sj5*x7609);
evalcond[0]=(((r20*x7616))+(((-1.0)*r22*x7614))+(((-1.0)*r21*x7617)));
evalcond[1]=((((-1.0)*r11*x7617))+(((-1.0)*r12*x7614))+cj0+((r10*x7616)));
evalcond[2]=(((r00*x7616))+(((-1.0)*x7612))+(((-1.0)*r01*x7617))+(((-1.0)*r02*x7614)));
evalcond[3]=(((r20*x7615))+((sj1*sj2))+((r22*x7609))+(((-1.0)*cj1*x7611))+(((-1.0)*r21*sj5*x7614)));
evalcond[4]=(((r00*x7615))+(((-1.0)*cj0*x7613))+(((-1.0)*r01*sj5*x7614))+(((-1.0)*cj0*sj1*x7611))+((r02*x7609)));
evalcond[5]=((((-1.0)*x7612*x7613))+((r12*x7609))+(((-1.0)*r11*sj5*x7614))+((r10*x7615))+(((-1.0)*sj0*sj1*x7611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7618=r21*r21;
IkReal x7619=cj5*cj5;
IkReal x7620=(sj1*sj2);
IkReal x7621=(r21*sj5);
IkReal x7622=(cj5*r20);
IkReal x7623=(cj1*cj2);
CheckValue<IkReal> x7624=IKPowWithIntegerCheck(IKsign(((((2.0)*x7621*x7622))+(((-1.0)*x7619*(r20*r20)))+(((-1.0)*(r22*r22)))+((x7618*x7619))+(((-1.0)*x7618)))),-1);
if(!x7624.valid){
continue;
}
CheckValue<IkReal> x7625 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7623))+((r22*x7620)))),IkReal((((x7621*x7623))+(((-1.0)*x7622*x7623))+((x7620*x7622))+(((-1.0)*x7620*x7621)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7624.value)))+(x7625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x7626=IKsin(j4);
IkReal x7627=IKcos(j4);
IkReal x7628=(cj5*r20);
IkReal x7629=(r21*sj5);
IkReal x7630=((1.0)*x7627);
evalcond[0]=((((-1.0)*r22*x7630))+((x7626*x7628))+(((-1.0)*x7626*x7629)));
evalcond[1]=(((x7627*x7628))+(((-1.0)*x7629*x7630))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7631=(cj5*sj4);
IkReal x7632=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r00*x7631))+(((-1.0)*r01*x7632)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x7632))+(((-1.0)*r10*x7631))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r00*x7631))+(((-1.0)*r01*x7632))))+IKsqr((((r11*x7632))+(((-1.0)*r10*x7631))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r00*x7631))+(((-1.0)*r01*x7632))), (((r11*x7632))+(((-1.0)*r10*x7631))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7633=IKcos(j0);
IkReal x7634=IKsin(j0);
IkReal x7635=(cj5*r10);
IkReal x7636=(cj5*r00);
IkReal x7637=((1.0)*sj2);
IkReal x7638=((1.0)*sj5);
IkReal x7639=((0.0946)*cj5);
IkReal x7640=((1.0)*cj5);
IkReal x7641=((0.3922)*cj2);
IkReal x7642=((1.0)*cj2);
IkReal x7643=((0.0946)*sj5);
IkReal x7644=((0.3922)*sj2);
IkReal x7645=((1.0)*cj4);
IkReal x7646=(sj1*x7634);
IkReal x7647=(cj1*x7633);
IkReal x7648=(cj1*x7634);
IkReal x7649=(sj1*x7633);
evalcond[0]=(((sj4*x7635))+(((-1.0)*r12*x7645))+(((-1.0)*r11*sj4*x7638))+x7633);
evalcond[1]=(((sj4*x7636))+(((-1.0)*r02*x7645))+(((-1.0)*r01*sj4*x7638))+(((-1.0)*x7634)));
evalcond[2]=((((-1.0)*r01*x7640))+((cj2*x7647))+(((-1.0)*x7637*x7649))+(((-1.0)*r00*x7638)));
evalcond[3]=(((cj2*x7648))+(((-1.0)*x7637*x7646))+(((-1.0)*r11*x7640))+(((-1.0)*r10*x7638)));
evalcond[4]=(((cj4*x7636))+((r02*sj4))+(((-1.0)*x7637*x7647))+(((-1.0)*cj4*r01*x7638))+(((-1.0)*x7642*x7649)));
evalcond[5]=(((cj4*x7635))+(((-1.0)*x7637*x7648))+((r12*sj4))+(((-1.0)*cj4*r11*x7638))+(((-1.0)*x7642*x7646)));
evalcond[6]=(((r01*x7639))+(((-1.0)*x7644*x7649))+(((-0.1091)*x7634))+(((-1.0)*px))+((x7641*x7647))+((r00*x7643))+(((0.425)*x7647)));
evalcond[7]=(((r11*x7639))+(((-1.0)*x7644*x7646))+(((-1.0)*py))+(((0.1091)*x7633))+((x7641*x7648))+((r10*x7643))+(((0.425)*x7648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7650=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj1*sj2))+((cj1*cj2)))),-1);
if(!x7650.valid){
continue;
}
CheckValue<IkReal> x7651 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7651.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7650.value)))+(x7651.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7652=IKcos(j0);
IkReal x7653=IKsin(j0);
IkReal x7654=(cj1*cj2);
IkReal x7655=((0.0946)*cj5);
IkReal x7656=((1.0)*cj5);
IkReal x7657=((1.0)*sj5);
IkReal x7658=((0.0946)*sj5);
IkReal x7659=((0.425)*cj1);
IkReal x7660=(sj1*sj2);
IkReal x7661=((1.0)*x7660);
IkReal x7662=((0.3922)*x7653);
IkReal x7663=((0.3922)*x7652);
evalcond[0]=((((-1.0)*r00*x7657))+(((-1.0)*x7652*x7661))+((x7652*x7654))+(((-1.0)*r01*x7656)));
evalcond[1]=((((-1.0)*r10*x7657))+(((-1.0)*r11*x7656))+(((-1.0)*x7653*x7661))+((x7653*x7654)));
evalcond[2]=(((x7654*x7663))+(((-1.0)*px))+(((-0.1091)*x7653))+((r01*x7655))+(((-1.0)*x7660*x7663))+((r00*x7658))+((x7652*x7659)));
evalcond[3]=(((x7654*x7662))+((r11*x7655))+(((-1.0)*py))+((r10*x7658))+(((-1.0)*x7660*x7662))+(((0.1091)*x7652))+((x7653*x7659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7664=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7664;
j4eval[1]=IKsign(x7664);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7665=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7665;
j4eval[1]=IKsign(x7665);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7666=((1.0)*sj0);
IkReal x7667=((1.0)*cj0);
IkReal x7668=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7668;
j4eval[1]=IKsign(x7668);
j4eval[2]=((IKabs(((((-1.0)*r12*x7666))+(((-1.0)*r02*x7667)))))+(IKabs(((((-1.0)*cj5*r00*x7667))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r10*x7666))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7670 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7670)==0){
continue;
}
IkReal x7669=pow(x7670,-0.5);
CheckValue<IkReal> x7671 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7671.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7671.value));
IkReal gconst133=((-1.0)*r21*x7669);
IkReal gconst134=(r20*x7669);
CheckValue<IkReal> x7672 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7672.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7672.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7675 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7675.valid){
continue;
}
IkReal x7673=((-1.0)*(x7675.value));
IkReal x7674=x7669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7673;
IkReal gconst132=x7673;
IkReal gconst133=((-1.0)*r21*x7674);
IkReal gconst134=(r20*x7674);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7678 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7678.valid){
continue;
}
IkReal x7676=((-1.0)*(x7678.value));
IkReal x7677=x7669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7676;
IkReal gconst132=x7676;
IkReal gconst133=((-1.0)*r21*x7677);
IkReal gconst134=(r20*x7677);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x7681 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7681.valid){
continue;
}
IkReal x7679=((-1.0)*(x7681.value));
IkReal x7680=x7669;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst133;
cj5=gconst134;
j5=x7679;
IkReal gconst132=x7679;
IkReal gconst133=((-1.0)*r21*x7680);
IkReal gconst134=(r20*x7680);
IkReal x7682=((1.0)*(r22*r22));
CheckValue<IkReal> x7686=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7682))),-1);
if(!x7686.valid){
continue;
}
IkReal x7683=x7686.value;
IkReal x7684=((1.0)*x7683);
IkReal x7685=((((-1.0)*x7684*(r21*r21*r21*r21)))+(((-1.0)*x7684*(r20*r20*r20*r20)))+(((-1.0)*x7682))+(((-2.0)*x7683*(r20*r20)*(r21*r21))));
j4eval[0]=x7685;
j4eval[1]=IKsign(x7685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7687=(gconst134*r20);
IkReal x7688=(cj1*cj2);
IkReal x7689=(gconst133*r21);
IkReal x7690=(sj1*sj2);
CheckValue<IkReal> x7691 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7688))+((r22*x7690)))),IkReal((((x7687*x7690))+(((-1.0)*x7689*x7690))+(((-1.0)*x7687*x7688))+((x7688*x7689)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7691.valid){
continue;
}
CheckValue<IkReal> x7692=IKPowWithIntegerCheck(IKsign(((((2.0)*x7687*x7689))+(((-1.0)*(r22*r22)))+(((-1.0)*(x7689*x7689)))+(((-1.0)*(x7687*x7687))))),-1);
if(!x7692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7691.value)+(((1.5707963267949)*(x7692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7693=IKsin(j4);
IkReal x7694=IKcos(j4);
IkReal x7695=(gconst134*r10);
IkReal x7696=(gconst133*r11);
IkReal x7697=((1.0)*cj2);
IkReal x7698=(gconst133*r01);
IkReal x7699=(gconst133*r21);
IkReal x7700=((1.0)*sj0);
IkReal x7701=(cj1*sj2);
IkReal x7702=((1.0)*x7694);
IkReal x7703=((1.0)*x7693);
IkReal x7704=(gconst134*x7694);
IkReal x7705=(gconst134*x7693);
evalcond[0]=((((-1.0)*r22*x7702))+((r20*x7705))+(((-1.0)*x7699*x7703)));
evalcond[1]=((((-1.0)*x7696*x7703))+cj0+((x7693*x7695))+(((-1.0)*r12*x7702)));
evalcond[2]=((((-1.0)*x7698*x7703))+(((-1.0)*x7700))+(((-1.0)*r02*x7702))+((r00*x7705)));
evalcond[3]=(((sj1*sj2))+((r20*x7704))+(((-1.0)*cj1*x7697))+(((-1.0)*x7699*x7702))+((r22*x7693)));
evalcond[4]=(((r02*x7693))+(((-1.0)*x7698*x7702))+((r00*x7704))+(((-1.0)*cj0*x7701))+(((-1.0)*cj0*sj1*x7697)));
evalcond[5]=((((-1.0)*sj0*sj1*x7697))+(((-1.0)*x7696*x7702))+((r12*x7693))+(((-1.0)*x7700*x7701))+((x7694*x7695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7706 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst134*r20*sj0))+(((-1.0)*gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7706.valid){
continue;
}
CheckValue<IkReal> x7707=IKPowWithIntegerCheck(IKsign((((gconst134*r11))+((gconst133*r10)))),-1);
if(!x7707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7706.value)+(((1.5707963267949)*(x7707.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7708=IKsin(j4);
IkReal x7709=IKcos(j4);
IkReal x7710=(gconst134*r10);
IkReal x7711=(gconst133*r11);
IkReal x7712=((1.0)*cj2);
IkReal x7713=(gconst133*r01);
IkReal x7714=(gconst133*r21);
IkReal x7715=((1.0)*sj0);
IkReal x7716=(cj1*sj2);
IkReal x7717=((1.0)*x7709);
IkReal x7718=((1.0)*x7708);
IkReal x7719=(gconst134*x7709);
IkReal x7720=(gconst134*x7708);
evalcond[0]=((((-1.0)*r22*x7717))+(((-1.0)*x7714*x7718))+((r20*x7720)));
evalcond[1]=((((-1.0)*x7711*x7718))+cj0+(((-1.0)*r12*x7717))+((x7708*x7710)));
evalcond[2]=(((r00*x7720))+(((-1.0)*x7715))+(((-1.0)*r02*x7717))+(((-1.0)*x7713*x7718)));
evalcond[3]=(((r20*x7719))+((sj1*sj2))+(((-1.0)*x7714*x7717))+(((-1.0)*cj1*x7712))+((r22*x7708)));
evalcond[4]=(((r02*x7708))+(((-1.0)*cj0*sj1*x7712))+(((-1.0)*x7713*x7717))+(((-1.0)*cj0*x7716))+((r00*x7719)));
evalcond[5]=((((-1.0)*x7711*x7717))+((r12*x7708))+(((-1.0)*x7715*x7716))+(((-1.0)*sj0*sj1*x7712))+((x7709*x7710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7721=IKPowWithIntegerCheck(IKsign((((gconst134*r01))+((gconst133*r00)))),-1);
if(!x7721.valid){
continue;
}
CheckValue<IkReal> x7722 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst134*r20))+(((-1.0)*cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7721.value)))+(x7722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7723=IKsin(j4);
IkReal x7724=IKcos(j4);
IkReal x7725=(gconst134*r10);
IkReal x7726=(gconst133*r11);
IkReal x7727=((1.0)*cj2);
IkReal x7728=(gconst133*r01);
IkReal x7729=(gconst133*r21);
IkReal x7730=((1.0)*sj0);
IkReal x7731=(cj1*sj2);
IkReal x7732=((1.0)*x7724);
IkReal x7733=((1.0)*x7723);
IkReal x7734=(gconst134*x7724);
IkReal x7735=(gconst134*x7723);
evalcond[0]=((((-1.0)*r22*x7732))+((r20*x7735))+(((-1.0)*x7729*x7733)));
evalcond[1]=(cj0+(((-1.0)*r12*x7732))+((x7723*x7725))+(((-1.0)*x7726*x7733)));
evalcond[2]=((((-1.0)*x7728*x7733))+(((-1.0)*x7730))+((r00*x7735))+(((-1.0)*r02*x7732)));
evalcond[3]=(((r22*x7723))+((sj1*sj2))+((r20*x7734))+(((-1.0)*x7729*x7732))+(((-1.0)*cj1*x7727)));
evalcond[4]=((((-1.0)*x7728*x7732))+(((-1.0)*cj0*sj1*x7727))+((r00*x7734))+((r02*x7723))+(((-1.0)*cj0*x7731)));
evalcond[5]=(((x7724*x7725))+(((-1.0)*x7730*x7731))+((r12*x7723))+(((-1.0)*sj0*sj1*x7727))+(((-1.0)*x7726*x7732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7737 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7737)==0){
continue;
}
IkReal x7736=pow(x7737,-0.5);
CheckValue<IkReal> x7738 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7738.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7738.value))));
IkReal gconst136=((1.0)*r21*x7736);
IkReal gconst137=((-1.0)*r20*x7736);
CheckValue<IkReal> x7739 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7739.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7739.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x7742 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7742.valid){
continue;
}
IkReal x7740=((1.0)*(x7742.value));
IkReal x7741=x7736;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7740)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7740)));
IkReal gconst136=((1.0)*r21*x7741);
IkReal gconst137=((-1.0)*r20*x7741);
IkReal x7743=r22*r22;
IkReal x7744=((1.0)*x7743);
CheckValue<IkReal> x7748=IKPowWithIntegerCheck(((-1.0)+x7743),-1);
if(!x7748.valid){
continue;
}
IkReal x7745=x7748.value;
if((((1.0)+(((-1.0)*x7744)))) < -0.00001)
continue;
IkReal x7746=IKsqrt(((1.0)+(((-1.0)*x7744))));
IkReal x7747=(cj0*x7745*x7746);
j4eval[0]=((IKabs(((((-1.0)*x7744*x7747))+x7747)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7751 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7751.valid){
continue;
}
IkReal x7749=((1.0)*(x7751.value));
IkReal x7750=x7736;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7749)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7749)));
IkReal gconst136=((1.0)*r21*x7750);
IkReal gconst137=((-1.0)*r20*x7750);
IkReal x7752=r22*r22;
IkReal x7753=((1.0)*x7752);
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(((-1.0)+x7752),-1);
if(!x7757.valid){
continue;
}
IkReal x7754=x7757.value;
if((((1.0)+(((-1.0)*x7753)))) < -0.00001)
continue;
IkReal x7755=IKsqrt(((1.0)+(((-1.0)*x7753))));
IkReal x7756=(sj0*x7754*x7755);
j4eval[0]=((IKabs(((((-1.0)*x7753*x7756))+x7756)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7760 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x7760.valid){
continue;
}
IkReal x7758=((1.0)*(x7760.value));
IkReal x7759=x7736;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7758)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7758)));
IkReal gconst136=((1.0)*r21*x7759);
IkReal gconst137=((-1.0)*r20*x7759);
IkReal x7761=r22*r22;
IkReal x7762=(r12*sj0);
IkReal x7763=(cj0*r02);
CheckValue<IkReal> x7767=IKPowWithIntegerCheck(((-1.0)+x7761),-1);
if(!x7767.valid){
continue;
}
IkReal x7764=x7767.value;
if((((1.0)+(((-1.0)*x7761)))) < -0.00001)
continue;
IkReal x7765=IKsqrt(((1.0)+(((-1.0)*x7761))));
IkReal x7766=(r22*x7764*x7765);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7762))+(((-1.0)*x7763)))))+(IKabs((((x7762*x7766))+((x7763*x7766))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7768=((1.0)*sj0);
IkReal x7769=((1.0)*cj0);
CheckValue<IkReal> x7770 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7769))+(((-1.0)*r12*x7768)))),IkReal(((((-1.0)*gconst137*r00*x7769))+(((-1.0)*gconst137*r10*x7768))+((gconst136*r11*sj0))+((cj0*gconst136*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7770.valid){
continue;
}
CheckValue<IkReal> x7771=IKPowWithIntegerCheck(IKsign((((gconst136*r20))+((gconst137*r21)))),-1);
if(!x7771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7770.value)+(((1.5707963267949)*(x7771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7772=IKsin(j4);
IkReal x7773=IKcos(j4);
IkReal x7774=(gconst136*r01);
IkReal x7775=(gconst137*r10);
IkReal x7776=((1.0)*cj2);
IkReal x7777=(gconst136*r21);
IkReal x7778=(gconst136*r11);
IkReal x7779=((1.0)*sj0);
IkReal x7780=(cj1*sj2);
IkReal x7781=((1.0)*x7773);
IkReal x7782=((1.0)*x7772);
IkReal x7783=(gconst137*x7773);
IkReal x7784=(gconst137*x7772);
evalcond[0]=((((-1.0)*r22*x7781))+((r20*x7784))+(((-1.0)*x7777*x7782)));
evalcond[1]=(cj0+((x7772*x7775))+(((-1.0)*r12*x7781))+(((-1.0)*x7778*x7782)));
evalcond[2]=((((-1.0)*x7774*x7782))+((r00*x7784))+(((-1.0)*r02*x7781))+(((-1.0)*x7779)));
evalcond[3]=(((r22*x7772))+((sj1*sj2))+(((-1.0)*cj1*x7776))+((r20*x7783))+(((-1.0)*x7777*x7781)));
evalcond[4]=((((-1.0)*x7774*x7781))+(((-1.0)*cj0*x7780))+((r00*x7783))+((r02*x7772))+(((-1.0)*cj0*sj1*x7776)));
evalcond[5]=((((-1.0)*x7779*x7780))+(((-1.0)*sj0*sj1*x7776))+((x7773*x7775))+((r12*x7772))+(((-1.0)*x7778*x7781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7785 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst137*r20*sj0))+(((-1.0)*gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7785.valid){
continue;
}
CheckValue<IkReal> x7786=IKPowWithIntegerCheck(IKsign((((gconst137*r11))+((gconst136*r10)))),-1);
if(!x7786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7785.value)+(((1.5707963267949)*(x7786.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7787=IKsin(j4);
IkReal x7788=IKcos(j4);
IkReal x7789=(gconst136*r01);
IkReal x7790=(gconst137*r10);
IkReal x7791=((1.0)*cj2);
IkReal x7792=(gconst136*r21);
IkReal x7793=(gconst136*r11);
IkReal x7794=((1.0)*sj0);
IkReal x7795=(cj1*sj2);
IkReal x7796=((1.0)*x7788);
IkReal x7797=((1.0)*x7787);
IkReal x7798=(gconst137*x7788);
IkReal x7799=(gconst137*x7787);
evalcond[0]=((((-1.0)*r22*x7796))+(((-1.0)*x7792*x7797))+((r20*x7799)));
evalcond[1]=(cj0+(((-1.0)*x7793*x7797))+(((-1.0)*r12*x7796))+((x7787*x7790)));
evalcond[2]=((((-1.0)*x7794))+((r00*x7799))+(((-1.0)*r02*x7796))+(((-1.0)*x7789*x7797)));
evalcond[3]=((((-1.0)*x7792*x7796))+((r22*x7787))+((r20*x7798))+((sj1*sj2))+(((-1.0)*cj1*x7791)));
evalcond[4]=((((-1.0)*cj0*sj1*x7791))+((r00*x7798))+((r02*x7787))+(((-1.0)*cj0*x7795))+(((-1.0)*x7789*x7796)));
evalcond[5]=(((x7788*x7790))+(((-1.0)*x7793*x7796))+((r12*x7787))+(((-1.0)*x7794*x7795))+(((-1.0)*sj0*sj1*x7791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst136*r21))+((cj0*gconst137*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
CheckValue<IkReal> x7801=IKPowWithIntegerCheck(IKsign((((gconst136*r00))+((gconst137*r01)))),-1);
if(!x7801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7800.value)+(((1.5707963267949)*(x7801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7802=IKsin(j4);
IkReal x7803=IKcos(j4);
IkReal x7804=(gconst136*r01);
IkReal x7805=(gconst137*r10);
IkReal x7806=((1.0)*cj2);
IkReal x7807=(gconst136*r21);
IkReal x7808=(gconst136*r11);
IkReal x7809=((1.0)*sj0);
IkReal x7810=(cj1*sj2);
IkReal x7811=((1.0)*x7803);
IkReal x7812=((1.0)*x7802);
IkReal x7813=(gconst137*x7803);
IkReal x7814=(gconst137*x7802);
evalcond[0]=(((r20*x7814))+(((-1.0)*r22*x7811))+(((-1.0)*x7807*x7812)));
evalcond[1]=(((x7802*x7805))+cj0+(((-1.0)*r12*x7811))+(((-1.0)*x7808*x7812)));
evalcond[2]=((((-1.0)*x7804*x7812))+(((-1.0)*r02*x7811))+(((-1.0)*x7809))+((r00*x7814)));
evalcond[3]=((((-1.0)*cj1*x7806))+((r20*x7813))+((r22*x7802))+((sj1*sj2))+(((-1.0)*x7807*x7811)));
evalcond[4]=((((-1.0)*cj0*sj1*x7806))+(((-1.0)*x7804*x7811))+((r02*x7802))+((r00*x7813))+(((-1.0)*cj0*x7810)));
evalcond[5]=((((-1.0)*sj0*sj1*x7806))+((x7803*x7805))+((r12*x7802))+(((-1.0)*x7809*x7810))+(((-1.0)*x7808*x7811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7816 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7816)==0){
continue;
}
IkReal x7815=pow(x7816,-0.5);
CheckValue<IkReal> x7817 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7817.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7817.value));
IkReal gconst139=((-1.0)*r11*x7815);
IkReal gconst140=(r10*x7815);
CheckValue<IkReal> x7818 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7818.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7818.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
IkReal x7819=((-1.0)*(x7821.value));
IkReal x7820=x7815;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst139;
cj5=gconst140;
j5=x7819;
IkReal gconst138=x7819;
IkReal gconst139=((-1.0)*r11*x7820);
IkReal gconst140=(r10*x7820);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7822=((1.0)*sj0);
IkReal x7823=((1.0)*cj0);
CheckValue<IkReal> x7824 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7823))+(((-1.0)*r12*x7822)))),IkReal(((((-1.0)*gconst140*r00*x7823))+(((-1.0)*gconst140*r10*x7822))+((gconst139*r11*sj0))+((cj0*gconst139*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7824.valid){
continue;
}
CheckValue<IkReal> x7825=IKPowWithIntegerCheck(IKsign((((gconst139*r20))+((gconst140*r21)))),-1);
if(!x7825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7824.value)+(((1.5707963267949)*(x7825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7826=IKsin(j4);
IkReal x7827=IKcos(j4);
IkReal x7828=(gconst140*r10);
IkReal x7829=((1.0)*cj2);
IkReal x7830=((1.0)*sj0);
IkReal x7831=(cj1*sj2);
IkReal x7832=((1.0)*x7827);
IkReal x7833=(gconst140*x7827);
IkReal x7834=(gconst140*x7826);
IkReal x7835=((1.0)*gconst139*x7826);
evalcond[0]=((((-1.0)*r22*x7832))+((r20*x7834))+(((-1.0)*r21*x7835)));
evalcond[1]=(cj0+((x7826*x7828))+(((-1.0)*r11*x7835))+(((-1.0)*r12*x7832)));
evalcond[2]=((((-1.0)*r01*x7835))+(((-1.0)*r02*x7832))+((r00*x7834))+(((-1.0)*x7830)));
evalcond[3]=(((r20*x7833))+(((-1.0)*cj1*x7829))+((sj1*sj2))+(((-1.0)*gconst139*r21*x7832))+((r22*x7826)));
evalcond[4]=(((r02*x7826))+(((-1.0)*gconst139*r01*x7832))+((r00*x7833))+(((-1.0)*cj0*sj1*x7829))+(((-1.0)*cj0*x7831)));
evalcond[5]=((((-1.0)*sj0*sj1*x7829))+((r12*x7826))+((x7827*x7828))+(((-1.0)*x7830*x7831))+(((-1.0)*gconst139*r11*x7832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7836=IKPowWithIntegerCheck(IKsign((((gconst140*r01))+((gconst139*r00)))),-1);
if(!x7836.valid){
continue;
}
CheckValue<IkReal> x7837 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst139*r21))+((cj0*gconst140*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7836.value)))+(x7837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7838=IKsin(j4);
IkReal x7839=IKcos(j4);
IkReal x7840=(gconst140*r10);
IkReal x7841=((1.0)*cj2);
IkReal x7842=((1.0)*sj0);
IkReal x7843=(cj1*sj2);
IkReal x7844=((1.0)*x7839);
IkReal x7845=(gconst140*x7839);
IkReal x7846=(gconst140*x7838);
IkReal x7847=((1.0)*gconst139*x7838);
evalcond[0]=((((-1.0)*r22*x7844))+((r20*x7846))+(((-1.0)*r21*x7847)));
evalcond[1]=(cj0+((x7838*x7840))+(((-1.0)*r12*x7844))+(((-1.0)*r11*x7847)));
evalcond[2]=(((r00*x7846))+(((-1.0)*r01*x7847))+(((-1.0)*r02*x7844))+(((-1.0)*x7842)));
evalcond[3]=(((r20*x7845))+((sj1*sj2))+(((-1.0)*cj1*x7841))+(((-1.0)*gconst139*r21*x7844))+((r22*x7838)));
evalcond[4]=((((-1.0)*gconst139*r01*x7844))+((r00*x7845))+(((-1.0)*cj0*sj1*x7841))+((r02*x7838))+(((-1.0)*cj0*x7843)));
evalcond[5]=((((-1.0)*gconst139*r11*x7844))+((r12*x7838))+(((-1.0)*x7842*x7843))+((x7839*x7840))+(((-1.0)*sj0*sj1*x7841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7849 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7849)==0){
continue;
}
IkReal x7848=pow(x7849,-0.5);
CheckValue<IkReal> x7850 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7850.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7850.value))));
IkReal gconst142=((1.0)*r11*x7848);
IkReal gconst143=((-1.0)*r10*x7848);
CheckValue<IkReal> x7851 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7851.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7851.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
IkReal x7852=((1.0)*(x7854.value));
IkReal x7853=x7848;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7852)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7852)));
IkReal gconst142=((1.0)*r11*x7853);
IkReal gconst143=((-1.0)*r10*x7853);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x7857 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7857.valid){
continue;
}
IkReal x7855=((1.0)*(x7857.value));
IkReal x7856=x7848;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7855)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7855)));
IkReal gconst142=((1.0)*r11*x7856);
IkReal gconst143=((-1.0)*r10*x7856);
IkReal x7858=r12*r12;
IkReal x7859=((1.0)*sj0);
IkReal x7860=(cj0*r02);
IkReal x7861=x7848;
j4eval[0]=((IKabs(((((-1.0)*x7860))+(((-1.0)*r12*x7859)))))+(IKabs(((((-1.0)*x7859*x7861))+((sj0*x7858*x7861))+((r12*x7860*x7861))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x7864 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x7864.valid){
continue;
}
IkReal x7862=((1.0)*(x7864.value));
IkReal x7863=x7848;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7862)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7862)));
IkReal gconst142=((1.0)*r11*x7863);
IkReal gconst143=((-1.0)*r10*x7863);
IkReal x7865=r12*r12;
IkReal x7866=((1.0)+(((-1.0)*x7865)));
IkReal x7867=(r22*sj1*sj2);
IkReal x7868=(cj1*cj2*r22);
CheckValue<IkReal> x7875=IKPowWithIntegerCheck(x7866,-1);
if(!x7875.valid){
continue;
}
IkReal x7869=x7875.value;
CheckValue<IkReal> x7876=IKPowWithIntegerCheck(((-1.0)+x7865),-1);
if(!x7876.valid){
continue;
}
IkReal x7870=x7876.value;
IkReal x7871=((1.0)*x7869);
if((x7866) < -0.00001)
continue;
IkReal x7872=IKsqrt(x7866);
IkReal x7873=(r12*x7870*x7872);
IkReal x7874=((((-1.0)*x7871*(r11*r11)*(r21*r21)))+(((-1.0)*x7871*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x7869)));
j4eval[0]=x7874;
j4eval[1]=((IKabs((x7867+(((-1.0)*x7868)))))+(IKabs(((((-1.0)*x7867*x7873))+((x7868*x7873))))));
j4eval[2]=IKsign(x7874);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7877=(gconst143*r20);
IkReal x7878=(sj1*sj2);
IkReal x7879=(cj1*cj2);
IkReal x7880=(gconst142*r21);
CheckValue<IkReal> x7881=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x7877*x7877)))+(((-1.0)*(x7880*x7880)))+(((-1.0)*(r22*r22)))+(((2.0)*x7877*x7880)))),-1);
if(!x7881.valid){
continue;
}
CheckValue<IkReal> x7882 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7879))+((r22*x7878)))),IkReal((((x7877*x7878))+((x7879*x7880))+(((-1.0)*x7878*x7880))+(((-1.0)*x7877*x7879)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7881.value)))+(x7882.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7883=IKsin(j4);
IkReal x7884=IKcos(j4);
IkReal x7885=(gconst143*r00);
IkReal x7886=(gconst142*r21);
IkReal x7887=((1.0)*cj2);
IkReal x7888=((1.0)*sj0);
IkReal x7889=(gconst142*r11);
IkReal x7890=(gconst142*r01);
IkReal x7891=(cj1*sj2);
IkReal x7892=((1.0)*x7884);
IkReal x7893=((1.0)*x7883);
IkReal x7894=(gconst143*x7884);
IkReal x7895=(gconst143*x7883);
evalcond[0]=((((-1.0)*x7886*x7893))+(((-1.0)*r22*x7892))+((r20*x7895)));
evalcond[1]=(cj0+(((-1.0)*r12*x7892))+(((-1.0)*x7889*x7893))+((r10*x7895)));
evalcond[2]=(((x7883*x7885))+(((-1.0)*x7888))+(((-1.0)*x7890*x7893))+(((-1.0)*r02*x7892)));
evalcond[3]=((((-1.0)*x7886*x7892))+(((-1.0)*cj1*x7887))+((sj1*sj2))+((r22*x7883))+((r20*x7894)));
evalcond[4]=((((-1.0)*cj0*sj1*x7887))+((x7884*x7885))+(((-1.0)*x7890*x7892))+(((-1.0)*cj0*x7891))+((r02*x7883)));
evalcond[5]=((((-1.0)*x7888*x7891))+((r12*x7883))+(((-1.0)*x7889*x7892))+(((-1.0)*sj0*sj1*x7887))+((r10*x7894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7896=((1.0)*sj0);
IkReal x7897=((1.0)*cj0);
CheckValue<IkReal> x7898=IKPowWithIntegerCheck(IKsign((((gconst143*r21))+((gconst142*r20)))),-1);
if(!x7898.valid){
continue;
}
CheckValue<IkReal> x7899 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7896))+(((-1.0)*r02*x7897)))),IkReal((((cj0*gconst142*r01))+(((-1.0)*gconst143*r00*x7897))+((gconst142*r11*sj0))+(((-1.0)*gconst143*r10*x7896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7898.value)))+(x7899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7900=IKsin(j4);
IkReal x7901=IKcos(j4);
IkReal x7902=(gconst143*r00);
IkReal x7903=(gconst142*r21);
IkReal x7904=((1.0)*cj2);
IkReal x7905=((1.0)*sj0);
IkReal x7906=(gconst142*r11);
IkReal x7907=(gconst142*r01);
IkReal x7908=(cj1*sj2);
IkReal x7909=((1.0)*x7901);
IkReal x7910=((1.0)*x7900);
IkReal x7911=(gconst143*x7901);
IkReal x7912=(gconst143*x7900);
evalcond[0]=(((r20*x7912))+(((-1.0)*r22*x7909))+(((-1.0)*x7903*x7910)));
evalcond[1]=((((-1.0)*r12*x7909))+(((-1.0)*x7906*x7910))+cj0+((r10*x7912)));
evalcond[2]=((((-1.0)*x7907*x7910))+(((-1.0)*x7905))+((x7900*x7902))+(((-1.0)*r02*x7909)));
evalcond[3]=(((r20*x7911))+((sj1*sj2))+(((-1.0)*cj1*x7904))+((r22*x7900))+(((-1.0)*x7903*x7909)));
evalcond[4]=(((r02*x7900))+(((-1.0)*cj0*sj1*x7904))+(((-1.0)*x7907*x7909))+(((-1.0)*cj0*x7908))+((x7901*x7902)));
evalcond[5]=((((-1.0)*x7905*x7908))+((r10*x7911))+(((-1.0)*sj0*sj1*x7904))+(((-1.0)*x7906*x7909))+((r12*x7900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7913=IKPowWithIntegerCheck(IKsign((((gconst143*r01))+((gconst142*r00)))),-1);
if(!x7913.valid){
continue;
}
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst142*r21))+((cj0*gconst143*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7913.value)))+(x7914.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7915=IKsin(j4);
IkReal x7916=IKcos(j4);
IkReal x7917=(gconst143*r00);
IkReal x7918=(gconst142*r21);
IkReal x7919=((1.0)*cj2);
IkReal x7920=((1.0)*sj0);
IkReal x7921=(gconst142*r11);
IkReal x7922=(gconst142*r01);
IkReal x7923=(cj1*sj2);
IkReal x7924=((1.0)*x7916);
IkReal x7925=((1.0)*x7915);
IkReal x7926=(gconst143*x7916);
IkReal x7927=(gconst143*x7915);
evalcond[0]=((((-1.0)*r22*x7924))+((r20*x7927))+(((-1.0)*x7918*x7925)));
evalcond[1]=((((-1.0)*x7921*x7925))+cj0+((r10*x7927))+(((-1.0)*r12*x7924)));
evalcond[2]=((((-1.0)*x7920))+(((-1.0)*r02*x7924))+(((-1.0)*x7922*x7925))+((x7915*x7917)));
evalcond[3]=(((r22*x7915))+((r20*x7926))+((sj1*sj2))+(((-1.0)*cj1*x7919))+(((-1.0)*x7918*x7924)));
evalcond[4]=((((-1.0)*x7922*x7924))+((r02*x7915))+(((-1.0)*cj0*sj1*x7919))+((x7916*x7917))+(((-1.0)*cj0*x7923)));
evalcond[5]=((((-1.0)*x7921*x7924))+(((-1.0)*x7920*x7923))+((r10*x7926))+((r12*x7915))+(((-1.0)*sj0*sj1*x7919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7928=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7928;
j4eval[1]=IKsign(x7928);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7929=((1.0)*sj5);
IkReal x7930=((((-1.0)*r20*x7929))+(((-1.0)*cj5*r21)));
j4eval[0]=x7930;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7929))+((cj5*r00))))));
j4eval[2]=IKsign(x7930);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7931=(sj1*sj2);
IkReal x7932=(cj1*cj2);
IkReal x7933=(r11*sj5);
IkReal x7934=(cj5*r10);
IkReal x7935=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7935;
j4eval[1]=IKsign(x7935);
j4eval[2]=((IKabs((((x7932*x7933))+((x7931*x7934))+(((-1.0)*x7932*x7934))+(((-1.0)*x7931*x7933)))))+(IKabs(((((-1.0)*r12*x7931))+((r12*x7932))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7936=(sj1*sj2);
IkReal x7937=(cj1*cj2);
IkReal x7938=(cj5*r10);
IkReal x7939=(r11*sj5);
CheckValue<IkReal> x7940 = IKatan2WithCheck(IkReal(((((-1.0)*x7937*x7938))+((x7937*x7939))+((x7936*x7938))+(((-1.0)*x7936*x7939)))),IkReal(((((-1.0)*r12*x7936))+((r12*x7937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7940.valid){
continue;
}
CheckValue<IkReal> x7941=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7940.value)+(((1.5707963267949)*(x7941.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7942=IKcos(j4);
IkReal x7943=IKsin(j4);
IkReal x7944=(cj5*r10);
IkReal x7945=((1.0)*cj1);
IkReal x7946=((1.0)*x7942);
IkReal x7947=(cj5*x7943);
IkReal x7948=(cj5*x7942);
IkReal x7949=((1.0)*sj5*x7943);
evalcond[0]=((((-1.0)*r11*sj5*x7946))+((r12*x7943))+((x7942*x7944)));
evalcond[1]=((((-1.0)*r22*x7946))+((r20*x7947))+(((-1.0)*r21*x7949)));
evalcond[2]=((((-1.0)*r01*x7949))+(((-1.0)*r02*x7946))+((r00*x7947)));
evalcond[3]=((1.0)+(((-1.0)*r11*x7949))+(((-1.0)*r12*x7946))+((x7943*x7944)));
evalcond[4]=((((-1.0)*r21*sj5*x7946))+((r20*x7948))+((sj1*sj2))+(((-1.0)*cj2*x7945))+((r22*x7943)));
evalcond[5]=(((r02*x7943))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x7945))+(((-1.0)*r01*sj5*x7946))+((r00*x7948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7950=((1.0)*sj5);
CheckValue<IkReal> x7951 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x7950))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7951.valid){
continue;
}
CheckValue<IkReal> x7952=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x7950)))),-1);
if(!x7952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7951.value)+(((1.5707963267949)*(x7952.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7953=IKcos(j4);
IkReal x7954=IKsin(j4);
IkReal x7955=(cj5*r10);
IkReal x7956=((1.0)*cj1);
IkReal x7957=((1.0)*x7953);
IkReal x7958=(cj5*x7954);
IkReal x7959=(cj5*x7953);
IkReal x7960=((1.0)*sj5*x7954);
evalcond[0]=(((r12*x7954))+(((-1.0)*r11*sj5*x7957))+((x7953*x7955)));
evalcond[1]=((((-1.0)*r22*x7957))+((r20*x7958))+(((-1.0)*r21*x7960)));
evalcond[2]=(((r00*x7958))+(((-1.0)*r02*x7957))+(((-1.0)*r01*x7960)));
evalcond[3]=((1.0)+((x7954*x7955))+(((-1.0)*r11*x7960))+(((-1.0)*r12*x7957)));
evalcond[4]=(((r22*x7954))+((sj1*sj2))+(((-1.0)*r21*sj5*x7957))+((r20*x7959))+(((-1.0)*cj2*x7956)));
evalcond[5]=(((r00*x7959))+(((-1.0)*cj2*sj1))+((r02*x7954))+(((-1.0)*r01*sj5*x7957))+(((-1.0)*sj2*x7956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7961=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7961.valid){
continue;
}
CheckValue<IkReal> x7962 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7961.value)))+(x7962.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7963=IKcos(j4);
IkReal x7964=IKsin(j4);
IkReal x7965=(cj5*r10);
IkReal x7966=((1.0)*cj1);
IkReal x7967=((1.0)*x7963);
IkReal x7968=(cj5*x7964);
IkReal x7969=(cj5*x7963);
IkReal x7970=((1.0)*sj5*x7964);
evalcond[0]=(((x7963*x7965))+(((-1.0)*r11*sj5*x7967))+((r12*x7964)));
evalcond[1]=((((-1.0)*r22*x7967))+((r20*x7968))+(((-1.0)*r21*x7970)));
evalcond[2]=(((r00*x7968))+(((-1.0)*r01*x7970))+(((-1.0)*r02*x7967)));
evalcond[3]=((1.0)+((x7964*x7965))+(((-1.0)*r12*x7967))+(((-1.0)*r11*x7970)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x7967))+((r20*x7969))+(((-1.0)*cj2*x7966))+((r22*x7964)));
evalcond[5]=(((r00*x7969))+(((-1.0)*cj2*sj1))+((r02*x7964))+(((-1.0)*r01*sj5*x7967))+(((-1.0)*sj2*x7966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7971=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7971;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7972=((1.0)*sj5);
IkReal x7973=((((-1.0)*r00*x7972))+(((-1.0)*cj5*r01)));
j4eval[0]=x7973;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x7972)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7974=cj5*cj5;
IkReal x7975=r11*r11;
IkReal x7976=(r11*sj5);
IkReal x7977=(cj5*r10);
IkReal x7978=((r12*r12)+x7975+(((-1.0)*x7974*x7975))+((x7974*(r10*r10)))+(((-2.0)*x7976*x7977)));
j4eval[0]=x7978;
j4eval[1]=IKsign(x7978);
j4eval[2]=((IKabs(r12))+(IKabs((x7977+(((-1.0)*x7976))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7979=cj5*cj5;
IkReal x7980=r11*r11;
IkReal x7981=(cj5*r10);
IkReal x7982=(r11*sj5);
CheckValue<IkReal> x7983 = IKatan2WithCheck(IkReal((x7981+(((-1.0)*x7982)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x7983.valid){
continue;
}
CheckValue<IkReal> x7984=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7981*x7982))+x7980+(((-1.0)*x7979*x7980))+((x7979*(r10*r10))))),-1);
if(!x7984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7983.value)+(((1.5707963267949)*(x7984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7985=IKcos(j4);
IkReal x7986=IKsin(j4);
IkReal x7987=(cj5*r10);
IkReal x7988=((1.0)*x7985);
IkReal x7989=(cj5*x7986);
IkReal x7990=(cj5*x7985);
IkReal x7991=((1.0)*sj5*x7986);
evalcond[0]=((((-1.0)*r11*sj5*x7988))+((r12*x7986))+((x7985*x7987)));
evalcond[1]=((((-1.0)*r22*x7988))+(((-1.0)*r21*x7991))+((r20*x7989)));
evalcond[2]=((((-1.0)*r01*x7991))+((r00*x7989))+(((-1.0)*r02*x7988)));
evalcond[3]=((-1.0)+((x7986*x7987))+(((-1.0)*r12*x7988))+(((-1.0)*r11*x7991)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*sj5*x7988))+((r00*x7990))+((r02*x7986)));
evalcond[5]=(((r20*x7990))+(((-1.0)*r21*sj5*x7988))+((r22*x7986))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7992=((1.0)*sj5);
CheckValue<IkReal> x7993=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7992))+(((-1.0)*cj5*r01)))),-1);
if(!x7993.valid){
continue;
}
CheckValue<IkReal> x7994 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x7992))+((cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7993.value)))+(x7994.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7995=IKcos(j4);
IkReal x7996=IKsin(j4);
IkReal x7997=(cj5*r10);
IkReal x7998=((1.0)*x7995);
IkReal x7999=(cj5*x7996);
IkReal x8000=(cj5*x7995);
IkReal x8001=((1.0)*sj5*x7996);
evalcond[0]=((((-1.0)*r11*sj5*x7998))+((x7995*x7997))+((r12*x7996)));
evalcond[1]=(((r20*x7999))+(((-1.0)*r21*x8001))+(((-1.0)*r22*x7998)));
evalcond[2]=(((r00*x7999))+(((-1.0)*r01*x8001))+(((-1.0)*r02*x7998)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7998))+((x7996*x7997))+(((-1.0)*r11*x8001)));
evalcond[4]=(((cj2*sj1))+((r00*x8000))+((cj1*sj2))+(((-1.0)*r01*sj5*x7998))+((r02*x7996)));
evalcond[5]=(((r20*x8000))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x7996))+(((-1.0)*r21*sj5*x7998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8002=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8002.valid){
continue;
}
CheckValue<IkReal> x8003 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8002.value)))+(x8003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8004=IKcos(j4);
IkReal x8005=IKsin(j4);
IkReal x8006=(cj5*r10);
IkReal x8007=((1.0)*x8004);
IkReal x8008=(cj5*x8005);
IkReal x8009=(cj5*x8004);
IkReal x8010=((1.0)*sj5*x8005);
evalcond[0]=((((-1.0)*r11*sj5*x8007))+((r12*x8005))+((x8004*x8006)));
evalcond[1]=(((r20*x8008))+(((-1.0)*r21*x8010))+(((-1.0)*r22*x8007)));
evalcond[2]=((((-1.0)*r01*x8010))+((r00*x8008))+(((-1.0)*r02*x8007)));
evalcond[3]=((-1.0)+((x8005*x8006))+(((-1.0)*r12*x8007))+(((-1.0)*r11*x8010)));
evalcond[4]=(((cj2*sj1))+((r00*x8009))+((cj1*sj2))+((r02*x8005))+(((-1.0)*r01*sj5*x8007)));
evalcond[5]=(((r20*x8009))+(((-1.0)*r21*sj5*x8007))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8012 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8012)==0){
continue;
}
IkReal x8011=pow(x8012,-0.5);
CheckValue<IkReal> x8013 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8013.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8013.value));
IkReal gconst145=((-1.0)*r01*x8011);
IkReal gconst146=(r00*x8011);
CheckValue<IkReal> x8014 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8014.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8014.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
IkReal x8015=((-1.0)*(x8017.value));
IkReal x8016=x8011;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst145;
cj5=gconst146;
j5=x8015;
IkReal gconst144=x8015;
IkReal gconst145=((-1.0)*r01*x8016);
IkReal gconst146=(r00*x8016);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8018=((1.0)*sj0);
IkReal x8019=((1.0)*cj0);
CheckValue<IkReal> x8020=IKPowWithIntegerCheck(IKsign((((gconst145*r20))+((gconst146*r21)))),-1);
if(!x8020.valid){
continue;
}
CheckValue<IkReal> x8021 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8019))+(((-1.0)*r12*x8018)))),IkReal((((cj0*gconst145*r01))+(((-1.0)*gconst146*r00*x8019))+(((-1.0)*gconst146*r10*x8018))+((gconst145*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8020.value)))+(x8021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8022=IKsin(j4);
IkReal x8023=IKcos(j4);
IkReal x8024=(gconst145*r11);
IkReal x8025=((1.0)*cj2);
IkReal x8026=(gconst145*r01);
IkReal x8027=(gconst145*r21);
IkReal x8028=((1.0)*sj0);
IkReal x8029=(cj1*sj2);
IkReal x8030=((1.0)*x8023);
IkReal x8031=(gconst146*x8023);
IkReal x8032=(gconst146*x8022);
IkReal x8033=((1.0)*x8022);
evalcond[0]=(((r20*x8032))+(((-1.0)*r22*x8030))+(((-1.0)*x8027*x8033)));
evalcond[1]=((((-1.0)*x8024*x8033))+((r10*x8032))+cj0+(((-1.0)*r12*x8030)));
evalcond[2]=((((-1.0)*r02*x8030))+(((-1.0)*x8026*x8033))+((r00*x8032))+(((-1.0)*x8028)));
evalcond[3]=(((r20*x8031))+((sj1*sj2))+(((-1.0)*cj1*x8025))+(((-1.0)*x8027*x8030))+((r22*x8022)));
evalcond[4]=((((-1.0)*cj0*x8029))+((r02*x8022))+(((-1.0)*x8026*x8030))+((r00*x8031))+(((-1.0)*cj0*sj1*x8025)));
evalcond[5]=((((-1.0)*x8024*x8030))+((r10*x8031))+(((-1.0)*sj0*sj1*x8025))+((r12*x8022))+(((-1.0)*x8028*x8029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8034 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst146*r20*sj0))+(((-1.0)*gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8034.valid){
continue;
}
CheckValue<IkReal> x8035=IKPowWithIntegerCheck(IKsign((((gconst145*r10))+((gconst146*r11)))),-1);
if(!x8035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8034.value)+(((1.5707963267949)*(x8035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8036=IKsin(j4);
IkReal x8037=IKcos(j4);
IkReal x8038=(gconst145*r11);
IkReal x8039=((1.0)*cj2);
IkReal x8040=(gconst145*r01);
IkReal x8041=(gconst145*r21);
IkReal x8042=((1.0)*sj0);
IkReal x8043=(cj1*sj2);
IkReal x8044=((1.0)*x8037);
IkReal x8045=(gconst146*x8037);
IkReal x8046=(gconst146*x8036);
IkReal x8047=((1.0)*x8036);
evalcond[0]=(((r20*x8046))+(((-1.0)*x8041*x8047))+(((-1.0)*r22*x8044)));
evalcond[1]=(cj0+((r10*x8046))+(((-1.0)*x8038*x8047))+(((-1.0)*r12*x8044)));
evalcond[2]=((((-1.0)*x8040*x8047))+(((-1.0)*r02*x8044))+(((-1.0)*x8042))+((r00*x8046)));
evalcond[3]=(((r20*x8045))+((sj1*sj2))+(((-1.0)*cj1*x8039))+(((-1.0)*x8041*x8044))+((r22*x8036)));
evalcond[4]=((((-1.0)*cj0*sj1*x8039))+(((-1.0)*cj0*x8043))+((r02*x8036))+(((-1.0)*x8040*x8044))+((r00*x8045)));
evalcond[5]=(((r10*x8045))+(((-1.0)*x8042*x8043))+(((-1.0)*sj0*sj1*x8039))+((r12*x8036))+(((-1.0)*x8038*x8044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8049 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8049)==0){
continue;
}
IkReal x8048=pow(x8049,-0.5);
CheckValue<IkReal> x8050 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8050.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8050.value))));
IkReal gconst148=((1.0)*r01*x8048);
IkReal gconst149=((-1.0)*r00*x8048);
CheckValue<IkReal> x8051 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8051.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8051.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x8054 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8054.valid){
continue;
}
IkReal x8052=((1.0)*(x8054.value));
IkReal x8053=x8048;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8052)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8052)));
IkReal gconst148=((1.0)*r01*x8053);
IkReal gconst149=((-1.0)*r00*x8053);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x8057 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8057.valid){
continue;
}
IkReal x8055=((1.0)*(x8057.value));
IkReal x8056=x8048;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8055)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8055)));
IkReal gconst148=((1.0)*r01*x8056);
IkReal gconst149=((-1.0)*r00*x8056);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8060 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x8060.valid){
continue;
}
IkReal x8058=((1.0)*(x8060.value));
IkReal x8059=x8048;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8058)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8058)));
IkReal gconst148=((1.0)*r01*x8059);
IkReal gconst149=((-1.0)*r00*x8059);
IkReal x8061=r02*r02;
IkReal x8062=(r12*sj0);
IkReal x8063=((1.0)*cj0);
IkReal x8064=x8048;
j4eval[0]=((IKabs((((cj0*x8061*x8064))+((r02*x8062*x8064))+(((-1.0)*x8063*x8064)))))+(IKabs(((((-1.0)*x8062))+(((-1.0)*r02*x8063))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8065=((1.0)*sj0);
IkReal x8066=((1.0)*cj0);
CheckValue<IkReal> x8067 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8065))+(((-1.0)*r02*x8066)))),IkReal((((cj0*gconst148*r01))+(((-1.0)*gconst149*r10*x8065))+(((-1.0)*gconst149*r00*x8066))+((gconst148*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8067.valid){
continue;
}
CheckValue<IkReal> x8068=IKPowWithIntegerCheck(IKsign((((gconst148*r20))+((gconst149*r21)))),-1);
if(!x8068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8067.value)+(((1.5707963267949)*(x8068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8069=IKsin(j4);
IkReal x8070=IKcos(j4);
IkReal x8071=(gconst148*r11);
IkReal x8072=(gconst148*r21);
IkReal x8073=((1.0)*cj2);
IkReal x8074=((1.0)*sj0);
IkReal x8075=(gconst148*r01);
IkReal x8076=(cj1*sj2);
IkReal x8077=((1.0)*x8070);
IkReal x8078=(gconst149*x8070);
IkReal x8079=(gconst149*x8069);
IkReal x8080=((1.0)*x8069);
evalcond[0]=(((r20*x8079))+(((-1.0)*r22*x8077))+(((-1.0)*x8072*x8080)));
evalcond[1]=(((r10*x8079))+cj0+(((-1.0)*x8071*x8080))+(((-1.0)*r12*x8077)));
evalcond[2]=((((-1.0)*r02*x8077))+((r00*x8079))+(((-1.0)*x8074))+(((-1.0)*x8075*x8080)));
evalcond[3]=((((-1.0)*x8072*x8077))+((r22*x8069))+((r20*x8078))+((sj1*sj2))+(((-1.0)*cj1*x8073)));
evalcond[4]=(((r00*x8078))+((r02*x8069))+(((-1.0)*x8075*x8077))+(((-1.0)*cj0*sj1*x8073))+(((-1.0)*cj0*x8076)));
evalcond[5]=(((r10*x8078))+(((-1.0)*sj0*sj1*x8073))+(((-1.0)*x8071*x8077))+(((-1.0)*x8074*x8076))+((r12*x8069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8081 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst149*r20*sj0))+(((-1.0)*gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8081.valid){
continue;
}
CheckValue<IkReal> x8082=IKPowWithIntegerCheck(IKsign((((gconst148*r10))+((gconst149*r11)))),-1);
if(!x8082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8081.value)+(((1.5707963267949)*(x8082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8083=IKsin(j4);
IkReal x8084=IKcos(j4);
IkReal x8085=(gconst148*r11);
IkReal x8086=(gconst148*r21);
IkReal x8087=((1.0)*cj2);
IkReal x8088=((1.0)*sj0);
IkReal x8089=(gconst148*r01);
IkReal x8090=(cj1*sj2);
IkReal x8091=((1.0)*x8084);
IkReal x8092=(gconst149*x8084);
IkReal x8093=(gconst149*x8083);
IkReal x8094=((1.0)*x8083);
evalcond[0]=((((-1.0)*r22*x8091))+(((-1.0)*x8086*x8094))+((r20*x8093)));
evalcond[1]=((((-1.0)*x8085*x8094))+cj0+((r10*x8093))+(((-1.0)*r12*x8091)));
evalcond[2]=((((-1.0)*r02*x8091))+(((-1.0)*x8088))+((r00*x8093))+(((-1.0)*x8089*x8094)));
evalcond[3]=(((sj1*sj2))+((r22*x8083))+(((-1.0)*x8086*x8091))+(((-1.0)*cj1*x8087))+((r20*x8092)));
evalcond[4]=(((r00*x8092))+(((-1.0)*x8089*x8091))+(((-1.0)*cj0*sj1*x8087))+(((-1.0)*cj0*x8090))+((r02*x8083)));
evalcond[5]=((((-1.0)*x8085*x8091))+((r10*x8092))+(((-1.0)*sj0*sj1*x8087))+((r12*x8083))+(((-1.0)*x8088*x8090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8095=IKPowWithIntegerCheck(IKsign((((gconst148*r00))+((gconst149*r01)))),-1);
if(!x8095.valid){
continue;
}
CheckValue<IkReal> x8096 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst148*r21))+((cj0*gconst149*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8095.value)))+(x8096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8097=IKsin(j4);
IkReal x8098=IKcos(j4);
IkReal x8099=(gconst148*r11);
IkReal x8100=(gconst148*r21);
IkReal x8101=((1.0)*cj2);
IkReal x8102=((1.0)*sj0);
IkReal x8103=(gconst148*r01);
IkReal x8104=(cj1*sj2);
IkReal x8105=((1.0)*x8098);
IkReal x8106=(gconst149*x8098);
IkReal x8107=(gconst149*x8097);
IkReal x8108=((1.0)*x8097);
evalcond[0]=(((r20*x8107))+(((-1.0)*r22*x8105))+(((-1.0)*x8100*x8108)));
evalcond[1]=((((-1.0)*x8099*x8108))+cj0+((r10*x8107))+(((-1.0)*r12*x8105)));
evalcond[2]=((((-1.0)*x8102))+(((-1.0)*x8103*x8108))+((r00*x8107))+(((-1.0)*r02*x8105)));
evalcond[3]=(((r22*x8097))+((r20*x8106))+((sj1*sj2))+(((-1.0)*cj1*x8101))+(((-1.0)*x8100*x8105)));
evalcond[4]=((((-1.0)*cj0*x8104))+(((-1.0)*cj0*sj1*x8101))+(((-1.0)*x8103*x8105))+((r00*x8106))+((r02*x8097)));
evalcond[5]=((((-1.0)*x8099*x8105))+(((-1.0)*sj0*sj1*x8101))+(((-1.0)*x8102*x8104))+((r10*x8106))+((r12*x8097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8109=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8109;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x8109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8110=((1.0)*sj5);
IkReal x8111=((((-1.0)*r20*x8110))+(((-1.0)*cj5*r21)));
j4eval[0]=x8111;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x8110))))));
j4eval[2]=IKsign(x8111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8112=cj5*cj5;
IkReal x8113=r01*r01;
IkReal x8114=(cj5*r00);
IkReal x8115=(r01*sj5);
IkReal x8116=(((x8112*(r00*r00)))+(((-1.0)*x8112*x8113))+(r02*r02)+x8113+(((-2.0)*x8114*x8115)));
j4eval[0]=x8116;
j4eval[1]=((IKabs(r02))+(IKabs((x8114+(((-1.0)*x8115))))));
j4eval[2]=IKsign(x8116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8117=cj5*cj5;
IkReal x8118=r01*r01;
IkReal x8119=(r01*sj5);
IkReal x8120=(cj5*r00);
CheckValue<IkReal> x8121=IKPowWithIntegerCheck(IKsign((((x8117*(r00*r00)))+(((-2.0)*x8119*x8120))+(r02*r02)+x8118+(((-1.0)*x8117*x8118)))),-1);
if(!x8121.valid){
continue;
}
CheckValue<IkReal> x8122 = IKatan2WithCheck(IkReal((x8120+(((-1.0)*x8119)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8121.value)))+(x8122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8123=IKcos(j4);
IkReal x8124=IKsin(j4);
IkReal x8125=((1.0)*cj1);
IkReal x8126=((1.0)*x8123);
IkReal x8127=(cj5*x8123);
IkReal x8128=(cj5*x8124);
IkReal x8129=((1.0)*sj5*x8124);
evalcond[0]=(((r02*x8124))+((r00*x8127))+(((-1.0)*r01*sj5*x8126)));
evalcond[1]=((((-1.0)*r21*x8129))+((r20*x8128))+(((-1.0)*r22*x8126)));
evalcond[2]=((((-1.0)*r12*x8126))+(((-1.0)*r11*x8129))+((r10*x8128)));
evalcond[3]=((-1.0)+((r00*x8128))+(((-1.0)*r02*x8126))+(((-1.0)*r01*x8129)));
evalcond[4]=((((-1.0)*r21*sj5*x8126))+((sj1*sj2))+((r20*x8127))+((r22*x8124))+(((-1.0)*cj2*x8125)));
evalcond[5]=((((-1.0)*r11*sj5*x8126))+(((-1.0)*cj2*sj1))+((r10*x8127))+((r12*x8124))+(((-1.0)*sj2*x8125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8130=((1.0)*sj5);
CheckValue<IkReal> x8131 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x8130)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8131.valid){
continue;
}
CheckValue<IkReal> x8132=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x8130)))),-1);
if(!x8132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8131.value)+(((1.5707963267949)*(x8132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8133=IKcos(j4);
IkReal x8134=IKsin(j4);
IkReal x8135=((1.0)*cj1);
IkReal x8136=((1.0)*x8133);
IkReal x8137=(cj5*x8133);
IkReal x8138=(cj5*x8134);
IkReal x8139=((1.0)*sj5*x8134);
evalcond[0]=(((r00*x8137))+((r02*x8134))+(((-1.0)*r01*sj5*x8136)));
evalcond[1]=((((-1.0)*r22*x8136))+((r20*x8138))+(((-1.0)*r21*x8139)));
evalcond[2]=((((-1.0)*r11*x8139))+(((-1.0)*r12*x8136))+((r10*x8138)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8136))+((r00*x8138))+(((-1.0)*r01*x8139)));
evalcond[4]=(((r22*x8134))+(((-1.0)*r21*sj5*x8136))+(((-1.0)*cj2*x8135))+((sj1*sj2))+((r20*x8137)));
evalcond[5]=((((-1.0)*sj2*x8135))+((r12*x8134))+(((-1.0)*cj2*sj1))+(((-1.0)*r11*sj5*x8136))+((r10*x8137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8140=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8140.valid){
continue;
}
CheckValue<IkReal> x8141 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8140.value)))+(x8141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8142=IKcos(j4);
IkReal x8143=IKsin(j4);
IkReal x8144=((1.0)*cj1);
IkReal x8145=((1.0)*x8142);
IkReal x8146=(cj5*x8142);
IkReal x8147=(cj5*x8143);
IkReal x8148=((1.0)*sj5*x8143);
evalcond[0]=(((r00*x8146))+((r02*x8143))+(((-1.0)*r01*sj5*x8145)));
evalcond[1]=((((-1.0)*r21*x8148))+((r20*x8147))+(((-1.0)*r22*x8145)));
evalcond[2]=(((r10*x8147))+(((-1.0)*r12*x8145))+(((-1.0)*r11*x8148)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x8148))+(((-1.0)*r02*x8145))+((r00*x8147)));
evalcond[4]=(((r20*x8146))+((sj1*sj2))+((r22*x8143))+(((-1.0)*r21*sj5*x8145))+(((-1.0)*cj2*x8144)));
evalcond[5]=((((-1.0)*r11*sj5*x8145))+(((-1.0)*cj2*sj1))+((r10*x8146))+(((-1.0)*sj2*x8144))+((r12*x8143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8149=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8149;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x8149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8150=((1.0)*sj5);
IkReal x8151=((((-1.0)*cj5*r11))+(((-1.0)*r10*x8150)));
j4eval[0]=x8151;
j4eval[1]=IKsign(x8151);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x8150)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8152=(cj1*sj2);
IkReal x8153=(cj5*r00);
IkReal x8154=((1.0)*r02);
IkReal x8155=(cj2*sj1);
IkReal x8156=((1.0)*r01*sj5);
IkReal x8157=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8157;
j4eval[1]=((IKabs((((x8152*x8153))+((x8153*x8155))+(((-1.0)*x8155*x8156))+(((-1.0)*x8152*x8156)))))+(IKabs(((((-1.0)*x8154*x8155))+(((-1.0)*x8152*x8154))))));
j4eval[2]=IKsign(x8157);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8158=(cj1*sj2);
IkReal x8159=(cj5*r00);
IkReal x8160=((1.0)*r02);
IkReal x8161=(cj2*sj1);
IkReal x8162=((1.0)*r01*sj5);
CheckValue<IkReal> x8163=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8163.valid){
continue;
}
CheckValue<IkReal> x8164 = IKatan2WithCheck(IkReal((((x8158*x8159))+(((-1.0)*x8158*x8162))+(((-1.0)*x8161*x8162))+((x8159*x8161)))),IkReal(((((-1.0)*x8158*x8160))+(((-1.0)*x8160*x8161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8163.value)))+(x8164.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8165=IKcos(j4);
IkReal x8166=IKsin(j4);
IkReal x8167=((1.0)*x8165);
IkReal x8168=(cj5*x8165);
IkReal x8169=(cj5*x8166);
IkReal x8170=((1.0)*sj5*x8166);
evalcond[0]=((((-1.0)*r01*sj5*x8167))+((r00*x8168))+((r02*x8166)));
evalcond[1]=((((-1.0)*r21*x8170))+((r20*x8169))+(((-1.0)*r22*x8167)));
evalcond[2]=((((-1.0)*r11*x8170))+((r10*x8169))+(((-1.0)*r12*x8167)));
evalcond[3]=((1.0)+(((-1.0)*r01*x8170))+(((-1.0)*r02*x8167))+((r00*x8169)));
evalcond[4]=(((cj2*sj1))+((r12*x8166))+((r10*x8168))+((cj1*sj2))+(((-1.0)*r11*sj5*x8167)));
evalcond[5]=(((r22*x8166))+(((-1.0)*r21*sj5*x8167))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8171=((1.0)*sj5);
CheckValue<IkReal> x8172 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x8171)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8172.valid){
continue;
}
CheckValue<IkReal> x8173=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x8171)))),-1);
if(!x8173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8172.value)+(((1.5707963267949)*(x8173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8174=IKcos(j4);
IkReal x8175=IKsin(j4);
IkReal x8176=((1.0)*x8174);
IkReal x8177=(cj5*x8174);
IkReal x8178=(cj5*x8175);
IkReal x8179=((1.0)*sj5*x8175);
evalcond[0]=(((r02*x8175))+((r00*x8177))+(((-1.0)*r01*sj5*x8176)));
evalcond[1]=(((r20*x8178))+(((-1.0)*r21*x8179))+(((-1.0)*r22*x8176)));
evalcond[2]=((((-1.0)*r11*x8179))+(((-1.0)*r12*x8176))+((r10*x8178)));
evalcond[3]=((1.0)+(((-1.0)*r01*x8179))+(((-1.0)*r02*x8176))+((r00*x8178)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x8175))+((r10*x8177))+(((-1.0)*r11*sj5*x8176)));
evalcond[5]=(((r20*x8177))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8175))+(((-1.0)*r21*sj5*x8176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8180 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8180.valid){
continue;
}
CheckValue<IkReal> x8181=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8180.value)+(((1.5707963267949)*(x8181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8182=IKcos(j4);
IkReal x8183=IKsin(j4);
IkReal x8184=((1.0)*x8182);
IkReal x8185=(cj5*x8182);
IkReal x8186=(cj5*x8183);
IkReal x8187=((1.0)*sj5*x8183);
evalcond[0]=(((r00*x8185))+(((-1.0)*r01*sj5*x8184))+((r02*x8183)));
evalcond[1]=((((-1.0)*r22*x8184))+(((-1.0)*r21*x8187))+((r20*x8186)));
evalcond[2]=(((r10*x8186))+(((-1.0)*r12*x8184))+(((-1.0)*r11*x8187)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8184))+((r00*x8186))+(((-1.0)*r01*x8187)));
evalcond[4]=(((r12*x8183))+((r10*x8185))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x8184)));
evalcond[5]=(((r22*x8183))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x8184))+((r20*x8185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8188=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8188);
rxp1_1=(px*r21);
rxp1_2=(r11*x8188);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8189=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8189);
rxp1_1=(px*r21);
rxp1_2=(r11*x8189);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8190=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8190);
rxp1_1=(px*r21);
rxp1_2=(r11*x8190);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8193=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8193.valid){
continue;
}
IkReal x8191=x8193.value;
IkReal x8192=(sj0*x8191);
cj4array[0]=(((cj2*sj1*x8192))+((cj1*sj2*x8192)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8194=IKsin(j4);
IkReal x8195=IKcos(j4);
IkReal x8196=(cj5*r20);
IkReal x8197=((1.0)*sj5);
evalcond[0]=(r02*x8194);
evalcond[1]=((((-1.0)*r02*x8195))+(((-1.0)*sj0)));
evalcond[2]=(((x8194*x8196))+(((-1.0)*r21*x8194*x8197)));
evalcond[3]=((((-1.0)*r11*x8194*x8197))+((cj5*r10*x8194)));
evalcond[4]=(((x8195*x8196))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x8195*x8197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8199=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8199.valid){
continue;
}
IkReal x8198=x8199.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8198))+((cj1*cj2*x8198)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8200=IKsin(j4);
IkReal x8201=IKcos(j4);
IkReal x8202=((1.0)*sj0);
IkReal x8203=(cj5*r10);
IkReal x8204=((1.0)*r11*sj5);
evalcond[0]=(r02*x8200);
evalcond[1]=((((-1.0)*x8202))+(((-1.0)*r02*x8201)));
evalcond[2]=(((cj5*r20*x8200))+(((-1.0)*r21*sj5*x8200)));
evalcond[3]=((((-1.0)*x8200*x8204))+((x8200*x8203)));
evalcond[4]=((((-1.0)*x8201*x8204))+((x8201*x8203))+(((-1.0)*cj2*sj1*x8202))+(((-1.0)*cj1*sj2*x8202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8205=IKPowWithIntegerCheck(r02,-1);
if(!x8205.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8205.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8206=IKsin(j4);
IkReal x8207=IKcos(j4);
IkReal x8208=((1.0)*cj1);
IkReal x8209=(cj5*x8207);
IkReal x8210=(cj5*x8206);
IkReal x8211=((1.0)*sj5*x8207);
IkReal x8212=((1.0)*sj5*x8206);
evalcond[0]=(r02*x8206);
evalcond[1]=(((r20*x8210))+(((-1.0)*r21*x8212)));
evalcond[2]=((((-1.0)*r11*x8212))+((r10*x8210)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x8208))+(((-1.0)*r21*x8211))+((r20*x8209)));
evalcond[4]=((((-1.0)*sj0*sj2*x8208))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r11*x8211))+((r10*x8209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8213=((1.0)*sj0);
IkReal x8214=((1.0)*cj0);
CheckValue<IkReal> x8215=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8215.valid){
continue;
}
CheckValue<IkReal> x8216 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8214))+(((-1.0)*r12*x8213)))),IkReal((((r11*sj0*sj5))+(((-1.0)*cj5*r10*x8213))+(((-1.0)*cj5*r00*x8214))+((cj0*r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8215.value)))+(x8216.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8217=IKsin(j4);
IkReal x8218=IKcos(j4);
IkReal x8219=((1.0)*cj2);
IkReal x8220=((1.0)*sj0);
IkReal x8221=(cj1*sj2);
IkReal x8222=((1.0)*x8218);
IkReal x8223=(cj5*x8218);
IkReal x8224=(cj5*x8217);
IkReal x8225=((1.0)*sj5*x8217);
evalcond[0]=(((r20*x8224))+(((-1.0)*r22*x8222))+(((-1.0)*r21*x8225)));
evalcond[1]=(cj0+(((-1.0)*r12*x8222))+((r10*x8224))+(((-1.0)*r11*x8225)));
evalcond[2]=((((-1.0)*r02*x8222))+((r00*x8224))+(((-1.0)*x8220))+(((-1.0)*r01*x8225)));
evalcond[3]=(((r20*x8223))+((r22*x8217))+((sj1*sj2))+(((-1.0)*r21*sj5*x8222))+(((-1.0)*cj1*x8219)));
evalcond[4]=((((-1.0)*cj0*x8221))+(((-1.0)*r01*sj5*x8222))+(((-1.0)*cj0*sj1*x8219))+((r00*x8223))+((r02*x8217)));
evalcond[5]=((((-1.0)*r11*sj5*x8222))+(((-1.0)*x8220*x8221))+((r12*x8217))+((r10*x8223))+(((-1.0)*sj0*sj1*x8219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8226 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8226.valid){
continue;
}
CheckValue<IkReal> x8227=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8226.value)+(((1.5707963267949)*(x8227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8228=IKsin(j4);
IkReal x8229=IKcos(j4);
IkReal x8230=((1.0)*cj2);
IkReal x8231=((1.0)*sj0);
IkReal x8232=(cj1*sj2);
IkReal x8233=((1.0)*x8229);
IkReal x8234=(cj5*x8229);
IkReal x8235=(cj5*x8228);
IkReal x8236=((1.0)*sj5*x8228);
evalcond[0]=(((r20*x8235))+(((-1.0)*r22*x8233))+(((-1.0)*r21*x8236)));
evalcond[1]=(cj0+(((-1.0)*r11*x8236))+(((-1.0)*r12*x8233))+((r10*x8235)));
evalcond[2]=((((-1.0)*r02*x8233))+(((-1.0)*x8231))+((r00*x8235))+(((-1.0)*r01*x8236)));
evalcond[3]=(((r20*x8234))+((r22*x8228))+((sj1*sj2))+(((-1.0)*cj1*x8230))+(((-1.0)*r21*sj5*x8233)));
evalcond[4]=((((-1.0)*cj0*x8232))+((r02*x8228))+(((-1.0)*r01*sj5*x8233))+((r00*x8234))+(((-1.0)*cj0*sj1*x8230)));
evalcond[5]=((((-1.0)*sj0*sj1*x8230))+((r12*x8228))+(((-1.0)*r11*sj5*x8233))+((r10*x8234))+(((-1.0)*x8231*x8232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8237 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8237.valid){
continue;
}
CheckValue<IkReal> x8238=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8237.value)+(((1.5707963267949)*(x8238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8239=IKsin(j4);
IkReal x8240=IKcos(j4);
IkReal x8241=((1.0)*cj2);
IkReal x8242=((1.0)*sj0);
IkReal x8243=(cj1*sj2);
IkReal x8244=((1.0)*x8240);
IkReal x8245=(cj5*x8240);
IkReal x8246=(cj5*x8239);
IkReal x8247=((1.0)*sj5*x8239);
evalcond[0]=(((r20*x8246))+(((-1.0)*r21*x8247))+(((-1.0)*r22*x8244)));
evalcond[1]=(((r10*x8246))+cj0+(((-1.0)*r11*x8247))+(((-1.0)*r12*x8244)));
evalcond[2]=((((-1.0)*x8242))+(((-1.0)*r02*x8244))+(((-1.0)*r01*x8247))+((r00*x8246)));
evalcond[3]=(((r20*x8245))+((sj1*sj2))+((r22*x8239))+(((-1.0)*r21*sj5*x8244))+(((-1.0)*cj1*x8241)));
evalcond[4]=(((r02*x8239))+(((-1.0)*r01*sj5*x8244))+(((-1.0)*cj0*x8243))+(((-1.0)*cj0*sj1*x8241))+((r00*x8245)));
evalcond[5]=(((r12*x8239))+((r10*x8245))+(((-1.0)*sj0*sj1*x8241))+(((-1.0)*x8242*x8243))+(((-1.0)*r11*sj5*x8244)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8248=cj1*cj1;
IkReal x8249=cj2*cj2;
IkReal x8250=(cj1*cj2);
IkReal x8251=(r00*sj5);
IkReal x8252=((39220000.0)*py);
IkReal x8253=((42500000.0)*cj1);
IkReal x8254=(sj1*sj2);
IkReal x8255=((1032086.0)*cj5);
IkReal x8256=(r10*sj5);
IkReal x8257=((4020500.0)*cj1);
IkReal x8258=((39220000.0)*px);
IkReal x8259=((3710212.0)*cj5);
CheckValue<IkReal> x8260 = IKatan2WithCheck(IkReal((((r01*x8255))+(((3710212.0)*x8254*x8256))+(((-1.0)*x8252*x8254))+((r11*x8254*x8259))+(((-1.0)*r11*x8250*x8259))+(((-1.0)*cj5*r11*x8257))+(((-3710212.0)*x8250*x8256))+(((1032086.0)*x8251))+(((-10910000.0)*px))+((x8250*x8252))+(((-1.0)*x8256*x8257))+((py*x8253)))),IkReal(((((-1.0)*r11*x8255))+(((-1.0)*x8251*x8257))+(((10910000.0)*py))+(((3710212.0)*x8251*x8254))+((r01*x8254*x8259))+(((-3710212.0)*x8250*x8251))+(((-1.0)*cj5*r01*x8257))+(((-1.0)*x8254*x8258))+((x8250*x8258))+(((-1032086.0)*x8256))+(((-1.0)*r01*x8250*x8259))+((px*x8253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8260.valid){
continue;
}
CheckValue<IkReal> x8261=IKPowWithIntegerCheck(IKsign(((16572365.0)+(((2680416.0)*x8248))+(((33337000.0)*cj2*x8248))+(((-15382084.0)*x8249))+(((30764168.0)*x8248*x8249))+(((-33337000.0)*cj1*x8254))+(((-30764168.0)*x8250*x8254)))),-1);
if(!x8261.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8260.value)+(((1.5707963267949)*(x8261.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8262=IKcos(j0);
IkReal x8263=IKsin(j0);
IkReal x8264=((0.425)*cj1);
IkReal x8265=(sj1*sj2);
IkReal x8266=((0.0946)*cj5);
IkReal x8267=((0.0946)*sj5);
IkReal x8268=(cj1*cj2);
IkReal x8269=((0.3922)*x8263);
IkReal x8270=((0.3922)*x8262);
evalcond[0]=(((x8268*x8270))+(((-1.0)*px))+(((-1.0)*x8265*x8270))+((r01*x8266))+(((-0.1091)*x8263))+((r00*x8267))+((x8262*x8264)));
evalcond[1]=(((x8268*x8269))+(((-1.0)*py))+((x8263*x8264))+(((-1.0)*x8265*x8269))+(((0.1091)*x8262))+((r10*x8267))+((r11*x8266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8271=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8271;
j4eval[1]=IKsign(x8271);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8272=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8272;
j4eval[1]=IKsign(x8272);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8273=((1.0)*sj0);
IkReal x8274=((1.0)*cj0);
IkReal x8275=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8275;
j4eval[1]=IKsign(x8275);
j4eval[2]=((IKabs(((((-1.0)*r02*x8274))+(((-1.0)*r12*x8273)))))+(IKabs(((((-1.0)*cj5*r10*x8273))+((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x8274))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8277 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8277)==0){
continue;
}
IkReal x8276=pow(x8277,-0.5);
CheckValue<IkReal> x8278 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8278.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8278.value));
IkReal gconst1=((-1.0)*r21*x8276);
IkReal gconst2=(r20*x8276);
CheckValue<IkReal> x8279 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8279.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8279.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8282 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8282.valid){
continue;
}
IkReal x8280=((-1.0)*(x8282.value));
IkReal x8281=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8280;
IkReal gconst0=x8280;
IkReal gconst1=((-1.0)*r21*x8281);
IkReal gconst2=(r20*x8281);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8285 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8285.valid){
continue;
}
IkReal x8283=((-1.0)*(x8285.value));
IkReal x8284=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8283;
IkReal gconst0=x8283;
IkReal gconst1=((-1.0)*r21*x8284);
IkReal gconst2=(r20*x8284);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8288 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8288.valid){
continue;
}
IkReal x8286=((-1.0)*(x8288.value));
IkReal x8287=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8286;
IkReal gconst0=x8286;
IkReal gconst1=((-1.0)*r21*x8287);
IkReal gconst2=(r20*x8287);
IkReal x8289=r22*r22;
CheckValue<IkReal> x8293=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8289))),-1);
if(!x8293.valid){
continue;
}
IkReal x8290=x8293.value;
IkReal x8291=(cj3*x8290);
IkReal x8292=((((2.0)*x8291*(r20*r20)*(r21*r21)))+((cj3*x8289))+((x8291*(r21*r21*r21*r21)))+((x8291*(r20*r20*r20*r20))));
j4eval[0]=x8292;
j4eval[1]=IKsign(x8292);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
IkReal x8294=((-1.0)*(x8296.value));
IkReal x8295=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8294;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8294;
IkReal gconst1=((-1.0)*r21*x8295);
IkReal gconst2=(r20*x8295);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8299 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8299.valid){
continue;
}
IkReal x8297=((-1.0)*(x8299.value));
IkReal x8298=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8297;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8297;
IkReal gconst1=((-1.0)*r21*x8298);
IkReal gconst2=(r20*x8298);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8302 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8302.valid){
continue;
}
IkReal x8300=((-1.0)*(x8302.value));
IkReal x8301=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8300;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x8300;
IkReal gconst1=((-1.0)*r21*x8301);
IkReal gconst2=(r20*x8301);
IkReal x8303=r22*r22;
CheckValue<IkReal> x8306=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8303))),-1);
if(!x8306.valid){
continue;
}
IkReal x8304=x8306.value;
IkReal x8305=((((2.0)*x8304*(r20*r20)*(r21*r21)))+x8303+((x8304*(r20*r20*r20*r20)))+((x8304*(r21*r21*r21*r21))));
j4eval[0]=x8305;
j4eval[1]=IKsign(x8305);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8309 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8309.valid){
continue;
}
IkReal x8307=((-1.0)*(x8309.value));
IkReal x8308=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8307;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8307;
IkReal gconst1=((-1.0)*r21*x8308);
IkReal gconst2=(r20*x8308);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8312 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8312.valid){
continue;
}
IkReal x8310=((-1.0)*(x8312.value));
IkReal x8311=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8310;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8310;
IkReal gconst1=((-1.0)*r21*x8311);
IkReal gconst2=(r20*x8311);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8315 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8315.valid){
continue;
}
IkReal x8313=((-1.0)*(x8315.value));
IkReal x8314=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8313;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8313;
IkReal gconst1=((-1.0)*r21*x8314);
IkReal gconst2=(r20*x8314);
IkReal x8316=r22*r22;
IkReal x8317=(r12*sj1*sj2);
IkReal x8318=(cj1*cj2*r12);
CheckValue<IkReal> x8322=IKPowWithIntegerCheck(((-1.0)+x8316),-1);
if(!x8322.valid){
continue;
}
IkReal x8319=x8322.value;
if((((1.0)+(((-1.0)*x8316)))) < -0.00001)
continue;
IkReal x8320=IKsqrt(((1.0)+(((-1.0)*x8316))));
IkReal x8321=(r22*x8319*x8320);
j4eval[0]=((IKabs((x8317+(((-1.0)*x8318)))))+(IKabs(((((-1.0)*x8317*x8321))+((x8318*x8321))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8323=(sj1*sj2);
IkReal x8324=(gconst1*r11);
IkReal x8325=(gconst2*r10);
IkReal x8326=((1.0)*cj1*cj2);
CheckValue<IkReal> x8327 = IKatan2WithCheck(IkReal((((x8323*x8324))+((cj1*cj2*x8325))+(((-1.0)*x8323*x8325))+(((-1.0)*x8324*x8326)))),IkReal((((r12*x8323))+(((-1.0)*r12*x8326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8327.valid){
continue;
}
CheckValue<IkReal> x8328=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8327.value)+(((1.5707963267949)*(x8328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8329=IKsin(j4);
IkReal x8330=IKcos(j4);
IkReal x8331=(gconst1*r01);
IkReal x8332=(gconst1*r21);
IkReal x8333=((1.0)*cj2);
IkReal x8334=(gconst1*r11);
IkReal x8335=((1.0)*x8330);
IkReal x8336=((1.0)*x8329);
IkReal x8337=(gconst2*x8329);
evalcond[0]=((((-1.0)*x8332*x8336))+(((-1.0)*r22*x8335))+((r20*x8337)));
evalcond[1]=(((r00*x8337))+(((-1.0)*r02*x8335))+(((-1.0)*x8331*x8336)));
evalcond[2]=(((x8330*x8334))+(((-1.0)*r12*x8336))+(((-1.0)*gconst2*r10*x8335)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8335))+((r10*x8337))+(((-1.0)*x8334*x8336)));
evalcond[4]=(((x8330*x8332))+(((-1.0)*r22*x8336))+((sj1*sj2))+(((-1.0)*cj1*x8333))+(((-1.0)*gconst2*r20*x8335)));
evalcond[5]=(((x8330*x8331))+(((-1.0)*sj1*x8333))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x8336))+(((-1.0)*gconst2*r00*x8335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8338=(gconst2*r10);
IkReal x8339=(gconst1*r11);
CheckValue<IkReal> x8340=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x8338*x8339))+(x8339*x8339)+(x8338*x8338))),-1);
if(!x8340.valid){
continue;
}
CheckValue<IkReal> x8341 = IKatan2WithCheck(IkReal((x8339+(((-1.0)*x8338)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8340.value)))+(x8341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8342=IKsin(j4);
IkReal x8343=IKcos(j4);
IkReal x8344=(gconst1*r01);
IkReal x8345=(gconst1*r21);
IkReal x8346=((1.0)*cj2);
IkReal x8347=(gconst1*r11);
IkReal x8348=((1.0)*x8343);
IkReal x8349=((1.0)*x8342);
IkReal x8350=(gconst2*x8342);
evalcond[0]=((((-1.0)*x8345*x8349))+(((-1.0)*r22*x8348))+((r20*x8350)));
evalcond[1]=((((-1.0)*r02*x8348))+((r00*x8350))+(((-1.0)*x8344*x8349)));
evalcond[2]=((((-1.0)*gconst2*r10*x8348))+((x8343*x8347))+(((-1.0)*r12*x8349)));
evalcond[3]=((1.0)+((r10*x8350))+(((-1.0)*r12*x8348))+(((-1.0)*x8347*x8349)));
evalcond[4]=((((-1.0)*cj1*x8346))+((x8343*x8345))+((sj1*sj2))+(((-1.0)*r22*x8349))+(((-1.0)*gconst2*r20*x8348)));
evalcond[5]=((((-1.0)*r02*x8349))+((x8343*x8344))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x8348))+(((-1.0)*sj1*x8346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8351 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8351.valid){
continue;
}
CheckValue<IkReal> x8352=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8351.value)+(((1.5707963267949)*(x8352.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8353=IKsin(j4);
IkReal x8354=IKcos(j4);
IkReal x8355=(gconst1*r01);
IkReal x8356=(gconst1*r21);
IkReal x8357=((1.0)*cj2);
IkReal x8358=(gconst1*r11);
IkReal x8359=((1.0)*x8354);
IkReal x8360=((1.0)*x8353);
IkReal x8361=(gconst2*x8353);
evalcond[0]=((((-1.0)*r22*x8359))+((r20*x8361))+(((-1.0)*x8356*x8360)));
evalcond[1]=((((-1.0)*r02*x8359))+((r00*x8361))+(((-1.0)*x8355*x8360)));
evalcond[2]=(((x8354*x8358))+(((-1.0)*gconst2*r10*x8359))+(((-1.0)*r12*x8360)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8359))+(((-1.0)*x8358*x8360))+((r10*x8361)));
evalcond[4]=(((x8354*x8356))+((sj1*sj2))+(((-1.0)*cj1*x8357))+(((-1.0)*gconst2*r20*x8359))+(((-1.0)*r22*x8360)));
evalcond[5]=(((x8354*x8355))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r00*x8359))+(((-1.0)*r02*x8360))+(((-1.0)*sj1*x8357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8364 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8364.valid){
continue;
}
IkReal x8362=((-1.0)*(x8364.value));
IkReal x8363=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8362;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8362;
IkReal gconst1=((-1.0)*r21*x8363);
IkReal gconst2=(r20*x8363);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8367 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8367.valid){
continue;
}
IkReal x8365=((-1.0)*(x8367.value));
IkReal x8366=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8365;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8365;
IkReal gconst1=((-1.0)*r21*x8366);
IkReal gconst2=(r20*x8366);
IkReal x8368=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8372=IKPowWithIntegerCheck(x8368,-1);
if(!x8372.valid){
continue;
}
IkReal x8369=x8372.value;
IkReal x8370=((1.0)*x8369);
IkReal x8371=((((-1.0)*x8370*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8369))+(((-1.0)*(r12*r12)))+(((-1.0)*x8370*(r11*r11)*(r21*r21))));
j4eval[0]=x8371;
j4eval[1]=r12;
j4eval[2]=x8368;
j4eval[3]=IKsign(x8371);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8375 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8375.valid){
continue;
}
IkReal x8373=((-1.0)*(x8375.value));
IkReal x8374=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8373;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8373;
IkReal gconst1=((-1.0)*r21*x8374);
IkReal gconst2=(r20*x8374);
IkReal x8376=r22*r22;
IkReal x8377=(cj1*r02*sj2);
IkReal x8378=(cj2*r02*sj1);
CheckValue<IkReal> x8382=IKPowWithIntegerCheck(((-1.0)+x8376),-1);
if(!x8382.valid){
continue;
}
IkReal x8379=x8382.value;
if((((1.0)+(((-1.0)*x8376)))) < -0.00001)
continue;
IkReal x8380=IKsqrt(((1.0)+(((-1.0)*x8376))));
IkReal x8381=(r22*x8379*x8380);
j4eval[0]=((IKabs((x8377+x8378)))+(IKabs((((x8377*x8381))+((x8378*x8381))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8383=(gconst1*r01);
IkReal x8384=(cj2*sj1);
IkReal x8385=(gconst2*r00);
IkReal x8386=(cj1*sj2);
CheckValue<IkReal> x8387 = IKatan2WithCheck(IkReal((((r02*x8386))+((r02*x8384)))),IkReal(((((-1.0)*x8383*x8384))+(((-1.0)*x8383*x8386))+((x8385*x8386))+((x8384*x8385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8387.valid){
continue;
}
CheckValue<IkReal> x8388=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8383*x8385))+(x8383*x8383)+(r02*r02)+(x8385*x8385))),-1);
if(!x8388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8387.value)+(((1.5707963267949)*(x8388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8389=IKsin(j4);
IkReal x8390=IKcos(j4);
IkReal x8391=(gconst1*r01);
IkReal x8392=(gconst1*r21);
IkReal x8393=(gconst1*r11);
IkReal x8394=((1.0)*x8390);
IkReal x8395=((1.0)*x8389);
IkReal x8396=(gconst2*x8389);
evalcond[0]=(((r20*x8396))+(((-1.0)*x8392*x8395))+(((-1.0)*r22*x8394)));
evalcond[1]=((((-1.0)*r02*x8394))+(((-1.0)*x8391*x8395))+((r00*x8396)));
evalcond[2]=(((x8390*x8393))+(((-1.0)*gconst2*r10*x8394))+(((-1.0)*r12*x8395)));
evalcond[3]=((-1.0)+(((-1.0)*x8393*x8395))+((r10*x8396))+(((-1.0)*r12*x8394)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x8395))+((cj1*sj2))+((x8390*x8391))+(((-1.0)*gconst2*r00*x8394)));
evalcond[5]=(((x8390*x8392))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8395))+(((-1.0)*gconst2*r20*x8394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8397=(gconst1*r11);
IkReal x8398=(gconst2*r10);
CheckValue<IkReal> x8399=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8398*x8398)))+(((-1.0)*(x8397*x8397)))+(((-1.0)*(r12*r12)))+(((2.0)*x8397*x8398)))),-1);
if(!x8399.valid){
continue;
}
CheckValue<IkReal> x8400 = IKatan2WithCheck(IkReal((x8397+(((-1.0)*x8398)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8399.value)))+(x8400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8401=IKsin(j4);
IkReal x8402=IKcos(j4);
IkReal x8403=(gconst1*r01);
IkReal x8404=(gconst1*r21);
IkReal x8405=(gconst1*r11);
IkReal x8406=((1.0)*x8402);
IkReal x8407=((1.0)*x8401);
IkReal x8408=(gconst2*x8401);
evalcond[0]=((((-1.0)*r22*x8406))+(((-1.0)*x8404*x8407))+((r20*x8408)));
evalcond[1]=(((r00*x8408))+(((-1.0)*r02*x8406))+(((-1.0)*x8403*x8407)));
evalcond[2]=((((-1.0)*r12*x8407))+((x8402*x8405))+(((-1.0)*gconst2*r10*x8406)));
evalcond[3]=((-1.0)+(((-1.0)*x8405*x8407))+(((-1.0)*r12*x8406))+((r10*x8408)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r00*x8406))+(((-1.0)*r02*x8407))+((x8402*x8403)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8406))+(((-1.0)*r22*x8407))+((x8402*x8404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8409=((1.0)*gconst1);
CheckValue<IkReal> x8410 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8409))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8410.valid){
continue;
}
CheckValue<IkReal> x8411=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8409)))),-1);
if(!x8411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8410.value)+(((1.5707963267949)*(x8411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8412=IKsin(j4);
IkReal x8413=IKcos(j4);
IkReal x8414=(gconst1*r01);
IkReal x8415=(gconst1*r21);
IkReal x8416=(gconst1*r11);
IkReal x8417=((1.0)*x8413);
IkReal x8418=((1.0)*x8412);
IkReal x8419=(gconst2*x8412);
evalcond[0]=(((r20*x8419))+(((-1.0)*x8415*x8418))+(((-1.0)*r22*x8417)));
evalcond[1]=((((-1.0)*x8414*x8418))+((r00*x8419))+(((-1.0)*r02*x8417)));
evalcond[2]=((((-1.0)*r12*x8418))+((x8413*x8416))+(((-1.0)*gconst2*r10*x8417)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8417))+(((-1.0)*x8416*x8418))+((r10*x8419)));
evalcond[4]=(((cj2*sj1))+((x8413*x8414))+((cj1*sj2))+(((-1.0)*r02*x8418))+(((-1.0)*gconst2*r00*x8417)));
evalcond[5]=(((x8413*x8415))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8417))+(((-1.0)*r22*x8418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8422 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8422.valid){
continue;
}
IkReal x8420=((-1.0)*(x8422.value));
IkReal x8421=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8420;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8420;
IkReal gconst1=((-1.0)*r21*x8421);
IkReal gconst2=(r20*x8421);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8425 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8425.valid){
continue;
}
IkReal x8423=((-1.0)*(x8425.value));
IkReal x8424=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8423;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8423;
IkReal gconst1=((-1.0)*r21*x8424);
IkReal gconst2=(r20*x8424);
IkReal x8426=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8430=IKPowWithIntegerCheck(x8426,-1);
if(!x8430.valid){
continue;
}
IkReal x8427=x8430.value;
IkReal x8428=((1.0)*x8427);
IkReal x8429=((((-1.0)*x8428*(r00*r00)*(r20*r20)))+(((-1.0)*x8428*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x8427)));
j4eval[0]=x8429;
j4eval[1]=IKsign(x8429);
j4eval[2]=r02;
j4eval[3]=x8426;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
IkReal x8431=((-1.0)*(x8433.value));
IkReal x8432=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8431;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8431;
IkReal gconst1=((-1.0)*r21*x8432);
IkReal gconst2=(r20*x8432);
IkReal x8434=r22*r22;
IkReal x8435=(r02*sj1*sj2);
IkReal x8436=(cj1*cj2*r02);
CheckValue<IkReal> x8440=IKPowWithIntegerCheck(((-1.0)+x8434),-1);
if(!x8440.valid){
continue;
}
IkReal x8437=x8440.value;
if((((1.0)+(((-1.0)*x8434)))) < -0.00001)
continue;
IkReal x8438=IKsqrt(((1.0)+(((-1.0)*x8434))));
IkReal x8439=(r22*x8437*x8438);
j4eval[0]=((IKabs((x8435+(((-1.0)*x8436)))))+(IKabs((((x8436*x8439))+(((-1.0)*x8435*x8439))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8441=(sj1*sj2);
IkReal x8442=(gconst2*r00);
IkReal x8443=(gconst1*r01);
IkReal x8444=(cj1*cj2);
CheckValue<IkReal> x8445=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*gconst2*r11)))),-1);
if(!x8445.valid){
continue;
}
CheckValue<IkReal> x8446 = IKatan2WithCheck(IkReal(((((-1.0)*x8443*x8444))+((x8441*x8443))+(((-1.0)*x8441*x8442))+((x8442*x8444)))),IkReal(((((-1.0)*r02*x8444))+((r02*x8441)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8445.value)))+(x8446.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8447=IKsin(j4);
IkReal x8448=IKcos(j4);
IkReal x8449=(gconst1*r01);
IkReal x8450=(gconst1*r21);
IkReal x8451=((1.0)*cj2);
IkReal x8452=(gconst1*r11);
IkReal x8453=((1.0)*x8448);
IkReal x8454=((1.0)*x8447);
IkReal x8455=(gconst2*x8447);
evalcond[0]=((((-1.0)*x8450*x8454))+((r20*x8455))+(((-1.0)*r22*x8453)));
evalcond[1]=((((-1.0)*x8452*x8454))+(((-1.0)*r12*x8453))+((r10*x8455)));
evalcond[2]=(((x8448*x8449))+(((-1.0)*gconst2*r00*x8453))+(((-1.0)*r02*x8454)));
evalcond[3]=((-1.0)+(((-1.0)*x8449*x8454))+(((-1.0)*r02*x8453))+((r00*x8455)));
evalcond[4]=(((x8448*x8450))+((sj1*sj2))+(((-1.0)*cj1*x8451))+(((-1.0)*gconst2*r20*x8453))+(((-1.0)*r22*x8454)));
evalcond[5]=(((x8448*x8452))+(((-1.0)*gconst2*r10*x8453))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x8454))+(((-1.0)*sj1*x8451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8456=(gconst1*r01);
IkReal x8457=(gconst2*r00);
CheckValue<IkReal> x8458 = IKatan2WithCheck(IkReal((x8456+(((-1.0)*x8457)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8458.valid){
continue;
}
CheckValue<IkReal> x8459=IKPowWithIntegerCheck(IKsign(((((2.0)*x8456*x8457))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8457*x8457)))+(((-1.0)*(x8456*x8456))))),-1);
if(!x8459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8458.value)+(((1.5707963267949)*(x8459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8460=IKsin(j4);
IkReal x8461=IKcos(j4);
IkReal x8462=(gconst1*r01);
IkReal x8463=(gconst1*r21);
IkReal x8464=((1.0)*cj2);
IkReal x8465=(gconst1*r11);
IkReal x8466=((1.0)*x8461);
IkReal x8467=((1.0)*x8460);
IkReal x8468=(gconst2*x8460);
evalcond[0]=((((-1.0)*x8463*x8467))+(((-1.0)*r22*x8466))+((r20*x8468)));
evalcond[1]=((((-1.0)*x8465*x8467))+((r10*x8468))+(((-1.0)*r12*x8466)));
evalcond[2]=((((-1.0)*r02*x8467))+(((-1.0)*gconst2*r00*x8466))+((x8461*x8462)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8466))+((r00*x8468))+(((-1.0)*x8462*x8467)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8464))+(((-1.0)*gconst2*r20*x8466))+((x8461*x8463))+(((-1.0)*r22*x8467)));
evalcond[5]=((((-1.0)*cj1*sj2))+((x8461*x8465))+(((-1.0)*sj1*x8464))+(((-1.0)*gconst2*r10*x8466))+(((-1.0)*r12*x8467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8469 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8469.valid){
continue;
}
CheckValue<IkReal> x8470=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8469.value)+(((1.5707963267949)*(x8470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8471=IKsin(j4);
IkReal x8472=IKcos(j4);
IkReal x8473=(gconst1*r01);
IkReal x8474=(gconst1*r21);
IkReal x8475=((1.0)*cj2);
IkReal x8476=(gconst1*r11);
IkReal x8477=((1.0)*x8472);
IkReal x8478=((1.0)*x8471);
IkReal x8479=(gconst2*x8471);
evalcond[0]=((((-1.0)*r22*x8477))+(((-1.0)*x8474*x8478))+((r20*x8479)));
evalcond[1]=((((-1.0)*x8476*x8478))+((r10*x8479))+(((-1.0)*r12*x8477)));
evalcond[2]=((((-1.0)*r02*x8478))+((x8472*x8473))+(((-1.0)*gconst2*r00*x8477)));
evalcond[3]=((-1.0)+(((-1.0)*x8473*x8478))+((r00*x8479))+(((-1.0)*r02*x8477)));
evalcond[4]=(((x8472*x8474))+(((-1.0)*cj1*x8475))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8477))+(((-1.0)*r22*x8478)));
evalcond[5]=(((x8472*x8476))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8475))+(((-1.0)*gconst2*r10*x8477))+(((-1.0)*r12*x8478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8482 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8482.valid){
continue;
}
IkReal x8480=((-1.0)*(x8482.value));
IkReal x8481=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8480;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8480;
IkReal gconst1=((-1.0)*r21*x8481);
IkReal gconst2=(r20*x8481);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8485 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8485.valid){
continue;
}
IkReal x8483=((-1.0)*(x8485.value));
IkReal x8484=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8483;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8483;
IkReal gconst1=((-1.0)*r21*x8484);
IkReal gconst2=(r20*x8484);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8488 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8488.valid){
continue;
}
IkReal x8486=((-1.0)*(x8488.value));
IkReal x8487=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8486;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8486;
IkReal gconst1=((-1.0)*r21*x8487);
IkReal gconst2=(r20*x8487);
IkReal x8489=r22*r22;
IkReal x8490=(cj1*r12*sj2);
IkReal x8491=(cj2*r12*sj1);
CheckValue<IkReal> x8495=IKPowWithIntegerCheck(((-1.0)+x8489),-1);
if(!x8495.valid){
continue;
}
IkReal x8492=x8495.value;
if((((1.0)+(((-1.0)*x8489)))) < -0.00001)
continue;
IkReal x8493=IKsqrt(((1.0)+(((-1.0)*x8489))));
IkReal x8494=(r22*x8492*x8493);
j4eval[0]=((IKabs((x8491+x8490)))+(IKabs((((x8491*x8494))+((x8490*x8494))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8496=(cj2*sj1);
IkReal x8497=(gconst2*r10);
IkReal x8498=(cj1*sj2);
IkReal x8499=((1.0)*gconst1*r11);
CheckValue<IkReal> x8500=IKPowWithIntegerCheck(IKsign(((((gconst1*gconst1)*(r11*r11)))+(r12*r12)+(((-2.0)*gconst1*r11*x8497))+(x8497*x8497))),-1);
if(!x8500.valid){
continue;
}
CheckValue<IkReal> x8501 = IKatan2WithCheck(IkReal((((r12*x8498))+((r12*x8496)))),IkReal((((x8497*x8498))+(((-1.0)*x8498*x8499))+((x8496*x8497))+(((-1.0)*x8496*x8499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8500.value)))+(x8501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8502=IKsin(j4);
IkReal x8503=IKcos(j4);
IkReal x8504=(gconst1*r01);
IkReal x8505=(gconst1*r21);
IkReal x8506=(gconst1*r11);
IkReal x8507=((1.0)*x8503);
IkReal x8508=((1.0)*x8502);
IkReal x8509=(gconst2*x8502);
evalcond[0]=((((-1.0)*x8505*x8508))+(((-1.0)*r22*x8507))+((r20*x8509)));
evalcond[1]=(((r10*x8509))+(((-1.0)*x8506*x8508))+(((-1.0)*r12*x8507)));
evalcond[2]=((((-1.0)*gconst2*r00*x8507))+((x8503*x8504))+(((-1.0)*r02*x8508)));
evalcond[3]=((1.0)+(((-1.0)*x8504*x8508))+(((-1.0)*r02*x8507))+((r00*x8509)));
evalcond[4]=(((cj2*sj1))+((x8503*x8506))+((cj1*sj2))+(((-1.0)*gconst2*r10*x8507))+(((-1.0)*r12*x8508)));
evalcond[5]=(((x8503*x8505))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x8508))+(((-1.0)*gconst2*r20*x8507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8510=(gconst1*r01);
IkReal x8511=(gconst2*r00);
CheckValue<IkReal> x8512 = IKatan2WithCheck(IkReal((x8510+(((-1.0)*x8511)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8512.valid){
continue;
}
CheckValue<IkReal> x8513=IKPowWithIntegerCheck(IKsign(((x8511*x8511)+(((-2.0)*x8510*x8511))+(x8510*x8510)+(r02*r02))),-1);
if(!x8513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8512.value)+(((1.5707963267949)*(x8513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8514=IKsin(j4);
IkReal x8515=IKcos(j4);
IkReal x8516=(gconst1*r01);
IkReal x8517=(gconst1*r21);
IkReal x8518=(gconst1*r11);
IkReal x8519=((1.0)*x8515);
IkReal x8520=((1.0)*x8514);
IkReal x8521=(gconst2*x8514);
evalcond[0]=(((r20*x8521))+(((-1.0)*x8517*x8520))+(((-1.0)*r22*x8519)));
evalcond[1]=((((-1.0)*x8518*x8520))+(((-1.0)*r12*x8519))+((r10*x8521)));
evalcond[2]=((((-1.0)*gconst2*r00*x8519))+(((-1.0)*r02*x8520))+((x8515*x8516)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8519))+((r00*x8521))+(((-1.0)*x8516*x8520)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r10*x8519))+(((-1.0)*r12*x8520))+((x8515*x8518)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r20*x8519))+(((-1.0)*r22*x8520))+((x8515*x8517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8522=((1.0)*gconst1);
CheckValue<IkReal> x8523=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x8522))+(((-1.0)*gconst2*r11)))),-1);
if(!x8523.valid){
continue;
}
CheckValue<IkReal> x8524 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x8522))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8523.value)))+(x8524.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8525=IKsin(j4);
IkReal x8526=IKcos(j4);
IkReal x8527=(gconst1*r01);
IkReal x8528=(gconst1*r21);
IkReal x8529=(gconst1*r11);
IkReal x8530=((1.0)*x8526);
IkReal x8531=((1.0)*x8525);
IkReal x8532=(gconst2*x8525);
evalcond[0]=((((-1.0)*r22*x8530))+((r20*x8532))+(((-1.0)*x8528*x8531)));
evalcond[1]=(((r10*x8532))+(((-1.0)*r12*x8530))+(((-1.0)*x8529*x8531)));
evalcond[2]=((((-1.0)*r02*x8531))+((x8526*x8527))+(((-1.0)*gconst2*r00*x8530)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8530))+((r00*x8532))+(((-1.0)*x8527*x8531)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r10*x8530))+((cj1*sj2))+(((-1.0)*r12*x8531))+((x8526*x8529)));
evalcond[5]=((((-1.0)*gconst2*r20*x8530))+(((-1.0)*r22*x8531))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8526*x8528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8533=((-1.0)*px);
CheckValue<IkReal> x8535 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8535.valid){
continue;
}
IkReal x8534=((-1.0)*(x8535.value));
sj5=gconst1;
cj5=gconst2;
j5=x8534;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8533);
rxp1_1=(px*r21);
rxp1_2=(r11*x8533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8534;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8536=((-1.0)*px);
CheckValue<IkReal> x8538 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8538.valid){
continue;
}
IkReal x8537=((-1.0)*(x8538.value));
sj5=gconst1;
cj5=gconst2;
j5=x8537;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8536);
rxp1_1=(px*r21);
rxp1_2=(r11*x8536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8537;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8539=((-1.0)*px);
CheckValue<IkReal> x8541 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8541.valid){
continue;
}
IkReal x8540=((-1.0)*(x8541.value));
sj5=gconst1;
cj5=gconst2;
j5=x8540;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8539);
rxp1_1=(px*r21);
rxp1_2=(r11*x8539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8540;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8544=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x8544.valid){
continue;
}
IkReal x8542=x8544.value;
IkReal x8543=(sj0*x8542);
cj4array[0]=(((cj1*sj2*x8543))+((cj2*sj1*x8543)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8545=IKsin(j4);
IkReal x8546=IKcos(j4);
IkReal x8547=(gconst2*x8545);
IkReal x8548=((1.0)*x8546);
IkReal x8549=((1.0)*gconst1*x8545);
evalcond[0]=((-1.0)*r02*x8545);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8548)));
evalcond[2]=(((r20*x8547))+(((-1.0)*r21*x8549)));
evalcond[3]=(((r10*x8547))+(((-1.0)*r11*x8549)));
evalcond[4]=(((gconst1*r21*x8546))+(((-1.0)*gconst2*r20*x8548))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8551=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x8551.valid){
continue;
}
IkReal x8550=x8551.value;
cj4array[0]=((((-1.0)*sj1*sj2*x8550))+((cj1*cj2*x8550)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8552=IKsin(j4);
IkReal x8553=IKcos(j4);
IkReal x8554=((1.0)*sj0);
IkReal x8555=(gconst2*r10);
IkReal x8556=((1.0)*x8553);
IkReal x8557=((1.0)*gconst1*x8552);
evalcond[0]=((-1.0)*r02*x8552);
evalcond[1]=((((-1.0)*x8554))+(((-1.0)*r02*x8556)));
evalcond[2]=((((-1.0)*r21*x8557))+((gconst2*r20*x8552)));
evalcond[3]=(((x8552*x8555))+(((-1.0)*r11*x8557)));
evalcond[4]=(((gconst1*r11*x8553))+(((-1.0)*x8555*x8556))+(((-1.0)*cj1*sj2*x8554))+(((-1.0)*cj2*sj1*x8554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8558=IKPowWithIntegerCheck(r02,-1);
if(!x8558.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8558.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8559=IKsin(j4);
IkReal x8560=IKcos(j4);
IkReal x8561=((1.0)*sj0);
IkReal x8562=(gconst2*r10);
IkReal x8563=(gconst2*r20);
IkReal x8564=((1.0)*x8560);
IkReal x8565=(gconst1*x8560);
IkReal x8566=((1.0)*gconst1*x8559);
evalcond[0]=((-1.0)*r02*x8559);
evalcond[1]=(((x8559*x8563))+(((-1.0)*r21*x8566)));
evalcond[2]=((((-1.0)*r11*x8566))+((x8559*x8562)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8563*x8564))+((r21*x8565)));
evalcond[4]=(((r11*x8565))+(((-1.0)*cj1*sj2*x8561))+(((-1.0)*cj2*sj1*x8561))+(((-1.0)*x8562*x8564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8567=(sj1*sj2);
IkReal x8568=(gconst2*r20);
IkReal x8569=(cj1*cj2);
IkReal x8570=(gconst1*r21);
CheckValue<IkReal> x8571 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8569))+((r22*x8567)))),IkReal((((x8567*x8568))+(((-1.0)*x8568*x8569))+((x8569*x8570))+(((-1.0)*x8567*x8570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8571.valid){
continue;
}
CheckValue<IkReal> x8572=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x8570*x8570)+(x8568*x8568)+(((-2.0)*x8568*x8570)))),-1);
if(!x8572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8571.value)+(((1.5707963267949)*(x8572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8573=IKsin(j4);
IkReal x8574=IKcos(j4);
IkReal x8575=(gconst1*r01);
IkReal x8576=(gconst1*r21);
IkReal x8577=((1.0)*sj0);
IkReal x8578=((1.0)*cj2);
IkReal x8579=(gconst1*r11);
IkReal x8580=(cj1*sj2);
IkReal x8581=((1.0)*x8574);
IkReal x8582=((1.0)*x8573);
IkReal x8583=(gconst2*x8573);
evalcond[0]=((((-1.0)*r22*x8581))+(((-1.0)*x8576*x8582))+((r20*x8583)));
evalcond[1]=(cj0+((r10*x8583))+(((-1.0)*r12*x8581))+(((-1.0)*x8579*x8582)));
evalcond[2]=((((-1.0)*x8577))+(((-1.0)*r02*x8581))+((r00*x8583))+(((-1.0)*x8575*x8582)));
evalcond[3]=((((-1.0)*r22*x8582))+((sj1*sj2))+((x8574*x8576))+(((-1.0)*gconst2*r20*x8581))+(((-1.0)*cj1*x8578)));
evalcond[4]=((((-1.0)*cj0*x8580))+(((-1.0)*gconst2*r00*x8581))+(((-1.0)*r02*x8582))+(((-1.0)*cj0*sj1*x8578))+((x8574*x8575)));
evalcond[5]=((((-1.0)*x8577*x8580))+(((-1.0)*cj2*sj1*x8577))+(((-1.0)*r12*x8582))+((x8574*x8579))+(((-1.0)*gconst2*r10*x8581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8584 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst1*r21*sj0))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8584.valid){
continue;
}
CheckValue<IkReal> x8585=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8584.value)+(((1.5707963267949)*(x8585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8586=IKsin(j4);
IkReal x8587=IKcos(j4);
IkReal x8588=(gconst1*r01);
IkReal x8589=(gconst1*r21);
IkReal x8590=((1.0)*sj0);
IkReal x8591=((1.0)*cj2);
IkReal x8592=(gconst1*r11);
IkReal x8593=(cj1*sj2);
IkReal x8594=((1.0)*x8587);
IkReal x8595=((1.0)*x8586);
IkReal x8596=(gconst2*x8586);
evalcond[0]=((((-1.0)*x8589*x8595))+(((-1.0)*r22*x8594))+((r20*x8596)));
evalcond[1]=(cj0+(((-1.0)*r12*x8594))+((r10*x8596))+(((-1.0)*x8592*x8595)));
evalcond[2]=((((-1.0)*r02*x8594))+((r00*x8596))+(((-1.0)*x8588*x8595))+(((-1.0)*x8590)));
evalcond[3]=((((-1.0)*r22*x8595))+((sj1*sj2))+(((-1.0)*cj1*x8591))+((x8587*x8589))+(((-1.0)*gconst2*r20*x8594)));
evalcond[4]=((((-1.0)*cj0*x8593))+(((-1.0)*cj0*sj1*x8591))+(((-1.0)*r02*x8595))+(((-1.0)*gconst2*r00*x8594))+((x8587*x8588)));
evalcond[5]=((((-1.0)*gconst2*r10*x8594))+((x8587*x8592))+(((-1.0)*r12*x8595))+(((-1.0)*x8590*x8593))+(((-1.0)*cj2*sj1*x8590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8597=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8597.valid){
continue;
}
CheckValue<IkReal> x8598 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8597.value)))+(x8598.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8599=IKsin(j4);
IkReal x8600=IKcos(j4);
IkReal x8601=(gconst1*r01);
IkReal x8602=(gconst1*r21);
IkReal x8603=((1.0)*sj0);
IkReal x8604=((1.0)*cj2);
IkReal x8605=(gconst1*r11);
IkReal x8606=(cj1*sj2);
IkReal x8607=((1.0)*x8600);
IkReal x8608=((1.0)*x8599);
IkReal x8609=(gconst2*x8599);
evalcond[0]=(((r20*x8609))+(((-1.0)*x8602*x8608))+(((-1.0)*r22*x8607)));
evalcond[1]=(cj0+(((-1.0)*r12*x8607))+((r10*x8609))+(((-1.0)*x8605*x8608)));
evalcond[2]=((((-1.0)*x8601*x8608))+(((-1.0)*r02*x8607))+((r00*x8609))+(((-1.0)*x8603)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x8608))+(((-1.0)*cj1*x8604))+(((-1.0)*gconst2*r20*x8607))+((x8600*x8602)));
evalcond[4]=((((-1.0)*r02*x8608))+(((-1.0)*gconst2*r00*x8607))+(((-1.0)*cj0*x8606))+(((-1.0)*cj0*sj1*x8604))+((x8600*x8601)));
evalcond[5]=((((-1.0)*cj2*sj1*x8603))+(((-1.0)*r12*x8608))+(((-1.0)*gconst2*r10*x8607))+(((-1.0)*x8603*x8606))+((x8600*x8605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8612 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8612.valid){
continue;
}
IkReal x8610=((-1.0)*(x8612.value));
IkReal x8611=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8610;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8610;
IkReal gconst1=((-1.0)*r21*x8611);
IkReal gconst2=(r20*x8611);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8615 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8615.valid){
continue;
}
IkReal x8613=((-1.0)*(x8615.value));
IkReal x8614=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8613;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8613;
IkReal gconst1=((-1.0)*r21*x8614);
IkReal gconst2=(r20*x8614);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8618 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8618.valid){
continue;
}
IkReal x8616=((-1.0)*(x8618.value));
IkReal x8617=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8616;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x8616;
IkReal gconst1=((-1.0)*r21*x8617);
IkReal gconst2=(r20*x8617);
IkReal x8619=((1.0)*(r22*r22));
CheckValue<IkReal> x8623=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8619))),-1);
if(!x8623.valid){
continue;
}
IkReal x8620=x8623.value;
IkReal x8621=((1.0)*x8620);
IkReal x8622=((((-1.0)*x8621*(r21*r21*r21*r21)))+(((-1.0)*x8619))+(((-2.0)*x8620*(r20*r20)*(r21*r21)))+(((-1.0)*x8621*(r20*r20*r20*r20))));
j4eval[0]=x8622;
j4eval[1]=IKsign(x8622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8626 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8626.valid){
continue;
}
IkReal x8624=((-1.0)*(x8626.value));
IkReal x8625=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8624;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8624;
IkReal gconst1=((-1.0)*r21*x8625);
IkReal gconst2=(r20*x8625);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
IkReal x8627=((-1.0)*(x8629.value));
IkReal x8628=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8627;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8627;
IkReal gconst1=((-1.0)*r21*x8628);
IkReal gconst2=(r20*x8628);
IkReal x8630=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8634=IKPowWithIntegerCheck(x8630,-1);
if(!x8634.valid){
continue;
}
IkReal x8631=x8634.value;
IkReal x8632=((1.0)*x8631);
IkReal x8633=((((-1.0)*x8632*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8631))+(((-1.0)*x8632*(r11*r11)*(r21*r21))));
j4eval[0]=x8633;
j4eval[1]=IKsign(x8633);
j4eval[2]=r12;
j4eval[3]=x8630;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8637 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8637.valid){
continue;
}
IkReal x8635=((-1.0)*(x8637.value));
IkReal x8636=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8635;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8635;
IkReal gconst1=((-1.0)*r21*x8636);
IkReal gconst2=(r20*x8636);
IkReal x8638=r22*r22;
IkReal x8639=(cj1*cj2*r12);
IkReal x8640=(r12*sj1*sj2);
CheckValue<IkReal> x8644=IKPowWithIntegerCheck(((-1.0)+x8638),-1);
if(!x8644.valid){
continue;
}
IkReal x8641=x8644.value;
if((((1.0)+(((-1.0)*x8638)))) < -0.00001)
continue;
IkReal x8642=IKsqrt(((1.0)+(((-1.0)*x8638))));
IkReal x8643=(r22*x8641*x8642);
j4eval[0]=((IKabs((x8639+(((-1.0)*x8640)))))+(IKabs((((x8640*x8643))+(((-1.0)*x8639*x8643))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8645=(cj1*cj2);
IkReal x8646=(gconst2*r10);
IkReal x8647=(gconst1*r11);
IkReal x8648=((1.0)*sj1*sj2);
CheckValue<IkReal> x8649 = IKatan2WithCheck(IkReal(((((-1.0)*x8645*x8646))+(((-1.0)*x8647*x8648))+((sj1*sj2*x8646))+((x8645*x8647)))),IkReal((((r12*x8645))+(((-1.0)*r12*x8648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8649.valid){
continue;
}
CheckValue<IkReal> x8650=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8649.value)+(((1.5707963267949)*(x8650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8651=IKcos(j4);
IkReal x8652=IKsin(j4);
IkReal x8653=(gconst1*r01);
IkReal x8654=((1.0)*cj2);
IkReal x8655=(gconst1*r21);
IkReal x8656=(gconst1*r11);
IkReal x8657=((1.0)*x8651);
IkReal x8658=(gconst2*x8651);
IkReal x8659=((1.0)*x8652);
IkReal x8660=(gconst2*x8652);
evalcond[0]=(((r10*x8658))+(((-1.0)*x8656*x8657))+((r12*x8652)));
evalcond[1]=(((r20*x8660))+(((-1.0)*x8655*x8659))+(((-1.0)*r22*x8657)));
evalcond[2]=(((r00*x8660))+(((-1.0)*x8653*x8659))+(((-1.0)*r02*x8657)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8657))+(((-1.0)*x8656*x8659))+((r10*x8660)));
evalcond[4]=(((r22*x8652))+(((-1.0)*x8655*x8657))+(((-1.0)*cj1*x8654))+((sj1*sj2))+((r20*x8658)));
evalcond[5]=((((-1.0)*sj1*x8654))+((r00*x8658))+(((-1.0)*cj1*sj2))+((r02*x8652))+(((-1.0)*x8653*x8657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8661=(gconst1*r11);
IkReal x8662=(gconst2*r10);
CheckValue<IkReal> x8663 = IKatan2WithCheck(IkReal((x8662+(((-1.0)*x8661)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8663.valid){
continue;
}
CheckValue<IkReal> x8664=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8661*x8661)))+(((-1.0)*(x8662*x8662)))+(((-1.0)*(r12*r12)))+(((2.0)*x8661*x8662)))),-1);
if(!x8664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8663.value)+(((1.5707963267949)*(x8664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8665=IKcos(j4);
IkReal x8666=IKsin(j4);
IkReal x8667=(gconst1*r01);
IkReal x8668=((1.0)*cj2);
IkReal x8669=(gconst1*r21);
IkReal x8670=(gconst1*r11);
IkReal x8671=((1.0)*x8665);
IkReal x8672=(gconst2*x8665);
IkReal x8673=((1.0)*x8666);
IkReal x8674=(gconst2*x8666);
evalcond[0]=(((r12*x8666))+((r10*x8672))+(((-1.0)*x8670*x8671)));
evalcond[1]=(((r20*x8674))+(((-1.0)*r22*x8671))+(((-1.0)*x8669*x8673)));
evalcond[2]=((((-1.0)*r02*x8671))+((r00*x8674))+(((-1.0)*x8667*x8673)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8671))+((r10*x8674))+(((-1.0)*x8670*x8673)));
evalcond[4]=(((r20*x8672))+((r22*x8666))+((sj1*sj2))+(((-1.0)*x8669*x8671))+(((-1.0)*cj1*x8668)));
evalcond[5]=((((-1.0)*sj1*x8668))+(((-1.0)*cj1*sj2))+((r00*x8672))+(((-1.0)*x8667*x8671))+((r02*x8666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8675 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8675.valid){
continue;
}
CheckValue<IkReal> x8676=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8675.value)+(((1.5707963267949)*(x8676.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8677=IKcos(j4);
IkReal x8678=IKsin(j4);
IkReal x8679=(gconst1*r01);
IkReal x8680=((1.0)*cj2);
IkReal x8681=(gconst1*r21);
IkReal x8682=(gconst1*r11);
IkReal x8683=((1.0)*x8677);
IkReal x8684=(gconst2*x8677);
IkReal x8685=((1.0)*x8678);
IkReal x8686=(gconst2*x8678);
evalcond[0]=((((-1.0)*x8682*x8683))+((r10*x8684))+((r12*x8678)));
evalcond[1]=((((-1.0)*x8681*x8685))+((r20*x8686))+(((-1.0)*r22*x8683)));
evalcond[2]=((((-1.0)*r02*x8683))+((r00*x8686))+(((-1.0)*x8679*x8685)));
evalcond[3]=((1.0)+(((-1.0)*x8682*x8685))+(((-1.0)*r12*x8683))+((r10*x8686)));
evalcond[4]=((((-1.0)*x8681*x8683))+((r20*x8684))+((sj1*sj2))+((r22*x8678))+(((-1.0)*cj1*x8680)));
evalcond[5]=(((r00*x8684))+(((-1.0)*sj1*x8680))+(((-1.0)*cj1*sj2))+((r02*x8678))+(((-1.0)*x8679*x8683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8689 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8689.valid){
continue;
}
IkReal x8687=((-1.0)*(x8689.value));
IkReal x8688=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8687;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8687;
IkReal gconst1=((-1.0)*r21*x8688);
IkReal gconst2=(r20*x8688);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8692 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8692.valid){
continue;
}
IkReal x8690=((-1.0)*(x8692.value));
IkReal x8691=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8690;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8690;
IkReal gconst1=((-1.0)*r21*x8691);
IkReal gconst2=(r20*x8691);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8695 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8695.valid){
continue;
}
IkReal x8693=((-1.0)*(x8695.value));
IkReal x8694=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8693;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x8693;
IkReal gconst1=((-1.0)*r21*x8694);
IkReal gconst2=(r20*x8694);
IkReal x8696=r22*r22;
IkReal x8697=(cj1*cj2*r12);
IkReal x8698=(r12*sj1*sj2);
CheckValue<IkReal> x8702=IKPowWithIntegerCheck(((-1.0)+x8696),-1);
if(!x8702.valid){
continue;
}
IkReal x8699=x8702.value;
if((((1.0)+(((-1.0)*x8696)))) < -0.00001)
continue;
IkReal x8700=IKsqrt(((1.0)+(((-1.0)*x8696))));
IkReal x8701=(r22*x8699*x8700);
j4eval[0]=((IKabs(((((-1.0)*x8697*x8701))+((x8698*x8701)))))+(IKabs((x8697+(((-1.0)*x8698))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8703=(cj1*cj2);
IkReal x8704=(gconst2*r10);
IkReal x8705=(gconst1*r11);
IkReal x8706=((1.0)*sj1*sj2);
CheckValue<IkReal> x8707=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8707.valid){
continue;
}
CheckValue<IkReal> x8708 = IKatan2WithCheck(IkReal(((((-1.0)*x8705*x8706))+(((-1.0)*x8703*x8704))+((sj1*sj2*x8704))+((x8703*x8705)))),IkReal((((r12*x8703))+(((-1.0)*r12*x8706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8707.value)))+(x8708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8709=IKcos(j4);
IkReal x8710=IKsin(j4);
IkReal x8711=(gconst1*r01);
IkReal x8712=(gconst1*r21);
IkReal x8713=(gconst1*r11);
IkReal x8714=((1.0)*x8709);
IkReal x8715=(gconst2*x8709);
IkReal x8716=((1.0)*x8710);
IkReal x8717=(gconst2*x8710);
evalcond[0]=((((-1.0)*x8713*x8714))+((r10*x8715))+((r12*x8710)));
evalcond[1]=((((-1.0)*r22*x8714))+((r20*x8717))+(((-1.0)*x8712*x8716)));
evalcond[2]=((((-1.0)*r02*x8714))+(((-1.0)*x8711*x8716))+((r00*x8717)));
evalcond[3]=((-1.0)+(((-1.0)*x8713*x8716))+(((-1.0)*r12*x8714))+((r10*x8717)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8711*x8714))+((r00*x8715))+((r02*x8710)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x8715))+((r22*x8710))+(((-1.0)*x8712*x8714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8718=(gconst1*r11);
IkReal x8719=(gconst2*r10);
CheckValue<IkReal> x8720=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8718*x8718)+(x8719*x8719)+(((-2.0)*x8718*x8719)))),-1);
if(!x8720.valid){
continue;
}
CheckValue<IkReal> x8721 = IKatan2WithCheck(IkReal((x8719+(((-1.0)*x8718)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8720.value)))+(x8721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8722=IKcos(j4);
IkReal x8723=IKsin(j4);
IkReal x8724=(gconst1*r01);
IkReal x8725=(gconst1*r21);
IkReal x8726=(gconst1*r11);
IkReal x8727=((1.0)*x8722);
IkReal x8728=(gconst2*x8722);
IkReal x8729=((1.0)*x8723);
IkReal x8730=(gconst2*x8723);
evalcond[0]=(((r10*x8728))+((r12*x8723))+(((-1.0)*x8726*x8727)));
evalcond[1]=((((-1.0)*r22*x8727))+(((-1.0)*x8725*x8729))+((r20*x8730)));
evalcond[2]=((((-1.0)*x8724*x8729))+(((-1.0)*r02*x8727))+((r00*x8730)));
evalcond[3]=((-1.0)+((r10*x8730))+(((-1.0)*x8726*x8729))+(((-1.0)*r12*x8727)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x8723))+(((-1.0)*x8724*x8727))+((r00*x8728)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8723))+((r20*x8728))+(((-1.0)*x8725*x8727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8731=((1.0)*gconst1);
CheckValue<IkReal> x8732 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8732.valid){
continue;
}
CheckValue<IkReal> x8733=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x8731)))),-1);
if(!x8733.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8732.value)+(((1.5707963267949)*(x8733.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8734=IKcos(j4);
IkReal x8735=IKsin(j4);
IkReal x8736=(gconst1*r01);
IkReal x8737=(gconst1*r21);
IkReal x8738=(gconst1*r11);
IkReal x8739=((1.0)*x8734);
IkReal x8740=(gconst2*x8734);
IkReal x8741=((1.0)*x8735);
IkReal x8742=(gconst2*x8735);
evalcond[0]=((((-1.0)*x8738*x8739))+((r12*x8735))+((r10*x8740)));
evalcond[1]=(((r20*x8742))+(((-1.0)*x8737*x8741))+(((-1.0)*r22*x8739)));
evalcond[2]=((((-1.0)*x8736*x8741))+((r00*x8742))+(((-1.0)*r02*x8739)));
evalcond[3]=((-1.0)+(((-1.0)*x8738*x8741))+((r10*x8742))+(((-1.0)*r12*x8739)));
evalcond[4]=(((cj2*sj1))+((r00*x8740))+((cj1*sj2))+((r02*x8735))+(((-1.0)*x8736*x8739)));
evalcond[5]=(((r20*x8740))+(((-1.0)*x8737*x8739))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x8735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8745 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8745.valid){
continue;
}
IkReal x8743=((-1.0)*(x8745.value));
IkReal x8744=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8743;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8743;
IkReal gconst1=((-1.0)*r21*x8744);
IkReal gconst2=(r20*x8744);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8748 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8748.valid){
continue;
}
IkReal x8746=((-1.0)*(x8748.value));
IkReal x8747=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8746;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8746;
IkReal gconst1=((-1.0)*r21*x8747);
IkReal gconst2=(r20*x8747);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8751 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8751.valid){
continue;
}
IkReal x8749=((-1.0)*(x8751.value));
IkReal x8750=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8749;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x8749;
IkReal gconst1=((-1.0)*r21*x8750);
IkReal gconst2=(r20*x8750);
IkReal x8752=r22*r22;
IkReal x8753=(r02*sj1*sj2);
IkReal x8754=(cj1*cj2*r02);
CheckValue<IkReal> x8758=IKPowWithIntegerCheck(((-1.0)+x8752),-1);
if(!x8758.valid){
continue;
}
IkReal x8755=x8758.value;
if((((1.0)+(((-1.0)*x8752)))) < -0.00001)
continue;
IkReal x8756=IKsqrt(((1.0)+(((-1.0)*x8752))));
IkReal x8757=(r22*x8755*x8756);
j4eval[0]=((IKabs((x8754+(((-1.0)*x8753)))))+(IKabs(((((-1.0)*x8754*x8757))+((x8753*x8757))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8759=(gconst1*r01);
IkReal x8760=((1.0)*gconst2);
IkReal x8761=(cj1*cj2);
IkReal x8762=((1.0)*sj1*sj2);
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x8760)))),-1);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(((((-1.0)*x8759*x8762))+((gconst2*r00*sj1*sj2))+(((-1.0)*r00*x8760*x8761))+((x8759*x8761)))),IkReal(((((-1.0)*r02*x8762))+((r02*x8761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8763.value)))+(x8764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8765=IKcos(j4);
IkReal x8766=IKsin(j4);
IkReal x8767=(gconst1*r01);
IkReal x8768=((1.0)*cj2);
IkReal x8769=(gconst1*r21);
IkReal x8770=(gconst1*r11);
IkReal x8771=((1.0)*x8765);
IkReal x8772=(gconst2*x8765);
IkReal x8773=((1.0)*x8766);
IkReal x8774=(gconst2*x8766);
evalcond[0]=(((r00*x8772))+(((-1.0)*x8767*x8771))+((r02*x8766)));
evalcond[1]=((((-1.0)*r22*x8771))+(((-1.0)*x8769*x8773))+((r20*x8774)));
evalcond[2]=((((-1.0)*r12*x8771))+((r10*x8774))+(((-1.0)*x8770*x8773)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8771))+((r00*x8774))+(((-1.0)*x8767*x8773)));
evalcond[4]=((((-1.0)*cj1*x8768))+((sj1*sj2))+(((-1.0)*x8769*x8771))+((r20*x8772))+((r22*x8766)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r12*x8766))+((r10*x8772))+(((-1.0)*sj1*x8768))+(((-1.0)*x8770*x8771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8775=(gconst1*r01);
IkReal x8776=(gconst2*r00);
CheckValue<IkReal> x8777 = IKatan2WithCheck(IkReal((x8776+(((-1.0)*x8775)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8777.valid){
continue;
}
CheckValue<IkReal> x8778=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8775*x8776))+(x8776*x8776)+(x8775*x8775)+(r02*r02))),-1);
if(!x8778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8777.value)+(((1.5707963267949)*(x8778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8779=IKcos(j4);
IkReal x8780=IKsin(j4);
IkReal x8781=(gconst1*r01);
IkReal x8782=((1.0)*cj2);
IkReal x8783=(gconst1*r21);
IkReal x8784=(gconst1*r11);
IkReal x8785=((1.0)*x8779);
IkReal x8786=(gconst2*x8779);
IkReal x8787=((1.0)*x8780);
IkReal x8788=(gconst2*x8780);
evalcond[0]=(((r02*x8780))+(((-1.0)*x8781*x8785))+((r00*x8786)));
evalcond[1]=((((-1.0)*x8783*x8787))+(((-1.0)*r22*x8785))+((r20*x8788)));
evalcond[2]=(((r10*x8788))+(((-1.0)*x8784*x8787))+(((-1.0)*r12*x8785)));
evalcond[3]=((-1.0)+(((-1.0)*x8781*x8787))+(((-1.0)*r02*x8785))+((r00*x8788)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x8782))+((r22*x8780))+(((-1.0)*x8783*x8785))+((r20*x8786)));
evalcond[5]=(((r10*x8786))+(((-1.0)*sj1*x8782))+((r12*x8780))+(((-1.0)*x8784*x8785))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8789 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8789.valid){
continue;
}
CheckValue<IkReal> x8790=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8789.value)+(((1.5707963267949)*(x8790.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8791=IKcos(j4);
IkReal x8792=IKsin(j4);
IkReal x8793=(gconst1*r01);
IkReal x8794=((1.0)*cj2);
IkReal x8795=(gconst1*r21);
IkReal x8796=(gconst1*r11);
IkReal x8797=((1.0)*x8791);
IkReal x8798=(gconst2*x8791);
IkReal x8799=((1.0)*x8792);
IkReal x8800=(gconst2*x8792);
evalcond[0]=((((-1.0)*x8793*x8797))+((r02*x8792))+((r00*x8798)));
evalcond[1]=((((-1.0)*x8795*x8799))+((r20*x8800))+(((-1.0)*r22*x8797)));
evalcond[2]=((((-1.0)*r12*x8797))+(((-1.0)*x8796*x8799))+((r10*x8800)));
evalcond[3]=((-1.0)+(((-1.0)*x8793*x8799))+((r00*x8800))+(((-1.0)*r02*x8797)));
evalcond[4]=((((-1.0)*x8795*x8797))+(((-1.0)*cj1*x8794))+((sj1*sj2))+((r22*x8792))+((r20*x8798)));
evalcond[5]=(((r10*x8798))+(((-1.0)*x8796*x8797))+((r12*x8792))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x8794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8803 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8803.valid){
continue;
}
IkReal x8801=((-1.0)*(x8803.value));
IkReal x8802=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8801;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8801;
IkReal gconst1=((-1.0)*r21*x8802);
IkReal gconst2=(r20*x8802);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x8806 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8806.valid){
continue;
}
IkReal x8804=((-1.0)*(x8806.value));
IkReal x8805=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8804;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8804;
IkReal gconst1=((-1.0)*r21*x8805);
IkReal gconst2=(r20*x8805);
IkReal x8807=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8811=IKPowWithIntegerCheck(x8807,-1);
if(!x8811.valid){
continue;
}
IkReal x8808=x8811.value;
IkReal x8809=((1.0)*x8808);
IkReal x8810=((((-2.0)*r00*r01*r20*r21*x8808))+(((-1.0)*(r02*r02)))+(((-1.0)*x8809*(r00*r00)*(r20*r20)))+(((-1.0)*x8809*(r01*r01)*(r21*r21))));
j4eval[0]=x8810;
j4eval[1]=IKsign(x8810);
j4eval[2]=r02;
j4eval[3]=x8807;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8814 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8814.valid){
continue;
}
IkReal x8812=((-1.0)*(x8814.value));
IkReal x8813=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8812;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x8812;
IkReal gconst1=((-1.0)*r21*x8813);
IkReal gconst2=(r20*x8813);
IkReal x8815=r22*r22;
IkReal x8816=(r02*sj1*sj2);
IkReal x8817=(cj1*cj2*r02);
CheckValue<IkReal> x8821=IKPowWithIntegerCheck(((-1.0)+x8815),-1);
if(!x8821.valid){
continue;
}
IkReal x8818=x8821.value;
if((((1.0)+(((-1.0)*x8815)))) < -0.00001)
continue;
IkReal x8819=IKsqrt(((1.0)+(((-1.0)*x8815))));
IkReal x8820=(r22*x8818*x8819);
j4eval[0]=((IKabs(((((-1.0)*x8817*x8820))+((x8816*x8820)))))+(IKabs(((((-1.0)*x8816))+x8817))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8822=(gconst1*r01);
IkReal x8823=((1.0)*gconst2);
IkReal x8824=(cj1*cj2);
IkReal x8825=((1.0)*sj1*sj2);
CheckValue<IkReal> x8826 = IKatan2WithCheck(IkReal((((gconst2*r00*sj1*sj2))+((x8822*x8824))+(((-1.0)*r00*x8823*x8824))+(((-1.0)*x8822*x8825)))),IkReal(((((-1.0)*r02*x8825))+((r02*x8824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8826.valid){
continue;
}
CheckValue<IkReal> x8827=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8823))+(((-1.0)*gconst1*r10)))),-1);
if(!x8827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8826.value)+(((1.5707963267949)*(x8827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8828=IKcos(j4);
IkReal x8829=IKsin(j4);
IkReal x8830=(gconst1*r01);
IkReal x8831=(gconst1*r21);
IkReal x8832=(gconst1*r11);
IkReal x8833=((1.0)*x8828);
IkReal x8834=(gconst2*x8828);
IkReal x8835=((1.0)*x8829);
IkReal x8836=(gconst2*x8829);
evalcond[0]=(((r02*x8829))+(((-1.0)*x8830*x8833))+((r00*x8834)));
evalcond[1]=(((r20*x8836))+(((-1.0)*x8831*x8835))+(((-1.0)*r22*x8833)));
evalcond[2]=((((-1.0)*x8832*x8835))+((r10*x8836))+(((-1.0)*r12*x8833)));
evalcond[3]=((1.0)+(((-1.0)*x8830*x8835))+(((-1.0)*r02*x8833))+((r00*x8836)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8832*x8833))+((r12*x8829))+((cj1*sj2))+((r10*x8834)));
evalcond[5]=(((r22*x8829))+((r20*x8834))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8831*x8833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8837=(gconst2*r00);
IkReal x8838=(gconst1*r01);
CheckValue<IkReal> x8839 = IKatan2WithCheck(IkReal((x8837+(((-1.0)*x8838)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x8839.valid){
continue;
}
CheckValue<IkReal> x8840=IKPowWithIntegerCheck(IKsign(((((2.0)*x8837*x8838))+(((-1.0)*(r02*r02)))+(((-1.0)*(x8837*x8837)))+(((-1.0)*(x8838*x8838))))),-1);
if(!x8840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8839.value)+(((1.5707963267949)*(x8840.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8841=IKcos(j4);
IkReal x8842=IKsin(j4);
IkReal x8843=(gconst1*r01);
IkReal x8844=(gconst1*r21);
IkReal x8845=(gconst1*r11);
IkReal x8846=((1.0)*x8841);
IkReal x8847=(gconst2*x8841);
IkReal x8848=((1.0)*x8842);
IkReal x8849=(gconst2*x8842);
evalcond[0]=(((r02*x8842))+(((-1.0)*x8843*x8846))+((r00*x8847)));
evalcond[1]=(((r20*x8849))+(((-1.0)*x8844*x8848))+(((-1.0)*r22*x8846)));
evalcond[2]=((((-1.0)*x8845*x8848))+((r10*x8849))+(((-1.0)*r12*x8846)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8846))+(((-1.0)*x8843*x8848))+((r00*x8849)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8845*x8846))+((r12*x8842))+((r10*x8847)));
evalcond[5]=(((r22*x8842))+((r20*x8847))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8844*x8846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8850=((1.0)*gconst1);
CheckValue<IkReal> x8851 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x8850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8851.valid){
continue;
}
CheckValue<IkReal> x8852=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x8850)))),-1);
if(!x8852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8851.value)+(((1.5707963267949)*(x8852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8853=IKcos(j4);
IkReal x8854=IKsin(j4);
IkReal x8855=(gconst1*r01);
IkReal x8856=(gconst1*r21);
IkReal x8857=(gconst1*r11);
IkReal x8858=((1.0)*x8853);
IkReal x8859=(gconst2*x8853);
IkReal x8860=((1.0)*x8854);
IkReal x8861=(gconst2*x8854);
evalcond[0]=(((r00*x8859))+((r02*x8854))+(((-1.0)*x8855*x8858)));
evalcond[1]=(((r20*x8861))+(((-1.0)*r22*x8858))+(((-1.0)*x8856*x8860)));
evalcond[2]=((((-1.0)*x8857*x8860))+(((-1.0)*r12*x8858))+((r10*x8861)));
evalcond[3]=((1.0)+((r00*x8861))+(((-1.0)*x8855*x8860))+(((-1.0)*r02*x8858)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x8857*x8858))+((cj1*sj2))+((r12*x8854))+((r10*x8859)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8856*x8858))+((r22*x8854))+((r20*x8859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8862=((-1.0)*px);
CheckValue<IkReal> x8864 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8864.valid){
continue;
}
IkReal x8863=((-1.0)*(x8864.value));
sj5=gconst1;
cj5=gconst2;
j5=x8863;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8862);
rxp1_1=(px*r21);
rxp1_2=(r11*x8862);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8863;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8865=((-1.0)*px);
CheckValue<IkReal> x8867 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8867.valid){
continue;
}
IkReal x8866=((-1.0)*(x8867.value));
sj5=gconst1;
cj5=gconst2;
j5=x8866;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8865);
rxp1_1=(px*r21);
rxp1_2=(r11*x8865);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8866;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8868=((-1.0)*px);
CheckValue<IkReal> x8870 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8870.valid){
continue;
}
IkReal x8869=((-1.0)*(x8870.value));
sj5=gconst1;
cj5=gconst2;
j5=x8869;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8868);
rxp1_1=(px*r21);
rxp1_2=(r11*x8868);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x8869;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8873=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x8873.valid){
continue;
}
IkReal x8871=x8873.value;
IkReal x8872=(sj0*x8871);
cj4array[0]=(((cj1*sj2*x8872))+((cj2*sj1*x8872)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8874=IKsin(j4);
IkReal x8875=IKcos(j4);
IkReal x8876=(gconst2*r20);
IkReal x8877=((1.0)*x8875);
IkReal x8878=((1.0)*gconst1*x8874);
evalcond[0]=(r02*x8874);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8877)));
evalcond[2]=(((x8874*x8876))+(((-1.0)*r21*x8878)));
evalcond[3]=(((gconst2*r10*x8874))+(((-1.0)*r11*x8878)));
evalcond[4]=((((-1.0)*gconst1*r21*x8877))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8875*x8876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8880=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x8880.valid){
continue;
}
IkReal x8879=x8880.value;
cj4array[0]=(((cj1*cj2*x8879))+(((-1.0)*sj1*sj2*x8879)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8881=IKsin(j4);
IkReal x8882=IKcos(j4);
IkReal x8883=((1.0)*sj0);
IkReal x8884=(gconst2*r10);
IkReal x8885=((1.0)*x8882);
IkReal x8886=((1.0)*gconst1*x8881);
evalcond[0]=(r02*x8881);
evalcond[1]=((((-1.0)*r02*x8885))+(((-1.0)*x8883)));
evalcond[2]=(((gconst2*r20*x8881))+(((-1.0)*r21*x8886)));
evalcond[3]=((((-1.0)*r11*x8886))+((x8881*x8884)));
evalcond[4]=((((-1.0)*cj2*sj1*x8883))+((x8882*x8884))+(((-1.0)*gconst1*r11*x8885))+(((-1.0)*cj1*sj2*x8883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8887=IKPowWithIntegerCheck(r02,-1);
if(!x8887.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8887.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8888=IKsin(j4);
IkReal x8889=IKcos(j4);
IkReal x8890=((1.0)*sj0);
IkReal x8891=(gconst2*x8889);
IkReal x8892=(gconst2*x8888);
IkReal x8893=((1.0)*gconst1*x8888);
IkReal x8894=((1.0)*gconst1*x8889);
evalcond[0]=(r02*x8888);
evalcond[1]=((((-1.0)*r21*x8893))+((r20*x8892)));
evalcond[2]=((((-1.0)*r11*x8893))+((r10*x8892)));
evalcond[3]=((((-1.0)*r21*x8894))+((r20*x8891))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj1*sj2*x8890))+(((-1.0)*r11*x8894))+((r10*x8891))+(((-1.0)*cj2*sj1*x8890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8895=(sj1*sj2);
IkReal x8896=(gconst2*r20);
IkReal x8897=(cj1*cj2);
IkReal x8898=(gconst1*r21);
CheckValue<IkReal> x8899 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x8897))+((r22*x8895)))),IkReal((((x8897*x8898))+((x8895*x8896))+(((-1.0)*x8896*x8897))+(((-1.0)*x8895*x8898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8899.valid){
continue;
}
CheckValue<IkReal> x8900=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8898*x8898)))+(((2.0)*x8896*x8898))+(((-1.0)*(r22*r22)))+(((-1.0)*(x8896*x8896))))),-1);
if(!x8900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8899.value)+(((1.5707963267949)*(x8900.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8901=IKsin(j4);
IkReal x8902=IKcos(j4);
IkReal x8903=(gconst1*r01);
IkReal x8904=((1.0)*cj2);
IkReal x8905=(gconst1*r11);
IkReal x8906=(gconst1*r21);
IkReal x8907=((1.0)*sj0);
IkReal x8908=(cj1*sj2);
IkReal x8909=((1.0)*x8902);
IkReal x8910=(gconst2*x8902);
IkReal x8911=((1.0)*x8901);
IkReal x8912=(gconst2*x8901);
evalcond[0]=((((-1.0)*r22*x8909))+((r20*x8912))+(((-1.0)*x8906*x8911)));
evalcond[1]=(cj0+(((-1.0)*r12*x8909))+((r10*x8912))+(((-1.0)*x8905*x8911)));
evalcond[2]=(((r00*x8912))+(((-1.0)*x8907))+(((-1.0)*x8903*x8911))+(((-1.0)*r02*x8909)));
evalcond[3]=((((-1.0)*cj1*x8904))+((sj1*sj2))+(((-1.0)*x8906*x8909))+((r22*x8901))+((r20*x8910)));
evalcond[4]=(((r00*x8910))+(((-1.0)*x8903*x8909))+(((-1.0)*cj0*x8908))+(((-1.0)*cj0*sj1*x8904))+((r02*x8901)));
evalcond[5]=((((-1.0)*sj0*sj1*x8904))+((r12*x8901))+(((-1.0)*x8907*x8908))+(((-1.0)*x8905*x8909))+((r10*x8910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8913 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst1*r21*sj0))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8913.valid){
continue;
}
CheckValue<IkReal> x8914=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x8914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8913.value)+(((1.5707963267949)*(x8914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8915=IKsin(j4);
IkReal x8916=IKcos(j4);
IkReal x8917=(gconst1*r01);
IkReal x8918=((1.0)*cj2);
IkReal x8919=(gconst1*r11);
IkReal x8920=(gconst1*r21);
IkReal x8921=((1.0)*sj0);
IkReal x8922=(cj1*sj2);
IkReal x8923=((1.0)*x8916);
IkReal x8924=(gconst2*x8916);
IkReal x8925=((1.0)*x8915);
IkReal x8926=(gconst2*x8915);
evalcond[0]=(((r20*x8926))+(((-1.0)*r22*x8923))+(((-1.0)*x8920*x8925)));
evalcond[1]=((((-1.0)*x8919*x8925))+cj0+(((-1.0)*r12*x8923))+((r10*x8926)));
evalcond[2]=((((-1.0)*r02*x8923))+(((-1.0)*x8921))+(((-1.0)*x8917*x8925))+((r00*x8926)));
evalcond[3]=(((r20*x8924))+(((-1.0)*x8920*x8923))+((r22*x8915))+((sj1*sj2))+(((-1.0)*cj1*x8918)));
evalcond[4]=(((r02*x8915))+(((-1.0)*cj0*sj1*x8918))+(((-1.0)*x8917*x8923))+(((-1.0)*cj0*x8922))+((r00*x8924)));
evalcond[5]=((((-1.0)*x8919*x8923))+(((-1.0)*sj0*sj1*x8918))+((r10*x8924))+((r12*x8915))+(((-1.0)*x8921*x8922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8927=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x8927.valid){
continue;
}
CheckValue<IkReal> x8928 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8927.value)))+(x8928.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8929=IKsin(j4);
IkReal x8930=IKcos(j4);
IkReal x8931=(gconst1*r01);
IkReal x8932=((1.0)*cj2);
IkReal x8933=(gconst1*r11);
IkReal x8934=(gconst1*r21);
IkReal x8935=((1.0)*sj0);
IkReal x8936=(cj1*sj2);
IkReal x8937=((1.0)*x8930);
IkReal x8938=(gconst2*x8930);
IkReal x8939=((1.0)*x8929);
IkReal x8940=(gconst2*x8929);
evalcond[0]=((((-1.0)*r22*x8937))+((r20*x8940))+(((-1.0)*x8934*x8939)));
evalcond[1]=((((-1.0)*r12*x8937))+cj0+((r10*x8940))+(((-1.0)*x8933*x8939)));
evalcond[2]=((((-1.0)*x8931*x8939))+((r00*x8940))+(((-1.0)*x8935))+(((-1.0)*r02*x8937)));
evalcond[3]=(((r22*x8929))+((sj1*sj2))+((r20*x8938))+(((-1.0)*cj1*x8932))+(((-1.0)*x8934*x8937)));
evalcond[4]=((((-1.0)*cj0*sj1*x8932))+((r02*x8929))+(((-1.0)*cj0*x8936))+(((-1.0)*x8931*x8937))+((r00*x8938)));
evalcond[5]=((((-1.0)*sj0*sj1*x8932))+(((-1.0)*x8935*x8936))+(((-1.0)*x8933*x8937))+((r12*x8929))+((r10*x8938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8943 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8943.valid){
continue;
}
IkReal x8941=((-1.0)*(x8943.value));
IkReal x8942=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8941;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8941;
IkReal gconst1=((-1.0)*r21*x8942);
IkReal gconst2=(r20*x8942);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8946 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8946.valid){
continue;
}
IkReal x8944=((-1.0)*(x8946.value));
IkReal x8945=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8944;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8944;
IkReal gconst1=((-1.0)*r21*x8945);
IkReal gconst2=(r20*x8945);
CheckValue<IkReal> x8954=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8954.valid){
continue;
}
IkReal x8947=x8954.value;
IkReal x8948=(cj3*x8947);
IkReal x8949=(r11*x8948);
IkReal x8950=(r01*x8948);
IkReal x8951=(r00*x8948);
IkReal x8952=(r10*x8948);
IkReal x8953=(r20*r21*x8948);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*x8951*(r20*r20)))+((r01*x8949*(r21*r21)))+((r00*r20*r21*x8949))+((r10*r20*r21*x8950))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8957 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8957.valid){
continue;
}
IkReal x8955=((-1.0)*(x8957.value));
IkReal x8956=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8955;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8955;
IkReal gconst1=((-1.0)*r21*x8956);
IkReal gconst2=(r20*x8956);
CheckValue<IkReal> x8965=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x8965.valid){
continue;
}
IkReal x8958=x8965.value;
IkReal x8959=(sj3*x8958);
IkReal x8960=(r11*x8959);
IkReal x8961=(r00*x8959);
IkReal x8962=(r01*x8959);
IkReal x8963=(r10*x8959);
IkReal x8964=(r20*r21*x8959);
j4eval[0]=IKsign((((r00*r20*r21*x8960))+((r10*r20*r21*x8962))+((r02*r12*sj3))+((r01*x8960*(r21*r21)))+((r10*x8961*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x8968 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8968.valid){
continue;
}
IkReal x8966=((-1.0)*(x8968.value));
IkReal x8967=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8966;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8966;
IkReal gconst1=((-1.0)*r21*x8967);
IkReal gconst2=(r20*x8967);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x8971 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8971.valid){
continue;
}
IkReal x8969=((-1.0)*(x8971.value));
IkReal x8970=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8969;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8969;
IkReal gconst1=((-1.0)*r21*x8970);
IkReal gconst2=(r20*x8970);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x8974 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x8974.valid){
continue;
}
IkReal x8972=((-1.0)*(x8974.value));
IkReal x8973=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x8972;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8972;
IkReal gconst1=((-1.0)*r21*x8973);
IkReal gconst2=(r20*x8973);
IkReal x8975=r22*r22;
IkReal x8976=(cj1*cj2*r02);
CheckValue<IkReal> x8981=IKPowWithIntegerCheck(((-1.0)+x8975),-1);
if(!x8981.valid){
continue;
}
IkReal x8977=x8981.value;
IkReal x8978=((1.0)*r02*sj1*sj2);
if((((1.0)+(((-1.0)*x8975)))) < -0.00001)
continue;
IkReal x8979=IKsqrt(((1.0)+(((-1.0)*x8975))));
IkReal x8980=(r22*x8977*x8979);
j4eval[0]=((IKabs((((x8976*x8980))+(((-1.0)*x8978*x8980)))))+(IKabs(((((-1.0)*x8978))+x8976))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8982=(gconst2*r00);
IkReal x8983=(cj1*cj2);
IkReal x8984=(gconst1*r01);
IkReal x8985=((1.0)*sj1*sj2);
CheckValue<IkReal> x8986=IKPowWithIntegerCheck(IKsign(((x8984*x8984)+(r02*r02)+(x8982*x8982)+(((-2.0)*x8982*x8984)))),-1);
if(!x8986.valid){
continue;
}
CheckValue<IkReal> x8987 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8985))+((r02*x8983)))),IkReal(((((-1.0)*x8982*x8985))+((sj1*sj2*x8984))+(((-1.0)*x8983*x8984))+((x8982*x8983)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8986.value)))+(x8987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8988=IKsin(j4);
IkReal x8989=IKcos(j4);
IkReal x8990=(gconst1*r01);
IkReal x8991=(gconst1*r21);
IkReal x8992=((1.0)*sj1);
IkReal x8993=(gconst1*r11);
IkReal x8994=((1.0)*x8989);
IkReal x8995=((1.0)*x8988);
IkReal x8996=(gconst2*x8988);
evalcond[0]=((((-1.0)*x8991*x8995))+((r20*x8996))+(((-1.0)*r22*x8994)));
evalcond[1]=((((-1.0)*x8990*x8995))+((r00*x8996))+(((-1.0)*r02*x8994)));
evalcond[2]=((((-1.0)*r12*x8995))+((x8989*x8993))+(((-1.0)*gconst2*r10*x8994)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8994))+(((-1.0)*x8993*x8995))+((r10*x8996)));
evalcond[4]=((((-1.0)*r02*x8995))+(((-1.0)*gconst2*r00*x8994))+((cj1*cj2))+(((-1.0)*sj2*x8992))+((x8989*x8990)));
evalcond[5]=((((-1.0)*gconst2*r20*x8994))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x8992))+(((-1.0)*r22*x8995))+((x8989*x8991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8997=(gconst2*r10);
IkReal x8998=(gconst1*r11);
CheckValue<IkReal> x8999=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x8998*x8998)+(((-2.0)*x8997*x8998))+(x8997*x8997))),-1);
if(!x8999.valid){
continue;
}
CheckValue<IkReal> x9000 = IKatan2WithCheck(IkReal((x8998+(((-1.0)*x8997)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8999.value)))+(x9000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9001=IKsin(j4);
IkReal x9002=IKcos(j4);
IkReal x9003=(gconst1*r01);
IkReal x9004=(gconst1*r21);
IkReal x9005=((1.0)*sj1);
IkReal x9006=(gconst1*r11);
IkReal x9007=((1.0)*x9002);
IkReal x9008=((1.0)*x9001);
IkReal x9009=(gconst2*x9001);
evalcond[0]=((((-1.0)*r22*x9007))+(((-1.0)*x9004*x9008))+((r20*x9009)));
evalcond[1]=((((-1.0)*r02*x9007))+(((-1.0)*x9003*x9008))+((r00*x9009)));
evalcond[2]=((((-1.0)*gconst2*r10*x9007))+(((-1.0)*r12*x9008))+((x9002*x9006)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9007))+((r10*x9009))+(((-1.0)*x9006*x9008)));
evalcond[4]=((((-1.0)*r02*x9008))+((x9002*x9003))+(((-1.0)*gconst2*r00*x9007))+((cj1*cj2))+(((-1.0)*sj2*x9005)));
evalcond[5]=((((-1.0)*r22*x9008))+(((-1.0)*cj2*x9005))+((x9002*x9004))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9010 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9010.valid){
continue;
}
CheckValue<IkReal> x9011=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9010.value)+(((1.5707963267949)*(x9011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9012=IKsin(j4);
IkReal x9013=IKcos(j4);
IkReal x9014=(gconst1*r01);
IkReal x9015=(gconst1*r21);
IkReal x9016=((1.0)*sj1);
IkReal x9017=(gconst1*r11);
IkReal x9018=((1.0)*x9013);
IkReal x9019=((1.0)*x9012);
IkReal x9020=(gconst2*x9012);
evalcond[0]=((((-1.0)*r22*x9018))+(((-1.0)*x9015*x9019))+((r20*x9020)));
evalcond[1]=(((r00*x9020))+(((-1.0)*x9014*x9019))+(((-1.0)*r02*x9018)));
evalcond[2]=((((-1.0)*r12*x9019))+((x9013*x9017))+(((-1.0)*gconst2*r10*x9018)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9018))+((r10*x9020))+(((-1.0)*x9017*x9019)));
evalcond[4]=((((-1.0)*sj2*x9016))+((cj1*cj2))+(((-1.0)*r02*x9019))+((x9013*x9014))+(((-1.0)*gconst2*r00*x9018)));
evalcond[5]=((((-1.0)*gconst2*r20*x9018))+(((-1.0)*cj2*x9016))+(((-1.0)*r22*x9019))+(((-1.0)*cj1*sj2))+((x9013*x9015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
IkReal x9021=((-1.0)*(x9023.value));
IkReal x9022=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9021;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9021;
IkReal gconst1=((-1.0)*r21*x9022);
IkReal gconst2=(r20*x9022);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9026 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9026.valid){
continue;
}
IkReal x9024=((-1.0)*(x9026.value));
IkReal x9025=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9024;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9024;
IkReal gconst1=((-1.0)*r21*x9025);
IkReal gconst2=(r20*x9025);
IkReal x9027=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9031=IKPowWithIntegerCheck(x9027,-1);
if(!x9031.valid){
continue;
}
IkReal x9028=x9031.value;
IkReal x9029=((1.0)*x9028);
IkReal x9030=((((-2.0)*r10*r11*r20*r21*x9028))+(((-1.0)*(r12*r12)))+(((-1.0)*x9029*(r10*r10)*(r20*r20)))+(((-1.0)*x9029*(r11*r11)*(r21*r21))));
j4eval[0]=x9030;
j4eval[1]=IKsign(x9030);
j4eval[2]=r12;
j4eval[3]=x9027;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9034 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9034.valid){
continue;
}
IkReal x9032=((-1.0)*(x9034.value));
IkReal x9033=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9032;
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9032;
IkReal gconst1=((-1.0)*r21*x9033);
IkReal gconst2=(r20*x9033);
IkReal x9035=r22*r22;
IkReal x9036=(cj1*r12*sj2);
IkReal x9037=(cj2*r12*sj1);
CheckValue<IkReal> x9041=IKPowWithIntegerCheck(((-1.0)+x9035),-1);
if(!x9041.valid){
continue;
}
IkReal x9038=x9041.value;
if((((1.0)+(((-1.0)*x9035)))) < -0.00001)
continue;
IkReal x9039=IKsqrt(((1.0)+(((-1.0)*x9035))));
IkReal x9040=((1.0)*r22*x9038*x9039);
j4eval[0]=((IKabs((x9036+x9037)))+(IKabs(((((-1.0)*x9037*x9040))+(((-1.0)*x9036*x9040))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9042=(cj1*sj2);
IkReal x9043=(cj2*sj1);
IkReal x9044=(gconst1*r11);
IkReal x9045=((1.0)*gconst2*r10);
CheckValue<IkReal> x9046=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9046.valid){
continue;
}
CheckValue<IkReal> x9047 = IKatan2WithCheck(IkReal(((((-1.0)*x9043*x9045))+(((-1.0)*x9042*x9045))+((x9042*x9044))+((x9043*x9044)))),IkReal((((r12*x9043))+((r12*x9042)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9046.value)))+(x9047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9048=IKcos(j4);
IkReal x9049=IKsin(j4);
IkReal x9050=(gconst1*r01);
IkReal x9051=((1.0)*sj1);
IkReal x9052=(gconst1*r21);
IkReal x9053=(gconst1*r11);
IkReal x9054=((1.0)*x9048);
IkReal x9055=(gconst2*x9048);
IkReal x9056=((1.0)*x9049);
IkReal x9057=(gconst2*x9049);
evalcond[0]=((((-1.0)*x9053*x9054))+((r12*x9049))+((r10*x9055)));
evalcond[1]=(((r20*x9057))+(((-1.0)*r22*x9054))+(((-1.0)*x9052*x9056)));
evalcond[2]=((((-1.0)*r02*x9054))+((r00*x9057))+(((-1.0)*x9050*x9056)));
evalcond[3]=((1.0)+(((-1.0)*x9053*x9056))+(((-1.0)*r12*x9054))+((r10*x9057)));
evalcond[4]=(((r00*x9055))+(((-1.0)*sj2*x9051))+((cj1*cj2))+(((-1.0)*x9050*x9054))+((r02*x9049)));
evalcond[5]=((((-1.0)*cj2*x9051))+((r20*x9055))+(((-1.0)*cj1*sj2))+((r22*x9049))+(((-1.0)*x9052*x9054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9058=(gconst1*r11);
IkReal x9059=(gconst2*r10);
CheckValue<IkReal> x9060=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x9058*x9058)))+(((-1.0)*(x9059*x9059)))+(((2.0)*x9058*x9059)))),-1);
if(!x9060.valid){
continue;
}
CheckValue<IkReal> x9061 = IKatan2WithCheck(IkReal((x9059+(((-1.0)*x9058)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9060.value)))+(x9061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9062=IKcos(j4);
IkReal x9063=IKsin(j4);
IkReal x9064=(gconst1*r01);
IkReal x9065=((1.0)*sj1);
IkReal x9066=(gconst1*r21);
IkReal x9067=(gconst1*r11);
IkReal x9068=((1.0)*x9062);
IkReal x9069=(gconst2*x9062);
IkReal x9070=((1.0)*x9063);
IkReal x9071=(gconst2*x9063);
evalcond[0]=((((-1.0)*x9067*x9068))+((r12*x9063))+((r10*x9069)));
evalcond[1]=(((r20*x9071))+(((-1.0)*x9066*x9070))+(((-1.0)*r22*x9068)));
evalcond[2]=((((-1.0)*x9064*x9070))+((r00*x9071))+(((-1.0)*r02*x9068)));
evalcond[3]=((1.0)+(((-1.0)*x9067*x9070))+((r10*x9071))+(((-1.0)*r12*x9068)));
evalcond[4]=(((r00*x9069))+(((-1.0)*x9064*x9068))+(((-1.0)*sj2*x9065))+((r02*x9063))+((cj1*cj2)));
evalcond[5]=(((r22*x9063))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9065))+((r20*x9069))+(((-1.0)*x9066*x9068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9072 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9072.valid){
continue;
}
CheckValue<IkReal> x9073=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9072.value)+(((1.5707963267949)*(x9073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9074=IKcos(j4);
IkReal x9075=IKsin(j4);
IkReal x9076=(gconst1*r01);
IkReal x9077=((1.0)*sj1);
IkReal x9078=(gconst1*r21);
IkReal x9079=(gconst1*r11);
IkReal x9080=((1.0)*x9074);
IkReal x9081=(gconst2*x9074);
IkReal x9082=((1.0)*x9075);
IkReal x9083=(gconst2*x9075);
evalcond[0]=(((r10*x9081))+((r12*x9075))+(((-1.0)*x9079*x9080)));
evalcond[1]=(((r20*x9083))+(((-1.0)*r22*x9080))+(((-1.0)*x9078*x9082)));
evalcond[2]=(((r00*x9083))+(((-1.0)*r02*x9080))+(((-1.0)*x9076*x9082)));
evalcond[3]=((1.0)+((r10*x9083))+(((-1.0)*x9079*x9082))+(((-1.0)*r12*x9080)));
evalcond[4]=(((r00*x9081))+(((-1.0)*sj2*x9077))+(((-1.0)*x9076*x9080))+((cj1*cj2))+((r02*x9075)));
evalcond[5]=((((-1.0)*cj2*x9077))+((r20*x9081))+(((-1.0)*cj1*sj2))+((r22*x9075))+(((-1.0)*x9078*x9080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9084=((-1.0)*px);
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
IkReal x9085=((-1.0)*(x9086.value));
sj5=gconst1;
cj5=gconst2;
j5=x9085;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9084);
rxp1_1=(px*r21);
rxp1_2=(r11*x9084);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9085;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9087=((1.0)*sj3);
IkReal x9088=(r11*r21);
IkReal x9089=(r10*r20);
j4eval[0]=(x9089+x9088);
j4eval[1]=((((-1.0)*x9087*x9089))+(((-1.0)*x9087*x9088)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9090=((-1.0)*px);
CheckValue<IkReal> x9092 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9092.valid){
continue;
}
IkReal x9091=((-1.0)*(x9092.value));
sj5=gconst1;
cj5=gconst2;
j5=x9091;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9090);
rxp1_1=(px*r21);
rxp1_2=(r11*x9090);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9091;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9093=(r10*r20);
IkReal x9094=((1.0)*cj3);
IkReal x9095=(r11*r21);
j4eval[0]=(x9095+x9093);
j4eval[1]=((((-1.0)*x9094*x9095))+(((-1.0)*x9093*x9094)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9096=((-1.0)*px);
CheckValue<IkReal> x9098 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9098.valid){
continue;
}
IkReal x9097=((-1.0)*(x9098.value));
sj5=gconst1;
cj5=gconst2;
j5=x9097;
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9096);
rxp1_1=(px*r21);
rxp1_2=(r11*x9096);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9097;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9099=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x9099))+(((-1.0)*r10*r20*x9099)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9100=((1.0)*gconst2);
CheckValue<IkReal> x9101=IKPowWithIntegerCheck(cj3,-1);
if(!x9101.valid){
continue;
}
CheckValue<IkReal> x9102=IKPowWithIntegerCheck(r02,-1);
if(!x9102.valid){
continue;
}
CheckValue<IkReal> x9103=IKPowWithIntegerCheck(((((-1.0)*cj3*r10*x9100))+((cj3*gconst1*r11))),-1);
if(!x9103.valid){
continue;
}
if( IKabs(((x9101.value)*(x9102.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9103.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9100)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9101.value)*(x9102.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9103.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9100))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9101.value)*(x9102.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9103.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9100))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9104=IKsin(j4);
IkReal x9105=IKcos(j4);
IkReal x9106=(sj1*sj2);
IkReal x9107=((1.0)*cj3);
IkReal x9108=(gconst1*r10);
IkReal x9109=((1.0)*cj2);
IkReal x9110=(gconst2*r21);
IkReal x9111=(gconst1*sj3);
IkReal x9112=(gconst2*r11);
IkReal x9113=(cj3*gconst1);
IkReal x9114=((1.0)*sj3);
IkReal x9115=((1.0)*cj1*sj2);
IkReal x9116=(sj1*x9109);
IkReal x9117=(gconst2*x9104);
IkReal x9118=(gconst2*x9105);
IkReal x9119=(r11*x9105);
IkReal x9120=(r02*x9104);
IkReal x9121=(r21*x9105);
IkReal x9122=((1.0)*gconst1*x9104);
IkReal x9123=(x9115+x9116);
evalcond[0]=((-1.0)*r02*x9105);
evalcond[1]=((((-1.0)*r21*x9122))+((r20*x9117)));
evalcond[2]=((1.0)+(((-1.0)*r11*x9122))+((r10*x9117)));
evalcond[3]=((((-1.0)*x9106))+((cj1*cj2))+(((-1.0)*x9107*x9120)));
evalcond[4]=((((-1.0)*x9114*x9120))+(((-1.0)*x9123)));
evalcond[5]=(((sj3*x9112))+(((-1.0)*r10*x9107*x9118))+((x9113*x9119))+((sj3*x9108)));
evalcond[6]=(((x9111*x9119))+(((-1.0)*x9107*x9112))+(((-1.0)*r10*x9114*x9118))+(((-1.0)*x9107*x9108)));
evalcond[7]=(((x9113*x9121))+((sj3*x9110))+(((-1.0)*r20*x9107*x9118))+(((-1.0)*x9123))+((r20*x9111)));
evalcond[8]=((((-1.0)*cj1*x9109))+(((-1.0)*gconst1*r20*x9107))+x9106+(((-1.0)*x9107*x9110))+((x9111*x9121))+(((-1.0)*r20*x9114*x9118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9124=((1.0)*r11);
IkReal x9125=(gconst2*r10);
CheckValue<IkReal> x9126=IKPowWithIntegerCheck((x9125+(((-1.0)*gconst1*x9124))),-1);
if(!x9126.valid){
continue;
}
CheckValue<IkReal> x9127=IKPowWithIntegerCheck(((((-1.0)*cj3*x9125))+((cj3*gconst1*r11))),-1);
if(!x9127.valid){
continue;
}
if( IKabs(((-1.0)*(x9126.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9127.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9124)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9126.value)))+IKsqr(((x9127.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9124))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9126.value)), ((x9127.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9124))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9128=IKsin(j4);
IkReal x9129=IKcos(j4);
IkReal x9130=(sj1*sj2);
IkReal x9131=((1.0)*cj3);
IkReal x9132=(gconst1*r10);
IkReal x9133=((1.0)*cj2);
IkReal x9134=(gconst2*r21);
IkReal x9135=(gconst1*sj3);
IkReal x9136=(gconst2*r11);
IkReal x9137=(cj3*gconst1);
IkReal x9138=((1.0)*sj3);
IkReal x9139=((1.0)*cj1*sj2);
IkReal x9140=(sj1*x9133);
IkReal x9141=(gconst2*x9128);
IkReal x9142=(gconst2*x9129);
IkReal x9143=(r11*x9129);
IkReal x9144=(r02*x9128);
IkReal x9145=(r21*x9129);
IkReal x9146=((1.0)*gconst1*x9128);
IkReal x9147=(x9139+x9140);
evalcond[0]=((-1.0)*r02*x9129);
evalcond[1]=(((r20*x9141))+(((-1.0)*r21*x9146)));
evalcond[2]=((1.0)+((r10*x9141))+(((-1.0)*r11*x9146)));
evalcond[3]=((((-1.0)*x9130))+(((-1.0)*x9131*x9144))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9147))+(((-1.0)*x9138*x9144)));
evalcond[5]=((((-1.0)*r10*x9131*x9142))+((sj3*x9132))+((sj3*x9136))+((x9137*x9143)));
evalcond[6]=(((x9135*x9143))+(((-1.0)*x9131*x9136))+(((-1.0)*x9131*x9132))+(((-1.0)*r10*x9138*x9142)));
evalcond[7]=(((r20*x9135))+(((-1.0)*r20*x9131*x9142))+(((-1.0)*x9147))+((sj3*x9134))+((x9137*x9145)));
evalcond[8]=(((x9135*x9145))+(((-1.0)*x9131*x9134))+(((-1.0)*gconst1*r20*x9131))+(((-1.0)*r20*x9138*x9142))+x9130+(((-1.0)*cj1*x9133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9148=(gconst1*r11);
IkReal x9149=(gconst2*r10);
CheckValue<IkReal> x9150=IKPowWithIntegerCheck(((((-1.0)*x9148))+x9149),-1);
if(!x9150.valid){
continue;
}
CheckValue<IkReal> x9151=IKPowWithIntegerCheck((((sj3*x9148))+(((-1.0)*sj3*x9149))),-1);
if(!x9151.valid){
continue;
}
if( IKabs(((-1.0)*(x9150.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9151.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x9150.value)))+IKsqr(((x9151.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x9150.value)), ((x9151.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9152=IKsin(j4);
IkReal x9153=IKcos(j4);
IkReal x9154=(sj1*sj2);
IkReal x9155=((1.0)*cj3);
IkReal x9156=(gconst1*r10);
IkReal x9157=((1.0)*cj2);
IkReal x9158=(gconst2*r21);
IkReal x9159=(gconst1*sj3);
IkReal x9160=(gconst2*r11);
IkReal x9161=(cj3*gconst1);
IkReal x9162=((1.0)*sj3);
IkReal x9163=((1.0)*cj1*sj2);
IkReal x9164=(sj1*x9157);
IkReal x9165=(gconst2*x9152);
IkReal x9166=(gconst2*x9153);
IkReal x9167=(r11*x9153);
IkReal x9168=(r02*x9152);
IkReal x9169=(r21*x9153);
IkReal x9170=((1.0)*gconst1*x9152);
IkReal x9171=(x9164+x9163);
evalcond[0]=((-1.0)*r02*x9153);
evalcond[1]=((((-1.0)*r21*x9170))+((r20*x9165)));
evalcond[2]=((1.0)+((r10*x9165))+(((-1.0)*r11*x9170)));
evalcond[3]=((((-1.0)*x9155*x9168))+((cj1*cj2))+(((-1.0)*x9154)));
evalcond[4]=((((-1.0)*x9171))+(((-1.0)*x9162*x9168)));
evalcond[5]=(((x9161*x9167))+((sj3*x9156))+((sj3*x9160))+(((-1.0)*r10*x9155*x9166)));
evalcond[6]=(((x9159*x9167))+(((-1.0)*x9155*x9160))+(((-1.0)*r10*x9162*x9166))+(((-1.0)*x9155*x9156)));
evalcond[7]=((((-1.0)*x9171))+((x9161*x9169))+((sj3*x9158))+((r20*x9159))+(((-1.0)*r20*x9155*x9166)));
evalcond[8]=(((x9159*x9169))+x9154+(((-1.0)*r20*x9162*x9166))+(((-1.0)*gconst1*r20*x9155))+(((-1.0)*cj1*x9157))+(((-1.0)*x9155*x9158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9172=gconst2*gconst2;
IkReal x9173=gconst1*gconst1;
IkReal x9174=(r11*sj3);
IkReal x9175=(gconst1*gconst2);
IkReal x9176=((1.0)*r00);
IkReal x9177=(cj3*r11);
IkReal x9178=(cj3*r10);
IkReal x9179=((1.0)*r02);
IkReal x9180=(r10*sj3);
IkReal x9181=(r01*x9173);
CheckValue<IkReal> x9182=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r01*x9175*x9180))+((x9174*x9181))+(((-1.0)*x9174*x9175*x9176))+((r00*x9172*x9180)))),-1);
if(!x9182.valid){
continue;
}
CheckValue<IkReal> x9183 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x9178*x9179))+(((-1.0)*gconst2*x9177*x9179)))),IkReal((((r01*x9175*x9177))+((x9178*x9181))+(((-1.0)*x9172*x9176*x9177))+(((-1.0)*x9175*x9176*x9178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9182.value)))+(x9183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9184=IKsin(j4);
IkReal x9185=IKcos(j4);
IkReal x9186=(gconst1*r01);
IkReal x9187=(gconst2*sj3);
IkReal x9188=(sj1*sj2);
IkReal x9189=(cj3*gconst1);
IkReal x9190=(cj3*gconst2);
IkReal x9191=((1.0)*cj2);
IkReal x9192=(gconst1*r11);
IkReal x9193=(gconst1*r21);
IkReal x9194=(gconst1*sj3);
IkReal x9195=((1.0)*cj1*sj2);
IkReal x9196=(sj1*x9191);
IkReal x9197=((1.0)*x9185);
IkReal x9198=((1.0)*x9184);
IkReal x9199=(sj3*x9185);
IkReal x9200=(gconst2*x9184);
IkReal x9201=(x9195+x9196);
evalcond[0]=(((r20*x9200))+(((-1.0)*r22*x9197))+(((-1.0)*x9193*x9198)));
evalcond[1]=(((r00*x9200))+(((-1.0)*r02*x9197))+(((-1.0)*x9186*x9198)));
evalcond[2]=((1.0)+((r10*x9200))+(((-1.0)*r12*x9197))+(((-1.0)*x9192*x9198)));
evalcond[3]=(((r11*x9187))+(((-1.0)*cj3*r12*x9198))+((r10*x9194))+(((-1.0)*r10*x9190*x9197))+((r11*x9185*x9189)));
evalcond[4]=((((-1.0)*r11*x9190))+(((-1.0)*r12*sj3*x9198))+((x9192*x9199))+(((-1.0)*r10*x9189))+(((-1.0)*r10*x9187*x9197)));
evalcond[5]=(((cj3*x9185*x9186))+((r00*x9194))+(((-1.0)*x9188))+((cj1*cj2))+(((-1.0)*cj3*r02*x9198))+(((-1.0)*r00*x9190*x9197))+((r01*x9187)));
evalcond[6]=(((r21*x9185*x9189))+(((-1.0)*r20*x9190*x9197))+((r21*x9187))+((r20*x9194))+(((-1.0)*x9201))+(((-1.0)*cj3*r22*x9198)));
evalcond[7]=((((-1.0)*r20*x9187*x9197))+(((-1.0)*cj1*x9191))+(((-1.0)*r20*x9189))+x9188+(((-1.0)*r21*x9190))+(((-1.0)*r22*sj3*x9198))+((x9193*x9199)));
evalcond[8]=((((-1.0)*r00*x9189))+((x9186*x9199))+(((-1.0)*r00*x9187*x9197))+(((-1.0)*r02*sj3*x9198))+(((-1.0)*r01*x9190))+(((-1.0)*x9201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9202=gconst1*gconst1;
IkReal x9203=gconst2*gconst2;
IkReal x9204=(r01*r11);
IkReal x9205=(r00*r10);
IkReal x9206=(gconst2*r11);
IkReal x9207=(r02*sj3);
IkReal x9208=(r01*r10);
IkReal x9209=(gconst1*gconst2*sj3);
IkReal x9210=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9211=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*x9208*x9210))+((cj3*r02*r12))+((cj3*x9202*x9204))+(((-1.0)*r00*x9206*x9210))+((cj3*x9203*x9205)))),-1);
if(!x9211.valid){
continue;
}
CheckValue<IkReal> x9212 = IKatan2WithCheck(IkReal((((x9206*x9207))+((gconst1*r10*x9207)))),IkReal((((x9205*x9209))+(((-1.0)*sj3*x9202*x9208))+(((-1.0)*x9204*x9209))+((r00*r11*sj3*x9203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9211.value)))+(x9212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9213=IKsin(j4);
IkReal x9214=IKcos(j4);
IkReal x9215=(gconst1*r01);
IkReal x9216=(gconst2*sj3);
IkReal x9217=(sj1*sj2);
IkReal x9218=(cj3*gconst1);
IkReal x9219=(cj3*gconst2);
IkReal x9220=((1.0)*cj2);
IkReal x9221=(gconst1*r11);
IkReal x9222=(gconst1*r21);
IkReal x9223=(gconst1*sj3);
IkReal x9224=((1.0)*cj1*sj2);
IkReal x9225=(sj1*x9220);
IkReal x9226=((1.0)*x9214);
IkReal x9227=((1.0)*x9213);
IkReal x9228=(sj3*x9214);
IkReal x9229=(gconst2*x9213);
IkReal x9230=(x9225+x9224);
evalcond[0]=(((r20*x9229))+(((-1.0)*x9222*x9227))+(((-1.0)*r22*x9226)));
evalcond[1]=(((r00*x9229))+(((-1.0)*r02*x9226))+(((-1.0)*x9215*x9227)));
evalcond[2]=((1.0)+(((-1.0)*x9221*x9227))+(((-1.0)*r12*x9226))+((r10*x9229)));
evalcond[3]=(((r11*x9214*x9218))+((r11*x9216))+(((-1.0)*cj3*r12*x9227))+(((-1.0)*r10*x9219*x9226))+((r10*x9223)));
evalcond[4]=((((-1.0)*r12*sj3*x9227))+((x9221*x9228))+(((-1.0)*r10*x9216*x9226))+(((-1.0)*r11*x9219))+(((-1.0)*r10*x9218)));
evalcond[5]=(((r00*x9223))+(((-1.0)*cj3*r02*x9227))+(((-1.0)*r00*x9219*x9226))+((cj1*cj2))+((cj3*x9214*x9215))+(((-1.0)*x9217))+((r01*x9216)));
evalcond[6]=(((r21*x9214*x9218))+((r20*x9223))+((r21*x9216))+(((-1.0)*x9230))+(((-1.0)*r20*x9219*x9226))+(((-1.0)*cj3*r22*x9227)));
evalcond[7]=((((-1.0)*r20*x9216*x9226))+(((-1.0)*r21*x9219))+(((-1.0)*r22*sj3*x9227))+x9217+(((-1.0)*r20*x9218))+((x9222*x9228))+(((-1.0)*cj1*x9220)));
evalcond[8]=((((-1.0)*r01*x9219))+(((-1.0)*r00*x9216*x9226))+(((-1.0)*x9230))+((x9215*x9228))+(((-1.0)*r02*sj3*x9227))+(((-1.0)*r00*x9218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9231 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9231.valid){
continue;
}
CheckValue<IkReal> x9232=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9232.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9231.value)+(((1.5707963267949)*(x9232.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9233=IKsin(j4);
IkReal x9234=IKcos(j4);
IkReal x9235=(gconst1*r01);
IkReal x9236=(gconst2*sj3);
IkReal x9237=(sj1*sj2);
IkReal x9238=(cj3*gconst1);
IkReal x9239=(cj3*gconst2);
IkReal x9240=((1.0)*cj2);
IkReal x9241=(gconst1*r11);
IkReal x9242=(gconst1*r21);
IkReal x9243=(gconst1*sj3);
IkReal x9244=((1.0)*cj1*sj2);
IkReal x9245=(sj1*x9240);
IkReal x9246=((1.0)*x9234);
IkReal x9247=((1.0)*x9233);
IkReal x9248=(sj3*x9234);
IkReal x9249=(gconst2*x9233);
IkReal x9250=(x9245+x9244);
evalcond[0]=((((-1.0)*r22*x9246))+((r20*x9249))+(((-1.0)*x9242*x9247)));
evalcond[1]=((((-1.0)*x9235*x9247))+((r00*x9249))+(((-1.0)*r02*x9246)));
evalcond[2]=((1.0)+(((-1.0)*x9241*x9247))+(((-1.0)*r12*x9246))+((r10*x9249)));
evalcond[3]=(((r11*x9234*x9238))+(((-1.0)*r10*x9239*x9246))+(((-1.0)*cj3*r12*x9247))+((r10*x9243))+((r11*x9236)));
evalcond[4]=(((x9241*x9248))+(((-1.0)*r10*x9238))+(((-1.0)*r10*x9236*x9246))+(((-1.0)*r11*x9239))+(((-1.0)*r12*sj3*x9247)));
evalcond[5]=(((cj3*x9234*x9235))+(((-1.0)*r00*x9239*x9246))+(((-1.0)*cj3*r02*x9247))+((r00*x9243))+((cj1*cj2))+((r01*x9236))+(((-1.0)*x9237)));
evalcond[6]=((((-1.0)*cj3*r22*x9247))+((r21*x9234*x9238))+((r21*x9236))+(((-1.0)*x9250))+((r20*x9243))+(((-1.0)*r20*x9239*x9246)));
evalcond[7]=((((-1.0)*r21*x9239))+x9237+(((-1.0)*r22*sj3*x9247))+(((-1.0)*cj1*x9240))+((x9242*x9248))+(((-1.0)*r20*x9236*x9246))+(((-1.0)*r20*x9238)));
evalcond[8]=((((-1.0)*r00*x9236*x9246))+(((-1.0)*r01*x9239))+(((-1.0)*r00*x9238))+(((-1.0)*x9250))+((x9235*x9248))+(((-1.0)*r02*sj3*x9247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9253 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9253.valid){
continue;
}
IkReal x9251=((-1.0)*(x9253.value));
IkReal x9252=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9251;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9251;
IkReal gconst1=((-1.0)*r21*x9252);
IkReal gconst2=(r20*x9252);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9256 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9256.valid){
continue;
}
IkReal x9254=((-1.0)*(x9256.value));
IkReal x9255=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9254;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9254;
IkReal gconst1=((-1.0)*r21*x9255);
IkReal gconst2=(r20*x9255);
CheckValue<IkReal> x9264=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9264.valid){
continue;
}
IkReal x9257=x9264.value;
IkReal x9258=(cj3*x9257);
IkReal x9259=(r11*x9258);
IkReal x9260=(r01*x9258);
IkReal x9261=(r00*x9258);
IkReal x9262=(r10*x9258);
IkReal x9263=(r20*r21*x9258);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x9260))+((r10*x9261*(r20*r20)))+((r01*x9259*(r21*r21)))+((r00*r20*r21*x9259))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9267 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9267.valid){
continue;
}
IkReal x9265=((-1.0)*(x9267.value));
IkReal x9266=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9265;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9265;
IkReal gconst1=((-1.0)*r21*x9266);
IkReal gconst2=(r20*x9266);
CheckValue<IkReal> x9275=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9275.valid){
continue;
}
IkReal x9268=x9275.value;
IkReal x9269=(sj3*x9268);
IkReal x9270=(r11*x9269);
IkReal x9271=(r00*x9269);
IkReal x9272=(r01*x9269);
IkReal x9273=(r10*x9269);
IkReal x9274=(r20*r21*x9269);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9272))+((r10*x9271*(r20*r20)))+((r00*r20*r21*x9270))+((r01*x9270*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
IkReal x9276=((-1.0)*(x9278.value));
IkReal x9277=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9276;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9276;
IkReal gconst1=((-1.0)*r21*x9277);
IkReal gconst2=(r20*x9277);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9281 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9281.valid){
continue;
}
IkReal x9279=((-1.0)*(x9281.value));
IkReal x9280=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9279;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9279;
IkReal gconst1=((-1.0)*r21*x9280);
IkReal gconst2=(r20*x9280);
IkReal x9282=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9286=IKPowWithIntegerCheck(x9282,-1);
if(!x9286.valid){
continue;
}
IkReal x9283=x9286.value;
IkReal x9284=((1.0)*x9283);
IkReal x9285=((((-1.0)*x9284*(r11*r11)*(r21*r21)))+(((-1.0)*x9284*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9283)));
j4eval[0]=x9285;
j4eval[1]=r12;
j4eval[2]=x9282;
j4eval[3]=IKsign(x9285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9289 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9289.valid){
continue;
}
IkReal x9287=((-1.0)*(x9289.value));
IkReal x9288=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9287;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9287;
IkReal gconst1=((-1.0)*r21*x9288);
IkReal gconst2=(r20*x9288);
IkReal x9290=r22*r22;
IkReal x9291=(r02*sj1*sj2);
CheckValue<IkReal> x9296=IKPowWithIntegerCheck(((-1.0)+x9290),-1);
if(!x9296.valid){
continue;
}
IkReal x9292=x9296.value;
IkReal x9293=((1.0)*cj1*cj2*r02);
if((((1.0)+(((-1.0)*x9290)))) < -0.00001)
continue;
IkReal x9294=IKsqrt(((1.0)+(((-1.0)*x9290))));
IkReal x9295=(r22*x9292*x9294);
j4eval[0]=((IKabs((x9291+(((-1.0)*x9293)))))+(IKabs((((x9291*x9295))+(((-1.0)*x9293*x9295))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9297=(sj1*sj2);
IkReal x9298=(gconst1*r01);
IkReal x9299=(gconst2*r00);
IkReal x9300=((1.0)*cj1*cj2);
CheckValue<IkReal> x9301 = IKatan2WithCheck(IkReal((((r02*x9297))+(((-1.0)*r02*x9300)))),IkReal(((((-1.0)*x9297*x9298))+((x9297*x9299))+(((-1.0)*x9299*x9300))+((cj1*cj2*x9298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9301.valid){
continue;
}
CheckValue<IkReal> x9302=IKPowWithIntegerCheck(IKsign(((x9298*x9298)+(r02*r02)+(x9299*x9299)+(((-2.0)*x9298*x9299)))),-1);
if(!x9302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9301.value)+(((1.5707963267949)*(x9302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9303=IKsin(j4);
IkReal x9304=IKcos(j4);
IkReal x9305=(gconst1*r01);
IkReal x9306=(gconst1*r21);
IkReal x9307=((1.0)*cj2);
IkReal x9308=(gconst1*r11);
IkReal x9309=((1.0)*x9304);
IkReal x9310=((1.0)*x9303);
IkReal x9311=(gconst2*x9303);
evalcond[0]=((((-1.0)*x9306*x9310))+((r20*x9311))+(((-1.0)*r22*x9309)));
evalcond[1]=((((-1.0)*x9305*x9310))+(((-1.0)*r02*x9309))+((r00*x9311)));
evalcond[2]=((((-1.0)*gconst2*r10*x9309))+((x9304*x9308))+(((-1.0)*r12*x9310)));
evalcond[3]=((-1.0)+(((-1.0)*x9308*x9310))+((r10*x9311))+(((-1.0)*r12*x9309)));
evalcond[4]=((((-1.0)*cj1*x9307))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9309))+((x9304*x9305))+(((-1.0)*r02*x9310)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9307))+((x9304*x9306))+(((-1.0)*r22*x9310))+(((-1.0)*gconst2*r20*x9309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9312=(gconst1*r11);
IkReal x9313=(gconst2*r10);
CheckValue<IkReal> x9314=IKPowWithIntegerCheck(IKsign(((((2.0)*x9312*x9313))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9313*x9313)))+(((-1.0)*(x9312*x9312))))),-1);
if(!x9314.valid){
continue;
}
CheckValue<IkReal> x9315 = IKatan2WithCheck(IkReal((x9312+(((-1.0)*x9313)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9314.value)))+(x9315.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9316=IKsin(j4);
IkReal x9317=IKcos(j4);
IkReal x9318=(gconst1*r01);
IkReal x9319=(gconst1*r21);
IkReal x9320=((1.0)*cj2);
IkReal x9321=(gconst1*r11);
IkReal x9322=((1.0)*x9317);
IkReal x9323=((1.0)*x9316);
IkReal x9324=(gconst2*x9316);
evalcond[0]=(((r20*x9324))+(((-1.0)*r22*x9322))+(((-1.0)*x9319*x9323)));
evalcond[1]=((((-1.0)*r02*x9322))+((r00*x9324))+(((-1.0)*x9318*x9323)));
evalcond[2]=(((x9317*x9321))+(((-1.0)*r12*x9323))+(((-1.0)*gconst2*r10*x9322)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9322))+((r10*x9324))+(((-1.0)*x9321*x9323)));
evalcond[4]=((((-1.0)*r02*x9323))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9322))+(((-1.0)*cj1*x9320))+((x9317*x9318)));
evalcond[5]=((((-1.0)*sj1*x9320))+(((-1.0)*r22*x9323))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9322))+((x9317*x9319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9325=((1.0)*gconst1);
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9325))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9325))+(((-1.0)*gconst2*r01)))),-1);
if(!x9327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9326.value)+(((1.5707963267949)*(x9327.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9328=IKsin(j4);
IkReal x9329=IKcos(j4);
IkReal x9330=(gconst1*r01);
IkReal x9331=(gconst1*r21);
IkReal x9332=((1.0)*cj2);
IkReal x9333=(gconst1*r11);
IkReal x9334=((1.0)*x9329);
IkReal x9335=((1.0)*x9328);
IkReal x9336=(gconst2*x9328);
evalcond[0]=(((r20*x9336))+(((-1.0)*r22*x9334))+(((-1.0)*x9331*x9335)));
evalcond[1]=((((-1.0)*r02*x9334))+((r00*x9336))+(((-1.0)*x9330*x9335)));
evalcond[2]=((((-1.0)*gconst2*r10*x9334))+((x9329*x9333))+(((-1.0)*r12*x9335)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9334))+(((-1.0)*x9333*x9335))+((r10*x9336)));
evalcond[4]=(((x9329*x9330))+(((-1.0)*r02*x9335))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9334))+(((-1.0)*cj1*x9332)));
evalcond[5]=((((-1.0)*sj1*x9332))+((x9329*x9331))+(((-1.0)*r22*x9335))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9339 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9339.valid){
continue;
}
IkReal x9337=((-1.0)*(x9339.value));
IkReal x9338=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9337;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9337;
IkReal gconst1=((-1.0)*r21*x9338);
IkReal gconst2=(r20*x9338);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9342 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9342.valid){
continue;
}
IkReal x9340=((-1.0)*(x9342.value));
IkReal x9341=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9340;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9340;
IkReal gconst1=((-1.0)*r21*x9341);
IkReal gconst2=(r20*x9341);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9345 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9345.valid){
continue;
}
IkReal x9343=((-1.0)*(x9345.value));
IkReal x9344=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9343;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9343;
IkReal gconst1=((-1.0)*r21*x9344);
IkReal gconst2=(r20*x9344);
IkReal x9346=r22*r22;
IkReal x9347=(cj1*r12*sj2);
IkReal x9348=(cj2*r12*sj1);
CheckValue<IkReal> x9352=IKPowWithIntegerCheck(((-1.0)+x9346),-1);
if(!x9352.valid){
continue;
}
IkReal x9349=x9352.value;
if((((1.0)+(((-1.0)*x9346)))) < -0.00001)
continue;
IkReal x9350=IKsqrt(((1.0)+(((-1.0)*x9346))));
IkReal x9351=((1.0)*r22*x9349*x9350);
j4eval[0]=((IKabs(((((-1.0)*x9347*x9351))+(((-1.0)*x9348*x9351)))))+(IKabs((x9347+x9348))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9353=(cj1*sj2);
IkReal x9354=(cj2*sj1);
IkReal x9355=(gconst1*r11);
IkReal x9356=((1.0)*gconst2*r10);
CheckValue<IkReal> x9357=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9357.valid){
continue;
}
CheckValue<IkReal> x9358 = IKatan2WithCheck(IkReal((((x9353*x9355))+((x9354*x9355))+(((-1.0)*x9353*x9356))+(((-1.0)*x9354*x9356)))),IkReal((((r12*x9354))+((r12*x9353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9357.value)))+(x9358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9359=IKcos(j4);
IkReal x9360=IKsin(j4);
IkReal x9361=(gconst1*r01);
IkReal x9362=((1.0)*cj2);
IkReal x9363=(gconst1*r21);
IkReal x9364=(gconst1*r11);
IkReal x9365=((1.0)*x9359);
IkReal x9366=(gconst2*x9359);
IkReal x9367=((1.0)*x9360);
IkReal x9368=(gconst2*x9360);
evalcond[0]=((((-1.0)*x9364*x9365))+((r12*x9360))+((r10*x9366)));
evalcond[1]=((((-1.0)*r22*x9365))+(((-1.0)*x9363*x9367))+((r20*x9368)));
evalcond[2]=((((-1.0)*r02*x9365))+((r00*x9368))+(((-1.0)*x9361*x9367)));
evalcond[3]=((-1.0)+(((-1.0)*x9364*x9367))+(((-1.0)*r12*x9365))+((r10*x9368)));
evalcond[4]=((((-1.0)*cj1*x9362))+((r02*x9360))+((sj1*sj2))+((r00*x9366))+(((-1.0)*x9361*x9365)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r22*x9360))+(((-1.0)*sj1*x9362))+(((-1.0)*x9363*x9365))+((r20*x9366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9369=(gconst1*r11);
IkReal x9370=(gconst2*r10);
CheckValue<IkReal> x9371 = IKatan2WithCheck(IkReal((x9370+(((-1.0)*x9369)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9371.valid){
continue;
}
CheckValue<IkReal> x9372=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9370*x9370)+(((-2.0)*x9369*x9370))+(x9369*x9369))),-1);
if(!x9372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9371.value)+(((1.5707963267949)*(x9372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9373=IKcos(j4);
IkReal x9374=IKsin(j4);
IkReal x9375=(gconst1*r01);
IkReal x9376=((1.0)*cj2);
IkReal x9377=(gconst1*r21);
IkReal x9378=(gconst1*r11);
IkReal x9379=((1.0)*x9373);
IkReal x9380=(gconst2*x9373);
IkReal x9381=((1.0)*x9374);
IkReal x9382=(gconst2*x9374);
evalcond[0]=((((-1.0)*x9378*x9379))+((r10*x9380))+((r12*x9374)));
evalcond[1]=((((-1.0)*x9377*x9381))+(((-1.0)*r22*x9379))+((r20*x9382)));
evalcond[2]=((((-1.0)*r02*x9379))+(((-1.0)*x9375*x9381))+((r00*x9382)));
evalcond[3]=((-1.0)+((r10*x9382))+(((-1.0)*x9378*x9381))+(((-1.0)*r12*x9379)));
evalcond[4]=((((-1.0)*cj1*x9376))+((r02*x9374))+((sj1*sj2))+(((-1.0)*x9375*x9379))+((r00*x9380)));
evalcond[5]=(((r22*x9374))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x9376))+(((-1.0)*x9377*x9379))+((r20*x9380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9383=((1.0)*gconst1);
CheckValue<IkReal> x9384 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9383))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9384.valid){
continue;
}
CheckValue<IkReal> x9385=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9383)))),-1);
if(!x9385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9384.value)+(((1.5707963267949)*(x9385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9386=IKcos(j4);
IkReal x9387=IKsin(j4);
IkReal x9388=(gconst1*r01);
IkReal x9389=((1.0)*cj2);
IkReal x9390=(gconst1*r21);
IkReal x9391=(gconst1*r11);
IkReal x9392=((1.0)*x9386);
IkReal x9393=(gconst2*x9386);
IkReal x9394=((1.0)*x9387);
IkReal x9395=(gconst2*x9387);
evalcond[0]=(((r10*x9393))+(((-1.0)*x9391*x9392))+((r12*x9387)));
evalcond[1]=((((-1.0)*x9390*x9394))+((r20*x9395))+(((-1.0)*r22*x9392)));
evalcond[2]=((((-1.0)*x9388*x9394))+(((-1.0)*r02*x9392))+((r00*x9395)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9392))+((r10*x9395))+(((-1.0)*x9391*x9394)));
evalcond[4]=((((-1.0)*x9388*x9392))+((r02*x9387))+(((-1.0)*cj1*x9389))+((sj1*sj2))+((r00*x9393)));
evalcond[5]=((((-1.0)*x9390*x9392))+((r20*x9393))+((r22*x9387))+(((-1.0)*sj1*x9389))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9396=((-1.0)*px);
CheckValue<IkReal> x9398 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9398.valid){
continue;
}
IkReal x9397=((-1.0)*(x9398.value));
sj5=gconst1;
cj5=gconst2;
j5=x9397;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9396);
rxp1_1=(px*r21);
rxp1_2=(r11*x9396);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9397;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9399=((1.0)*sj3);
IkReal x9400=(r11*r21);
IkReal x9401=(r10*r20);
j4eval[0]=(x9401+x9400);
j4eval[1]=((((-1.0)*x9399*x9400))+(((-1.0)*x9399*x9401)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9402=((-1.0)*px);
CheckValue<IkReal> x9404 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9404.valid){
continue;
}
IkReal x9403=((-1.0)*(x9404.value));
sj5=gconst1;
cj5=gconst2;
j5=x9403;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9402);
rxp1_1=(px*r21);
rxp1_2=(r11*x9402);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9403;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9405=(r10*r20);
IkReal x9406=((1.0)*cj3);
IkReal x9407=(r11*r21);
j4eval[0]=(x9407+x9405);
j4eval[1]=((((-1.0)*x9406*x9407))+(((-1.0)*x9405*x9406)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9408=((-1.0)*px);
CheckValue<IkReal> x9410 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9410.valid){
continue;
}
IkReal x9409=((-1.0)*(x9410.value));
sj5=gconst1;
cj5=gconst2;
j5=x9409;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9408);
rxp1_1=(px*r21);
rxp1_2=(r11*x9408);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9409;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9411=((1.0)*cj3);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r11*r21*x9411))+(((-1.0)*r10*r20*x9411)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9412=((1.0)*gconst2);
CheckValue<IkReal> x9413=IKPowWithIntegerCheck(r02,-1);
if(!x9413.valid){
continue;
}
CheckValue<IkReal> x9414=IKPowWithIntegerCheck(sj3,-1);
if(!x9414.valid){
continue;
}
CheckValue<IkReal> x9415=IKPowWithIntegerCheck((((cj3*gconst1*r11))+(((-1.0)*cj3*r10*x9412))),-1);
if(!x9415.valid){
continue;
}
if( IKabs(((x9413.value)*(x9414.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9415.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9412)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9413.value)*(x9414.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x9415.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9412))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9413.value)*(x9414.value)*((((cj2*sj1))+((cj1*sj2))))), ((x9415.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*r11*sj3*x9412))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9416=IKsin(j4);
IkReal x9417=IKcos(j4);
IkReal x9418=(sj1*sj2);
IkReal x9419=((1.0)*cj3);
IkReal x9420=(gconst1*r10);
IkReal x9421=(cj2*sj1);
IkReal x9422=((1.0)*cj1);
IkReal x9423=(gconst2*r21);
IkReal x9424=(gconst1*sj3);
IkReal x9425=(gconst2*r11);
IkReal x9426=(cj3*gconst1);
IkReal x9427=((1.0)*sj3);
IkReal x9428=(cj2*x9422);
IkReal x9429=(gconst2*x9416);
IkReal x9430=(gconst2*x9417);
IkReal x9431=(r11*x9417);
IkReal x9432=(r02*x9416);
IkReal x9433=(r21*x9417);
IkReal x9434=((1.0)*gconst1*x9416);
evalcond[0]=((-1.0)*r02*x9417);
evalcond[1]=(((r20*x9429))+(((-1.0)*r21*x9434)));
evalcond[2]=((((-1.0)*x9427*x9432))+((cj1*sj2))+x9421);
evalcond[3]=((-1.0)+(((-1.0)*r11*x9434))+((r10*x9429)));
evalcond[4]=((((-1.0)*x9419*x9432))+x9418+(((-1.0)*x9428)));
evalcond[5]=(((x9426*x9431))+((sj3*x9425))+((sj3*x9420))+(((-1.0)*r10*x9419*x9430)));
evalcond[6]=(((x9424*x9431))+(((-1.0)*r10*x9427*x9430))+(((-1.0)*x9419*x9420))+(((-1.0)*x9419*x9425)));
evalcond[7]=((((-1.0)*r20*x9419*x9430))+(((-1.0)*sj2*x9422))+((x9426*x9433))+((sj3*x9423))+((r20*x9424))+(((-1.0)*x9421)));
evalcond[8]=(((x9424*x9433))+(((-1.0)*r20*x9427*x9430))+x9418+(((-1.0)*x9428))+(((-1.0)*x9419*x9423))+(((-1.0)*gconst1*r20*x9419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9435=((1.0)*r11);
IkReal x9436=(gconst2*r10);
CheckValue<IkReal> x9437=IKPowWithIntegerCheck(((((-1.0)*gconst1*x9435))+x9436),-1);
if(!x9437.valid){
continue;
}
CheckValue<IkReal> x9438=IKPowWithIntegerCheck(((((-1.0)*cj3*x9436))+((cj3*gconst1*r11))),-1);
if(!x9438.valid){
continue;
}
if( IKabs(x9437.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9438.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9435)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9437.value)+IKsqr(((x9438.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9435))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9437.value, ((x9438.value)*(((((-1.0)*gconst1*r10*sj3))+(((-1.0)*gconst2*sj3*x9435))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9439=IKsin(j4);
IkReal x9440=IKcos(j4);
IkReal x9441=(sj1*sj2);
IkReal x9442=((1.0)*cj3);
IkReal x9443=(gconst1*r10);
IkReal x9444=(cj2*sj1);
IkReal x9445=((1.0)*cj1);
IkReal x9446=(gconst2*r21);
IkReal x9447=(gconst1*sj3);
IkReal x9448=(gconst2*r11);
IkReal x9449=(cj3*gconst1);
IkReal x9450=((1.0)*sj3);
IkReal x9451=(cj2*x9445);
IkReal x9452=(gconst2*x9439);
IkReal x9453=(gconst2*x9440);
IkReal x9454=(r11*x9440);
IkReal x9455=(r02*x9439);
IkReal x9456=(r21*x9440);
IkReal x9457=((1.0)*gconst1*x9439);
evalcond[0]=((-1.0)*r02*x9440);
evalcond[1]=(((r20*x9452))+(((-1.0)*r21*x9457)));
evalcond[2]=((((-1.0)*x9450*x9455))+((cj1*sj2))+x9444);
evalcond[3]=((-1.0)+((r10*x9452))+(((-1.0)*r11*x9457)));
evalcond[4]=((((-1.0)*x9451))+(((-1.0)*x9442*x9455))+x9441);
evalcond[5]=(((x9449*x9454))+(((-1.0)*r10*x9442*x9453))+((sj3*x9448))+((sj3*x9443)));
evalcond[6]=((((-1.0)*x9442*x9448))+(((-1.0)*x9442*x9443))+(((-1.0)*r10*x9450*x9453))+((x9447*x9454)));
evalcond[7]=(((x9449*x9456))+(((-1.0)*sj2*x9445))+(((-1.0)*x9444))+((sj3*x9446))+((r20*x9447))+(((-1.0)*r20*x9442*x9453)));
evalcond[8]=((((-1.0)*gconst1*r20*x9442))+(((-1.0)*x9442*x9446))+(((-1.0)*x9451))+x9441+(((-1.0)*r20*x9450*x9453))+((x9447*x9456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9458=(gconst1*r11);
IkReal x9459=(gconst2*r10);
CheckValue<IkReal> x9460=IKPowWithIntegerCheck(((((-1.0)*x9458))+x9459),-1);
if(!x9460.valid){
continue;
}
CheckValue<IkReal> x9461=IKPowWithIntegerCheck(((((-1.0)*sj3*x9459))+((sj3*x9458))),-1);
if(!x9461.valid){
continue;
}
if( IKabs(x9460.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9461.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9460.value)+IKsqr(((x9461.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9460.value, ((x9461.value)*((((cj3*gconst2*r11))+((cj3*gconst1*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9462=IKsin(j4);
IkReal x9463=IKcos(j4);
IkReal x9464=(sj1*sj2);
IkReal x9465=((1.0)*cj3);
IkReal x9466=(gconst1*r10);
IkReal x9467=(cj2*sj1);
IkReal x9468=((1.0)*cj1);
IkReal x9469=(gconst2*r21);
IkReal x9470=(gconst1*sj3);
IkReal x9471=(gconst2*r11);
IkReal x9472=(cj3*gconst1);
IkReal x9473=((1.0)*sj3);
IkReal x9474=(cj2*x9468);
IkReal x9475=(gconst2*x9462);
IkReal x9476=(gconst2*x9463);
IkReal x9477=(r11*x9463);
IkReal x9478=(r02*x9462);
IkReal x9479=(r21*x9463);
IkReal x9480=((1.0)*gconst1*x9462);
evalcond[0]=((-1.0)*r02*x9463);
evalcond[1]=((((-1.0)*r21*x9480))+((r20*x9475)));
evalcond[2]=(((cj1*sj2))+(((-1.0)*x9473*x9478))+x9467);
evalcond[3]=((-1.0)+((r10*x9475))+(((-1.0)*r11*x9480)));
evalcond[4]=((((-1.0)*x9474))+x9464+(((-1.0)*x9465*x9478)));
evalcond[5]=(((sj3*x9471))+(((-1.0)*r10*x9465*x9476))+((sj3*x9466))+((x9472*x9477)));
evalcond[6]=(((x9470*x9477))+(((-1.0)*r10*x9473*x9476))+(((-1.0)*x9465*x9471))+(((-1.0)*x9465*x9466)));
evalcond[7]=((((-1.0)*r20*x9465*x9476))+(((-1.0)*sj2*x9468))+((sj3*x9469))+((r20*x9470))+(((-1.0)*x9467))+((x9472*x9479)));
evalcond[8]=(((x9470*x9479))+(((-1.0)*r20*x9473*x9476))+(((-1.0)*gconst1*r20*x9465))+(((-1.0)*x9474))+x9464+(((-1.0)*x9465*x9469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9481=gconst2*gconst2;
IkReal x9482=gconst1*gconst1;
IkReal x9483=(r11*sj3);
IkReal x9484=(gconst1*gconst2);
IkReal x9485=((1.0)*r00);
IkReal x9486=(cj3*r11);
IkReal x9487=(cj3*r10);
IkReal x9488=((1.0)*r02);
IkReal x9489=(r10*sj3);
IkReal x9490=(r01*x9482);
CheckValue<IkReal> x9491=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9481*x9489))+(((-1.0)*x9483*x9484*x9485))+(((-1.0)*r01*x9484*x9489))+((x9483*x9490)))),-1);
if(!x9491.valid){
continue;
}
CheckValue<IkReal> x9492 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*x9487*x9488))+(((-1.0)*gconst2*x9486*x9488)))),IkReal((((x9487*x9490))+(((-1.0)*x9481*x9485*x9486))+(((-1.0)*x9484*x9485*x9487))+((r01*x9484*x9486)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9491.value)))+(x9492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9493=IKsin(j4);
IkReal x9494=IKcos(j4);
IkReal x9495=(sj1*sj2);
IkReal x9496=(gconst1*r01);
IkReal x9497=(gconst2*sj3);
IkReal x9498=(cj3*gconst1);
IkReal x9499=(cj3*gconst2);
IkReal x9500=((1.0)*cj2);
IkReal x9501=(gconst1*r11);
IkReal x9502=(gconst1*r21);
IkReal x9503=(cj1*sj2);
IkReal x9504=(gconst1*sj3);
IkReal x9505=(cj1*x9500);
IkReal x9506=((1.0)*x9494);
IkReal x9507=((1.0)*x9493);
IkReal x9508=(sj3*x9494);
IkReal x9509=(gconst2*x9493);
evalcond[0]=((((-1.0)*r22*x9506))+((r20*x9509))+(((-1.0)*x9502*x9507)));
evalcond[1]=((((-1.0)*x9496*x9507))+(((-1.0)*r02*x9506))+((r00*x9509)));
evalcond[2]=((-1.0)+((r10*x9509))+(((-1.0)*r12*x9506))+(((-1.0)*x9501*x9507)));
evalcond[3]=((((-1.0)*r10*x9499*x9506))+((r10*x9504))+((r11*x9494*x9498))+(((-1.0)*cj3*r12*x9507))+((r11*x9497)));
evalcond[4]=((((-1.0)*r10*x9498))+(((-1.0)*r10*x9497*x9506))+(((-1.0)*r12*sj3*x9507))+(((-1.0)*r11*x9499))+((x9501*x9508)));
evalcond[5]=((((-1.0)*r00*x9499*x9506))+(((-1.0)*cj3*r02*x9507))+((cj3*x9494*x9496))+x9495+((r01*x9497))+(((-1.0)*x9505))+((r00*x9504)));
evalcond[6]=((((-1.0)*cj3*r22*x9507))+(((-1.0)*x9503))+((r20*x9504))+((r21*x9494*x9498))+(((-1.0)*r20*x9499*x9506))+(((-1.0)*sj1*x9500))+((r21*x9497)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r01*x9499))+((x9496*x9508))+(((-1.0)*r00*x9498))+(((-1.0)*r02*sj3*x9507))+(((-1.0)*r00*x9497*x9506))+x9503);
evalcond[8]=((((-1.0)*r20*x9497*x9506))+(((-1.0)*r21*x9499))+((x9502*x9508))+(((-1.0)*r22*sj3*x9507))+x9495+(((-1.0)*r20*x9498))+(((-1.0)*x9505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9510=gconst1*gconst1;
IkReal x9511=gconst2*gconst2;
IkReal x9512=(r01*r11);
IkReal x9513=(r00*r10);
IkReal x9514=(gconst2*r11);
IkReal x9515=(r02*sj3);
IkReal x9516=(r01*r10);
IkReal x9517=(gconst1*gconst2*sj3);
IkReal x9518=((1.0)*cj3*gconst1);
CheckValue<IkReal> x9519 = IKatan2WithCheck(IkReal((((x9514*x9515))+((gconst1*r10*x9515)))),IkReal(((((-1.0)*sj3*x9510*x9516))+((x9513*x9517))+(((-1.0)*x9512*x9517))+((r00*r11*sj3*x9511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9519.valid){
continue;
}
CheckValue<IkReal> x9520=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*r00*x9514*x9518))+(((-1.0)*gconst2*x9516*x9518))+((cj3*x9511*x9513))+((cj3*x9510*x9512)))),-1);
if(!x9520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9519.value)+(((1.5707963267949)*(x9520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9521=IKsin(j4);
IkReal x9522=IKcos(j4);
IkReal x9523=(sj1*sj2);
IkReal x9524=(gconst1*r01);
IkReal x9525=(gconst2*sj3);
IkReal x9526=(cj3*gconst1);
IkReal x9527=(cj3*gconst2);
IkReal x9528=((1.0)*cj2);
IkReal x9529=(gconst1*r11);
IkReal x9530=(gconst1*r21);
IkReal x9531=(cj1*sj2);
IkReal x9532=(gconst1*sj3);
IkReal x9533=(cj1*x9528);
IkReal x9534=((1.0)*x9522);
IkReal x9535=((1.0)*x9521);
IkReal x9536=(sj3*x9522);
IkReal x9537=(gconst2*x9521);
evalcond[0]=(((r20*x9537))+(((-1.0)*r22*x9534))+(((-1.0)*x9530*x9535)));
evalcond[1]=((((-1.0)*x9524*x9535))+(((-1.0)*r02*x9534))+((r00*x9537)));
evalcond[2]=((-1.0)+((r10*x9537))+(((-1.0)*x9529*x9535))+(((-1.0)*r12*x9534)));
evalcond[3]=((((-1.0)*cj3*r12*x9535))+((r10*x9532))+((r11*x9522*x9526))+(((-1.0)*r10*x9527*x9534))+((r11*x9525)));
evalcond[4]=(((x9529*x9536))+(((-1.0)*r12*sj3*x9535))+(((-1.0)*r10*x9526))+(((-1.0)*r10*x9525*x9534))+(((-1.0)*r11*x9527)));
evalcond[5]=((((-1.0)*cj3*r02*x9535))+(((-1.0)*r00*x9527*x9534))+((cj3*x9522*x9524))+((r01*x9525))+((r00*x9532))+(((-1.0)*x9533))+x9523);
evalcond[6]=(((r20*x9532))+(((-1.0)*r20*x9527*x9534))+(((-1.0)*cj3*r22*x9535))+(((-1.0)*x9531))+((r21*x9525))+((r21*x9522*x9526))+(((-1.0)*sj1*x9528)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r00*x9526))+(((-1.0)*r01*x9527))+x9531+(((-1.0)*r02*sj3*x9535))+(((-1.0)*r00*x9525*x9534))+((x9524*x9536)));
evalcond[8]=((((-1.0)*r20*x9525*x9534))+(((-1.0)*r20*x9526))+(((-1.0)*x9533))+x9523+(((-1.0)*r21*x9527))+(((-1.0)*r22*sj3*x9535))+((x9530*x9536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9538=((1.0)*gconst1);
CheckValue<IkReal> x9539 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*r21*x9538)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9539.valid){
continue;
}
CheckValue<IkReal> x9540=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9538))+(((-1.0)*gconst2*r01)))),-1);
if(!x9540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9539.value)+(((1.5707963267949)*(x9540.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9541=IKsin(j4);
IkReal x9542=IKcos(j4);
IkReal x9543=(sj1*sj2);
IkReal x9544=(gconst1*r01);
IkReal x9545=(gconst2*sj3);
IkReal x9546=(cj3*gconst1);
IkReal x9547=(cj3*gconst2);
IkReal x9548=((1.0)*cj2);
IkReal x9549=(gconst1*r11);
IkReal x9550=(gconst1*r21);
IkReal x9551=(cj1*sj2);
IkReal x9552=(gconst1*sj3);
IkReal x9553=(cj1*x9548);
IkReal x9554=((1.0)*x9542);
IkReal x9555=((1.0)*x9541);
IkReal x9556=(sj3*x9542);
IkReal x9557=(gconst2*x9541);
evalcond[0]=((((-1.0)*r22*x9554))+((r20*x9557))+(((-1.0)*x9550*x9555)));
evalcond[1]=((((-1.0)*r02*x9554))+(((-1.0)*x9544*x9555))+((r00*x9557)));
evalcond[2]=((-1.0)+((r10*x9557))+(((-1.0)*x9549*x9555))+(((-1.0)*r12*x9554)));
evalcond[3]=(((r11*x9545))+((r11*x9542*x9546))+(((-1.0)*cj3*r12*x9555))+((r10*x9552))+(((-1.0)*r10*x9547*x9554)));
evalcond[4]=((((-1.0)*r12*sj3*x9555))+((x9549*x9556))+(((-1.0)*r11*x9547))+(((-1.0)*r10*x9545*x9554))+(((-1.0)*r10*x9546)));
evalcond[5]=(((cj3*x9542*x9544))+((r01*x9545))+x9543+(((-1.0)*r00*x9547*x9554))+((r00*x9552))+(((-1.0)*cj3*r02*x9555))+(((-1.0)*x9553)));
evalcond[6]=(((r21*x9542*x9546))+((r20*x9552))+(((-1.0)*r20*x9547*x9554))+((r21*x9545))+(((-1.0)*cj3*r22*x9555))+(((-1.0)*x9551))+(((-1.0)*sj1*x9548)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r02*sj3*x9555))+((x9544*x9556))+x9551+(((-1.0)*r00*x9546))+(((-1.0)*r00*x9545*x9554))+(((-1.0)*r01*x9547)));
evalcond[8]=((((-1.0)*r20*x9546))+(((-1.0)*r22*sj3*x9555))+x9543+(((-1.0)*r21*x9547))+(((-1.0)*r20*x9545*x9554))+((x9550*x9556))+(((-1.0)*x9553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9560 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9560.valid){
continue;
}
IkReal x9558=((-1.0)*(x9560.value));
IkReal x9559=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9558;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9558;
IkReal gconst1=((-1.0)*r21*x9559);
IkReal gconst2=(r20*x9559);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9563 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9563.valid){
continue;
}
IkReal x9561=((-1.0)*(x9563.value));
IkReal x9562=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9561;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9561;
IkReal gconst1=((-1.0)*r21*x9562);
IkReal gconst2=(r20*x9562);
CheckValue<IkReal> x9571=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9571.valid){
continue;
}
IkReal x9564=x9571.value;
IkReal x9565=(cj3*x9564);
IkReal x9566=(r11*x9565);
IkReal x9567=(r01*x9565);
IkReal x9568=(r00*x9565);
IkReal x9569=(r10*x9565);
IkReal x9570=(r20*r21*x9565);
j4eval[0]=IKsign((((r10*r20*r21*x9567))+((cj3*r02*r12))+((r10*x9568*(r20*r20)))+((r00*r20*r21*x9566))+((r01*x9566*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9574 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9574.valid){
continue;
}
IkReal x9572=((-1.0)*(x9574.value));
IkReal x9573=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9572;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9572;
IkReal gconst1=((-1.0)*r21*x9573);
IkReal gconst2=(r20*x9573);
CheckValue<IkReal> x9582=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9582.valid){
continue;
}
IkReal x9575=x9582.value;
IkReal x9576=(sj3*x9575);
IkReal x9577=(r11*x9576);
IkReal x9578=(r00*x9576);
IkReal x9579=(r01*x9576);
IkReal x9580=(r10*x9576);
IkReal x9581=(r20*r21*x9576);
j4eval[0]=IKsign((((r10*x9578*(r20*r20)))+((r02*r12*sj3))+((r10*r20*r21*x9579))+((r00*r20*r21*x9577))+((r01*x9577*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9585 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9585.valid){
continue;
}
IkReal x9583=((-1.0)*(x9585.value));
IkReal x9584=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9583;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9583;
IkReal gconst1=((-1.0)*r21*x9584);
IkReal gconst2=(r20*x9584);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9588 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9588.valid){
continue;
}
IkReal x9586=((-1.0)*(x9588.value));
IkReal x9587=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9586;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9586;
IkReal gconst1=((-1.0)*r21*x9587);
IkReal gconst2=(r20*x9587);
IkReal x9589=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9593=IKPowWithIntegerCheck(x9589,-1);
if(!x9593.valid){
continue;
}
IkReal x9590=x9593.value;
IkReal x9591=((1.0)*x9590);
IkReal x9592=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9590))+(((-1.0)*x9591*(r00*r00)*(r20*r20)))+(((-1.0)*x9591*(r01*r01)*(r21*r21))));
j4eval[0]=x9592;
j4eval[1]=IKsign(x9592);
j4eval[2]=r02;
j4eval[3]=x9589;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9596 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9596.valid){
continue;
}
IkReal x9594=((-1.0)*(x9596.value));
IkReal x9595=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9594;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9594;
IkReal gconst1=((-1.0)*r21*x9595);
IkReal gconst2=(r20*x9595);
IkReal x9597=r22*r22;
IkReal x9598=(cj1*cj2*r12);
CheckValue<IkReal> x9603=IKPowWithIntegerCheck(((-1.0)+x9597),-1);
if(!x9603.valid){
continue;
}
IkReal x9599=x9603.value;
IkReal x9600=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x9597)))) < -0.00001)
continue;
IkReal x9601=IKsqrt(((1.0)+(((-1.0)*x9597))));
IkReal x9602=(r22*x9599*x9601);
j4eval[0]=((IKabs((((x9598*x9602))+(((-1.0)*x9600*x9602)))))+(IKabs(((((-1.0)*x9600))+x9598))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9604=(sj1*sj2);
IkReal x9605=(gconst1*r11);
IkReal x9606=(cj1*cj2);
IkReal x9607=(gconst2*r10);
CheckValue<IkReal> x9608 = IKatan2WithCheck(IkReal((((r12*x9606))+(((-1.0)*r12*x9604)))),IkReal(((((-1.0)*x9605*x9606))+(((-1.0)*x9604*x9607))+((x9604*x9605))+((x9606*x9607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9608.valid){
continue;
}
CheckValue<IkReal> x9609=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9605*x9607))+(x9607*x9607)+(x9605*x9605))),-1);
if(!x9609.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9608.value)+(((1.5707963267949)*(x9609.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9610=IKsin(j4);
IkReal x9611=IKcos(j4);
IkReal x9612=(gconst1*r01);
IkReal x9613=(gconst1*r21);
IkReal x9614=((1.0)*sj1);
IkReal x9615=(gconst1*r11);
IkReal x9616=((1.0)*x9611);
IkReal x9617=((1.0)*x9610);
IkReal x9618=(gconst2*x9610);
evalcond[0]=(((r20*x9618))+(((-1.0)*r22*x9616))+(((-1.0)*x9613*x9617)));
evalcond[1]=((((-1.0)*x9615*x9617))+((r10*x9618))+(((-1.0)*r12*x9616)));
evalcond[2]=(((x9611*x9612))+(((-1.0)*r02*x9617))+(((-1.0)*gconst2*r00*x9616)));
evalcond[3]=((-1.0)+(((-1.0)*x9612*x9617))+((r00*x9618))+(((-1.0)*r02*x9616)));
evalcond[4]=(((x9611*x9615))+(((-1.0)*gconst2*r10*x9616))+(((-1.0)*r12*x9617))+(((-1.0)*sj2*x9614))+((cj1*cj2)));
evalcond[5]=(((x9611*x9613))+(((-1.0)*r22*x9617))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9616))+(((-1.0)*cj2*x9614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9619=(gconst1*r01);
IkReal x9620=(gconst2*r00);
CheckValue<IkReal> x9621 = IKatan2WithCheck(IkReal(((((-1.0)*x9620))+x9619)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9621.valid){
continue;
}
CheckValue<IkReal> x9622=IKPowWithIntegerCheck(IKsign(((((2.0)*x9619*x9620))+(((-1.0)*(x9620*x9620)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9619*x9619))))),-1);
if(!x9622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9621.value)+(((1.5707963267949)*(x9622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9623=IKsin(j4);
IkReal x9624=IKcos(j4);
IkReal x9625=(gconst1*r01);
IkReal x9626=(gconst1*r21);
IkReal x9627=((1.0)*sj1);
IkReal x9628=(gconst1*r11);
IkReal x9629=((1.0)*x9624);
IkReal x9630=((1.0)*x9623);
IkReal x9631=(gconst2*x9623);
evalcond[0]=((((-1.0)*x9626*x9630))+((r20*x9631))+(((-1.0)*r22*x9629)));
evalcond[1]=(((r10*x9631))+(((-1.0)*x9628*x9630))+(((-1.0)*r12*x9629)));
evalcond[2]=(((x9624*x9625))+(((-1.0)*gconst2*r00*x9629))+(((-1.0)*r02*x9630)));
evalcond[3]=((-1.0)+((r00*x9631))+(((-1.0)*r02*x9629))+(((-1.0)*x9625*x9630)));
evalcond[4]=(((x9624*x9628))+(((-1.0)*r12*x9630))+((cj1*cj2))+(((-1.0)*sj2*x9627))+(((-1.0)*gconst2*r10*x9629)));
evalcond[5]=(((x9624*x9626))+(((-1.0)*r22*x9630))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst2*r20*x9629))+(((-1.0)*cj2*x9627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9632 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9632.valid){
continue;
}
CheckValue<IkReal> x9633=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9632.value)+(((1.5707963267949)*(x9633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9634=IKsin(j4);
IkReal x9635=IKcos(j4);
IkReal x9636=(gconst1*r01);
IkReal x9637=(gconst1*r21);
IkReal x9638=((1.0)*sj1);
IkReal x9639=(gconst1*r11);
IkReal x9640=((1.0)*x9635);
IkReal x9641=((1.0)*x9634);
IkReal x9642=(gconst2*x9634);
evalcond[0]=((((-1.0)*x9637*x9641))+((r20*x9642))+(((-1.0)*r22*x9640)));
evalcond[1]=((((-1.0)*r12*x9640))+(((-1.0)*x9639*x9641))+((r10*x9642)));
evalcond[2]=(((x9635*x9636))+(((-1.0)*gconst2*r00*x9640))+(((-1.0)*r02*x9641)));
evalcond[3]=((-1.0)+((r00*x9642))+(((-1.0)*x9636*x9641))+(((-1.0)*r02*x9640)));
evalcond[4]=((((-1.0)*r12*x9641))+((x9635*x9639))+(((-1.0)*gconst2*r10*x9640))+((cj1*cj2))+(((-1.0)*sj2*x9638)));
evalcond[5]=((((-1.0)*gconst2*r20*x9640))+((x9635*x9637))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x9638))+(((-1.0)*r22*x9641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9645 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9645.valid){
continue;
}
IkReal x9643=((-1.0)*(x9645.value));
IkReal x9644=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9643;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9643;
IkReal gconst1=((-1.0)*r21*x9644);
IkReal gconst2=(r20*x9644);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9648 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9648.valid){
continue;
}
IkReal x9646=((-1.0)*(x9648.value));
IkReal x9647=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9646;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9646;
IkReal gconst1=((-1.0)*r21*x9647);
IkReal gconst2=(r20*x9647);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9651 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9651.valid){
continue;
}
IkReal x9649=((-1.0)*(x9651.value));
IkReal x9650=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9649;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9649;
IkReal gconst1=((-1.0)*r21*x9650);
IkReal gconst2=(r20*x9650);
IkReal x9652=r22*r22;
IkReal x9653=(cj1*r02*sj2);
IkReal x9654=(cj2*r02*sj1);
CheckValue<IkReal> x9658=IKPowWithIntegerCheck(((-1.0)+x9652),-1);
if(!x9658.valid){
continue;
}
IkReal x9655=x9658.value;
if((((1.0)+(((-1.0)*x9652)))) < -0.00001)
continue;
IkReal x9656=IKsqrt(((1.0)+(((-1.0)*x9652))));
IkReal x9657=((1.0)*r22*x9655*x9656);
j4eval[0]=((IKabs(((((-1.0)*x9654*x9657))+(((-1.0)*x9653*x9657)))))+(IKabs((x9653+x9654))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9659=(cj2*sj1);
IkReal x9660=(cj1*sj2);
IkReal x9661=((1.0)*gconst2);
IkReal x9662=(gconst1*r01);
CheckValue<IkReal> x9663=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9661)))),-1);
if(!x9663.valid){
continue;
}
CheckValue<IkReal> x9664 = IKatan2WithCheck(IkReal((((x9660*x9662))+(((-1.0)*r00*x9659*x9661))+(((-1.0)*r00*x9660*x9661))+((x9659*x9662)))),IkReal((((r02*x9659))+((r02*x9660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9663.value)))+(x9664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9665=IKcos(j4);
IkReal x9666=IKsin(j4);
IkReal x9667=(gconst1*r01);
IkReal x9668=((1.0)*sj1);
IkReal x9669=(gconst1*r21);
IkReal x9670=(gconst1*r11);
IkReal x9671=((1.0)*x9665);
IkReal x9672=(gconst2*x9665);
IkReal x9673=((1.0)*x9666);
IkReal x9674=(gconst2*x9666);
evalcond[0]=(((r00*x9672))+((r02*x9666))+(((-1.0)*x9667*x9671)));
evalcond[1]=(((r20*x9674))+(((-1.0)*x9669*x9673))+(((-1.0)*r22*x9671)));
evalcond[2]=(((r10*x9674))+(((-1.0)*x9670*x9673))+(((-1.0)*r12*x9671)));
evalcond[3]=((-1.0)+((r00*x9674))+(((-1.0)*r02*x9671))+(((-1.0)*x9667*x9673)));
evalcond[4]=(((r12*x9666))+((r10*x9672))+(((-1.0)*x9670*x9671))+((cj1*cj2))+(((-1.0)*sj2*x9668)));
evalcond[5]=((((-1.0)*cj2*x9668))+((r20*x9672))+(((-1.0)*cj1*sj2))+((r22*x9666))+(((-1.0)*x9669*x9671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9675=(gconst1*r01);
IkReal x9676=(gconst2*r00);
CheckValue<IkReal> x9677 = IKatan2WithCheck(IkReal((x9676+(((-1.0)*x9675)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9677.valid){
continue;
}
CheckValue<IkReal> x9678=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9675*x9676))+(x9676*x9676)+(x9675*x9675)+(r02*r02))),-1);
if(!x9678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9677.value)+(((1.5707963267949)*(x9678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9679=IKcos(j4);
IkReal x9680=IKsin(j4);
IkReal x9681=(gconst1*r01);
IkReal x9682=((1.0)*sj1);
IkReal x9683=(gconst1*r21);
IkReal x9684=(gconst1*r11);
IkReal x9685=((1.0)*x9679);
IkReal x9686=(gconst2*x9679);
IkReal x9687=((1.0)*x9680);
IkReal x9688=(gconst2*x9680);
evalcond[0]=(((r02*x9680))+((r00*x9686))+(((-1.0)*x9681*x9685)));
evalcond[1]=((((-1.0)*r22*x9685))+(((-1.0)*x9683*x9687))+((r20*x9688)));
evalcond[2]=((((-1.0)*r12*x9685))+(((-1.0)*x9684*x9687))+((r10*x9688)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9685))+((r00*x9688))+(((-1.0)*x9681*x9687)));
evalcond[4]=((((-1.0)*sj2*x9682))+((r12*x9680))+((cj1*cj2))+(((-1.0)*x9684*x9685))+((r10*x9686)));
evalcond[5]=(((r22*x9680))+(((-1.0)*cj1*sj2))+(((-1.0)*x9683*x9685))+((r20*x9686))+(((-1.0)*cj2*x9682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9689 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9689.valid){
continue;
}
CheckValue<IkReal> x9690=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9689.value)+(((1.5707963267949)*(x9690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9691=IKcos(j4);
IkReal x9692=IKsin(j4);
IkReal x9693=(gconst1*r01);
IkReal x9694=((1.0)*sj1);
IkReal x9695=(gconst1*r21);
IkReal x9696=(gconst1*r11);
IkReal x9697=((1.0)*x9691);
IkReal x9698=(gconst2*x9691);
IkReal x9699=((1.0)*x9692);
IkReal x9700=(gconst2*x9692);
evalcond[0]=(((r02*x9692))+(((-1.0)*x9693*x9697))+((r00*x9698)));
evalcond[1]=(((r20*x9700))+(((-1.0)*r22*x9697))+(((-1.0)*x9695*x9699)));
evalcond[2]=(((r10*x9700))+(((-1.0)*r12*x9697))+(((-1.0)*x9696*x9699)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9697))+(((-1.0)*x9693*x9699))+((r00*x9700)));
evalcond[4]=((((-1.0)*sj2*x9694))+((r12*x9692))+((cj1*cj2))+(((-1.0)*x9696*x9697))+((r10*x9698)));
evalcond[5]=(((r22*x9692))+(((-1.0)*cj1*sj2))+(((-1.0)*x9695*x9697))+((r20*x9698))+(((-1.0)*cj2*x9694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9701=((-1.0)*py);
CheckValue<IkReal> x9703 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9703.valid){
continue;
}
IkReal x9702=((-1.0)*(x9703.value));
sj5=gconst1;
cj5=gconst2;
j5=x9702;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9701);
rxp0_2=(py*r00);
rxp1_0=(r21*x9701);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9702;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9704=((1.0)*sj3);
IkReal x9705=(r01*r21);
IkReal x9706=(r00*r20);
j4eval[0]=(x9705+x9706);
j4eval[1]=((((-1.0)*x9704*x9706))+(((-1.0)*x9704*x9705)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9707=((-1.0)*py);
CheckValue<IkReal> x9709 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9709.valid){
continue;
}
IkReal x9708=((-1.0)*(x9709.value));
sj5=gconst1;
cj5=gconst2;
j5=x9708;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9707);
rxp0_2=(py*r00);
rxp1_0=(r21*x9707);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9708;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9710=(r00*r20);
IkReal x9711=((1.0)*cj3);
IkReal x9712=(r01*r21);
j4eval[0]=(x9712+x9710);
j4eval[1]=((((-1.0)*x9710*x9711))+(((-1.0)*x9711*x9712)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x9713=((-1.0)*py);
CheckValue<IkReal> x9715 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9715.valid){
continue;
}
IkReal x9714=((-1.0)*(x9715.value));
sj5=gconst1;
cj5=gconst2;
j5=x9714;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x9713);
rxp0_2=(py*r00);
rxp1_0=(r21*x9713);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x9714;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x9716=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x9716))+(((-1.0)*r01*r21*x9716)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9717=((1.0)*gconst2);
CheckValue<IkReal> x9718=IKPowWithIntegerCheck(cj3,-1);
if(!x9718.valid){
continue;
}
CheckValue<IkReal> x9719=IKPowWithIntegerCheck(r12,-1);
if(!x9719.valid){
continue;
}
CheckValue<IkReal> x9720=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9717))+((cj3*gconst1*r01))),-1);
if(!x9720.valid){
continue;
}
if( IKabs(((x9718.value)*(x9719.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9720.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9717)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9718.value)*(x9719.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x9720.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9717))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x9718.value)*(x9719.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x9720.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9717))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9721=IKsin(j4);
IkReal x9722=IKcos(j4);
IkReal x9723=((1.0)*sj3);
IkReal x9724=(gconst1*sj3);
IkReal x9725=(sj1*sj2);
IkReal x9726=((1.0)*cj3);
IkReal x9727=((1.0)*cj2);
IkReal x9728=(gconst2*r01);
IkReal x9729=(gconst2*r21);
IkReal x9730=((1.0)*cj1*sj2);
IkReal x9731=(sj1*x9727);
IkReal x9732=(r12*x9721);
IkReal x9733=(gconst2*x9722);
IkReal x9734=(gconst2*x9721);
IkReal x9735=((1.0)*gconst1*x9721);
IkReal x9736=(cj3*gconst1*x9722);
IkReal x9737=(x9731+x9730);
evalcond[0]=((-1.0)*r12*x9722);
evalcond[1]=((((-1.0)*r21*x9735))+((r20*x9734)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x9735))+((r00*x9734)));
evalcond[3]=((((-1.0)*x9726*x9732))+((cj1*cj2))+(((-1.0)*x9725)));
evalcond[4]=((((-1.0)*x9737))+(((-1.0)*x9723*x9732)));
evalcond[5]=(((sj3*x9728))+(((-1.0)*r00*x9726*x9733))+((r00*x9724))+((r01*x9736)));
evalcond[6]=((((-1.0)*x9726*x9728))+(((-1.0)*r00*x9723*x9733))+((r01*x9722*x9724))+(((-1.0)*gconst1*r00*x9726)));
evalcond[7]=((((-1.0)*r20*x9726*x9733))+((sj3*x9729))+((r20*x9724))+(((-1.0)*x9737))+((r21*x9736)));
evalcond[8]=((((-1.0)*r20*x9723*x9733))+(((-1.0)*cj1*x9727))+(((-1.0)*x9726*x9729))+((r21*x9722*x9724))+x9725+(((-1.0)*gconst1*r20*x9726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9738=((1.0)*gconst2);
IkReal x9739=(gconst1*r01);
CheckValue<IkReal> x9740=IKPowWithIntegerCheck(((((-1.0)*x9739))+((gconst2*r00))),-1);
if(!x9740.valid){
continue;
}
CheckValue<IkReal> x9741=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x9738))+((cj3*x9739))),-1);
if(!x9741.valid){
continue;
}
if( IKabs(x9740.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9741.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9738)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9740.value)+IKsqr(((x9741.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9738))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9740.value, ((x9741.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x9738))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9742=IKsin(j4);
IkReal x9743=IKcos(j4);
IkReal x9744=((1.0)*sj3);
IkReal x9745=(gconst1*sj3);
IkReal x9746=(sj1*sj2);
IkReal x9747=((1.0)*cj3);
IkReal x9748=((1.0)*cj2);
IkReal x9749=(gconst2*r01);
IkReal x9750=(gconst2*r21);
IkReal x9751=((1.0)*cj1*sj2);
IkReal x9752=(sj1*x9748);
IkReal x9753=(r12*x9742);
IkReal x9754=(gconst2*x9743);
IkReal x9755=(gconst2*x9742);
IkReal x9756=((1.0)*gconst1*x9742);
IkReal x9757=(cj3*gconst1*x9743);
IkReal x9758=(x9752+x9751);
evalcond[0]=((-1.0)*r12*x9743);
evalcond[1]=((((-1.0)*r21*x9756))+((r20*x9755)));
evalcond[2]=((-1.0)+((r00*x9755))+(((-1.0)*r01*x9756)));
evalcond[3]=((((-1.0)*x9747*x9753))+(((-1.0)*x9746))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9758))+(((-1.0)*x9744*x9753)));
evalcond[5]=(((r01*x9757))+((sj3*x9749))+((r00*x9745))+(((-1.0)*r00*x9747*x9754)));
evalcond[6]=((((-1.0)*gconst1*r00*x9747))+((r01*x9743*x9745))+(((-1.0)*x9747*x9749))+(((-1.0)*r00*x9744*x9754)));
evalcond[7]=((((-1.0)*r20*x9747*x9754))+((r21*x9757))+((r20*x9745))+((sj3*x9750))+(((-1.0)*x9758)));
evalcond[8]=(((r21*x9743*x9745))+(((-1.0)*gconst1*r20*x9747))+(((-1.0)*x9747*x9750))+x9746+(((-1.0)*cj1*x9748))+(((-1.0)*r20*x9744*x9754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9759=(gconst2*r00);
IkReal x9760=(gconst1*r01);
CheckValue<IkReal> x9761=IKPowWithIntegerCheck(((((-1.0)*x9760))+x9759),-1);
if(!x9761.valid){
continue;
}
CheckValue<IkReal> x9762=IKPowWithIntegerCheck((((sj3*x9760))+(((-1.0)*sj3*x9759))),-1);
if(!x9762.valid){
continue;
}
if( IKabs(x9761.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9762.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x9761.value)+IKsqr(((x9762.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x9761.value, ((x9762.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9763=IKsin(j4);
IkReal x9764=IKcos(j4);
IkReal x9765=((1.0)*sj3);
IkReal x9766=(gconst1*sj3);
IkReal x9767=(sj1*sj2);
IkReal x9768=((1.0)*cj3);
IkReal x9769=((1.0)*cj2);
IkReal x9770=(gconst2*r01);
IkReal x9771=(gconst2*r21);
IkReal x9772=((1.0)*cj1*sj2);
IkReal x9773=(sj1*x9769);
IkReal x9774=(r12*x9763);
IkReal x9775=(gconst2*x9764);
IkReal x9776=(gconst2*x9763);
IkReal x9777=((1.0)*gconst1*x9763);
IkReal x9778=(cj3*gconst1*x9764);
IkReal x9779=(x9773+x9772);
evalcond[0]=((-1.0)*r12*x9764);
evalcond[1]=(((r20*x9776))+(((-1.0)*r21*x9777)));
evalcond[2]=((-1.0)+((r00*x9776))+(((-1.0)*r01*x9777)));
evalcond[3]=((((-1.0)*x9767))+(((-1.0)*x9768*x9774))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x9765*x9774))+(((-1.0)*x9779)));
evalcond[5]=(((r00*x9766))+((r01*x9778))+(((-1.0)*r00*x9768*x9775))+((sj3*x9770)));
evalcond[6]=((((-1.0)*gconst1*r00*x9768))+(((-1.0)*x9768*x9770))+((r01*x9764*x9766))+(((-1.0)*r00*x9765*x9775)));
evalcond[7]=((((-1.0)*r20*x9768*x9775))+((r21*x9778))+((sj3*x9771))+((r20*x9766))+(((-1.0)*x9779)));
evalcond[8]=((((-1.0)*r20*x9765*x9775))+(((-1.0)*x9768*x9771))+x9767+((r21*x9764*x9766))+(((-1.0)*cj1*x9769))+(((-1.0)*gconst1*r20*x9768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9780=gconst2*gconst2;
IkReal x9781=gconst1*gconst1;
IkReal x9782=(r00*r11);
IkReal x9783=(gconst1*gconst2);
IkReal x9784=((1.0)*sj3);
IkReal x9785=(r01*r11);
IkReal x9786=((1.0)*cj3*r10);
IkReal x9787=((1.0)*cj3*r12);
CheckValue<IkReal> x9788=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x9782*x9783*x9784))+((sj3*x9781*x9785))+((r00*r10*sj3*x9780))+(((-1.0)*r01*r10*x9783*x9784)))),-1);
if(!x9788.valid){
continue;
}
CheckValue<IkReal> x9789 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*r00*x9787))+(((-1.0)*gconst2*r01*x9787)))),IkReal(((((-1.0)*r00*x9783*x9786))+(((-1.0)*r01*x9780*x9786))+((cj3*x9781*x9782))+((cj3*x9783*x9785)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9788.value)))+(x9789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9790=IKsin(j4);
IkReal x9791=IKcos(j4);
IkReal x9792=(r00*sj3);
IkReal x9793=(gconst2*r20);
IkReal x9794=((1.0)*cj3);
IkReal x9795=(gconst2*r01);
IkReal x9796=(gconst1*r10);
IkReal x9797=(gconst1*r01);
IkReal x9798=((1.0)*sj1);
IkReal x9799=((1.0)*cj1);
IkReal x9800=(cj3*gconst2);
IkReal x9801=(gconst1*r11);
IkReal x9802=(gconst1*r21);
IkReal x9803=(gconst1*r20);
IkReal x9804=(gconst2*r11);
IkReal x9805=(gconst2*r21);
IkReal x9806=(sj2*x9799);
IkReal x9807=(cj2*x9798);
IkReal x9808=((1.0)*x9791);
IkReal x9809=((1.0)*x9790);
IkReal x9810=(gconst2*x9790);
IkReal x9811=(sj3*x9791);
IkReal x9812=(cj3*x9791);
IkReal x9813=(x9807+x9806);
evalcond[0]=(((x9790*x9793))+(((-1.0)*r22*x9808))+(((-1.0)*x9802*x9809)));
evalcond[1]=((((-1.0)*x9801*x9809))+(((-1.0)*r12*x9808))+((r10*x9810)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9808))+(((-1.0)*x9797*x9809))+((r00*x9810)));
evalcond[3]=(((sj3*x9795))+((gconst1*x9792))+(((-1.0)*gconst2*r00*x9791*x9794))+((x9797*x9812))+(((-1.0)*r02*x9790*x9794)));
evalcond[4]=((((-1.0)*gconst2*x9792*x9808))+((x9797*x9811))+(((-1.0)*gconst1*r00*x9794))+(((-1.0)*x9794*x9795))+(((-1.0)*r02*sj3*x9809)));
evalcond[5]=(((sj3*x9796))+((sj3*x9804))+(((-1.0)*gconst2*r10*x9791*x9794))+((cj1*cj2))+((x9801*x9812))+(((-1.0)*r12*x9790*x9794))+(((-1.0)*sj2*x9798)));
evalcond[6]=((((-1.0)*x9813))+((sj3*x9803))+((sj3*x9805))+(((-1.0)*r22*x9790*x9794))+((x9802*x9812))+(((-1.0)*x9791*x9793*x9794)));
evalcond[7]=((((-1.0)*x9794*x9805))+(((-1.0)*x9794*x9803))+(((-1.0)*r22*sj3*x9809))+((sj1*sj2))+(((-1.0)*sj3*x9793*x9808))+((x9802*x9811))+(((-1.0)*cj2*x9799)));
evalcond[8]=((((-1.0)*x9794*x9804))+(((-1.0)*x9813))+(((-1.0)*gconst2*r10*sj3*x9808))+(((-1.0)*r12*sj3*x9809))+((x9801*x9811))+(((-1.0)*x9794*x9796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9814=gconst1*gconst1;
IkReal x9815=gconst2*gconst2;
IkReal x9816=(r00*sj3);
IkReal x9817=((1.0)*r11);
IkReal x9818=(r01*sj3);
IkReal x9819=(gconst1*gconst2);
IkReal x9820=(cj3*r01);
IkReal x9821=(cj3*r00);
IkReal x9822=(r10*x9815);
CheckValue<IkReal> x9823 = IKatan2WithCheck(IkReal((((gconst2*r12*x9818))+((gconst1*r12*x9816)))),IkReal(((((-1.0)*x9814*x9816*x9817))+((x9818*x9822))+(((-1.0)*x9817*x9818*x9819))+((r10*x9816*x9819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9823.valid){
continue;
}
CheckValue<IkReal> x9824=IKPowWithIntegerCheck(IKsign((((x9821*x9822))+((cj3*r02*r12))+(((-1.0)*r10*x9819*x9820))+(((-1.0)*x9817*x9819*x9821))+((r11*x9814*x9820)))),-1);
if(!x9824.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9823.value)+(((1.5707963267949)*(x9824.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9825=IKsin(j4);
IkReal x9826=IKcos(j4);
IkReal x9827=(r00*sj3);
IkReal x9828=(gconst2*r20);
IkReal x9829=((1.0)*cj3);
IkReal x9830=(gconst2*r01);
IkReal x9831=(gconst1*r10);
IkReal x9832=(gconst1*r01);
IkReal x9833=((1.0)*sj1);
IkReal x9834=((1.0)*cj1);
IkReal x9835=(cj3*gconst2);
IkReal x9836=(gconst1*r11);
IkReal x9837=(gconst1*r21);
IkReal x9838=(gconst1*r20);
IkReal x9839=(gconst2*r11);
IkReal x9840=(gconst2*r21);
IkReal x9841=(sj2*x9834);
IkReal x9842=(cj2*x9833);
IkReal x9843=((1.0)*x9826);
IkReal x9844=((1.0)*x9825);
IkReal x9845=(gconst2*x9825);
IkReal x9846=(sj3*x9826);
IkReal x9847=(cj3*x9826);
IkReal x9848=(x9842+x9841);
evalcond[0]=(((x9825*x9828))+(((-1.0)*r22*x9843))+(((-1.0)*x9837*x9844)));
evalcond[1]=((((-1.0)*r12*x9843))+((r10*x9845))+(((-1.0)*x9836*x9844)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x9843))+((r00*x9845))+(((-1.0)*x9832*x9844)));
evalcond[3]=(((sj3*x9830))+((gconst1*x9827))+(((-1.0)*gconst2*r00*x9826*x9829))+((x9832*x9847))+(((-1.0)*r02*x9825*x9829)));
evalcond[4]=((((-1.0)*r02*sj3*x9844))+(((-1.0)*gconst2*x9827*x9843))+(((-1.0)*x9829*x9830))+(((-1.0)*gconst1*r00*x9829))+((x9832*x9846)));
evalcond[5]=((((-1.0)*r12*x9825*x9829))+((sj3*x9839))+((sj3*x9831))+((x9836*x9847))+(((-1.0)*gconst2*r10*x9826*x9829))+(((-1.0)*sj2*x9833))+((cj1*cj2)));
evalcond[6]=(((sj3*x9838))+((x9837*x9847))+(((-1.0)*x9826*x9828*x9829))+(((-1.0)*x9848))+(((-1.0)*r22*x9825*x9829))+((sj3*x9840)));
evalcond[7]=((((-1.0)*x9829*x9840))+(((-1.0)*x9829*x9838))+((x9837*x9846))+((sj1*sj2))+(((-1.0)*r22*sj3*x9844))+(((-1.0)*cj2*x9834))+(((-1.0)*sj3*x9828*x9843)));
evalcond[8]=((((-1.0)*r12*sj3*x9844))+(((-1.0)*x9829*x9839))+(((-1.0)*x9829*x9831))+((x9836*x9846))+(((-1.0)*x9848))+(((-1.0)*gconst2*r10*sj3*x9843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9849 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst2*r20))+(((-1.0)*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9849.valid){
continue;
}
CheckValue<IkReal> x9850=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9849.value)+(((1.5707963267949)*(x9850.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9851=IKsin(j4);
IkReal x9852=IKcos(j4);
IkReal x9853=(r00*sj3);
IkReal x9854=(gconst2*r20);
IkReal x9855=((1.0)*cj3);
IkReal x9856=(gconst2*r01);
IkReal x9857=(gconst1*r10);
IkReal x9858=(gconst1*r01);
IkReal x9859=((1.0)*sj1);
IkReal x9860=((1.0)*cj1);
IkReal x9861=(cj3*gconst2);
IkReal x9862=(gconst1*r11);
IkReal x9863=(gconst1*r21);
IkReal x9864=(gconst1*r20);
IkReal x9865=(gconst2*r11);
IkReal x9866=(gconst2*r21);
IkReal x9867=(sj2*x9860);
IkReal x9868=(cj2*x9859);
IkReal x9869=((1.0)*x9852);
IkReal x9870=((1.0)*x9851);
IkReal x9871=(gconst2*x9851);
IkReal x9872=(sj3*x9852);
IkReal x9873=(cj3*x9852);
IkReal x9874=(x9868+x9867);
evalcond[0]=((((-1.0)*x9863*x9870))+(((-1.0)*r22*x9869))+((x9851*x9854)));
evalcond[1]=(((r10*x9871))+(((-1.0)*r12*x9869))+(((-1.0)*x9862*x9870)));
evalcond[2]=((-1.0)+(((-1.0)*x9858*x9870))+((r00*x9871))+(((-1.0)*r02*x9869)));
evalcond[3]=(((x9858*x9873))+((gconst1*x9853))+(((-1.0)*gconst2*r00*x9852*x9855))+(((-1.0)*r02*x9851*x9855))+((sj3*x9856)));
evalcond[4]=((((-1.0)*x9855*x9856))+((x9858*x9872))+(((-1.0)*r02*sj3*x9870))+(((-1.0)*gconst2*x9853*x9869))+(((-1.0)*gconst1*r00*x9855)));
evalcond[5]=(((sj3*x9865))+((x9862*x9873))+(((-1.0)*sj2*x9859))+(((-1.0)*gconst2*r10*x9852*x9855))+((cj1*cj2))+((sj3*x9857))+(((-1.0)*r12*x9851*x9855)));
evalcond[6]=(((sj3*x9866))+((sj3*x9864))+(((-1.0)*r22*x9851*x9855))+(((-1.0)*x9874))+((x9863*x9873))+(((-1.0)*x9852*x9854*x9855)));
evalcond[7]=((((-1.0)*cj2*x9860))+(((-1.0)*sj3*x9854*x9869))+((sj1*sj2))+(((-1.0)*x9855*x9864))+(((-1.0)*x9855*x9866))+((x9863*x9872))+(((-1.0)*r22*sj3*x9870)));
evalcond[8]=((((-1.0)*x9855*x9857))+(((-1.0)*r12*sj3*x9870))+((x9862*x9872))+(((-1.0)*x9874))+(((-1.0)*x9855*x9865))+(((-1.0)*gconst2*r10*sj3*x9869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9877 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9877.valid){
continue;
}
IkReal x9875=((-1.0)*(x9877.value));
IkReal x9876=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9875;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9875;
IkReal gconst1=((-1.0)*r21*x9876);
IkReal gconst2=(r20*x9876);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9880 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9880.valid){
continue;
}
IkReal x9878=((-1.0)*(x9880.value));
IkReal x9879=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9878;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9878;
IkReal gconst1=((-1.0)*r21*x9879);
IkReal gconst2=(r20*x9879);
CheckValue<IkReal> x9888=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9888.valid){
continue;
}
IkReal x9881=x9888.value;
IkReal x9882=(cj3*x9881);
IkReal x9883=(r11*x9882);
IkReal x9884=(r01*x9882);
IkReal x9885=(r00*x9882);
IkReal x9886=(r10*x9882);
IkReal x9887=(r20*r21*x9882);
j4eval[0]=IKsign((((cj3*r02*r12))+((r10*r20*r21*x9884))+((r00*r20*r21*x9883))+((r10*x9885*(r20*r20)))+((r01*x9883*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9891 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9891.valid){
continue;
}
IkReal x9889=((-1.0)*(x9891.value));
IkReal x9890=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9889;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9889;
IkReal gconst1=((-1.0)*r21*x9890);
IkReal gconst2=(r20*x9890);
CheckValue<IkReal> x9899=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9899.valid){
continue;
}
IkReal x9892=x9899.value;
IkReal x9893=(sj3*x9892);
IkReal x9894=(r11*x9893);
IkReal x9895=(r00*x9893);
IkReal x9896=(r01*x9893);
IkReal x9897=(r10*x9893);
IkReal x9898=(r20*r21*x9893);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9894*(r21*r21)))+((r10*r20*r21*x9896))+((r10*x9895*(r20*r20)))+((r00*r20*r21*x9894))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9902 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9902.valid){
continue;
}
IkReal x9900=((-1.0)*(x9902.value));
IkReal x9901=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9900;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9900;
IkReal gconst1=((-1.0)*r21*x9901);
IkReal gconst2=(r20*x9901);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x9905 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9905.valid){
continue;
}
IkReal x9903=((-1.0)*(x9905.value));
IkReal x9904=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9903;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9903;
IkReal gconst1=((-1.0)*r21*x9904);
IkReal gconst2=(r20*x9904);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9908 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9908.valid){
continue;
}
IkReal x9906=((-1.0)*(x9908.value));
IkReal x9907=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9906;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x9906;
IkReal gconst1=((-1.0)*r21*x9907);
IkReal gconst2=(r20*x9907);
IkReal x9909=r22*r22;
IkReal x9910=(r12*sj1*sj2);
CheckValue<IkReal> x9915=IKPowWithIntegerCheck(((-1.0)+x9909),-1);
if(!x9915.valid){
continue;
}
IkReal x9911=x9915.value;
IkReal x9912=((1.0)*cj1*cj2*r12);
if((((1.0)+(((-1.0)*x9909)))) < -0.00001)
continue;
IkReal x9913=IKsqrt(((1.0)+(((-1.0)*x9909))));
IkReal x9914=(r22*x9911*x9913);
j4eval[0]=((IKabs((((x9910*x9914))+(((-1.0)*x9912*x9914)))))+(IKabs(((((-1.0)*x9912))+x9910))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9916=(gconst2*r10);
IkReal x9917=(sj1*sj2);
IkReal x9918=(gconst1*r11);
IkReal x9919=((1.0)*cj1*cj2);
CheckValue<IkReal> x9920=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9916*x9916)+(x9918*x9918)+(((-2.0)*x9916*x9918)))),-1);
if(!x9920.valid){
continue;
}
CheckValue<IkReal> x9921 = IKatan2WithCheck(IkReal((((r12*x9917))+(((-1.0)*r12*x9919)))),IkReal((((x9916*x9917))+((cj1*cj2*x9918))+(((-1.0)*x9917*x9918))+(((-1.0)*x9916*x9919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9920.value)))+(x9921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9922=IKsin(j4);
IkReal x9923=IKcos(j4);
IkReal x9924=(gconst1*r01);
IkReal x9925=(gconst1*r21);
IkReal x9926=((1.0)*cj2);
IkReal x9927=(gconst1*r11);
IkReal x9928=((1.0)*x9923);
IkReal x9929=((1.0)*x9922);
IkReal x9930=(gconst2*x9922);
evalcond[0]=((((-1.0)*x9925*x9929))+(((-1.0)*r22*x9928))+((r20*x9930)));
evalcond[1]=((((-1.0)*x9927*x9929))+((r10*x9930))+(((-1.0)*r12*x9928)));
evalcond[2]=((((-1.0)*r02*x9929))+((x9923*x9924))+(((-1.0)*gconst2*r00*x9928)));
evalcond[3]=((1.0)+((r00*x9930))+(((-1.0)*r02*x9928))+(((-1.0)*x9924*x9929)));
evalcond[4]=(((x9923*x9927))+(((-1.0)*gconst2*r10*x9928))+((sj1*sj2))+(((-1.0)*r12*x9929))+(((-1.0)*cj1*x9926)));
evalcond[5]=((((-1.0)*gconst2*r20*x9928))+((x9923*x9925))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9929))+(((-1.0)*sj1*x9926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9931=(gconst1*r01);
IkReal x9932=(gconst2*r00);
CheckValue<IkReal> x9933=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9931*x9932))+(x9931*x9931)+(x9932*x9932)+(r02*r02))),-1);
if(!x9933.valid){
continue;
}
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal(((((-1.0)*x9932))+x9931)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9933.value)))+(x9934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9935=IKsin(j4);
IkReal x9936=IKcos(j4);
IkReal x9937=(gconst1*r01);
IkReal x9938=(gconst1*r21);
IkReal x9939=((1.0)*cj2);
IkReal x9940=(gconst1*r11);
IkReal x9941=((1.0)*x9936);
IkReal x9942=((1.0)*x9935);
IkReal x9943=(gconst2*x9935);
evalcond[0]=((((-1.0)*x9938*x9942))+((r20*x9943))+(((-1.0)*r22*x9941)));
evalcond[1]=((((-1.0)*x9940*x9942))+(((-1.0)*r12*x9941))+((r10*x9943)));
evalcond[2]=((((-1.0)*gconst2*r00*x9941))+((x9936*x9937))+(((-1.0)*r02*x9942)));
evalcond[3]=((1.0)+(((-1.0)*x9937*x9942))+((r00*x9943))+(((-1.0)*r02*x9941)));
evalcond[4]=(((x9936*x9940))+(((-1.0)*cj1*x9939))+(((-1.0)*gconst2*r10*x9941))+((sj1*sj2))+(((-1.0)*r12*x9942)));
evalcond[5]=((((-1.0)*sj1*x9939))+(((-1.0)*gconst2*r20*x9941))+((x9936*x9938))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x9942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9944=((1.0)*gconst1);
CheckValue<IkReal> x9945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9944))+(((-1.0)*gconst2*r11)))),-1);
if(!x9945.valid){
continue;
}
CheckValue<IkReal> x9946 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x9944))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9945.value)))+(x9946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9947=IKsin(j4);
IkReal x9948=IKcos(j4);
IkReal x9949=(gconst1*r01);
IkReal x9950=(gconst1*r21);
IkReal x9951=((1.0)*cj2);
IkReal x9952=(gconst1*r11);
IkReal x9953=((1.0)*x9948);
IkReal x9954=((1.0)*x9947);
IkReal x9955=(gconst2*x9947);
evalcond[0]=(((r20*x9955))+(((-1.0)*x9950*x9954))+(((-1.0)*r22*x9953)));
evalcond[1]=((((-1.0)*r12*x9953))+(((-1.0)*x9952*x9954))+((r10*x9955)));
evalcond[2]=((((-1.0)*r02*x9954))+((x9948*x9949))+(((-1.0)*gconst2*r00*x9953)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9953))+((r00*x9955))+(((-1.0)*x9949*x9954)));
evalcond[4]=(((sj1*sj2))+((x9948*x9952))+(((-1.0)*gconst2*r10*x9953))+(((-1.0)*r12*x9954))+(((-1.0)*cj1*x9951)));
evalcond[5]=((((-1.0)*gconst2*r20*x9953))+(((-1.0)*cj1*sj2))+((x9948*x9950))+(((-1.0)*r22*x9954))+(((-1.0)*sj1*x9951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x9958 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9958.valid){
continue;
}
IkReal x9956=((-1.0)*(x9958.value));
IkReal x9957=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9956;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9956;
IkReal gconst1=((-1.0)*r21*x9957);
IkReal gconst2=(r20*x9957);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x9961 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9961.valid){
continue;
}
IkReal x9959=((-1.0)*(x9961.value));
IkReal x9960=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9959;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9959;
IkReal gconst1=((-1.0)*r21*x9960);
IkReal gconst2=(r20*x9960);
IkReal x9962=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9966=IKPowWithIntegerCheck(x9962,-1);
if(!x9966.valid){
continue;
}
IkReal x9963=x9966.value;
IkReal x9964=((1.0)*x9963);
IkReal x9965=((((-1.0)*(r02*r02)))+(((-1.0)*x9964*(r00*r00)*(r20*r20)))+(((-1.0)*x9964*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x9963)));
j4eval[0]=x9965;
j4eval[1]=IKsign(x9965);
j4eval[2]=r02;
j4eval[3]=x9962;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x9969 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x9969.valid){
continue;
}
IkReal x9967=((-1.0)*(x9969.value));
IkReal x9968=x8276;
sj5=gconst1;
cj5=gconst2;
j5=x9967;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9967;
IkReal gconst1=((-1.0)*r21*x9968);
IkReal gconst2=(r20*x9968);
IkReal x9970=r22*r22;
IkReal x9971=(cj1*r02*sj2);
IkReal x9972=(cj2*r02*sj1);
CheckValue<IkReal> x9976=IKPowWithIntegerCheck(((-1.0)+x9970),-1);
if(!x9976.valid){
continue;
}
IkReal x9973=x9976.value;
if((((1.0)+(((-1.0)*x9970)))) < -0.00001)
continue;
IkReal x9974=IKsqrt(((1.0)+(((-1.0)*x9970))));
IkReal x9975=((1.0)*r22*x9973*x9974);
j4eval[0]=((IKabs(((((-1.0)*x9971*x9975))+(((-1.0)*x9972*x9975)))))+(IKabs((x9972+x9971))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9977=(cj2*sj1);
IkReal x9978=(cj1*sj2);
IkReal x9979=((1.0)*gconst2);
IkReal x9980=(gconst1*r01);
CheckValue<IkReal> x9981 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9977*x9979))+((x9977*x9980))+((x9978*x9980))+(((-1.0)*r00*x9978*x9979)))),IkReal((((r02*x9977))+((r02*x9978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9981.valid){
continue;
}
CheckValue<IkReal> x9982=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9979)))),-1);
if(!x9982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9981.value)+(((1.5707963267949)*(x9982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9983=IKcos(j4);
IkReal x9984=IKsin(j4);
IkReal x9985=(gconst1*r01);
IkReal x9986=((1.0)*cj2);
IkReal x9987=(gconst1*r21);
IkReal x9988=(gconst1*r11);
IkReal x9989=((1.0)*x9983);
IkReal x9990=(gconst2*x9983);
IkReal x9991=((1.0)*x9984);
IkReal x9992=(gconst2*x9984);
evalcond[0]=(((r00*x9990))+((r02*x9984))+(((-1.0)*x9985*x9989)));
evalcond[1]=((((-1.0)*r22*x9989))+((r20*x9992))+(((-1.0)*x9987*x9991)));
evalcond[2]=(((r10*x9992))+(((-1.0)*x9988*x9991))+(((-1.0)*r12*x9989)));
evalcond[3]=((1.0)+((r00*x9992))+(((-1.0)*r02*x9989))+(((-1.0)*x9985*x9991)));
evalcond[4]=((((-1.0)*cj1*x9986))+((r10*x9990))+((r12*x9984))+(((-1.0)*x9988*x9989))+((sj1*sj2)));
evalcond[5]=(((r22*x9984))+(((-1.0)*cj1*sj2))+((r20*x9990))+(((-1.0)*x9987*x9989))+(((-1.0)*sj1*x9986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9993=(gconst2*r00);
IkReal x9994=(gconst1*r01);
CheckValue<IkReal> x9995=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9993*x9993)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9994*x9994)))+(((2.0)*x9993*x9994)))),-1);
if(!x9995.valid){
continue;
}
CheckValue<IkReal> x9996 = IKatan2WithCheck(IkReal(((((-1.0)*x9994))+x9993)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9995.value)))+(x9996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9997=IKcos(j4);
IkReal x9998=IKsin(j4);
IkReal x9999=(gconst1*r01);
IkReal x10000=((1.0)*cj2);
IkReal x10001=(gconst1*r21);
IkReal x10002=(gconst1*r11);
IkReal x10003=((1.0)*x9997);
IkReal x10004=(gconst2*x9997);
IkReal x10005=((1.0)*x9998);
IkReal x10006=(gconst2*x9998);
evalcond[0]=((((-1.0)*x10003*x9999))+((r02*x9998))+((r00*x10004)));
evalcond[1]=((((-1.0)*r22*x10003))+((r20*x10006))+(((-1.0)*x10001*x10005)));
evalcond[2]=((((-1.0)*x10002*x10005))+((r10*x10006))+(((-1.0)*r12*x10003)));
evalcond[3]=((1.0)+(((-1.0)*r02*x10003))+(((-1.0)*x10005*x9999))+((r00*x10006)));
evalcond[4]=((((-1.0)*x10002*x10003))+((r12*x9998))+((sj1*sj2))+((r10*x10004))+(((-1.0)*cj1*x10000)));
evalcond[5]=((((-1.0)*sj1*x10000))+((r22*x9998))+(((-1.0)*cj1*sj2))+((r20*x10004))+(((-1.0)*x10001*x10003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10007=((1.0)*gconst1);
CheckValue<IkReal> x10008 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10007))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10008.valid){
continue;
}
CheckValue<IkReal> x10009=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x10007)))),-1);
if(!x10009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10008.value)+(((1.5707963267949)*(x10009.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10010=IKcos(j4);
IkReal x10011=IKsin(j4);
IkReal x10012=(gconst1*r01);
IkReal x10013=((1.0)*cj2);
IkReal x10014=(gconst1*r21);
IkReal x10015=(gconst1*r11);
IkReal x10016=((1.0)*x10010);
IkReal x10017=(gconst2*x10010);
IkReal x10018=((1.0)*x10011);
IkReal x10019=(gconst2*x10011);
evalcond[0]=((((-1.0)*x10012*x10016))+((r02*x10011))+((r00*x10017)));
evalcond[1]=((((-1.0)*x10014*x10018))+(((-1.0)*r22*x10016))+((r20*x10019)));
evalcond[2]=((((-1.0)*x10015*x10018))+((r10*x10019))+(((-1.0)*r12*x10016)));
evalcond[3]=((1.0)+(((-1.0)*x10012*x10018))+(((-1.0)*r02*x10016))+((r00*x10019)));
evalcond[4]=((((-1.0)*x10015*x10016))+((r12*x10011))+((r10*x10017))+((sj1*sj2))+(((-1.0)*cj1*x10013)));
evalcond[5]=((((-1.0)*sj1*x10013))+((r22*x10011))+(((-1.0)*x10014*x10016))+(((-1.0)*cj1*sj2))+((r20*x10017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10020=((-1.0)*py);
CheckValue<IkReal> x10022 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10022.valid){
continue;
}
IkReal x10021=((-1.0)*(x10022.value));
sj5=gconst1;
cj5=gconst2;
j5=x10021;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10020);
rxp0_2=(py*r00);
rxp1_0=(r21*x10020);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10021;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10023=((1.0)*sj3);
IkReal x10024=(r01*r21);
IkReal x10025=(r00*r20);
j4eval[0]=(x10024+x10025);
j4eval[1]=((((-1.0)*x10023*x10025))+(((-1.0)*x10023*x10024)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10026=((-1.0)*py);
CheckValue<IkReal> x10028 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10028.valid){
continue;
}
IkReal x10027=((-1.0)*(x10028.value));
sj5=gconst1;
cj5=gconst2;
j5=x10027;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10026);
rxp0_2=(py*r00);
rxp1_0=(r21*x10026);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10027;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10029=(r00*r20);
IkReal x10030=((1.0)*cj3);
IkReal x10031=(r01*r21);
j4eval[0]=(x10031+x10029);
j4eval[1]=((((-1.0)*x10030*x10031))+(((-1.0)*x10029*x10030)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10032=((-1.0)*py);
CheckValue<IkReal> x10034 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10034.valid){
continue;
}
IkReal x10033=((-1.0)*(x10034.value));
sj5=gconst1;
cj5=gconst2;
j5=x10033;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x10032);
rxp0_2=(py*r00);
rxp1_0=(r21*x10032);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst0=x10033;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10035=((1.0)*cj3);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r01*r21*x10035))+(((-1.0)*r00*r20*x10035)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10036=((1.0)*gconst2);
CheckValue<IkReal> x10037=IKPowWithIntegerCheck(r12,-1);
if(!x10037.valid){
continue;
}
CheckValue<IkReal> x10038=IKPowWithIntegerCheck(sj3,-1);
if(!x10038.valid){
continue;
}
CheckValue<IkReal> x10039=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10036))+((cj3*gconst1*r01))),-1);
if(!x10039.valid){
continue;
}
if( IKabs(((x10037.value)*(x10038.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10039.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x10036)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10037.value)*(x10038.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x10039.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x10036))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10037.value)*(x10038.value)*((((cj2*sj1))+((cj1*sj2))))), ((x10039.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x10036))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10040=IKsin(j4);
IkReal x10041=IKcos(j4);
IkReal x10042=(sj1*sj2);
IkReal x10043=(gconst1*r01);
IkReal x10044=(r00*sj3);
IkReal x10045=(cj3*r20);
IkReal x10046=((1.0)*cj2);
IkReal x10047=(cj3*r00);
IkReal x10048=(gconst1*r21);
IkReal x10049=(cj1*sj2);
IkReal x10050=(r20*sj3);
IkReal x10051=((1.0)*gconst1);
IkReal x10052=(gconst2*r01);
IkReal x10053=((1.0)*cj3);
IkReal x10054=(gconst2*r21);
IkReal x10055=(cj1*x10046);
IkReal x10056=((1.0)*x10040);
IkReal x10057=(gconst2*x10040);
IkReal x10058=(cj3*x10041);
IkReal x10059=(sj3*x10041);
IkReal x10060=((1.0)*gconst2*x10041);
evalcond[0]=((-1.0)*r12*x10041);
evalcond[1]=(((r20*x10057))+(((-1.0)*x10048*x10056)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x10056))+x10049);
evalcond[3]=((1.0)+(((-1.0)*x10043*x10056))+((r00*x10057)));
evalcond[4]=((((-1.0)*x10055))+x10042+(((-1.0)*r12*x10040*x10053)));
evalcond[5]=(((sj3*x10052))+((x10043*x10058))+((gconst1*x10044))+(((-1.0)*x10047*x10060)));
evalcond[6]=(((x10043*x10059))+(((-1.0)*x10044*x10060))+(((-1.0)*x10047*x10051))+(((-1.0)*x10052*x10053)));
evalcond[7]=((((-1.0)*sj1*x10046))+((sj3*x10054))+(((-1.0)*x10049))+((gconst1*x10050))+((x10048*x10058))+(((-1.0)*x10045*x10060)));
evalcond[8]=((((-1.0)*x10055))+(((-1.0)*x10050*x10060))+(((-1.0)*x10053*x10054))+x10042+((x10048*x10059))+(((-1.0)*x10045*x10051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10061=((1.0)*gconst2);
IkReal x10062=(gconst1*r01);
CheckValue<IkReal> x10063=IKPowWithIntegerCheck(((((-1.0)*x10062))+((gconst2*r00))),-1);
if(!x10063.valid){
continue;
}
CheckValue<IkReal> x10064=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x10061))+((cj3*x10062))),-1);
if(!x10064.valid){
continue;
}
if( IKabs(((-1.0)*(x10063.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10064.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x10061)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10063.value)))+IKsqr(((x10064.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x10061))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10063.value)), ((x10064.value)*(((((-1.0)*gconst1*r00*sj3))+(((-1.0)*r01*sj3*x10061))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10065=IKsin(j4);
IkReal x10066=IKcos(j4);
IkReal x10067=(sj1*sj2);
IkReal x10068=(gconst1*r01);
IkReal x10069=(r00*sj3);
IkReal x10070=(cj3*r20);
IkReal x10071=((1.0)*cj2);
IkReal x10072=(cj3*r00);
IkReal x10073=(gconst1*r21);
IkReal x10074=(cj1*sj2);
IkReal x10075=(r20*sj3);
IkReal x10076=((1.0)*gconst1);
IkReal x10077=(gconst2*r01);
IkReal x10078=((1.0)*cj3);
IkReal x10079=(gconst2*r21);
IkReal x10080=(cj1*x10071);
IkReal x10081=((1.0)*x10065);
IkReal x10082=(gconst2*x10065);
IkReal x10083=(cj3*x10066);
IkReal x10084=(sj3*x10066);
IkReal x10085=((1.0)*gconst2*x10066);
evalcond[0]=((-1.0)*r12*x10066);
evalcond[1]=(((r20*x10082))+(((-1.0)*x10073*x10081)));
evalcond[2]=((((-1.0)*r12*sj3*x10081))+((cj2*sj1))+x10074);
evalcond[3]=((1.0)+((r00*x10082))+(((-1.0)*x10068*x10081)));
evalcond[4]=((((-1.0)*r12*x10065*x10078))+(((-1.0)*x10080))+x10067);
evalcond[5]=(((sj3*x10077))+((gconst1*x10069))+((x10068*x10083))+(((-1.0)*x10072*x10085)));
evalcond[6]=((((-1.0)*x10072*x10076))+(((-1.0)*x10077*x10078))+(((-1.0)*x10069*x10085))+((x10068*x10084)));
evalcond[7]=(((sj3*x10079))+((x10073*x10083))+(((-1.0)*sj1*x10071))+((gconst1*x10075))+(((-1.0)*x10070*x10085))+(((-1.0)*x10074)));
evalcond[8]=(((x10073*x10084))+(((-1.0)*x10078*x10079))+(((-1.0)*x10080))+x10067+(((-1.0)*x10075*x10085))+(((-1.0)*x10070*x10076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10086=(gconst2*r00);
IkReal x10087=(gconst1*r01);
CheckValue<IkReal> x10088=IKPowWithIntegerCheck((x10086+(((-1.0)*x10087))),-1);
if(!x10088.valid){
continue;
}
CheckValue<IkReal> x10089=IKPowWithIntegerCheck((((sj3*x10087))+(((-1.0)*sj3*x10086))),-1);
if(!x10089.valid){
continue;
}
if( IKabs(((-1.0)*(x10088.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10089.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10088.value)))+IKsqr(((x10089.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10088.value)), ((x10089.value)*((((cj3*gconst2*r01))+((cj3*gconst1*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10090=IKsin(j4);
IkReal x10091=IKcos(j4);
IkReal x10092=(sj1*sj2);
IkReal x10093=(gconst1*r01);
IkReal x10094=(r00*sj3);
IkReal x10095=(cj3*r20);
IkReal x10096=((1.0)*cj2);
IkReal x10097=(cj3*r00);
IkReal x10098=(gconst1*r21);
IkReal x10099=(cj1*sj2);
IkReal x10100=(r20*sj3);
IkReal x10101=((1.0)*gconst1);
IkReal x10102=(gconst2*r01);
IkReal x10103=((1.0)*cj3);
IkReal x10104=(gconst2*r21);
IkReal x10105=(cj1*x10096);
IkReal x10106=((1.0)*x10090);
IkReal x10107=(gconst2*x10090);
IkReal x10108=(cj3*x10091);
IkReal x10109=(sj3*x10091);
IkReal x10110=((1.0)*gconst2*x10091);
evalcond[0]=((-1.0)*r12*x10091);
evalcond[1]=(((r20*x10107))+(((-1.0)*x10098*x10106)));
evalcond[2]=(((cj2*sj1))+(((-1.0)*r12*sj3*x10106))+x10099);
evalcond[3]=((1.0)+((r00*x10107))+(((-1.0)*x10093*x10106)));
evalcond[4]=(x10092+(((-1.0)*r12*x10090*x10103))+(((-1.0)*x10105)));
evalcond[5]=(((x10093*x10108))+((sj3*x10102))+((gconst1*x10094))+(((-1.0)*x10097*x10110)));
evalcond[6]=((((-1.0)*x10094*x10110))+(((-1.0)*x10102*x10103))+((x10093*x10109))+(((-1.0)*x10097*x10101)));
evalcond[7]=(((gconst1*x10100))+((x10098*x10108))+(((-1.0)*sj1*x10096))+(((-1.0)*x10095*x10110))+((sj3*x10104))+(((-1.0)*x10099)));
evalcond[8]=((((-1.0)*x10103*x10104))+(((-1.0)*x10100*x10110))+((x10098*x10109))+(((-1.0)*x10095*x10101))+x10092+(((-1.0)*x10105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10111=gconst2*gconst2;
IkReal x10112=gconst1*gconst1;
IkReal x10113=(r00*r11);
IkReal x10114=(gconst1*gconst2);
IkReal x10115=((1.0)*sj3);
IkReal x10116=(r01*r11);
IkReal x10117=((1.0)*cj3*r10);
IkReal x10118=((1.0)*cj3*r12);
CheckValue<IkReal> x10119 = IKatan2WithCheck(IkReal(((((-1.0)*gconst1*r00*x10118))+(((-1.0)*gconst2*r01*x10118)))),IkReal(((((-1.0)*r00*x10114*x10117))+((cj3*x10114*x10116))+(((-1.0)*r01*x10111*x10117))+((cj3*x10112*x10113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10119.valid){
continue;
}
CheckValue<IkReal> x10120=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r01*r10*x10114*x10115))+(((-1.0)*x10113*x10114*x10115))+((r00*r10*sj3*x10111))+((sj3*x10112*x10116)))),-1);
if(!x10120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10119.value)+(((1.5707963267949)*(x10120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10121=IKsin(j4);
IkReal x10122=IKcos(j4);
IkReal x10123=(sj1*sj2);
IkReal x10124=(r00*sj3);
IkReal x10125=(gconst2*r20);
IkReal x10126=(cj3*gconst1);
IkReal x10127=(gconst1*r01);
IkReal x10128=((1.0)*cj2);
IkReal x10129=(cj3*gconst2);
IkReal x10130=(gconst1*r11);
IkReal x10131=(gconst1*r21);
IkReal x10132=(cj1*sj2);
IkReal x10133=(gconst1*sj3);
IkReal x10134=(gconst2*sj3);
IkReal x10135=(cj1*x10128);
IkReal x10136=((1.0)*x10122);
IkReal x10137=((1.0)*x10121);
IkReal x10138=((1.0)*x10129);
IkReal x10139=(gconst2*x10121);
IkReal x10140=(sj3*x10122);
evalcond[0]=((((-1.0)*x10131*x10137))+((x10121*x10125))+(((-1.0)*r22*x10136)));
evalcond[1]=(((r10*x10139))+(((-1.0)*x10130*x10137))+(((-1.0)*r12*x10136)));
evalcond[2]=((1.0)+(((-1.0)*x10127*x10137))+(((-1.0)*r02*x10136))+((r00*x10139)));
evalcond[3]=(((gconst1*x10124))+(((-1.0)*r00*x10129*x10136))+((r01*x10134))+((r01*x10122*x10126))+(((-1.0)*cj3*r02*x10137)));
evalcond[4]=((((-1.0)*gconst2*x10124*x10136))+(((-1.0)*r00*x10126))+(((-1.0)*r01*x10138))+((x10127*x10140))+(((-1.0)*r02*sj3*x10137)));
evalcond[5]=(((r11*x10134))+((r11*x10122*x10126))+((r10*x10133))+x10123+(((-1.0)*cj3*r12*x10137))+(((-1.0)*x10135))+(((-1.0)*r10*x10129*x10136)));
evalcond[6]=(((r20*x10133))+(((-1.0)*cj3*r22*x10137))+((r21*x10122*x10126))+((r21*x10134))+(((-1.0)*cj3*x10125*x10136))+(((-1.0)*x10132))+(((-1.0)*sj1*x10128)));
evalcond[7]=(((cj2*sj1))+x10132+((x10130*x10140))+(((-1.0)*r10*x10134*x10136))+(((-1.0)*r12*sj3*x10137))+(((-1.0)*r10*x10126))+(((-1.0)*r11*x10138)));
evalcond[8]=((((-1.0)*sj3*x10125*x10136))+(((-1.0)*r20*x10126))+(((-1.0)*r22*sj3*x10137))+(((-1.0)*r21*x10138))+x10123+((x10131*x10140))+(((-1.0)*x10135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10141=gconst1*gconst1;
IkReal x10142=gconst2*gconst2;
IkReal x10143=(r00*sj3);
IkReal x10144=((1.0)*r11);
IkReal x10145=(r01*sj3);
IkReal x10146=(gconst1*gconst2);
IkReal x10147=(cj3*r01);
IkReal x10148=(cj3*r00);
IkReal x10149=(r10*x10142);
CheckValue<IkReal> x10150 = IKatan2WithCheck(IkReal((((gconst1*r12*x10143))+((gconst2*r12*x10145)))),IkReal(((((-1.0)*x10141*x10143*x10144))+((x10145*x10149))+((r10*x10143*x10146))+(((-1.0)*x10144*x10145*x10146)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10150.valid){
continue;
}
CheckValue<IkReal> x10151=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10144*x10146*x10148))+((r11*x10141*x10147))+((cj3*r02*r12))+((x10148*x10149))+(((-1.0)*r10*x10146*x10147)))),-1);
if(!x10151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10150.value)+(((1.5707963267949)*(x10151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10152=IKsin(j4);
IkReal x10153=IKcos(j4);
IkReal x10154=(sj1*sj2);
IkReal x10155=(r00*sj3);
IkReal x10156=(gconst2*r20);
IkReal x10157=(cj3*gconst1);
IkReal x10158=(gconst1*r01);
IkReal x10159=((1.0)*cj2);
IkReal x10160=(cj3*gconst2);
IkReal x10161=(gconst1*r11);
IkReal x10162=(gconst1*r21);
IkReal x10163=(cj1*sj2);
IkReal x10164=(gconst1*sj3);
IkReal x10165=(gconst2*sj3);
IkReal x10166=(cj1*x10159);
IkReal x10167=((1.0)*x10153);
IkReal x10168=((1.0)*x10152);
IkReal x10169=((1.0)*x10160);
IkReal x10170=(gconst2*x10152);
IkReal x10171=(sj3*x10153);
evalcond[0]=((((-1.0)*r22*x10167))+(((-1.0)*x10162*x10168))+((x10152*x10156)));
evalcond[1]=(((r10*x10170))+(((-1.0)*r12*x10167))+(((-1.0)*x10161*x10168)));
evalcond[2]=((1.0)+(((-1.0)*x10158*x10168))+((r00*x10170))+(((-1.0)*r02*x10167)));
evalcond[3]=((((-1.0)*r00*x10160*x10167))+((r01*x10165))+((gconst1*x10155))+((r01*x10153*x10157))+(((-1.0)*cj3*r02*x10168)));
evalcond[4]=((((-1.0)*r01*x10169))+(((-1.0)*gconst2*x10155*x10167))+(((-1.0)*r00*x10157))+(((-1.0)*r02*sj3*x10168))+((x10158*x10171)));
evalcond[5]=(((r10*x10164))+(((-1.0)*x10166))+(((-1.0)*r10*x10160*x10167))+(((-1.0)*cj3*r12*x10168))+((r11*x10165))+x10154+((r11*x10153*x10157)));
evalcond[6]=((((-1.0)*cj3*x10156*x10167))+(((-1.0)*cj3*r22*x10168))+(((-1.0)*x10163))+((r20*x10164))+(((-1.0)*sj1*x10159))+((r21*x10165))+((r21*x10153*x10157)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r10*x10157))+(((-1.0)*r11*x10169))+((x10161*x10171))+x10163+(((-1.0)*r12*sj3*x10168))+(((-1.0)*r10*x10165*x10167)));
evalcond[8]=((((-1.0)*r21*x10169))+(((-1.0)*x10166))+(((-1.0)*sj3*x10156*x10167))+(((-1.0)*r20*x10157))+x10154+(((-1.0)*r22*sj3*x10168))+((x10162*x10171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10172=((1.0)*gconst1);
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10172))+((gconst2*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
CheckValue<IkReal> x10174=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r11))+(((-1.0)*r10*x10172)))),-1);
if(!x10174.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10173.value)+(((1.5707963267949)*(x10174.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10175=IKsin(j4);
IkReal x10176=IKcos(j4);
IkReal x10177=(sj1*sj2);
IkReal x10178=(r00*sj3);
IkReal x10179=(gconst2*r20);
IkReal x10180=(cj3*gconst1);
IkReal x10181=(gconst1*r01);
IkReal x10182=((1.0)*cj2);
IkReal x10183=(cj3*gconst2);
IkReal x10184=(gconst1*r11);
IkReal x10185=(gconst1*r21);
IkReal x10186=(cj1*sj2);
IkReal x10187=(gconst1*sj3);
IkReal x10188=(gconst2*sj3);
IkReal x10189=(cj1*x10182);
IkReal x10190=((1.0)*x10176);
IkReal x10191=((1.0)*x10175);
IkReal x10192=((1.0)*x10183);
IkReal x10193=(gconst2*x10175);
IkReal x10194=(sj3*x10176);
evalcond[0]=((((-1.0)*x10185*x10191))+((x10175*x10179))+(((-1.0)*r22*x10190)));
evalcond[1]=(((r10*x10193))+(((-1.0)*x10184*x10191))+(((-1.0)*r12*x10190)));
evalcond[2]=((1.0)+(((-1.0)*r02*x10190))+((r00*x10193))+(((-1.0)*x10181*x10191)));
evalcond[3]=((((-1.0)*cj3*r02*x10191))+(((-1.0)*r00*x10183*x10190))+((r01*x10176*x10180))+((gconst1*x10178))+((r01*x10188)));
evalcond[4]=(((x10181*x10194))+(((-1.0)*r00*x10180))+(((-1.0)*gconst2*x10178*x10190))+(((-1.0)*r02*sj3*x10191))+(((-1.0)*r01*x10192)));
evalcond[5]=((((-1.0)*cj3*r12*x10191))+(((-1.0)*r10*x10183*x10190))+((r11*x10188))+((r10*x10187))+x10177+(((-1.0)*x10189))+((r11*x10176*x10180)));
evalcond[6]=((((-1.0)*cj3*x10179*x10190))+((r21*x10176*x10180))+(((-1.0)*x10186))+(((-1.0)*sj1*x10182))+((r21*x10188))+((r20*x10187))+(((-1.0)*cj3*r22*x10191)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r10*x10180))+(((-1.0)*r11*x10192))+x10186+(((-1.0)*r10*x10188*x10190))+((x10184*x10194))+(((-1.0)*r12*sj3*x10191)));
evalcond[8]=((((-1.0)*r22*sj3*x10191))+(((-1.0)*r20*x10180))+(((-1.0)*sj3*x10179*x10190))+(((-1.0)*r21*x10192))+x10177+(((-1.0)*x10189))+((x10185*x10194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10195=((-1.0)*px);
CheckValue<IkReal> x10197 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10197.valid){
continue;
}
IkReal x10196=((-1.0)*(x10197.value));
sj5=gconst1;
cj5=gconst2;
j5=x10196;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10195);
rxp1_1=(px*r21);
rxp1_2=(r11*x10195);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10196;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10198=((-1.0)*px);
CheckValue<IkReal> x10200 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10200.valid){
continue;
}
IkReal x10199=((-1.0)*(x10200.value));
sj5=gconst1;
cj5=gconst2;
j5=x10199;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10198);
rxp1_1=(px*r21);
rxp1_2=(r11*x10198);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10199;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
IkReal x10201=((1.0)*cj3);
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=((((-1.0)*x10201*(r21*r21)))+(((-1.0)*x10201))+((cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10202=((-1.0)*px);
CheckValue<IkReal> x10204 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10204.valid){
continue;
}
IkReal x10203=((-1.0)*(x10204.value));
sj5=gconst1;
cj5=gconst2;
j5=x10203;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10202);
rxp1_1=(px*r21);
rxp1_2=(r11*x10202);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x10203;
IkReal gconst1=((-1.0)*r21);
IkReal gconst2=r20;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10206=IKPowWithIntegerCheck(r02,-1);
if(!x10206.valid){
continue;
}
IkReal x10205=x10206.value;
CheckValue<IkReal> x10207=IKPowWithIntegerCheck(cj3,-1);
if(!x10207.valid){
continue;
}
if( IKabs((x10205*(x10207.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10205)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10205*(x10207.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10205))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10205*(x10207.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10205));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10208=IKsin(j4);
IkReal x10209=IKcos(j4);
IkReal x10210=(cj1*cj2);
IkReal x10211=(sj1*sj2);
IkReal x10212=((1.0)*gconst1);
IkReal x10213=(cj3*r10);
IkReal x10214=((1.0)*cj3);
IkReal x10215=(gconst2*r21);
IkReal x10216=(gconst1*sj3);
IkReal x10217=(gconst2*r11);
IkReal x10218=(cj3*gconst1);
IkReal x10219=((1.0)*sj0);
IkReal x10220=(gconst2*x10208);
IkReal x10221=((1.0)*cj2*sj1);
IkReal x10222=((1.0)*cj1*sj2);
IkReal x10223=(r11*x10209);
IkReal x10224=(r02*x10208);
IkReal x10225=((1.0)*x10209);
IkReal x10226=(r21*x10209);
IkReal x10227=(gconst2*r20*x10225);
evalcond[0]=((((-1.0)*r02*x10225))+(((-1.0)*x10219)));
evalcond[1]=((((-1.0)*r21*x10208*x10212))+((r20*x10220)));
evalcond[2]=(((r10*x10220))+cj0+(((-1.0)*r11*x10208*x10212)));
evalcond[3]=((((-1.0)*cj0*x10211))+(((-1.0)*x10214*x10224))+((cj0*x10210)));
evalcond[4]=((((-1.0)*sj3*x10224))+(((-1.0)*cj0*x10222))+(((-1.0)*cj0*x10221)));
evalcond[5]=(((r20*x10216))+((x10218*x10226))+(((-1.0)*x10221))+(((-1.0)*x10222))+((sj3*x10215))+(((-1.0)*gconst2*r20*x10209*x10214)));
evalcond[6]=((((-1.0)*x10214*x10215))+x10211+(((-1.0)*cj3*r20*x10212))+((x10216*x10226))+(((-1.0)*sj3*x10227))+(((-1.0)*x10210)));
evalcond[7]=(((r10*x10216))+(((-1.0)*x10211*x10219))+((sj0*x10210))+((x10218*x10223))+(((-1.0)*gconst2*x10213*x10225))+((sj3*x10217)));
evalcond[8]=((((-1.0)*x10212*x10213))+(((-1.0)*gconst2*r10*sj3*x10225))+(((-1.0)*cj2*sj1*x10219))+(((-1.0)*x10214*x10217))+((x10216*x10223))+(((-1.0)*cj1*sj2*x10219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10228=((1.0)*sj3);
CheckValue<IkReal> x10229=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x10229.valid){
continue;
}
CheckValue<IkReal> x10230=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*gconst2*r20))),-1);
if(!x10230.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10229.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10230.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10228))+(((-1.0)*gconst1*r20*x10228)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10229.value)))+IKsqr(((x10230.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10228))+(((-1.0)*gconst1*r20*x10228))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10229.value)), ((x10230.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r21*x10228))+(((-1.0)*gconst1*r20*x10228))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10231=IKsin(j4);
IkReal x10232=IKcos(j4);
IkReal x10233=(cj1*cj2);
IkReal x10234=(sj1*sj2);
IkReal x10235=((1.0)*gconst1);
IkReal x10236=(cj3*r10);
IkReal x10237=((1.0)*cj3);
IkReal x10238=(gconst2*r21);
IkReal x10239=(gconst1*sj3);
IkReal x10240=(gconst2*r11);
IkReal x10241=(cj3*gconst1);
IkReal x10242=((1.0)*sj0);
IkReal x10243=(gconst2*x10231);
IkReal x10244=((1.0)*cj2*sj1);
IkReal x10245=((1.0)*cj1*sj2);
IkReal x10246=(r11*x10232);
IkReal x10247=(r02*x10231);
IkReal x10248=((1.0)*x10232);
IkReal x10249=(r21*x10232);
IkReal x10250=(gconst2*r20*x10248);
evalcond[0]=((((-1.0)*x10242))+(((-1.0)*r02*x10248)));
evalcond[1]=(((r20*x10243))+(((-1.0)*r21*x10231*x10235)));
evalcond[2]=(((r10*x10243))+cj0+(((-1.0)*r11*x10231*x10235)));
evalcond[3]=((((-1.0)*x10237*x10247))+(((-1.0)*cj0*x10234))+((cj0*x10233)));
evalcond[4]=((((-1.0)*sj3*x10247))+(((-1.0)*cj0*x10245))+(((-1.0)*cj0*x10244)));
evalcond[5]=(((x10241*x10249))+((sj3*x10238))+(((-1.0)*x10245))+(((-1.0)*x10244))+(((-1.0)*gconst2*r20*x10232*x10237))+((r20*x10239)));
evalcond[6]=(((x10239*x10249))+(((-1.0)*x10237*x10238))+(((-1.0)*cj3*r20*x10235))+x10234+(((-1.0)*x10233))+(((-1.0)*sj3*x10250)));
evalcond[7]=((((-1.0)*x10234*x10242))+((sj0*x10233))+((x10241*x10246))+((sj3*x10240))+(((-1.0)*gconst2*x10236*x10248))+((r10*x10239)));
evalcond[8]=(((x10239*x10246))+(((-1.0)*x10237*x10240))+(((-1.0)*gconst2*r10*sj3*x10248))+(((-1.0)*x10235*x10236))+(((-1.0)*cj1*sj2*x10242))+(((-1.0)*cj2*sj1*x10242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10251=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x10251.valid){
continue;
}
CheckValue<IkReal> x10252=IKPowWithIntegerCheck(r02,-1);
if(!x10252.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10251.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10252.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10251.value)))+IKsqr(((-1.0)*sj0*(x10252.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10251.value)), ((-1.0)*sj0*(x10252.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10253=IKsin(j4);
IkReal x10254=IKcos(j4);
IkReal x10255=(cj1*cj2);
IkReal x10256=(sj1*sj2);
IkReal x10257=((1.0)*gconst1);
IkReal x10258=(cj3*r10);
IkReal x10259=((1.0)*cj3);
IkReal x10260=(gconst2*r21);
IkReal x10261=(gconst1*sj3);
IkReal x10262=(gconst2*r11);
IkReal x10263=(cj3*gconst1);
IkReal x10264=((1.0)*sj0);
IkReal x10265=(gconst2*x10253);
IkReal x10266=((1.0)*cj2*sj1);
IkReal x10267=((1.0)*cj1*sj2);
IkReal x10268=(r11*x10254);
IkReal x10269=(r02*x10253);
IkReal x10270=((1.0)*x10254);
IkReal x10271=(r21*x10254);
IkReal x10272=(gconst2*r20*x10270);
evalcond[0]=((((-1.0)*x10264))+(((-1.0)*r02*x10270)));
evalcond[1]=((((-1.0)*r21*x10253*x10257))+((r20*x10265)));
evalcond[2]=(cj0+(((-1.0)*r11*x10253*x10257))+((r10*x10265)));
evalcond[3]=(((cj0*x10255))+(((-1.0)*cj0*x10256))+(((-1.0)*x10259*x10269)));
evalcond[4]=((((-1.0)*cj0*x10266))+(((-1.0)*cj0*x10267))+(((-1.0)*sj3*x10269)));
evalcond[5]=(((sj3*x10260))+(((-1.0)*gconst2*r20*x10254*x10259))+(((-1.0)*x10267))+(((-1.0)*x10266))+((r20*x10261))+((x10263*x10271)));
evalcond[6]=((((-1.0)*sj3*x10272))+(((-1.0)*cj3*r20*x10257))+((x10261*x10271))+x10256+(((-1.0)*x10255))+(((-1.0)*x10259*x10260)));
evalcond[7]=(((sj3*x10262))+((sj0*x10255))+((x10263*x10268))+(((-1.0)*gconst2*x10258*x10270))+((r10*x10261))+(((-1.0)*x10256*x10264)));
evalcond[8]=((((-1.0)*x10257*x10258))+(((-1.0)*gconst2*r10*sj3*x10270))+(((-1.0)*cj1*sj2*x10264))+(((-1.0)*x10259*x10262))+(((-1.0)*cj2*sj1*x10264))+((x10261*x10268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10273=gconst1*gconst1;
IkReal x10274=r21*r21;
IkReal x10275=gconst2*gconst2;
IkReal x10276=r20*r20;
IkReal x10277=(gconst2*sj3);
IkReal x10278=(gconst2*r20);
IkReal x10279=(gconst1*r21);
IkReal x10280=((1.0)*cj1*sj2);
IkReal x10281=(r20*r21*sj3);
IkReal x10282=((1.0)*cj2*sj1);
CheckValue<IkReal> x10283 = IKatan2WithCheck(IkReal((((r21*r22*x10277))+((gconst1*r20*r22*sj3))+(((-1.0)*r22*x10282))+(((-1.0)*r22*x10280)))),IkReal((((cj2*sj1*x10279))+(((-1.0)*x10278*x10282))+(((-1.0)*x10278*x10280))+((gconst1*x10276*x10277))+((x10275*x10281))+((cj1*sj2*x10279))+(((-1.0)*gconst1*x10274*x10277))+(((-1.0)*x10273*x10281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10283.valid){
continue;
}
CheckValue<IkReal> x10284=IKPowWithIntegerCheck(IKsign((((cj3*x10275*x10276))+((cj3*x10273*x10274))+(((-2.0)*cj3*x10278*x10279))+((cj3*(r22*r22))))),-1);
if(!x10284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10283.value)+(((1.5707963267949)*(x10284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10285=IKsin(j4);
IkReal x10286=IKcos(j4);
IkReal x10287=(gconst1*r01);
IkReal x10288=(cj1*cj2);
IkReal x10289=(gconst2*sj3);
IkReal x10290=((1.0)*cj3);
IkReal x10291=(sj1*sj2);
IkReal x10292=(gconst1*r10);
IkReal x10293=(cj3*gconst2);
IkReal x10294=(gconst1*r11);
IkReal x10295=(gconst1*r21);
IkReal x10296=(gconst1*r20);
IkReal x10297=(gconst1*r00);
IkReal x10298=((1.0)*sj0);
IkReal x10299=((1.0)*x10286);
IkReal x10300=((1.0)*x10285);
IkReal x10301=(sj3*x10286);
IkReal x10302=(gconst2*x10285);
IkReal x10303=((1.0)*cj2*sj1);
IkReal x10304=((1.0)*cj1*sj2);
IkReal x10305=(cj3*x10286);
evalcond[0]=(((r20*x10302))+(((-1.0)*r22*x10299))+(((-1.0)*x10295*x10300)));
evalcond[1]=(((r10*x10302))+cj0+(((-1.0)*x10294*x10300))+(((-1.0)*r12*x10299)));
evalcond[2]=((((-1.0)*x10287*x10300))+((r00*x10302))+(((-1.0)*r02*x10299))+(((-1.0)*x10298)));
evalcond[3]=((((-1.0)*x10304))+(((-1.0)*x10303))+(((-1.0)*gconst2*r20*x10286*x10290))+((sj3*x10296))+(((-1.0)*r22*x10285*x10290))+((r21*x10289))+((x10295*x10305)));
evalcond[4]=((((-1.0)*r22*sj3*x10300))+(((-1.0)*r20*x10289*x10299))+(((-1.0)*gconst2*r21*x10290))+(((-1.0)*x10290*x10296))+x10291+(((-1.0)*x10288))+((x10295*x10301)));
evalcond[5]=(((r01*x10289))+((x10287*x10305))+(((-1.0)*r02*x10285*x10290))+(((-1.0)*gconst2*r00*x10286*x10290))+(((-1.0)*cj0*x10291))+((sj3*x10297))+((cj0*x10288)));
evalcond[6]=(((r11*x10289))+((sj0*x10288))+(((-1.0)*x10291*x10298))+((x10294*x10305))+(((-1.0)*gconst2*r10*x10286*x10290))+(((-1.0)*r12*x10285*x10290))+((sj3*x10292)));
evalcond[7]=((((-1.0)*cj0*x10303))+(((-1.0)*cj0*x10304))+((x10287*x10301))+(((-1.0)*r02*sj3*x10300))+(((-1.0)*x10290*x10297))+(((-1.0)*r00*x10289*x10299))+(((-1.0)*gconst2*r01*x10290)));
evalcond[8]=((((-1.0)*r12*sj3*x10300))+(((-1.0)*cj1*sj2*x10298))+(((-1.0)*cj2*sj1*x10298))+(((-1.0)*x10290*x10292))+((x10294*x10301))+(((-1.0)*r10*x10289*x10299))+(((-1.0)*gconst2*r11*x10290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10306 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst1*r21*sj0))+((gconst2*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10306.valid){
continue;
}
CheckValue<IkReal> x10307=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x10307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10306.value)+(((1.5707963267949)*(x10307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10308=IKsin(j4);
IkReal x10309=IKcos(j4);
IkReal x10310=(gconst1*r01);
IkReal x10311=(cj1*cj2);
IkReal x10312=(gconst2*sj3);
IkReal x10313=((1.0)*cj3);
IkReal x10314=(sj1*sj2);
IkReal x10315=(gconst1*r10);
IkReal x10316=(cj3*gconst2);
IkReal x10317=(gconst1*r11);
IkReal x10318=(gconst1*r21);
IkReal x10319=(gconst1*r20);
IkReal x10320=(gconst1*r00);
IkReal x10321=((1.0)*sj0);
IkReal x10322=((1.0)*x10309);
IkReal x10323=((1.0)*x10308);
IkReal x10324=(sj3*x10309);
IkReal x10325=(gconst2*x10308);
IkReal x10326=((1.0)*cj2*sj1);
IkReal x10327=((1.0)*cj1*sj2);
IkReal x10328=(cj3*x10309);
evalcond[0]=((((-1.0)*x10318*x10323))+(((-1.0)*r22*x10322))+((r20*x10325)));
evalcond[1]=(cj0+(((-1.0)*r12*x10322))+((r10*x10325))+(((-1.0)*x10317*x10323)));
evalcond[2]=((((-1.0)*r02*x10322))+((r00*x10325))+(((-1.0)*x10321))+(((-1.0)*x10310*x10323)));
evalcond[3]=(((x10318*x10328))+(((-1.0)*gconst2*r20*x10309*x10313))+((r21*x10312))+((sj3*x10319))+(((-1.0)*x10326))+(((-1.0)*x10327))+(((-1.0)*r22*x10308*x10313)));
evalcond[4]=((((-1.0)*r20*x10312*x10322))+((x10318*x10324))+(((-1.0)*x10313*x10319))+x10314+(((-1.0)*x10311))+(((-1.0)*gconst2*r21*x10313))+(((-1.0)*r22*sj3*x10323)));
evalcond[5]=(((r01*x10312))+((x10310*x10328))+((sj3*x10320))+(((-1.0)*r02*x10308*x10313))+(((-1.0)*cj0*x10314))+((cj0*x10311))+(((-1.0)*gconst2*r00*x10309*x10313)));
evalcond[6]=(((sj0*x10311))+(((-1.0)*x10314*x10321))+((r11*x10312))+((x10317*x10328))+(((-1.0)*gconst2*r10*x10309*x10313))+(((-1.0)*r12*x10308*x10313))+((sj3*x10315)));
evalcond[7]=(((x10310*x10324))+(((-1.0)*r02*sj3*x10323))+(((-1.0)*gconst2*r01*x10313))+(((-1.0)*cj0*x10326))+(((-1.0)*cj0*x10327))+(((-1.0)*r00*x10312*x10322))+(((-1.0)*x10313*x10320)));
evalcond[8]=((((-1.0)*cj2*sj1*x10321))+(((-1.0)*r10*x10312*x10322))+(((-1.0)*cj1*sj2*x10321))+(((-1.0)*x10313*x10315))+((x10317*x10324))+(((-1.0)*gconst2*r11*x10313))+(((-1.0)*r12*sj3*x10323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10329=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x10329.valid){
continue;
}
CheckValue<IkReal> x10330 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst2*r20))+(((-1.0)*cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10329.value)))+(x10330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10331=IKsin(j4);
IkReal x10332=IKcos(j4);
IkReal x10333=(gconst1*r01);
IkReal x10334=(cj1*cj2);
IkReal x10335=(gconst2*sj3);
IkReal x10336=((1.0)*cj3);
IkReal x10337=(sj1*sj2);
IkReal x10338=(gconst1*r10);
IkReal x10339=(cj3*gconst2);
IkReal x10340=(gconst1*r11);
IkReal x10341=(gconst1*r21);
IkReal x10342=(gconst1*r20);
IkReal x10343=(gconst1*r00);
IkReal x10344=((1.0)*sj0);
IkReal x10345=((1.0)*x10332);
IkReal x10346=((1.0)*x10331);
IkReal x10347=(sj3*x10332);
IkReal x10348=(gconst2*x10331);
IkReal x10349=((1.0)*cj2*sj1);
IkReal x10350=((1.0)*cj1*sj2);
IkReal x10351=(cj3*x10332);
evalcond[0]=(((r20*x10348))+(((-1.0)*x10341*x10346))+(((-1.0)*r22*x10345)));
evalcond[1]=((((-1.0)*x10340*x10346))+cj0+(((-1.0)*r12*x10345))+((r10*x10348)));
evalcond[2]=((((-1.0)*x10344))+((r00*x10348))+(((-1.0)*r02*x10345))+(((-1.0)*x10333*x10346)));
evalcond[3]=(((x10341*x10351))+(((-1.0)*x10349))+(((-1.0)*gconst2*r20*x10332*x10336))+(((-1.0)*x10350))+((sj3*x10342))+((r21*x10335))+(((-1.0)*r22*x10331*x10336)));
evalcond[4]=((((-1.0)*r20*x10335*x10345))+((x10341*x10347))+(((-1.0)*x10334))+(((-1.0)*r22*sj3*x10346))+(((-1.0)*gconst2*r21*x10336))+x10337+(((-1.0)*x10336*x10342)));
evalcond[5]=(((x10333*x10351))+(((-1.0)*r02*x10331*x10336))+((cj0*x10334))+((r01*x10335))+((sj3*x10343))+(((-1.0)*gconst2*r00*x10332*x10336))+(((-1.0)*cj0*x10337)));
evalcond[6]=((((-1.0)*x10337*x10344))+((x10340*x10351))+((sj3*x10338))+((sj0*x10334))+(((-1.0)*r12*x10331*x10336))+(((-1.0)*gconst2*r10*x10332*x10336))+((r11*x10335)));
evalcond[7]=((((-1.0)*cj0*x10349))+((x10333*x10347))+(((-1.0)*gconst2*r01*x10336))+(((-1.0)*r02*sj3*x10346))+(((-1.0)*r00*x10335*x10345))+(((-1.0)*cj0*x10350))+(((-1.0)*x10336*x10343)));
evalcond[8]=((((-1.0)*x10336*x10338))+(((-1.0)*gconst2*r11*x10336))+(((-1.0)*r12*sj3*x10346))+(((-1.0)*r10*x10335*x10345))+(((-1.0)*cj2*sj1*x10344))+(((-1.0)*cj1*sj2*x10344))+((x10340*x10347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10353 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10353)==0){
continue;
}
IkReal x10352=pow(x10353,-0.5);
CheckValue<IkReal> x10354 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10354.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10354.value))));
IkReal gconst4=((1.0)*r21*x10352);
IkReal gconst5=((-1.0)*r20*x10352);
CheckValue<IkReal> x10355 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10355.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10355.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10358 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10358.valid){
continue;
}
IkReal x10356=((1.0)*(x10358.value));
IkReal x10357=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10356)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10356)));
IkReal gconst4=((1.0)*r21*x10357);
IkReal gconst5=((-1.0)*r20*x10357);
IkReal x10359=r22*r22;
IkReal x10360=((1.0)*x10359);
CheckValue<IkReal> x10364=IKPowWithIntegerCheck(((-1.0)+x10359),-1);
if(!x10364.valid){
continue;
}
IkReal x10361=x10364.value;
if((((1.0)+(((-1.0)*x10360)))) < -0.00001)
continue;
IkReal x10362=IKsqrt(((1.0)+(((-1.0)*x10360))));
IkReal x10363=(cj0*x10361*x10362);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x10360*x10363))+x10363))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10367 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10367.valid){
continue;
}
IkReal x10365=((1.0)*(x10367.value));
IkReal x10366=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10365)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10365)));
IkReal gconst4=((1.0)*r21*x10366);
IkReal gconst5=((-1.0)*r20*x10366);
IkReal x10368=r22*r22;
IkReal x10369=((1.0)*x10368);
CheckValue<IkReal> x10373=IKPowWithIntegerCheck(((-1.0)+x10368),-1);
if(!x10373.valid){
continue;
}
IkReal x10370=x10373.value;
if((((1.0)+(((-1.0)*x10369)))) < -0.00001)
continue;
IkReal x10371=IKsqrt(((1.0)+(((-1.0)*x10369))));
IkReal x10372=(sj0*x10370*x10371);
j4eval[0]=((IKabs(((((-1.0)*x10369*x10372))+x10372)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10376 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10376.valid){
continue;
}
IkReal x10374=((1.0)*(x10376.value));
IkReal x10375=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10374)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10374)));
IkReal gconst4=((1.0)*r21*x10375);
IkReal gconst5=((-1.0)*r20*x10375);
IkReal x10377=r22*r22;
IkReal x10378=(r12*sj0);
IkReal x10379=(cj0*r02);
CheckValue<IkReal> x10383=IKPowWithIntegerCheck(((-1.0)+x10377),-1);
if(!x10383.valid){
continue;
}
IkReal x10380=x10383.value;
if((((1.0)+(((-1.0)*x10377)))) < -0.00001)
continue;
IkReal x10381=IKsqrt(((1.0)+(((-1.0)*x10377))));
IkReal x10382=(r22*x10380*x10381);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x10379))+(((-1.0)*x10378)))))+(IKabs((((x10379*x10382))+((x10378*x10382))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10386 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10386.valid){
continue;
}
IkReal x10384=((1.0)*(x10386.value));
IkReal x10385=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10384)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10384)));
IkReal gconst4=((1.0)*r21*x10385);
IkReal gconst5=((-1.0)*r20*x10385);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10389 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10389.valid){
continue;
}
IkReal x10387=((1.0)*(x10389.value));
IkReal x10388=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10387)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10387)));
IkReal gconst4=((1.0)*r21*x10388);
IkReal gconst5=((-1.0)*r20*x10388);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10392 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10392.valid){
continue;
}
IkReal x10390=((1.0)*(x10392.value));
IkReal x10391=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10390)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10390)));
IkReal gconst4=((1.0)*r21*x10391);
IkReal gconst5=((-1.0)*r20*x10391);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10395 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10395.valid){
continue;
}
IkReal x10393=((1.0)*(x10395.value));
IkReal x10394=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10393)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10393)));
IkReal gconst4=((1.0)*r21*x10394);
IkReal gconst5=((-1.0)*r20*x10394);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10398 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10398.valid){
continue;
}
IkReal x10396=((1.0)*(x10398.value));
IkReal x10397=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10396)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10396)));
IkReal gconst4=((1.0)*r21*x10397);
IkReal gconst5=((-1.0)*r20*x10397);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10401 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10401.valid){
continue;
}
IkReal x10399=((1.0)*(x10401.value));
IkReal x10400=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10399)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10399)));
IkReal gconst4=((1.0)*r21*x10400);
IkReal gconst5=((-1.0)*r20*x10400);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10402=(gconst5*r10);
IkReal x10403=(gconst4*r11);
CheckValue<IkReal> x10404 = IKatan2WithCheck(IkReal((x10403+(((-1.0)*x10402)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10404.valid){
continue;
}
CheckValue<IkReal> x10405=IKPowWithIntegerCheck(IKsign(((x10403*x10403)+(r12*r12)+(((-2.0)*x10402*x10403))+(x10402*x10402))),-1);
if(!x10405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10404.value)+(((1.5707963267949)*(x10405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10406=IKsin(j4);
IkReal x10407=IKcos(j4);
IkReal x10408=(gconst4*r21);
IkReal x10409=(gconst5*r10);
IkReal x10410=((1.0)*cj2);
IkReal x10411=(gconst4*r11);
IkReal x10412=(gconst4*r01);
IkReal x10413=((1.0)*x10407);
IkReal x10414=((1.0)*x10406);
IkReal x10415=(gconst5*x10406);
evalcond[0]=((((-1.0)*r22*x10413))+((r20*x10415))+(((-1.0)*x10408*x10414)));
evalcond[1]=((((-1.0)*r02*x10413))+((r00*x10415))+(((-1.0)*x10412*x10414)));
evalcond[2]=((((-1.0)*x10409*x10413))+((x10407*x10411))+(((-1.0)*r12*x10414)));
evalcond[3]=((1.0)+((x10406*x10409))+(((-1.0)*r12*x10413))+(((-1.0)*x10411*x10414)));
evalcond[4]=(((x10407*x10408))+(((-1.0)*cj1*x10410))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10413))+(((-1.0)*r22*x10414)));
evalcond[5]=((((-1.0)*r02*x10414))+((x10407*x10412))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10410))+(((-1.0)*gconst5*r00*x10413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10416=((1.0)*gconst4);
CheckValue<IkReal> x10417=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10416))+(((-1.0)*gconst5*r21)))),-1);
if(!x10417.valid){
continue;
}
CheckValue<IkReal> x10418 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10417.value)))+(x10418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10419=IKsin(j4);
IkReal x10420=IKcos(j4);
IkReal x10421=(gconst4*r21);
IkReal x10422=(gconst5*r10);
IkReal x10423=((1.0)*cj2);
IkReal x10424=(gconst4*r11);
IkReal x10425=(gconst4*r01);
IkReal x10426=((1.0)*x10420);
IkReal x10427=((1.0)*x10419);
IkReal x10428=(gconst5*x10419);
evalcond[0]=((((-1.0)*x10421*x10427))+(((-1.0)*r22*x10426))+((r20*x10428)));
evalcond[1]=(((r00*x10428))+(((-1.0)*r02*x10426))+(((-1.0)*x10425*x10427)));
evalcond[2]=(((x10420*x10424))+(((-1.0)*x10422*x10426))+(((-1.0)*r12*x10427)));
evalcond[3]=((1.0)+((x10419*x10422))+(((-1.0)*r12*x10426))+(((-1.0)*x10424*x10427)));
evalcond[4]=(((x10420*x10421))+(((-1.0)*cj1*x10423))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10426))+(((-1.0)*r22*x10427)));
evalcond[5]=(((x10420*x10425))+(((-1.0)*gconst5*r00*x10426))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10423))+(((-1.0)*r02*x10427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10429 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10429.valid){
continue;
}
CheckValue<IkReal> x10430=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10429.value)+(((1.5707963267949)*(x10430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10431=IKsin(j4);
IkReal x10432=IKcos(j4);
IkReal x10433=(gconst4*r21);
IkReal x10434=(gconst5*r10);
IkReal x10435=((1.0)*cj2);
IkReal x10436=(gconst4*r11);
IkReal x10437=(gconst4*r01);
IkReal x10438=((1.0)*x10432);
IkReal x10439=((1.0)*x10431);
IkReal x10440=(gconst5*x10431);
evalcond[0]=((((-1.0)*x10433*x10439))+((r20*x10440))+(((-1.0)*r22*x10438)));
evalcond[1]=((((-1.0)*x10437*x10439))+((r00*x10440))+(((-1.0)*r02*x10438)));
evalcond[2]=(((x10432*x10436))+(((-1.0)*r12*x10439))+(((-1.0)*x10434*x10438)));
evalcond[3]=((1.0)+(((-1.0)*x10436*x10439))+(((-1.0)*r12*x10438))+((x10431*x10434)));
evalcond[4]=((((-1.0)*cj1*x10435))+((sj1*sj2))+((x10432*x10433))+(((-1.0)*gconst5*r20*x10438))+(((-1.0)*r22*x10439)));
evalcond[5]=((((-1.0)*gconst5*r00*x10438))+(((-1.0)*cj1*sj2))+((x10432*x10437))+(((-1.0)*sj1*x10435))+(((-1.0)*r02*x10439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10443 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10443.valid){
continue;
}
IkReal x10441=((1.0)*(x10443.value));
IkReal x10442=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10441)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10441)));
IkReal gconst4=((1.0)*r21*x10442);
IkReal gconst5=((-1.0)*r20*x10442);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10446 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10446.valid){
continue;
}
IkReal x10444=((1.0)*(x10446.value));
IkReal x10445=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10444)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10444)));
IkReal gconst4=((1.0)*r21*x10445);
IkReal gconst5=((-1.0)*r20*x10445);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10449 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10449.valid){
continue;
}
IkReal x10447=((1.0)*(x10449.value));
IkReal x10448=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10447)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10447)));
IkReal gconst4=((1.0)*r21*x10448);
IkReal gconst5=((-1.0)*r20*x10448);
IkReal x10450=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10454=IKPowWithIntegerCheck(x10450,-1);
if(!x10454.valid){
continue;
}
IkReal x10451=x10454.value;
IkReal x10452=((1.0)*x10451);
IkReal x10453=((((-2.0)*r10*r11*r20*r21*x10451))+(((-1.0)*x10452*(r10*r10)*(r20*r20)))+(((-1.0)*x10452*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12))));
j4eval[0]=x10453;
j4eval[1]=r12;
j4eval[2]=x10450;
j4eval[3]=IKsign(x10453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10455=(gconst5*r10);
IkReal x10456=(gconst4*r11);
CheckValue<IkReal> x10457=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10456*x10456)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10455*x10455)))+(((2.0)*x10455*x10456)))),-1);
if(!x10457.valid){
continue;
}
CheckValue<IkReal> x10458 = IKatan2WithCheck(IkReal(((((-1.0)*x10456))+x10455)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10457.value)))+(x10458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10459=IKcos(j4);
IkReal x10460=IKsin(j4);
IkReal x10461=((1.0)*cj2);
IkReal x10462=((1.0)*x10459);
IkReal x10463=(gconst5*x10460);
IkReal x10464=(gconst5*x10459);
IkReal x10465=((1.0)*gconst4*x10460);
evalcond[0]=(((r12*x10460))+(((-1.0)*gconst4*r11*x10462))+((r10*x10464)));
evalcond[1]=(((r20*x10463))+(((-1.0)*r22*x10462))+(((-1.0)*r21*x10465)));
evalcond[2]=((((-1.0)*r02*x10462))+(((-1.0)*r01*x10465))+((r00*x10463)));
evalcond[3]=((1.0)+(((-1.0)*r11*x10465))+((r10*x10463))+(((-1.0)*r12*x10462)));
evalcond[4]=(((r20*x10464))+((sj1*sj2))+(((-1.0)*cj1*x10461))+((r22*x10460))+(((-1.0)*gconst4*r21*x10462)));
evalcond[5]=((((-1.0)*gconst4*r01*x10462))+((r00*x10464))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10461))+((r02*x10460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10466=((1.0)*gconst4);
CheckValue<IkReal> x10467 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x10466))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10467.valid){
continue;
}
CheckValue<IkReal> x10468=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10466))+(((-1.0)*gconst5*r21)))),-1);
if(!x10468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10467.value)+(((1.5707963267949)*(x10468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10469=IKcos(j4);
IkReal x10470=IKsin(j4);
IkReal x10471=((1.0)*cj2);
IkReal x10472=((1.0)*x10469);
IkReal x10473=(gconst5*x10470);
IkReal x10474=(gconst5*x10469);
IkReal x10475=((1.0)*gconst4*x10470);
evalcond[0]=(((r12*x10470))+(((-1.0)*gconst4*r11*x10472))+((r10*x10474)));
evalcond[1]=(((r20*x10473))+(((-1.0)*r22*x10472))+(((-1.0)*r21*x10475)));
evalcond[2]=((((-1.0)*r02*x10472))+(((-1.0)*r01*x10475))+((r00*x10473)));
evalcond[3]=((1.0)+(((-1.0)*r11*x10475))+((r10*x10473))+(((-1.0)*r12*x10472)));
evalcond[4]=(((r20*x10474))+((sj1*sj2))+(((-1.0)*cj1*x10471))+((r22*x10470))+(((-1.0)*gconst4*r21*x10472)));
evalcond[5]=((((-1.0)*gconst4*r01*x10472))+((r00*x10474))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x10471))+((r02*x10470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10476 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10476.valid){
continue;
}
CheckValue<IkReal> x10477=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10476.value)+(((1.5707963267949)*(x10477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10478=IKcos(j4);
IkReal x10479=IKsin(j4);
IkReal x10480=((1.0)*cj2);
IkReal x10481=((1.0)*x10478);
IkReal x10482=(gconst5*x10479);
IkReal x10483=(gconst5*x10478);
IkReal x10484=((1.0)*gconst4*x10479);
evalcond[0]=(((r10*x10483))+((r12*x10479))+(((-1.0)*gconst4*r11*x10481)));
evalcond[1]=((((-1.0)*r22*x10481))+(((-1.0)*r21*x10484))+((r20*x10482)));
evalcond[2]=(((r00*x10482))+(((-1.0)*r01*x10484))+(((-1.0)*r02*x10481)));
evalcond[3]=((1.0)+((r10*x10482))+(((-1.0)*r11*x10484))+(((-1.0)*r12*x10481)));
evalcond[4]=((((-1.0)*gconst4*r21*x10481))+((sj1*sj2))+(((-1.0)*cj1*x10480))+((r22*x10479))+((r20*x10483)));
evalcond[5]=(((r00*x10483))+(((-1.0)*gconst4*r01*x10481))+(((-1.0)*cj1*sj2))+((r02*x10479))+(((-1.0)*sj1*x10480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10487 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10487.valid){
continue;
}
IkReal x10485=((1.0)*(x10487.value));
IkReal x10486=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10485)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10485)));
IkReal gconst4=((1.0)*r21*x10486);
IkReal gconst5=((-1.0)*r20*x10486);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10490 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10490.valid){
continue;
}
IkReal x10488=((1.0)*(x10490.value));
IkReal x10489=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10488)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10488)));
IkReal gconst4=((1.0)*r21*x10489);
IkReal gconst5=((-1.0)*r20*x10489);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10493 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10493.valid){
continue;
}
IkReal x10491=((1.0)*(x10493.value));
IkReal x10492=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10491)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10491)));
IkReal gconst4=((1.0)*r21*x10492);
IkReal gconst5=((-1.0)*r20*x10492);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10494=(gconst5*r10);
IkReal x10495=(gconst4*r11);
CheckValue<IkReal> x10496 = IKatan2WithCheck(IkReal(((((-1.0)*x10494))+x10495)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10496.valid){
continue;
}
CheckValue<IkReal> x10497=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10494*x10495))+(x10494*x10494)+(x10495*x10495))),-1);
if(!x10497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10496.value)+(((1.5707963267949)*(x10497.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10498=IKsin(j4);
IkReal x10499=IKcos(j4);
IkReal x10500=(gconst4*r21);
IkReal x10501=(gconst5*r10);
IkReal x10502=((1.0)*sj1);
IkReal x10503=(gconst4*r11);
IkReal x10504=(gconst4*r01);
IkReal x10505=((1.0)*x10499);
IkReal x10506=((1.0)*x10498);
IkReal x10507=(gconst5*x10498);
evalcond[0]=(((r20*x10507))+(((-1.0)*r22*x10505))+(((-1.0)*x10500*x10506)));
evalcond[1]=(((r00*x10507))+(((-1.0)*x10504*x10506))+(((-1.0)*r02*x10505)));
evalcond[2]=((((-1.0)*x10501*x10505))+((x10499*x10503))+(((-1.0)*r12*x10506)));
evalcond[3]=((1.0)+((x10498*x10501))+(((-1.0)*x10503*x10506))+(((-1.0)*r12*x10505)));
evalcond[4]=((((-1.0)*sj2*x10502))+((x10499*x10504))+((cj1*cj2))+(((-1.0)*r02*x10506))+(((-1.0)*gconst5*r00*x10505)));
evalcond[5]=((((-1.0)*r22*x10506))+((x10499*x10500))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10502))+(((-1.0)*gconst5*r20*x10505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10508=((1.0)*gconst4);
CheckValue<IkReal> x10509=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*r21))+(((-1.0)*r20*x10508)))),-1);
if(!x10509.valid){
continue;
}
CheckValue<IkReal> x10510 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x10508))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10509.value)))+(x10510.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10511=IKsin(j4);
IkReal x10512=IKcos(j4);
IkReal x10513=(gconst4*r21);
IkReal x10514=(gconst5*r10);
IkReal x10515=((1.0)*sj1);
IkReal x10516=(gconst4*r11);
IkReal x10517=(gconst4*r01);
IkReal x10518=((1.0)*x10512);
IkReal x10519=((1.0)*x10511);
IkReal x10520=(gconst5*x10511);
evalcond[0]=((((-1.0)*r22*x10518))+(((-1.0)*x10513*x10519))+((r20*x10520)));
evalcond[1]=((((-1.0)*x10517*x10519))+(((-1.0)*r02*x10518))+((r00*x10520)));
evalcond[2]=(((x10512*x10516))+(((-1.0)*x10514*x10518))+(((-1.0)*r12*x10519)));
evalcond[3]=((1.0)+((x10511*x10514))+(((-1.0)*x10516*x10519))+(((-1.0)*r12*x10518)));
evalcond[4]=((((-1.0)*r02*x10519))+((x10512*x10517))+(((-1.0)*gconst5*r00*x10518))+((cj1*cj2))+(((-1.0)*sj2*x10515)));
evalcond[5]=((((-1.0)*r22*x10519))+(((-1.0)*cj1*sj2))+((x10512*x10513))+(((-1.0)*cj2*x10515))+(((-1.0)*gconst5*r20*x10518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
CheckValue<IkReal> x10522=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10521.value)+(((1.5707963267949)*(x10522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10523=IKsin(j4);
IkReal x10524=IKcos(j4);
IkReal x10525=(gconst4*r21);
IkReal x10526=(gconst5*r10);
IkReal x10527=((1.0)*sj1);
IkReal x10528=(gconst4*r11);
IkReal x10529=(gconst4*r01);
IkReal x10530=((1.0)*x10524);
IkReal x10531=((1.0)*x10523);
IkReal x10532=(gconst5*x10523);
evalcond[0]=((((-1.0)*r22*x10530))+((r20*x10532))+(((-1.0)*x10525*x10531)));
evalcond[1]=((((-1.0)*r02*x10530))+(((-1.0)*x10529*x10531))+((r00*x10532)));
evalcond[2]=((((-1.0)*r12*x10531))+((x10524*x10528))+(((-1.0)*x10526*x10530)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10530))+((x10523*x10526))+(((-1.0)*x10528*x10531)));
evalcond[4]=((((-1.0)*sj2*x10527))+(((-1.0)*r02*x10531))+((x10524*x10529))+((cj1*cj2))+(((-1.0)*gconst5*r00*x10530)));
evalcond[5]=((((-1.0)*r22*x10531))+(((-1.0)*cj1*sj2))+((x10524*x10525))+(((-1.0)*cj2*x10527))+(((-1.0)*gconst5*r20*x10530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x10535 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10535.valid){
continue;
}
IkReal x10533=((1.0)*(x10535.value));
IkReal x10534=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10533)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10533)));
IkReal gconst4=((1.0)*r21*x10534);
IkReal gconst5=((-1.0)*r20*x10534);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10538 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10538.valid){
continue;
}
IkReal x10536=((1.0)*(x10538.value));
IkReal x10537=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10536)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10536)));
IkReal gconst4=((1.0)*r21*x10537);
IkReal gconst5=((-1.0)*r20*x10537);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10541 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10541.valid){
continue;
}
IkReal x10539=((1.0)*(x10541.value));
IkReal x10540=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10539)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10539)));
IkReal gconst4=((1.0)*r21*x10540);
IkReal gconst5=((-1.0)*r20*x10540);
IkReal x10542=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10546=IKPowWithIntegerCheck(x10542,-1);
if(!x10546.valid){
continue;
}
IkReal x10543=x10546.value;
IkReal x10544=((1.0)*x10543);
IkReal x10545=((((-1.0)*(r12*r12)))+(((-1.0)*x10544*(r11*r11)*(r21*r21)))+(((-1.0)*x10544*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10543)));
j4eval[0]=x10545;
j4eval[1]=r12;
j4eval[2]=x10542;
j4eval[3]=IKsign(x10545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10547=(gconst5*r10);
IkReal x10548=(gconst4*r11);
CheckValue<IkReal> x10549=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10547*x10547)))+(((-1.0)*(x10548*x10548)))+(((-1.0)*(r12*r12)))+(((2.0)*x10547*x10548)))),-1);
if(!x10549.valid){
continue;
}
CheckValue<IkReal> x10550 = IKatan2WithCheck(IkReal(((((-1.0)*x10548))+x10547)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10549.value)))+(x10550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10551=IKcos(j4);
IkReal x10552=IKsin(j4);
IkReal x10553=((1.0)*sj1);
IkReal x10554=((1.0)*x10551);
IkReal x10555=(gconst5*x10552);
IkReal x10556=(gconst5*x10551);
IkReal x10557=((1.0)*gconst4*x10552);
evalcond[0]=(((r10*x10556))+(((-1.0)*gconst4*r11*x10554))+((r12*x10552)));
evalcond[1]=((((-1.0)*r21*x10557))+((r20*x10555))+(((-1.0)*r22*x10554)));
evalcond[2]=((((-1.0)*r02*x10554))+(((-1.0)*r01*x10557))+((r00*x10555)));
evalcond[3]=((1.0)+(((-1.0)*r11*x10557))+(((-1.0)*r12*x10554))+((r10*x10555)));
evalcond[4]=(((r02*x10552))+(((-1.0)*gconst4*r01*x10554))+(((-1.0)*sj2*x10553))+((cj1*cj2))+((r00*x10556)));
evalcond[5]=(((r22*x10552))+(((-1.0)*cj2*x10553))+(((-1.0)*cj1*sj2))+((r20*x10556))+(((-1.0)*gconst4*r21*x10554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10558=((1.0)*gconst4);
CheckValue<IkReal> x10559=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10558))+(((-1.0)*gconst5*r21)))),-1);
if(!x10559.valid){
continue;
}
CheckValue<IkReal> x10560 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst5*r00))+(((-1.0)*r01*x10558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10559.value)))+(x10560.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10561=IKcos(j4);
IkReal x10562=IKsin(j4);
IkReal x10563=((1.0)*sj1);
IkReal x10564=((1.0)*x10561);
IkReal x10565=(gconst5*x10562);
IkReal x10566=(gconst5*x10561);
IkReal x10567=((1.0)*gconst4*x10562);
evalcond[0]=(((r10*x10566))+(((-1.0)*gconst4*r11*x10564))+((r12*x10562)));
evalcond[1]=(((r20*x10565))+(((-1.0)*r22*x10564))+(((-1.0)*r21*x10567)));
evalcond[2]=(((r00*x10565))+(((-1.0)*r01*x10567))+(((-1.0)*r02*x10564)));
evalcond[3]=((1.0)+((r10*x10565))+(((-1.0)*r12*x10564))+(((-1.0)*r11*x10567)));
evalcond[4]=(((r00*x10566))+(((-1.0)*sj2*x10563))+(((-1.0)*gconst4*r01*x10564))+((cj1*cj2))+((r02*x10562)));
evalcond[5]=(((r20*x10566))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10563))+((r22*x10562))+(((-1.0)*gconst4*r21*x10564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10568 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10568.valid){
continue;
}
CheckValue<IkReal> x10569=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10568.value)+(((1.5707963267949)*(x10569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10570=IKcos(j4);
IkReal x10571=IKsin(j4);
IkReal x10572=((1.0)*sj1);
IkReal x10573=((1.0)*x10570);
IkReal x10574=(gconst5*x10571);
IkReal x10575=(gconst5*x10570);
IkReal x10576=((1.0)*gconst4*x10571);
evalcond[0]=(((r10*x10575))+(((-1.0)*gconst4*r11*x10573))+((r12*x10571)));
evalcond[1]=(((r20*x10574))+(((-1.0)*r22*x10573))+(((-1.0)*r21*x10576)));
evalcond[2]=(((r00*x10574))+(((-1.0)*r01*x10576))+(((-1.0)*r02*x10573)));
evalcond[3]=((1.0)+((r10*x10574))+(((-1.0)*r12*x10573))+(((-1.0)*r11*x10576)));
evalcond[4]=((((-1.0)*sj2*x10572))+((r00*x10575))+(((-1.0)*gconst4*r01*x10573))+((r02*x10571))+((cj1*cj2)));
evalcond[5]=(((r20*x10575))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x10572))+((r22*x10571))+(((-1.0)*gconst4*r21*x10573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x10579 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10579.valid){
continue;
}
IkReal x10577=((1.0)*(x10579.value));
IkReal x10578=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10577)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10578);
rxp1_1=(px*r21);
rxp1_2=(r11*x10578);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10577)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10580=((1.0)*r11*r21);
IkReal x10581=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10580))+(((-1.0)*x10581)));
j4eval[1]=(((sj3*x10580))+((sj3*x10581)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10584 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10584.valid){
continue;
}
IkReal x10582=((1.0)*(x10584.value));
IkReal x10583=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10582)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10583);
rxp1_1=(px*r21);
rxp1_2=(r11*x10583);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10582)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10585=((1.0)*cj3);
IkReal x10586=(r10*r20);
IkReal x10587=(r11*r21);
j4eval[0]=((((-1.0)*x10586))+(((-1.0)*x10587)));
j4eval[1]=(((x10585*x10586))+((x10585*x10587)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10590 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10590.valid){
continue;
}
IkReal x10588=((1.0)*(x10590.value));
IkReal x10589=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10588)));
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10589);
rxp1_1=(px*r21);
rxp1_2=(r11*x10589);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10588)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x10591=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r11*r21*x10591))+((r10*r20*x10591)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10592=((1.0)*r10);
CheckValue<IkReal> x10593=IKPowWithIntegerCheck(cj3,-1);
if(!x10593.valid){
continue;
}
CheckValue<IkReal> x10594=IKPowWithIntegerCheck(r02,-1);
if(!x10594.valid){
continue;
}
CheckValue<IkReal> x10595=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10592))+((cj3*gconst4*r11))),-1);
if(!x10595.valid){
continue;
}
if( IKabs(((x10593.value)*(x10594.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10595.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10592)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10593.value)*(x10594.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x10595.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10592))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10593.value)*(x10594.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x10595.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10592))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10596=IKsin(j4);
IkReal x10597=IKcos(j4);
IkReal x10598=(gconst5*sj3);
IkReal x10599=((1.0)*r21);
IkReal x10600=(cj3*gconst5);
IkReal x10601=(sj1*sj2);
IkReal x10602=((1.0)*r11);
IkReal x10603=((1.0)*cj2);
IkReal x10604=(cj3*gconst4);
IkReal x10605=(gconst4*sj3);
IkReal x10606=((1.0)*cj1*sj2);
IkReal x10607=(sj1*x10603);
IkReal x10608=((1.0)*x10597);
IkReal x10609=(gconst4*x10596);
IkReal x10610=(gconst5*x10596);
IkReal x10611=(x10597*x10605);
IkReal x10612=((1.0)*r02*x10596);
IkReal x10613=(x10606+x10607);
evalcond[0]=((-1.0)*r02*x10597);
evalcond[1]=(((r20*x10610))+(((-1.0)*x10599*x10609)));
evalcond[2]=((1.0)+((r10*x10610))+(((-1.0)*x10602*x10609)));
evalcond[3]=((((-1.0)*cj3*x10612))+(((-1.0)*x10601))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x10613))+(((-1.0)*sj3*x10612)));
evalcond[5]=(((r10*x10605))+((r11*x10598))+((r11*x10597*x10604))+(((-1.0)*r10*x10600*x10608)));
evalcond[6]=((((-1.0)*x10600*x10602))+(((-1.0)*r10*x10604))+(((-1.0)*r10*x10598*x10608))+((r11*x10611)));
evalcond[7]=(((r21*x10598))+(((-1.0)*x10613))+(((-1.0)*r20*x10600*x10608))+((r20*x10605))+((r21*x10597*x10604)));
evalcond[8]=((((-1.0)*r20*x10604))+(((-1.0)*cj1*x10603))+(((-1.0)*r20*x10598*x10608))+(((-1.0)*x10599*x10600))+x10601+((r21*x10611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10614=(gconst5*r10);
IkReal x10615=((1.0)*sj3);
IkReal x10616=(gconst4*r11);
CheckValue<IkReal> x10617=IKPowWithIntegerCheck(((((-1.0)*x10616))+x10614),-1);
if(!x10617.valid){
continue;
}
CheckValue<IkReal> x10618=IKPowWithIntegerCheck((((cj3*x10616))+(((-1.0)*cj3*x10614))),-1);
if(!x10618.valid){
continue;
}
if( IKabs(((-1.0)*(x10617.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10618.value)*(((((-1.0)*gconst4*r10*x10615))+(((-1.0)*gconst5*r11*x10615)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10617.value)))+IKsqr(((x10618.value)*(((((-1.0)*gconst4*r10*x10615))+(((-1.0)*gconst5*r11*x10615))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10617.value)), ((x10618.value)*(((((-1.0)*gconst4*r10*x10615))+(((-1.0)*gconst5*r11*x10615))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10619=IKsin(j4);
IkReal x10620=IKcos(j4);
IkReal x10621=(gconst5*sj3);
IkReal x10622=((1.0)*r21);
IkReal x10623=(cj3*gconst5);
IkReal x10624=(sj1*sj2);
IkReal x10625=((1.0)*r11);
IkReal x10626=((1.0)*cj2);
IkReal x10627=(cj3*gconst4);
IkReal x10628=(gconst4*sj3);
IkReal x10629=((1.0)*cj1*sj2);
IkReal x10630=(sj1*x10626);
IkReal x10631=((1.0)*x10620);
IkReal x10632=(gconst4*x10619);
IkReal x10633=(gconst5*x10619);
IkReal x10634=(x10620*x10628);
IkReal x10635=((1.0)*r02*x10619);
IkReal x10636=(x10630+x10629);
evalcond[0]=((-1.0)*r02*x10620);
evalcond[1]=(((r20*x10633))+(((-1.0)*x10622*x10632)));
evalcond[2]=((1.0)+(((-1.0)*x10625*x10632))+((r10*x10633)));
evalcond[3]=((((-1.0)*cj3*x10635))+(((-1.0)*x10624))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj3*x10635))+(((-1.0)*x10636)));
evalcond[5]=((((-1.0)*r10*x10623*x10631))+((r10*x10628))+((r11*x10620*x10627))+((r11*x10621)));
evalcond[6]=((((-1.0)*r10*x10621*x10631))+(((-1.0)*x10623*x10625))+((r11*x10634))+(((-1.0)*r10*x10627)));
evalcond[7]=(((r21*x10621))+((r21*x10620*x10627))+((r20*x10628))+(((-1.0)*x10636))+(((-1.0)*r20*x10623*x10631)));
evalcond[8]=((((-1.0)*x10622*x10623))+(((-1.0)*r20*x10621*x10631))+x10624+(((-1.0)*cj1*x10626))+((r21*x10634))+(((-1.0)*r20*x10627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10637=(gconst5*r10);
IkReal x10638=(gconst4*r11);
CheckValue<IkReal> x10639=IKPowWithIntegerCheck(((((-1.0)*x10638))+x10637),-1);
if(!x10639.valid){
continue;
}
CheckValue<IkReal> x10640=IKPowWithIntegerCheck((((sj3*x10638))+(((-1.0)*sj3*x10637))),-1);
if(!x10640.valid){
continue;
}
if( IKabs(((-1.0)*(x10639.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10640.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x10639.value)))+IKsqr(((x10640.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x10639.value)), ((x10640.value)*((((cj3*gconst5*r11))+((cj3*gconst4*r10))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10641=IKsin(j4);
IkReal x10642=IKcos(j4);
IkReal x10643=(gconst5*sj3);
IkReal x10644=((1.0)*r21);
IkReal x10645=(cj3*gconst5);
IkReal x10646=(sj1*sj2);
IkReal x10647=((1.0)*r11);
IkReal x10648=((1.0)*cj2);
IkReal x10649=(cj3*gconst4);
IkReal x10650=(gconst4*sj3);
IkReal x10651=((1.0)*cj1*sj2);
IkReal x10652=(sj1*x10648);
IkReal x10653=((1.0)*x10642);
IkReal x10654=(gconst4*x10641);
IkReal x10655=(gconst5*x10641);
IkReal x10656=(x10642*x10650);
IkReal x10657=((1.0)*r02*x10641);
IkReal x10658=(x10652+x10651);
evalcond[0]=((-1.0)*r02*x10642);
evalcond[1]=((((-1.0)*x10644*x10654))+((r20*x10655)));
evalcond[2]=((1.0)+(((-1.0)*x10647*x10654))+((r10*x10655)));
evalcond[3]=((((-1.0)*x10646))+((cj1*cj2))+(((-1.0)*cj3*x10657)));
evalcond[4]=((((-1.0)*sj3*x10657))+(((-1.0)*x10658)));
evalcond[5]=(((r11*x10642*x10649))+(((-1.0)*r10*x10645*x10653))+((r10*x10650))+((r11*x10643)));
evalcond[6]=((((-1.0)*r10*x10649))+(((-1.0)*x10645*x10647))+(((-1.0)*r10*x10643*x10653))+((r11*x10656)));
evalcond[7]=(((r21*x10643))+(((-1.0)*r20*x10645*x10653))+((r20*x10650))+((r21*x10642*x10649))+(((-1.0)*x10658)));
evalcond[8]=((((-1.0)*r20*x10649))+(((-1.0)*x10644*x10645))+(((-1.0)*r20*x10643*x10653))+((r21*x10656))+x10646+(((-1.0)*cj1*x10648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10659=gconst5*gconst5;
IkReal x10660=gconst4*gconst4;
IkReal x10661=(cj3*r10);
IkReal x10662=(r11*sj3);
IkReal x10663=(r10*sj3);
IkReal x10664=(cj3*r11);
IkReal x10665=(r21*x10660);
IkReal x10666=(gconst4*gconst5*r20);
IkReal x10667=(r20*x10659);
IkReal x10668=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x10669=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x10664*x10665))+(((-1.0)*x10661*x10668))+((x10661*x10667))+(((-1.0)*x10664*x10666)))),-1);
if(!x10669.valid){
continue;
}
CheckValue<IkReal> x10670 = IKatan2WithCheck(IkReal((((gconst5*r22*x10662))+((gconst4*r22*x10663)))),IkReal(((((-1.0)*x10663*x10665))+((x10663*x10666))+(((-1.0)*x10662*x10668))+((x10662*x10667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10669.value)))+(x10670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10671=IKsin(j4);
IkReal x10672=IKcos(j4);
IkReal x10673=((1.0)*sj2);
IkReal x10674=(gconst5*sj3);
IkReal x10675=(gconst4*r21);
IkReal x10676=(cj3*r10);
IkReal x10677=(gconst4*r11);
IkReal x10678=((1.0)*cj2);
IkReal x10679=((1.0)*gconst4);
IkReal x10680=(cj3*r00);
IkReal x10681=(gconst4*r01);
IkReal x10682=(gconst4*sj3);
IkReal x10683=(cj3*r20);
IkReal x10684=(cj1*x10673);
IkReal x10685=(sj1*x10678);
IkReal x10686=((1.0)*x10672);
IkReal x10687=((1.0)*x10671);
IkReal x10688=(sj3*x10672);
IkReal x10689=(gconst5*x10671);
IkReal x10690=(cj3*x10672);
IkReal x10691=((1.0)*cj3*gconst5);
IkReal x10692=(x10684+x10685);
evalcond[0]=((((-1.0)*r22*x10686))+(((-1.0)*x10675*x10687))+((r20*x10689)));
evalcond[1]=((((-1.0)*r02*x10686))+((r00*x10689))+(((-1.0)*r01*x10671*x10679)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10686))+(((-1.0)*x10677*x10687))+((r10*x10689)));
evalcond[3]=(((r11*x10674))+(((-1.0)*gconst5*x10676*x10686))+(((-1.0)*cj3*r12*x10687))+((r10*x10682))+((x10677*x10690)));
evalcond[4]=((((-1.0)*x10676*x10679))+(((-1.0)*r11*x10691))+(((-1.0)*r12*sj3*x10687))+((x10677*x10688))+(((-1.0)*r10*x10674*x10686)));
evalcond[5]=((((-1.0)*sj1*x10673))+((r01*x10674))+((r00*x10682))+(((-1.0)*gconst5*x10680*x10686))+((x10681*x10690))+((cj1*cj2))+(((-1.0)*cj3*r02*x10687)));
evalcond[6]=((((-1.0)*x10692))+((r20*x10682))+((x10675*x10690))+(((-1.0)*cj3*r22*x10687))+(((-1.0)*gconst5*x10683*x10686))+((r21*x10674)));
evalcond[7]=((((-1.0)*x10679*x10683))+(((-1.0)*r22*sj3*x10687))+((sj1*sj2))+(((-1.0)*r21*x10691))+(((-1.0)*cj1*x10678))+(((-1.0)*r20*x10674*x10686))+((x10675*x10688)));
evalcond[8]=((((-1.0)*r00*x10674*x10686))+((x10681*x10688))+(((-1.0)*x10692))+(((-1.0)*x10679*x10680))+(((-1.0)*r01*x10691))+(((-1.0)*r02*sj3*x10687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10693=((1.0)*gconst4);
CheckValue<IkReal> x10694=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x10693))+(((-1.0)*gconst5*r21)))),-1);
if(!x10694.valid){
continue;
}
CheckValue<IkReal> x10695 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x10693))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10694.value)))+(x10695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10696=IKsin(j4);
IkReal x10697=IKcos(j4);
IkReal x10698=((1.0)*sj2);
IkReal x10699=(gconst5*sj3);
IkReal x10700=(gconst4*r21);
IkReal x10701=(cj3*r10);
IkReal x10702=(gconst4*r11);
IkReal x10703=((1.0)*cj2);
IkReal x10704=((1.0)*gconst4);
IkReal x10705=(cj3*r00);
IkReal x10706=(gconst4*r01);
IkReal x10707=(gconst4*sj3);
IkReal x10708=(cj3*r20);
IkReal x10709=(cj1*x10698);
IkReal x10710=(sj1*x10703);
IkReal x10711=((1.0)*x10697);
IkReal x10712=((1.0)*x10696);
IkReal x10713=(sj3*x10697);
IkReal x10714=(gconst5*x10696);
IkReal x10715=(cj3*x10697);
IkReal x10716=((1.0)*cj3*gconst5);
IkReal x10717=(x10709+x10710);
evalcond[0]=((((-1.0)*x10700*x10712))+((r20*x10714))+(((-1.0)*r22*x10711)));
evalcond[1]=((((-1.0)*r01*x10696*x10704))+((r00*x10714))+(((-1.0)*r02*x10711)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10711))+(((-1.0)*x10702*x10712))+((r10*x10714)));
evalcond[3]=((((-1.0)*gconst5*x10701*x10711))+((r11*x10699))+((r10*x10707))+((x10702*x10715))+(((-1.0)*cj3*r12*x10712)));
evalcond[4]=((((-1.0)*r11*x10716))+(((-1.0)*r10*x10699*x10711))+(((-1.0)*r12*sj3*x10712))+((x10702*x10713))+(((-1.0)*x10701*x10704)));
evalcond[5]=(((r00*x10707))+(((-1.0)*gconst5*x10705*x10711))+((cj1*cj2))+(((-1.0)*sj1*x10698))+((r01*x10699))+(((-1.0)*cj3*r02*x10712))+((x10706*x10715)));
evalcond[6]=(((r21*x10699))+(((-1.0)*cj3*r22*x10712))+((x10700*x10715))+(((-1.0)*x10717))+((r20*x10707))+(((-1.0)*gconst5*x10708*x10711)));
evalcond[7]=((((-1.0)*r21*x10716))+(((-1.0)*r20*x10699*x10711))+((x10700*x10713))+(((-1.0)*x10704*x10708))+((sj1*sj2))+(((-1.0)*r22*sj3*x10712))+(((-1.0)*cj1*x10703)));
evalcond[8]=((((-1.0)*x10704*x10705))+(((-1.0)*r01*x10716))+(((-1.0)*r02*sj3*x10712))+(((-1.0)*x10717))+(((-1.0)*r00*x10699*x10711))+((x10706*x10713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10718 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10718.valid){
continue;
}
CheckValue<IkReal> x10719=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10718.value)+(((1.5707963267949)*(x10719.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10720=IKsin(j4);
IkReal x10721=IKcos(j4);
IkReal x10722=((1.0)*sj2);
IkReal x10723=(gconst5*sj3);
IkReal x10724=(gconst4*r21);
IkReal x10725=(cj3*r10);
IkReal x10726=(gconst4*r11);
IkReal x10727=((1.0)*cj2);
IkReal x10728=((1.0)*gconst4);
IkReal x10729=(cj3*r00);
IkReal x10730=(gconst4*r01);
IkReal x10731=(gconst4*sj3);
IkReal x10732=(cj3*r20);
IkReal x10733=(cj1*x10722);
IkReal x10734=(sj1*x10727);
IkReal x10735=((1.0)*x10721);
IkReal x10736=((1.0)*x10720);
IkReal x10737=(sj3*x10721);
IkReal x10738=(gconst5*x10720);
IkReal x10739=(cj3*x10721);
IkReal x10740=((1.0)*cj3*gconst5);
IkReal x10741=(x10734+x10733);
evalcond[0]=((((-1.0)*x10724*x10736))+(((-1.0)*r22*x10735))+((r20*x10738)));
evalcond[1]=((((-1.0)*r02*x10735))+(((-1.0)*r01*x10720*x10728))+((r00*x10738)));
evalcond[2]=((1.0)+((r10*x10738))+(((-1.0)*x10726*x10736))+(((-1.0)*r12*x10735)));
evalcond[3]=(((r10*x10731))+(((-1.0)*gconst5*x10725*x10735))+((x10726*x10739))+(((-1.0)*cj3*r12*x10736))+((r11*x10723)));
evalcond[4]=((((-1.0)*r12*sj3*x10736))+(((-1.0)*r10*x10723*x10735))+((x10726*x10737))+(((-1.0)*r11*x10740))+(((-1.0)*x10725*x10728)));
evalcond[5]=((((-1.0)*cj3*r02*x10736))+((x10730*x10739))+(((-1.0)*gconst5*x10729*x10735))+(((-1.0)*sj1*x10722))+((r01*x10723))+((cj1*cj2))+((r00*x10731)));
evalcond[6]=(((r21*x10723))+((x10724*x10739))+(((-1.0)*gconst5*x10732*x10735))+((r20*x10731))+(((-1.0)*x10741))+(((-1.0)*cj3*r22*x10736)));
evalcond[7]=((((-1.0)*r20*x10723*x10735))+(((-1.0)*r22*sj3*x10736))+((x10724*x10737))+((sj1*sj2))+(((-1.0)*cj1*x10727))+(((-1.0)*r21*x10740))+(((-1.0)*x10728*x10732)));
evalcond[8]=(((x10730*x10737))+(((-1.0)*r01*x10740))+(((-1.0)*r02*sj3*x10736))+(((-1.0)*x10728*x10729))+(((-1.0)*x10741))+(((-1.0)*r00*x10723*x10735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10744 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10744.valid){
continue;
}
IkReal x10742=((1.0)*(x10744.value));
IkReal x10743=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10742)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10742)));
IkReal gconst4=((1.0)*r21*x10743);
IkReal gconst5=((-1.0)*r20*x10743);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10747 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10747.valid){
continue;
}
IkReal x10745=((1.0)*(x10747.value));
IkReal x10746=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10745)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10745)));
IkReal gconst4=((1.0)*r21*x10746);
IkReal gconst5=((-1.0)*r20*x10746);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x10750 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10750.valid){
continue;
}
IkReal x10748=((1.0)*(x10750.value));
IkReal x10749=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10748)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10748)));
IkReal gconst4=((1.0)*r21*x10749);
IkReal gconst5=((-1.0)*r20*x10749);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10753 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10753.valid){
continue;
}
IkReal x10751=((1.0)*(x10753.value));
IkReal x10752=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10751)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10751)));
IkReal gconst4=((1.0)*r21*x10752);
IkReal gconst5=((-1.0)*r20*x10752);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10756 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10756.valid){
continue;
}
IkReal x10754=((1.0)*(x10756.value));
IkReal x10755=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10754)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10754)));
IkReal gconst4=((1.0)*r21*x10755);
IkReal gconst5=((-1.0)*r20*x10755);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10759 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10759.valid){
continue;
}
IkReal x10757=((1.0)*(x10759.value));
IkReal x10758=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10757)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10757)));
IkReal gconst4=((1.0)*r21*x10758);
IkReal gconst5=((-1.0)*r20*x10758);
IkReal x10760=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10764=IKPowWithIntegerCheck(x10760,-1);
if(!x10764.valid){
continue;
}
IkReal x10761=x10764.value;
IkReal x10762=((1.0)*x10761);
IkReal x10763=((((-1.0)*x10762*(r11*r11)*(r21*r21)))+(((-1.0)*x10762*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10761))+(((-1.0)*(r12*r12))));
j4eval[0]=x10763;
j4eval[1]=r12;
j4eval[2]=x10760;
j4eval[3]=IKsign(x10763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10765=(gconst5*r10);
IkReal x10766=(gconst4*r11);
CheckValue<IkReal> x10767=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10766*x10766)))+(((-1.0)*(x10765*x10765)))+(((-1.0)*(r12*r12)))+(((2.0)*x10765*x10766)))),-1);
if(!x10767.valid){
continue;
}
CheckValue<IkReal> x10768 = IKatan2WithCheck(IkReal(((((-1.0)*x10765))+x10766)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10767.value)))+(x10768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10769=IKsin(j4);
IkReal x10770=IKcos(j4);
IkReal x10771=(gconst4*r21);
IkReal x10772=(gconst5*r10);
IkReal x10773=(gconst4*r11);
IkReal x10774=(gconst4*r01);
IkReal x10775=((1.0)*x10770);
IkReal x10776=((1.0)*x10769);
IkReal x10777=(gconst5*x10769);
evalcond[0]=(((r20*x10777))+(((-1.0)*r22*x10775))+(((-1.0)*x10771*x10776)));
evalcond[1]=((((-1.0)*r02*x10775))+((r00*x10777))+(((-1.0)*x10774*x10776)));
evalcond[2]=((((-1.0)*r12*x10776))+(((-1.0)*x10772*x10775))+((x10770*x10773)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10775))+(((-1.0)*x10773*x10776))+((x10769*x10772)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x10776))+((cj1*sj2))+(((-1.0)*gconst5*r00*x10775))+((x10770*x10774)));
evalcond[5]=((((-1.0)*gconst5*r20*x10775))+(((-1.0)*cj1*cj2))+(((-1.0)*r22*x10776))+((sj1*sj2))+((x10770*x10771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10778=((1.0)*gconst4);
CheckValue<IkReal> x10779=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10778))+(((-1.0)*gconst5*r01)))),-1);
if(!x10779.valid){
continue;
}
CheckValue<IkReal> x10780 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10778))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10779.value)))+(x10780.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10781=IKsin(j4);
IkReal x10782=IKcos(j4);
IkReal x10783=(gconst4*r21);
IkReal x10784=(gconst5*r10);
IkReal x10785=(gconst4*r11);
IkReal x10786=(gconst4*r01);
IkReal x10787=((1.0)*x10782);
IkReal x10788=((1.0)*x10781);
IkReal x10789=(gconst5*x10781);
evalcond[0]=((((-1.0)*x10783*x10788))+((r20*x10789))+(((-1.0)*r22*x10787)));
evalcond[1]=(((r00*x10789))+(((-1.0)*x10786*x10788))+(((-1.0)*r02*x10787)));
evalcond[2]=(((x10782*x10785))+(((-1.0)*x10784*x10787))+(((-1.0)*r12*x10788)));
evalcond[3]=((-1.0)+(((-1.0)*x10785*x10788))+(((-1.0)*r12*x10787))+((x10781*x10784)));
evalcond[4]=(((cj2*sj1))+((x10782*x10786))+((cj1*sj2))+(((-1.0)*gconst5*r00*x10787))+(((-1.0)*r02*x10788)));
evalcond[5]=(((x10782*x10783))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10787))+(((-1.0)*r22*x10788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10790 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10790.valid){
continue;
}
CheckValue<IkReal> x10791=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10790.value)+(((1.5707963267949)*(x10791.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10792=IKsin(j4);
IkReal x10793=IKcos(j4);
IkReal x10794=(gconst4*r21);
IkReal x10795=(gconst5*r10);
IkReal x10796=(gconst4*r11);
IkReal x10797=(gconst4*r01);
IkReal x10798=((1.0)*x10793);
IkReal x10799=((1.0)*x10792);
IkReal x10800=(gconst5*x10792);
evalcond[0]=(((r20*x10800))+(((-1.0)*r22*x10798))+(((-1.0)*x10794*x10799)));
evalcond[1]=((((-1.0)*r02*x10798))+((r00*x10800))+(((-1.0)*x10797*x10799)));
evalcond[2]=((((-1.0)*r12*x10799))+(((-1.0)*x10795*x10798))+((x10793*x10796)));
evalcond[3]=((-1.0)+((x10792*x10795))+(((-1.0)*x10796*x10799))+(((-1.0)*r12*x10798)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst5*r00*x10798))+(((-1.0)*r02*x10799))+((cj1*sj2))+((x10793*x10797)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x10798))+((x10793*x10794))+(((-1.0)*r22*x10799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10803 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10803.valid){
continue;
}
IkReal x10801=((1.0)*(x10803.value));
IkReal x10802=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10801)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10801)));
IkReal gconst4=((1.0)*r21*x10802);
IkReal gconst5=((-1.0)*r20*x10802);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10806 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10806.valid){
continue;
}
IkReal x10804=((1.0)*(x10806.value));
IkReal x10805=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10804)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10804)));
IkReal gconst4=((1.0)*r21*x10805);
IkReal gconst5=((-1.0)*r20*x10805);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10809 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10809.valid){
continue;
}
IkReal x10807=((1.0)*(x10809.value));
IkReal x10808=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10807)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10807)));
IkReal gconst4=((1.0)*r21*x10808);
IkReal gconst5=((-1.0)*r20*x10808);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10810=(gconst5*r10);
IkReal x10811=(gconst4*r11);
CheckValue<IkReal> x10812 = IKatan2WithCheck(IkReal(((((-1.0)*x10811))+x10810)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10812.valid){
continue;
}
CheckValue<IkReal> x10813=IKPowWithIntegerCheck(IKsign(((x10811*x10811)+(r12*r12)+(x10810*x10810)+(((-2.0)*x10810*x10811)))),-1);
if(!x10813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10812.value)+(((1.5707963267949)*(x10813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10814=IKcos(j4);
IkReal x10815=IKsin(j4);
IkReal x10816=((1.0)*x10814);
IkReal x10817=(gconst5*x10815);
IkReal x10818=(gconst5*x10814);
IkReal x10819=((1.0)*gconst4*x10815);
evalcond[0]=((((-1.0)*gconst4*r11*x10816))+((r10*x10818))+((r12*x10815)));
evalcond[1]=(((r20*x10817))+(((-1.0)*r21*x10819))+(((-1.0)*r22*x10816)));
evalcond[2]=((((-1.0)*r02*x10816))+(((-1.0)*r01*x10819))+((r00*x10817)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10819))+(((-1.0)*r12*x10816))+((r10*x10817)));
evalcond[4]=(((cj2*sj1))+((r02*x10815))+((cj1*sj2))+(((-1.0)*gconst4*r01*x10816))+((r00*x10818)));
evalcond[5]=(((r22*x10815))+(((-1.0)*gconst4*r21*x10816))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10820=((1.0)*gconst4);
CheckValue<IkReal> x10821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10820))+(((-1.0)*gconst5*r01)))),-1);
if(!x10821.valid){
continue;
}
CheckValue<IkReal> x10822 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x10820)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10821.value)))+(x10822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10823=IKcos(j4);
IkReal x10824=IKsin(j4);
IkReal x10825=((1.0)*x10823);
IkReal x10826=(gconst5*x10824);
IkReal x10827=(gconst5*x10823);
IkReal x10828=((1.0)*gconst4*x10824);
evalcond[0]=(((r12*x10824))+(((-1.0)*gconst4*r11*x10825))+((r10*x10827)));
evalcond[1]=(((r20*x10826))+(((-1.0)*r21*x10828))+(((-1.0)*r22*x10825)));
evalcond[2]=((((-1.0)*r02*x10825))+(((-1.0)*r01*x10828))+((r00*x10826)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10825))+(((-1.0)*r11*x10828))+((r10*x10826)));
evalcond[4]=(((cj2*sj1))+((r02*x10824))+((cj1*sj2))+(((-1.0)*gconst4*r01*x10825))+((r00*x10827)));
evalcond[5]=((((-1.0)*gconst4*r21*x10825))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10827))+((r22*x10824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10829 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10829.valid){
continue;
}
CheckValue<IkReal> x10830=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10829.value)+(((1.5707963267949)*(x10830.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10831=IKcos(j4);
IkReal x10832=IKsin(j4);
IkReal x10833=((1.0)*x10831);
IkReal x10834=(gconst5*x10832);
IkReal x10835=(gconst5*x10831);
IkReal x10836=((1.0)*gconst4*x10832);
evalcond[0]=(((r10*x10835))+((r12*x10832))+(((-1.0)*gconst4*r11*x10833)));
evalcond[1]=((((-1.0)*r21*x10836))+((r20*x10834))+(((-1.0)*r22*x10833)));
evalcond[2]=((((-1.0)*r01*x10836))+((r00*x10834))+(((-1.0)*r02*x10833)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10836))+((r10*x10834))+(((-1.0)*r12*x10833)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10832))+(((-1.0)*gconst4*r01*x10833))+((r00*x10835)));
evalcond[5]=(((r22*x10832))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x10835))+(((-1.0)*gconst4*r21*x10833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10839 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10839.valid){
continue;
}
IkReal x10837=((1.0)*(x10839.value));
IkReal x10838=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10837)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10837)));
IkReal gconst4=((1.0)*r21*x10838);
IkReal gconst5=((-1.0)*r20*x10838);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10842 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10842.valid){
continue;
}
IkReal x10840=((1.0)*(x10842.value));
IkReal x10841=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10840)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10840)));
IkReal gconst4=((1.0)*r21*x10841);
IkReal gconst5=((-1.0)*r20*x10841);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x10845 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10845.valid){
continue;
}
IkReal x10843=((1.0)*(x10845.value));
IkReal x10844=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10843)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10843)));
IkReal gconst4=((1.0)*r21*x10844);
IkReal gconst5=((-1.0)*r20*x10844);
IkReal x10846=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10850=IKPowWithIntegerCheck(x10846,-1);
if(!x10850.valid){
continue;
}
IkReal x10847=x10850.value;
IkReal x10848=((1.0)*x10847);
IkReal x10849=((((-2.0)*r10*r11*r20*r21*x10847))+(((-1.0)*x10848*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10848*(r10*r10)*(r20*r20))));
j4eval[0]=x10849;
j4eval[1]=r12;
j4eval[2]=x10846;
j4eval[3]=IKsign(x10849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10851=(gconst5*r10);
IkReal x10852=(gconst4*r11);
CheckValue<IkReal> x10853=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10852*x10852)))+(((2.0)*x10851*x10852))+(((-1.0)*(r12*r12)))+(((-1.0)*(x10851*x10851))))),-1);
if(!x10853.valid){
continue;
}
CheckValue<IkReal> x10854 = IKatan2WithCheck(IkReal(((((-1.0)*x10851))+x10852)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10853.value)))+(x10854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10855=IKsin(j4);
IkReal x10856=IKcos(j4);
IkReal x10857=(gconst4*r21);
IkReal x10858=(gconst5*r10);
IkReal x10859=((1.0)*cj2);
IkReal x10860=(gconst4*r11);
IkReal x10861=(gconst4*r01);
IkReal x10862=((1.0)*x10856);
IkReal x10863=((1.0)*x10855);
IkReal x10864=(gconst5*x10855);
evalcond[0]=((((-1.0)*r22*x10862))+((r20*x10864))+(((-1.0)*x10857*x10863)));
evalcond[1]=((((-1.0)*x10861*x10863))+((r00*x10864))+(((-1.0)*r02*x10862)));
evalcond[2]=((((-1.0)*r12*x10863))+(((-1.0)*x10858*x10862))+((x10856*x10860)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10862))+((x10855*x10858))+(((-1.0)*x10860*x10863)));
evalcond[4]=((((-1.0)*gconst5*r00*x10862))+((x10856*x10861))+((sj1*sj2))+(((-1.0)*r02*x10863))+(((-1.0)*cj1*x10859)));
evalcond[5]=((((-1.0)*r22*x10863))+((x10856*x10857))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x10862))+(((-1.0)*sj1*x10859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10865=((1.0)*gconst4);
CheckValue<IkReal> x10866 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10865))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10866.valid){
continue;
}
CheckValue<IkReal> x10867=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10865))+(((-1.0)*gconst5*r01)))),-1);
if(!x10867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10866.value)+(((1.5707963267949)*(x10867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10868=IKsin(j4);
IkReal x10869=IKcos(j4);
IkReal x10870=(gconst4*r21);
IkReal x10871=(gconst5*r10);
IkReal x10872=((1.0)*cj2);
IkReal x10873=(gconst4*r11);
IkReal x10874=(gconst4*r01);
IkReal x10875=((1.0)*x10869);
IkReal x10876=((1.0)*x10868);
IkReal x10877=(gconst5*x10868);
evalcond[0]=((((-1.0)*r22*x10875))+(((-1.0)*x10870*x10876))+((r20*x10877)));
evalcond[1]=((((-1.0)*x10874*x10876))+(((-1.0)*r02*x10875))+((r00*x10877)));
evalcond[2]=((((-1.0)*r12*x10876))+(((-1.0)*x10871*x10875))+((x10869*x10873)));
evalcond[3]=((-1.0)+(((-1.0)*x10873*x10876))+(((-1.0)*r12*x10875))+((x10868*x10871)));
evalcond[4]=((((-1.0)*gconst5*r00*x10875))+((sj1*sj2))+(((-1.0)*r02*x10876))+(((-1.0)*cj1*x10872))+((x10869*x10874)));
evalcond[5]=((((-1.0)*r22*x10876))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x10875))+(((-1.0)*sj1*x10872))+((x10869*x10870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10878 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10878.valid){
continue;
}
CheckValue<IkReal> x10879=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10878.value)+(((1.5707963267949)*(x10879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10880=IKsin(j4);
IkReal x10881=IKcos(j4);
IkReal x10882=(gconst4*r21);
IkReal x10883=(gconst5*r10);
IkReal x10884=((1.0)*cj2);
IkReal x10885=(gconst4*r11);
IkReal x10886=(gconst4*r01);
IkReal x10887=((1.0)*x10881);
IkReal x10888=((1.0)*x10880);
IkReal x10889=(gconst5*x10880);
evalcond[0]=((((-1.0)*x10882*x10888))+(((-1.0)*r22*x10887))+((r20*x10889)));
evalcond[1]=(((r00*x10889))+(((-1.0)*r02*x10887))+(((-1.0)*x10886*x10888)));
evalcond[2]=(((x10881*x10885))+(((-1.0)*x10883*x10887))+(((-1.0)*r12*x10888)));
evalcond[3]=((-1.0)+((x10880*x10883))+(((-1.0)*x10885*x10888))+(((-1.0)*r12*x10887)));
evalcond[4]=((((-1.0)*cj1*x10884))+(((-1.0)*r02*x10888))+((x10881*x10886))+((sj1*sj2))+(((-1.0)*gconst5*r00*x10887)));
evalcond[5]=((((-1.0)*sj1*x10884))+(((-1.0)*gconst5*r20*x10887))+((x10881*x10882))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x10888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x10892 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10892.valid){
continue;
}
IkReal x10890=((1.0)*(x10892.value));
IkReal x10891=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10890)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10890)));
IkReal gconst4=((1.0)*r21*x10891);
IkReal gconst5=((-1.0)*r20*x10891);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x10895 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10895.valid){
continue;
}
IkReal x10893=((1.0)*(x10895.value));
IkReal x10894=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10893)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10893)));
IkReal gconst4=((1.0)*r21*x10894);
IkReal gconst5=((-1.0)*r20*x10894);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
IkReal x10896=((1.0)*(x10898.value));
IkReal x10897=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10896)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10896)));
IkReal gconst4=((1.0)*r21*x10897);
IkReal gconst5=((-1.0)*r20*x10897);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10899=(gconst5*r10);
IkReal x10900=(gconst4*r11);
CheckValue<IkReal> x10901=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10899*x10899)+(((-2.0)*x10899*x10900))+(x10900*x10900))),-1);
if(!x10901.valid){
continue;
}
CheckValue<IkReal> x10902 = IKatan2WithCheck(IkReal(((((-1.0)*x10900))+x10899)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10901.value)))+(x10902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10903=IKcos(j4);
IkReal x10904=IKsin(j4);
IkReal x10905=((1.0)*cj2);
IkReal x10906=((1.0)*x10903);
IkReal x10907=(gconst5*x10904);
IkReal x10908=(gconst5*x10903);
IkReal x10909=((1.0)*gconst4*x10904);
evalcond[0]=(((r12*x10904))+(((-1.0)*gconst4*r11*x10906))+((r10*x10908)));
evalcond[1]=((((-1.0)*r21*x10909))+(((-1.0)*r22*x10906))+((r20*x10907)));
evalcond[2]=((((-1.0)*r01*x10909))+((r00*x10907))+(((-1.0)*r02*x10906)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x10909))+(((-1.0)*r12*x10906))+((r10*x10907)));
evalcond[4]=((((-1.0)*cj1*x10905))+((sj1*sj2))+((r00*x10908))+(((-1.0)*gconst4*r01*x10906))+((r02*x10904)));
evalcond[5]=(((r22*x10904))+(((-1.0)*gconst4*r21*x10906))+(((-1.0)*cj1*sj2))+((r20*x10908))+(((-1.0)*sj1*x10905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10910=((1.0)*gconst4);
CheckValue<IkReal> x10911 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10910))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10911.valid){
continue;
}
CheckValue<IkReal> x10912=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10910))+(((-1.0)*gconst5*r01)))),-1);
if(!x10912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10911.value)+(((1.5707963267949)*(x10912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10913=IKcos(j4);
IkReal x10914=IKsin(j4);
IkReal x10915=((1.0)*cj2);
IkReal x10916=((1.0)*x10913);
IkReal x10917=(gconst5*x10914);
IkReal x10918=(gconst5*x10913);
IkReal x10919=((1.0)*gconst4*x10914);
evalcond[0]=((((-1.0)*gconst4*r11*x10916))+((r12*x10914))+((r10*x10918)));
evalcond[1]=((((-1.0)*r22*x10916))+(((-1.0)*r21*x10919))+((r20*x10917)));
evalcond[2]=((((-1.0)*r02*x10916))+((r00*x10917))+(((-1.0)*r01*x10919)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10916))+(((-1.0)*r11*x10919))+((r10*x10917)));
evalcond[4]=((((-1.0)*cj1*x10915))+((sj1*sj2))+((r02*x10914))+((r00*x10918))+(((-1.0)*gconst4*r01*x10916)));
evalcond[5]=((((-1.0)*sj1*x10915))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x10916))+((r22*x10914))+((r20*x10918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10920 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10920.valid){
continue;
}
CheckValue<IkReal> x10921=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10920.value)+(((1.5707963267949)*(x10921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10922=IKcos(j4);
IkReal x10923=IKsin(j4);
IkReal x10924=((1.0)*cj2);
IkReal x10925=((1.0)*x10922);
IkReal x10926=(gconst5*x10923);
IkReal x10927=(gconst5*x10922);
IkReal x10928=((1.0)*gconst4*x10923);
evalcond[0]=(((r10*x10927))+((r12*x10923))+(((-1.0)*gconst4*r11*x10925)));
evalcond[1]=((((-1.0)*r22*x10925))+(((-1.0)*r21*x10928))+((r20*x10926)));
evalcond[2]=((((-1.0)*r02*x10925))+((r00*x10926))+(((-1.0)*r01*x10928)));
evalcond[3]=((-1.0)+((r10*x10926))+(((-1.0)*r11*x10928))+(((-1.0)*r12*x10925)));
evalcond[4]=((((-1.0)*gconst4*r01*x10925))+((r02*x10923))+(((-1.0)*cj1*x10924))+((sj1*sj2))+((r00*x10927)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x10925))+((r22*x10923))+((r20*x10927))+(((-1.0)*sj1*x10924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10929=gconst5*gconst5;
IkReal x10930=gconst4*gconst4;
IkReal x10931=(cj3*r10);
IkReal x10932=(r11*sj3);
IkReal x10933=(r10*sj3);
IkReal x10934=(cj3*r11);
IkReal x10935=(r21*x10930);
IkReal x10936=(gconst4*gconst5*r20);
IkReal x10937=(r20*x10929);
IkReal x10938=((1.0)*gconst4*gconst5*r21);
CheckValue<IkReal> x10939 = IKatan2WithCheck(IkReal((((gconst4*r22*x10933))+((gconst5*r22*x10932)))),IkReal((((x10933*x10936))+((x10932*x10937))+(((-1.0)*x10932*x10938))+(((-1.0)*x10933*x10935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10939.valid){
continue;
}
CheckValue<IkReal> x10940=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x10931*x10937))+(((-1.0)*x10931*x10938))+(((-1.0)*x10934*x10936))+((x10934*x10935)))),-1);
if(!x10940.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10939.value)+(((1.5707963267949)*(x10940.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10941=IKsin(j4);
IkReal x10942=IKcos(j4);
IkReal x10943=(sj1*sj2);
IkReal x10944=(cj3*gconst5);
IkReal x10945=((1.0)*cj1);
IkReal x10946=(gconst5*sj3);
IkReal x10947=(gconst4*r21);
IkReal x10948=(gconst4*r11);
IkReal x10949=(gconst4*r01);
IkReal x10950=(cj2*sj1);
IkReal x10951=(gconst4*r10);
IkReal x10952=((1.0)*cj3);
IkReal x10953=(gconst4*r00);
IkReal x10954=(gconst4*r20);
IkReal x10955=(cj2*x10945);
IkReal x10956=((1.0)*x10942);
IkReal x10957=((1.0)*x10941);
IkReal x10958=(sj3*x10942);
IkReal x10959=(gconst5*x10941);
IkReal x10960=(cj3*x10942);
evalcond[0]=((((-1.0)*x10947*x10957))+(((-1.0)*r22*x10956))+((r20*x10959)));
evalcond[1]=(((r00*x10959))+(((-1.0)*x10949*x10957))+(((-1.0)*r02*x10956)));
evalcond[2]=((-1.0)+(((-1.0)*x10948*x10957))+((r10*x10959))+(((-1.0)*r12*x10956)));
evalcond[3]=(((x10948*x10960))+(((-1.0)*r12*x10941*x10952))+((sj3*x10951))+((r11*x10946))+(((-1.0)*r10*x10944*x10956)));
evalcond[4]=((((-1.0)*r11*x10944))+(((-1.0)*r12*sj3*x10957))+(((-1.0)*r10*x10946*x10956))+(((-1.0)*x10951*x10952))+((x10948*x10958)));
evalcond[5]=(((sj3*x10953))+(((-1.0)*r02*x10941*x10952))+(((-1.0)*r00*x10944*x10956))+((r01*x10946))+((x10949*x10960))+(((-1.0)*x10955))+x10943);
evalcond[6]=(((r21*x10946))+((sj3*x10954))+(((-1.0)*r20*x10944*x10956))+(((-1.0)*r22*x10941*x10952))+(((-1.0)*sj2*x10945))+(((-1.0)*x10950))+((x10947*x10960)));
evalcond[7]=(((cj1*sj2))+((x10949*x10958))+(((-1.0)*r00*x10946*x10956))+(((-1.0)*r02*sj3*x10957))+(((-1.0)*x10952*x10953))+(((-1.0)*r01*x10944))+x10950);
evalcond[8]=((((-1.0)*r20*x10946*x10956))+(((-1.0)*r21*x10944))+(((-1.0)*r22*sj3*x10957))+((x10947*x10958))+(((-1.0)*x10955))+(((-1.0)*x10952*x10954))+x10943);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10961=((1.0)*gconst4);
CheckValue<IkReal> x10962 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x10961))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10962.valid){
continue;
}
CheckValue<IkReal> x10963=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x10961))+(((-1.0)*gconst5*r01)))),-1);
if(!x10963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10962.value)+(((1.5707963267949)*(x10963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10964=IKsin(j4);
IkReal x10965=IKcos(j4);
IkReal x10966=(sj1*sj2);
IkReal x10967=(cj3*gconst5);
IkReal x10968=((1.0)*cj1);
IkReal x10969=(gconst5*sj3);
IkReal x10970=(gconst4*r21);
IkReal x10971=(gconst4*r11);
IkReal x10972=(gconst4*r01);
IkReal x10973=(cj2*sj1);
IkReal x10974=(gconst4*r10);
IkReal x10975=((1.0)*cj3);
IkReal x10976=(gconst4*r00);
IkReal x10977=(gconst4*r20);
IkReal x10978=(cj2*x10968);
IkReal x10979=((1.0)*x10965);
IkReal x10980=((1.0)*x10964);
IkReal x10981=(sj3*x10965);
IkReal x10982=(gconst5*x10964);
IkReal x10983=(cj3*x10965);
evalcond[0]=((((-1.0)*x10970*x10980))+(((-1.0)*r22*x10979))+((r20*x10982)));
evalcond[1]=(((r00*x10982))+(((-1.0)*x10972*x10980))+(((-1.0)*r02*x10979)));
evalcond[2]=((-1.0)+(((-1.0)*x10971*x10980))+((r10*x10982))+(((-1.0)*r12*x10979)));
evalcond[3]=(((r11*x10969))+((sj3*x10974))+((x10971*x10983))+(((-1.0)*r10*x10967*x10979))+(((-1.0)*r12*x10964*x10975)));
evalcond[4]=((((-1.0)*r10*x10969*x10979))+((x10971*x10981))+(((-1.0)*x10974*x10975))+(((-1.0)*r12*sj3*x10980))+(((-1.0)*r11*x10967)));
evalcond[5]=(((sj3*x10976))+((r01*x10969))+((x10972*x10983))+(((-1.0)*r00*x10967*x10979))+(((-1.0)*r02*x10964*x10975))+(((-1.0)*x10978))+x10966);
evalcond[6]=((((-1.0)*r22*x10964*x10975))+((sj3*x10977))+((x10970*x10983))+(((-1.0)*r20*x10967*x10979))+((r21*x10969))+(((-1.0)*x10973))+(((-1.0)*sj2*x10968)));
evalcond[7]=((((-1.0)*r02*sj3*x10980))+(((-1.0)*r00*x10969*x10979))+(((-1.0)*r01*x10967))+((cj1*sj2))+((x10972*x10981))+(((-1.0)*x10975*x10976))+x10973);
evalcond[8]=(((x10970*x10981))+(((-1.0)*r22*sj3*x10980))+(((-1.0)*r20*x10969*x10979))+(((-1.0)*r21*x10967))+(((-1.0)*x10978))+(((-1.0)*x10975*x10977))+x10966);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10984 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst4*r01))+((gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10984.valid){
continue;
}
CheckValue<IkReal> x10985=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10984.value)+(((1.5707963267949)*(x10985.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10986=IKsin(j4);
IkReal x10987=IKcos(j4);
IkReal x10988=(sj1*sj2);
IkReal x10989=(cj3*gconst5);
IkReal x10990=((1.0)*cj1);
IkReal x10991=(gconst5*sj3);
IkReal x10992=(gconst4*r21);
IkReal x10993=(gconst4*r11);
IkReal x10994=(gconst4*r01);
IkReal x10995=(cj2*sj1);
IkReal x10996=(gconst4*r10);
IkReal x10997=((1.0)*cj3);
IkReal x10998=(gconst4*r00);
IkReal x10999=(gconst4*r20);
IkReal x11000=(cj2*x10990);
IkReal x11001=((1.0)*x10987);
IkReal x11002=((1.0)*x10986);
IkReal x11003=(sj3*x10987);
IkReal x11004=(gconst5*x10986);
IkReal x11005=(cj3*x10987);
evalcond[0]=((((-1.0)*x10992*x11002))+(((-1.0)*r22*x11001))+((r20*x11004)));
evalcond[1]=((((-1.0)*r02*x11001))+(((-1.0)*x10994*x11002))+((r00*x11004)));
evalcond[2]=((-1.0)+(((-1.0)*x10993*x11002))+((r10*x11004))+(((-1.0)*r12*x11001)));
evalcond[3]=(((sj3*x10996))+((r11*x10991))+(((-1.0)*r10*x10989*x11001))+((x10993*x11005))+(((-1.0)*r12*x10986*x10997)));
evalcond[4]=((((-1.0)*r11*x10989))+(((-1.0)*r10*x10991*x11001))+(((-1.0)*r12*sj3*x11002))+((x10993*x11003))+(((-1.0)*x10996*x10997)));
evalcond[5]=((((-1.0)*r00*x10989*x11001))+((x10994*x11005))+((r01*x10991))+((sj3*x10998))+(((-1.0)*x11000))+(((-1.0)*r02*x10986*x10997))+x10988);
evalcond[6]=((((-1.0)*r22*x10986*x10997))+((r21*x10991))+(((-1.0)*r20*x10989*x11001))+(((-1.0)*sj2*x10990))+((sj3*x10999))+(((-1.0)*x10995))+((x10992*x11005)));
evalcond[7]=(((x10994*x11003))+(((-1.0)*x10997*x10998))+(((-1.0)*r02*sj3*x11002))+((cj1*sj2))+(((-1.0)*r01*x10989))+(((-1.0)*r00*x10991*x11001))+x10995);
evalcond[8]=((((-1.0)*x10997*x10999))+(((-1.0)*r22*sj3*x11002))+(((-1.0)*x11000))+((x10992*x11003))+(((-1.0)*r20*x10991*x11001))+x10988+(((-1.0)*r21*x10989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11008 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11008.valid){
continue;
}
IkReal x11006=((1.0)*(x11008.value));
IkReal x11007=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11006)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11006)));
IkReal gconst4=((1.0)*r21*x11007);
IkReal gconst5=((-1.0)*r20*x11007);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11011 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11011.valid){
continue;
}
IkReal x11009=((1.0)*(x11011.value));
IkReal x11010=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11009)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11009)));
IkReal gconst4=((1.0)*r21*x11010);
IkReal gconst5=((-1.0)*r20*x11010);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11014 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11014.valid){
continue;
}
IkReal x11012=((1.0)*(x11014.value));
IkReal x11013=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11012)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11012)));
IkReal gconst4=((1.0)*r21*x11013);
IkReal gconst5=((-1.0)*r20*x11013);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11017 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11017.valid){
continue;
}
IkReal x11015=((1.0)*(x11017.value));
IkReal x11016=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11015)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11015)));
IkReal gconst4=((1.0)*r21*x11016);
IkReal gconst5=((-1.0)*r20*x11016);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11020 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11020.valid){
continue;
}
IkReal x11018=((1.0)*(x11020.value));
IkReal x11019=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11018)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11018)));
IkReal gconst4=((1.0)*r21*x11019);
IkReal gconst5=((-1.0)*r20*x11019);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11023 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11023.valid){
continue;
}
IkReal x11021=((1.0)*(x11023.value));
IkReal x11022=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11021)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11021)));
IkReal gconst4=((1.0)*r21*x11022);
IkReal gconst5=((-1.0)*r20*x11022);
IkReal x11024=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11028=IKPowWithIntegerCheck(x11024,-1);
if(!x11028.valid){
continue;
}
IkReal x11025=x11028.value;
IkReal x11026=((1.0)*x11025);
IkReal x11027=((((-1.0)*x11026*(r01*r01)*(r21*r21)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11026*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11025)));
j4eval[0]=x11027;
j4eval[1]=r02;
j4eval[2]=x11024;
j4eval[3]=IKsign(x11027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11029=(gconst4*r01);
IkReal x11030=(gconst5*r00);
CheckValue<IkReal> x11031=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11029*x11029)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11030*x11030)))+(((2.0)*x11029*x11030)))),-1);
if(!x11031.valid){
continue;
}
CheckValue<IkReal> x11032 = IKatan2WithCheck(IkReal(((((-1.0)*x11030))+x11029)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11031.value)))+(x11032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11033=IKsin(j4);
IkReal x11034=IKcos(j4);
IkReal x11035=(gconst4*r21);
IkReal x11036=(gconst5*r10);
IkReal x11037=((1.0)*cj2);
IkReal x11038=(gconst4*r11);
IkReal x11039=(gconst4*r01);
IkReal x11040=((1.0)*x11034);
IkReal x11041=((1.0)*x11033);
IkReal x11042=(gconst5*x11033);
evalcond[0]=(((r20*x11042))+(((-1.0)*r22*x11040))+(((-1.0)*x11035*x11041)));
evalcond[1]=(((x11033*x11036))+(((-1.0)*r12*x11040))+(((-1.0)*x11038*x11041)));
evalcond[2]=(((x11034*x11039))+(((-1.0)*r02*x11041))+(((-1.0)*gconst5*r00*x11040)));
evalcond[3]=((-1.0)+((r00*x11042))+(((-1.0)*r02*x11040))+(((-1.0)*x11039*x11041)));
evalcond[4]=((((-1.0)*gconst5*r20*x11040))+(((-1.0)*r22*x11041))+((sj1*sj2))+((x11034*x11035))+(((-1.0)*cj1*x11037)));
evalcond[5]=((((-1.0)*sj1*x11037))+(((-1.0)*cj1*sj2))+(((-1.0)*x11036*x11040))+(((-1.0)*r12*x11041))+((x11034*x11038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11043=((1.0)*gconst4);
CheckValue<IkReal> x11044=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11043))+(((-1.0)*gconst5*r21)))),-1);
if(!x11044.valid){
continue;
}
CheckValue<IkReal> x11045 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x11043))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11044.value)))+(x11045.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11046=IKsin(j4);
IkReal x11047=IKcos(j4);
IkReal x11048=(gconst4*r21);
IkReal x11049=(gconst5*r10);
IkReal x11050=((1.0)*cj2);
IkReal x11051=(gconst4*r11);
IkReal x11052=(gconst4*r01);
IkReal x11053=((1.0)*x11047);
IkReal x11054=((1.0)*x11046);
IkReal x11055=(gconst5*x11046);
evalcond[0]=(((r20*x11055))+(((-1.0)*r22*x11053))+(((-1.0)*x11048*x11054)));
evalcond[1]=((((-1.0)*r12*x11053))+((x11046*x11049))+(((-1.0)*x11051*x11054)));
evalcond[2]=(((x11047*x11052))+(((-1.0)*gconst5*r00*x11053))+(((-1.0)*r02*x11054)));
evalcond[3]=((-1.0)+(((-1.0)*x11052*x11054))+((r00*x11055))+(((-1.0)*r02*x11053)));
evalcond[4]=((((-1.0)*gconst5*r20*x11053))+(((-1.0)*r22*x11054))+((x11047*x11048))+((sj1*sj2))+(((-1.0)*cj1*x11050)));
evalcond[5]=((((-1.0)*r12*x11054))+((x11047*x11051))+(((-1.0)*x11049*x11053))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11056=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11056.valid){
continue;
}
CheckValue<IkReal> x11057 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11056.value)))+(x11057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11058=IKsin(j4);
IkReal x11059=IKcos(j4);
IkReal x11060=(gconst4*r21);
IkReal x11061=(gconst5*r10);
IkReal x11062=((1.0)*cj2);
IkReal x11063=(gconst4*r11);
IkReal x11064=(gconst4*r01);
IkReal x11065=((1.0)*x11059);
IkReal x11066=((1.0)*x11058);
IkReal x11067=(gconst5*x11058);
evalcond[0]=((((-1.0)*r22*x11065))+((r20*x11067))+(((-1.0)*x11060*x11066)));
evalcond[1]=(((x11058*x11061))+(((-1.0)*r12*x11065))+(((-1.0)*x11063*x11066)));
evalcond[2]=((((-1.0)*r02*x11066))+(((-1.0)*gconst5*r00*x11065))+((x11059*x11064)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11065))+((r00*x11067))+(((-1.0)*x11064*x11066)));
evalcond[4]=((((-1.0)*r22*x11066))+(((-1.0)*cj1*x11062))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11065))+((x11059*x11060)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11062))+(((-1.0)*x11061*x11065))+(((-1.0)*r12*x11066))+((x11059*x11063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11070 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11070.valid){
continue;
}
IkReal x11068=((1.0)*(x11070.value));
IkReal x11069=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11068)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11068)));
IkReal gconst4=((1.0)*r21*x11069);
IkReal gconst5=((-1.0)*r20*x11069);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11073 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11073.valid){
continue;
}
IkReal x11071=((1.0)*(x11073.value));
IkReal x11072=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11071)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11071)));
IkReal gconst4=((1.0)*r21*x11072);
IkReal gconst5=((-1.0)*r20*x11072);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11076 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11076.valid){
continue;
}
IkReal x11074=((1.0)*(x11076.value));
IkReal x11075=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11074)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11074)));
IkReal gconst4=((1.0)*r21*x11075);
IkReal gconst5=((-1.0)*r20*x11075);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11077=(gconst5*r00);
IkReal x11078=(gconst4*r01);
CheckValue<IkReal> x11079=IKPowWithIntegerCheck(IKsign(((x11078*x11078)+(x11077*x11077)+(r02*r02)+(((-2.0)*x11077*x11078)))),-1);
if(!x11079.valid){
continue;
}
CheckValue<IkReal> x11080 = IKatan2WithCheck(IkReal((x11077+(((-1.0)*x11078)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11079.value)))+(x11080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11081=IKcos(j4);
IkReal x11082=IKsin(j4);
IkReal x11083=((1.0)*cj2);
IkReal x11084=((1.0)*x11081);
IkReal x11085=(gconst5*x11081);
IkReal x11086=(gconst5*x11082);
IkReal x11087=((1.0)*gconst4*x11082);
evalcond[0]=(((r00*x11085))+(((-1.0)*gconst4*r01*x11084))+((r02*x11082)));
evalcond[1]=((((-1.0)*r21*x11087))+(((-1.0)*r22*x11084))+((r20*x11086)));
evalcond[2]=(((r10*x11086))+(((-1.0)*r11*x11087))+(((-1.0)*r12*x11084)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11084))+((r00*x11086))+(((-1.0)*r01*x11087)));
evalcond[4]=((((-1.0)*gconst4*r21*x11084))+(((-1.0)*cj1*x11083))+((sj1*sj2))+((r22*x11082))+((r20*x11085)));
evalcond[5]=((((-1.0)*sj1*x11083))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x11084))+((r10*x11085))+((r12*x11082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11088=((1.0)*gconst4);
CheckValue<IkReal> x11089=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11088))+(((-1.0)*gconst5*r21)))),-1);
if(!x11089.valid){
continue;
}
CheckValue<IkReal> x11090 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x11088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11089.value)))+(x11090.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11091=IKcos(j4);
IkReal x11092=IKsin(j4);
IkReal x11093=((1.0)*cj2);
IkReal x11094=((1.0)*x11091);
IkReal x11095=(gconst5*x11091);
IkReal x11096=(gconst5*x11092);
IkReal x11097=((1.0)*gconst4*x11092);
evalcond[0]=((((-1.0)*gconst4*r01*x11094))+((r02*x11092))+((r00*x11095)));
evalcond[1]=((((-1.0)*r22*x11094))+((r20*x11096))+(((-1.0)*r21*x11097)));
evalcond[2]=((((-1.0)*r12*x11094))+(((-1.0)*r11*x11097))+((r10*x11096)));
evalcond[3]=((-1.0)+((r00*x11096))+(((-1.0)*r02*x11094))+(((-1.0)*r01*x11097)));
evalcond[4]=((((-1.0)*gconst4*r21*x11094))+(((-1.0)*cj1*x11093))+((r20*x11095))+((sj1*sj2))+((r22*x11092)));
evalcond[5]=(((r12*x11092))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r11*x11094))+(((-1.0)*sj1*x11093))+((r10*x11095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11098=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11098.valid){
continue;
}
CheckValue<IkReal> x11099 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11098.value)))+(x11099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11100=IKcos(j4);
IkReal x11101=IKsin(j4);
IkReal x11102=((1.0)*cj2);
IkReal x11103=((1.0)*x11100);
IkReal x11104=(gconst5*x11100);
IkReal x11105=(gconst5*x11101);
IkReal x11106=((1.0)*gconst4*x11101);
evalcond[0]=(((r02*x11101))+(((-1.0)*gconst4*r01*x11103))+((r00*x11104)));
evalcond[1]=((((-1.0)*r21*x11106))+(((-1.0)*r22*x11103))+((r20*x11105)));
evalcond[2]=(((r10*x11105))+(((-1.0)*r12*x11103))+(((-1.0)*r11*x11106)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11103))+(((-1.0)*r01*x11106))+((r00*x11105)));
evalcond[4]=((((-1.0)*cj1*x11102))+(((-1.0)*gconst4*r21*x11103))+((sj1*sj2))+((r20*x11104))+((r22*x11101)));
evalcond[5]=((((-1.0)*gconst4*r11*x11103))+(((-1.0)*cj1*sj2))+((r10*x11104))+(((-1.0)*sj1*x11102))+((r12*x11101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11109 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11109.valid){
continue;
}
IkReal x11107=((1.0)*(x11109.value));
IkReal x11108=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11107)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11107)));
IkReal gconst4=((1.0)*r21*x11108);
IkReal gconst5=((-1.0)*r20*x11108);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11112 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11112.valid){
continue;
}
IkReal x11110=((1.0)*(x11112.value));
IkReal x11111=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11110)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11110)));
IkReal gconst4=((1.0)*r21*x11111);
IkReal gconst5=((-1.0)*r20*x11111);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11115 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11115.valid){
continue;
}
IkReal x11113=((1.0)*(x11115.value));
IkReal x11114=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11113)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11113)));
IkReal gconst4=((1.0)*r21*x11114);
IkReal gconst5=((-1.0)*r20*x11114);
IkReal x11116=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11120=IKPowWithIntegerCheck(x11116,-1);
if(!x11120.valid){
continue;
}
IkReal x11117=x11120.value;
IkReal x11118=((1.0)*x11117);
IkReal x11119=((((-2.0)*r00*r01*r20*r21*x11117))+(((-1.0)*(r02*r02)))+(((-1.0)*x11118*(r01*r01)*(r21*r21)))+(((-1.0)*x11118*(r00*r00)*(r20*r20))));
j4eval[0]=x11119;
j4eval[1]=r02;
j4eval[2]=x11116;
j4eval[3]=IKsign(x11119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11121=(gconst4*r01);
IkReal x11122=(gconst5*r00);
CheckValue<IkReal> x11123 = IKatan2WithCheck(IkReal(((((-1.0)*x11122))+x11121)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11123.valid){
continue;
}
CheckValue<IkReal> x11124=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11121*x11121)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11122*x11122)))+(((2.0)*x11121*x11122)))),-1);
if(!x11124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11123.value)+(((1.5707963267949)*(x11124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11125=IKsin(j4);
IkReal x11126=IKcos(j4);
IkReal x11127=(gconst4*r21);
IkReal x11128=(gconst5*r10);
IkReal x11129=((1.0)*sj1);
IkReal x11130=(gconst4*r11);
IkReal x11131=(gconst4*r01);
IkReal x11132=((1.0)*x11126);
IkReal x11133=((1.0)*x11125);
IkReal x11134=(gconst5*x11125);
evalcond[0]=((((-1.0)*x11127*x11133))+(((-1.0)*r22*x11132))+((r20*x11134)));
evalcond[1]=((((-1.0)*r12*x11132))+((x11125*x11128))+(((-1.0)*x11130*x11133)));
evalcond[2]=((((-1.0)*gconst5*r00*x11132))+((x11126*x11131))+(((-1.0)*r02*x11133)));
evalcond[3]=((-1.0)+(((-1.0)*x11131*x11133))+(((-1.0)*r02*x11132))+((r00*x11134)));
evalcond[4]=(((x11126*x11130))+(((-1.0)*x11128*x11132))+(((-1.0)*r12*x11133))+((cj1*cj2))+(((-1.0)*sj2*x11129)));
evalcond[5]=((((-1.0)*cj2*x11129))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11133))+(((-1.0)*gconst5*r20*x11132))+((x11126*x11127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11135=((1.0)*gconst4);
CheckValue<IkReal> x11136 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x11135)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11136.valid){
continue;
}
CheckValue<IkReal> x11137=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11135))+(((-1.0)*gconst5*r21)))),-1);
if(!x11137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11136.value)+(((1.5707963267949)*(x11137.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11138=IKsin(j4);
IkReal x11139=IKcos(j4);
IkReal x11140=(gconst4*r21);
IkReal x11141=(gconst5*r10);
IkReal x11142=((1.0)*sj1);
IkReal x11143=(gconst4*r11);
IkReal x11144=(gconst4*r01);
IkReal x11145=((1.0)*x11139);
IkReal x11146=((1.0)*x11138);
IkReal x11147=(gconst5*x11138);
evalcond[0]=((((-1.0)*x11140*x11146))+(((-1.0)*r22*x11145))+((r20*x11147)));
evalcond[1]=(((x11138*x11141))+(((-1.0)*x11143*x11146))+(((-1.0)*r12*x11145)));
evalcond[2]=((((-1.0)*gconst5*r00*x11145))+(((-1.0)*r02*x11146))+((x11139*x11144)));
evalcond[3]=((-1.0)+((r00*x11147))+(((-1.0)*r02*x11145))+(((-1.0)*x11144*x11146)));
evalcond[4]=((((-1.0)*x11141*x11145))+((cj1*cj2))+(((-1.0)*sj2*x11142))+(((-1.0)*r12*x11146))+((x11139*x11143)));
evalcond[5]=((((-1.0)*cj2*x11142))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11146))+((x11139*x11140))+(((-1.0)*gconst5*r20*x11145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11148=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11148.valid){
continue;
}
CheckValue<IkReal> x11149 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11148.value)))+(x11149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11150=IKsin(j4);
IkReal x11151=IKcos(j4);
IkReal x11152=(gconst4*r21);
IkReal x11153=(gconst5*r10);
IkReal x11154=((1.0)*sj1);
IkReal x11155=(gconst4*r11);
IkReal x11156=(gconst4*r01);
IkReal x11157=((1.0)*x11151);
IkReal x11158=((1.0)*x11150);
IkReal x11159=(gconst5*x11150);
evalcond[0]=((((-1.0)*r22*x11157))+((r20*x11159))+(((-1.0)*x11152*x11158)));
evalcond[1]=(((x11150*x11153))+(((-1.0)*x11155*x11158))+(((-1.0)*r12*x11157)));
evalcond[2]=((((-1.0)*gconst5*r00*x11157))+((x11151*x11156))+(((-1.0)*r02*x11158)));
evalcond[3]=((-1.0)+((r00*x11159))+(((-1.0)*x11156*x11158))+(((-1.0)*r02*x11157)));
evalcond[4]=((((-1.0)*x11153*x11157))+((cj1*cj2))+(((-1.0)*sj2*x11154))+((x11151*x11155))+(((-1.0)*r12*x11158)));
evalcond[5]=((((-1.0)*gconst5*r20*x11157))+(((-1.0)*cj2*x11154))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x11158))+((x11151*x11152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11162 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11162.valid){
continue;
}
IkReal x11160=((1.0)*(x11162.value));
IkReal x11161=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11160)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11160)));
IkReal gconst4=((1.0)*r21*x11161);
IkReal gconst5=((-1.0)*r20*x11161);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11165 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11165.valid){
continue;
}
IkReal x11163=((1.0)*(x11165.value));
IkReal x11164=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11163)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11163)));
IkReal gconst4=((1.0)*r21*x11164);
IkReal gconst5=((-1.0)*r20*x11164);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11168 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11168.valid){
continue;
}
IkReal x11166=((1.0)*(x11168.value));
IkReal x11167=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11166)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11166)));
IkReal gconst4=((1.0)*r21*x11167);
IkReal gconst5=((-1.0)*r20*x11167);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11169=(gconst5*r00);
IkReal x11170=(gconst4*r01);
CheckValue<IkReal> x11171 = IKatan2WithCheck(IkReal(((((-1.0)*x11170))+x11169)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11171.valid){
continue;
}
CheckValue<IkReal> x11172=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11169*x11170))+(x11169*x11169)+(r02*r02)+(x11170*x11170))),-1);
if(!x11172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11171.value)+(((1.5707963267949)*(x11172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11173=IKcos(j4);
IkReal x11174=IKsin(j4);
IkReal x11175=((1.0)*sj1);
IkReal x11176=((1.0)*x11173);
IkReal x11177=(gconst5*x11173);
IkReal x11178=(gconst5*x11174);
IkReal x11179=((1.0)*gconst4*x11174);
evalcond[0]=((((-1.0)*gconst4*r01*x11176))+((r00*x11177))+((r02*x11174)));
evalcond[1]=(((r20*x11178))+(((-1.0)*r22*x11176))+(((-1.0)*r21*x11179)));
evalcond[2]=((((-1.0)*r12*x11176))+(((-1.0)*r11*x11179))+((r10*x11178)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x11179))+((r00*x11178))+(((-1.0)*r02*x11176)));
evalcond[4]=(((r12*x11174))+(((-1.0)*sj2*x11175))+((cj1*cj2))+((r10*x11177))+(((-1.0)*gconst4*r11*x11176)));
evalcond[5]=(((r20*x11177))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x11176))+((r22*x11174))+(((-1.0)*cj2*x11175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11180=((1.0)*gconst4);
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x11180))+((gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
CheckValue<IkReal> x11182=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11180))+(((-1.0)*gconst5*r21)))),-1);
if(!x11182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11181.value)+(((1.5707963267949)*(x11182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11183=IKcos(j4);
IkReal x11184=IKsin(j4);
IkReal x11185=((1.0)*sj1);
IkReal x11186=((1.0)*x11183);
IkReal x11187=(gconst5*x11183);
IkReal x11188=(gconst5*x11184);
IkReal x11189=((1.0)*gconst4*x11184);
evalcond[0]=((((-1.0)*gconst4*r01*x11186))+((r00*x11187))+((r02*x11184)));
evalcond[1]=(((r20*x11188))+(((-1.0)*r22*x11186))+(((-1.0)*r21*x11189)));
evalcond[2]=((((-1.0)*r11*x11189))+(((-1.0)*r12*x11186))+((r10*x11188)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11186))+(((-1.0)*r01*x11189))+((r00*x11188)));
evalcond[4]=((((-1.0)*gconst4*r11*x11186))+(((-1.0)*sj2*x11185))+((r12*x11184))+((cj1*cj2))+((r10*x11187)));
evalcond[5]=(((r20*x11187))+(((-1.0)*cj1*sj2))+((r22*x11184))+(((-1.0)*cj2*x11185))+(((-1.0)*gconst4*r21*x11186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11190=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11190.valid){
continue;
}
CheckValue<IkReal> x11191 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11190.value)))+(x11191.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11192=IKcos(j4);
IkReal x11193=IKsin(j4);
IkReal x11194=((1.0)*sj1);
IkReal x11195=((1.0)*x11192);
IkReal x11196=(gconst5*x11192);
IkReal x11197=(gconst5*x11193);
IkReal x11198=((1.0)*gconst4*x11193);
evalcond[0]=((((-1.0)*gconst4*r01*x11195))+((r00*x11196))+((r02*x11193)));
evalcond[1]=(((r20*x11197))+(((-1.0)*r22*x11195))+(((-1.0)*r21*x11198)));
evalcond[2]=((((-1.0)*r12*x11195))+(((-1.0)*r11*x11198))+((r10*x11197)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11195))+(((-1.0)*r01*x11198))+((r00*x11197)));
evalcond[4]=((((-1.0)*gconst4*r11*x11195))+(((-1.0)*sj2*x11194))+((r12*x11193))+((cj1*cj2))+((r10*x11196)));
evalcond[5]=(((r20*x11196))+(((-1.0)*cj1*sj2))+((r22*x11193))+(((-1.0)*gconst4*r21*x11195))+(((-1.0)*cj2*x11194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11201 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11201.valid){
continue;
}
IkReal x11199=((1.0)*(x11201.value));
IkReal x11200=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11199)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11200);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11199)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11200;
IkReal x11202=((1.0)*r01*r21);
IkReal x11203=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11203))+(((-1.0)*x11202)));
j4eval[1]=(((sj3*x11203))+((sj3*x11202)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11206 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11206.valid){
continue;
}
IkReal x11204=((1.0)*(x11206.value));
IkReal x11205=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11204)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11205);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11204)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11205;
IkReal x11207=((1.0)*r01*r21);
IkReal x11208=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11207))+(((-1.0)*x11208)));
j4eval[1]=(((cj3*x11207))+((cj3*x11208)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
IkReal x11209=((1.0)*(x11211.value));
IkReal x11210=((-1.0)*r20);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11209)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11210);
rxp0_2=(py*r00);
rxp1_0=((-1.0)*py*r21);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11209)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=x11210;
IkReal x11212=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((r01*r21*x11212))+((r00*r20*x11212)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11213=((1.0)*gconst5);
CheckValue<IkReal> x11214=IKPowWithIntegerCheck(cj3,-1);
if(!x11214.valid){
continue;
}
CheckValue<IkReal> x11215=IKPowWithIntegerCheck(r12,-1);
if(!x11215.valid){
continue;
}
CheckValue<IkReal> x11216=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11213))+((cj3*gconst4*r01))),-1);
if(!x11216.valid){
continue;
}
if( IKabs(((x11214.value)*(x11215.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11216.value)*(((((-1.0)*r01*sj3*x11213))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11214.value)*(x11215.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x11216.value)*(((((-1.0)*r01*sj3*x11213))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11214.value)*(x11215.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x11216.value)*(((((-1.0)*r01*sj3*x11213))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11217=IKsin(j4);
IkReal x11218=IKcos(j4);
IkReal x11219=((1.0)*sj3);
IkReal x11220=((1.0)*r21);
IkReal x11221=(cj3*gconst5);
IkReal x11222=(gconst5*r20);
IkReal x11223=(sj1*sj2);
IkReal x11224=((1.0)*cj2);
IkReal x11225=(gconst5*r00);
IkReal x11226=(gconst5*sj3);
IkReal x11227=(gconst4*r00);
IkReal x11228=((1.0)*cj3);
IkReal x11229=((1.0)*r01);
IkReal x11230=(gconst4*r20);
IkReal x11231=((1.0)*cj1*sj2);
IkReal x11232=(sj1*x11224);
IkReal x11233=(r12*x11217);
IkReal x11234=(gconst4*x11217);
IkReal x11235=((1.0)*x11218);
IkReal x11236=(gconst4*sj3*x11218);
IkReal x11237=(cj3*gconst4*x11218);
IkReal x11238=(x11232+x11231);
evalcond[0]=((-1.0)*r12*x11218);
evalcond[1]=((((-1.0)*x11220*x11234))+((x11217*x11222)));
evalcond[2]=((-1.0)+(((-1.0)*x11229*x11234))+((x11217*x11225)));
evalcond[3]=((((-1.0)*x11228*x11233))+((cj1*cj2))+(((-1.0)*x11223)));
evalcond[4]=((((-1.0)*x11238))+(((-1.0)*x11219*x11233)));
evalcond[5]=(((sj3*x11227))+(((-1.0)*r00*x11221*x11235))+((r01*x11226))+((r01*x11237)));
evalcond[6]=((((-1.0)*x11218*x11219*x11225))+(((-1.0)*x11227*x11228))+((r01*x11236))+(((-1.0)*x11221*x11229)));
evalcond[7]=((((-1.0)*r20*x11221*x11235))+(((-1.0)*x11238))+((r21*x11226))+((r21*x11237))+((sj3*x11230)));
evalcond[8]=((((-1.0)*x11218*x11219*x11222))+x11223+(((-1.0)*cj1*x11224))+(((-1.0)*x11228*x11230))+(((-1.0)*x11220*x11221))+((r21*x11236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11239=((1.0)*gconst5);
IkReal x11240=(gconst4*r01);
CheckValue<IkReal> x11241=IKPowWithIntegerCheck(((((-1.0)*x11240))+((gconst5*r00))),-1);
if(!x11241.valid){
continue;
}
CheckValue<IkReal> x11242=IKPowWithIntegerCheck((((cj3*x11240))+(((-1.0)*cj3*r00*x11239))),-1);
if(!x11242.valid){
continue;
}
if( IKabs(x11241.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11242.value)*(((((-1.0)*r01*sj3*x11239))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11241.value)+IKsqr(((x11242.value)*(((((-1.0)*r01*sj3*x11239))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11241.value, ((x11242.value)*(((((-1.0)*r01*sj3*x11239))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11243=IKsin(j4);
IkReal x11244=IKcos(j4);
IkReal x11245=((1.0)*sj3);
IkReal x11246=((1.0)*r21);
IkReal x11247=(cj3*gconst5);
IkReal x11248=(gconst5*r20);
IkReal x11249=(sj1*sj2);
IkReal x11250=((1.0)*cj2);
IkReal x11251=(gconst5*r00);
IkReal x11252=(gconst5*sj3);
IkReal x11253=(gconst4*r00);
IkReal x11254=((1.0)*cj3);
IkReal x11255=((1.0)*r01);
IkReal x11256=(gconst4*r20);
IkReal x11257=((1.0)*cj1*sj2);
IkReal x11258=(sj1*x11250);
IkReal x11259=(r12*x11243);
IkReal x11260=(gconst4*x11243);
IkReal x11261=((1.0)*x11244);
IkReal x11262=(gconst4*sj3*x11244);
IkReal x11263=(cj3*gconst4*x11244);
IkReal x11264=(x11258+x11257);
evalcond[0]=((-1.0)*r12*x11244);
evalcond[1]=(((x11243*x11248))+(((-1.0)*x11246*x11260)));
evalcond[2]=((-1.0)+((x11243*x11251))+(((-1.0)*x11255*x11260)));
evalcond[3]=((((-1.0)*x11249))+((cj1*cj2))+(((-1.0)*x11254*x11259)));
evalcond[4]=((((-1.0)*x11245*x11259))+(((-1.0)*x11264)));
evalcond[5]=(((r01*x11252))+(((-1.0)*r00*x11247*x11261))+((sj3*x11253))+((r01*x11263)));
evalcond[6]=((((-1.0)*x11244*x11245*x11251))+(((-1.0)*x11247*x11255))+(((-1.0)*x11253*x11254))+((r01*x11262)));
evalcond[7]=((((-1.0)*r20*x11247*x11261))+((r21*x11263))+(((-1.0)*x11264))+((r21*x11252))+((sj3*x11256)));
evalcond[8]=((((-1.0)*x11244*x11245*x11248))+x11249+((r21*x11262))+(((-1.0)*x11246*x11247))+(((-1.0)*cj1*x11250))+(((-1.0)*x11254*x11256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11265=(gconst5*r00);
IkReal x11266=(gconst4*r01);
CheckValue<IkReal> x11267=IKPowWithIntegerCheck(((((-1.0)*x11266))+x11265),-1);
if(!x11267.valid){
continue;
}
CheckValue<IkReal> x11268=IKPowWithIntegerCheck((((sj3*x11266))+(((-1.0)*sj3*x11265))),-1);
if(!x11268.valid){
continue;
}
if( IKabs(x11267.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11268.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x11267.value)+IKsqr(((x11268.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x11267.value, ((x11268.value)*((((cj3*gconst5*r01))+((cj3*gconst4*r00))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11269=IKsin(j4);
IkReal x11270=IKcos(j4);
IkReal x11271=((1.0)*sj3);
IkReal x11272=((1.0)*r21);
IkReal x11273=(cj3*gconst5);
IkReal x11274=(gconst5*r20);
IkReal x11275=(sj1*sj2);
IkReal x11276=((1.0)*cj2);
IkReal x11277=(gconst5*r00);
IkReal x11278=(gconst5*sj3);
IkReal x11279=(gconst4*r00);
IkReal x11280=((1.0)*cj3);
IkReal x11281=((1.0)*r01);
IkReal x11282=(gconst4*r20);
IkReal x11283=((1.0)*cj1*sj2);
IkReal x11284=(sj1*x11276);
IkReal x11285=(r12*x11269);
IkReal x11286=(gconst4*x11269);
IkReal x11287=((1.0)*x11270);
IkReal x11288=(gconst4*sj3*x11270);
IkReal x11289=(cj3*gconst4*x11270);
IkReal x11290=(x11283+x11284);
evalcond[0]=((-1.0)*r12*x11270);
evalcond[1]=((((-1.0)*x11272*x11286))+((x11269*x11274)));
evalcond[2]=((-1.0)+(((-1.0)*x11281*x11286))+((x11269*x11277)));
evalcond[3]=((((-1.0)*x11275))+((cj1*cj2))+(((-1.0)*x11280*x11285)));
evalcond[4]=((((-1.0)*x11290))+(((-1.0)*x11271*x11285)));
evalcond[5]=(((r01*x11278))+((sj3*x11279))+((r01*x11289))+(((-1.0)*r00*x11273*x11287)));
evalcond[6]=((((-1.0)*x11273*x11281))+(((-1.0)*x11270*x11271*x11277))+(((-1.0)*x11279*x11280))+((r01*x11288)));
evalcond[7]=(((sj3*x11282))+((r21*x11289))+(((-1.0)*r20*x11273*x11287))+(((-1.0)*x11290))+((r21*x11278)));
evalcond[8]=(x11275+((r21*x11288))+(((-1.0)*x11270*x11271*x11274))+(((-1.0)*cj1*x11276))+(((-1.0)*x11280*x11282))+(((-1.0)*x11272*x11273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11291=gconst4*gconst4;
IkReal x11292=gconst5*gconst5;
IkReal x11293=(cj3*r20);
IkReal x11294=(r00*sj3);
IkReal x11295=(r01*sj3);
IkReal x11296=(gconst4*gconst5);
IkReal x11297=(r21*x11291);
IkReal x11298=((1.0)*r01*x11296);
CheckValue<IkReal> x11299 = IKatan2WithCheck(IkReal((((gconst5*r22*x11295))+((gconst4*r22*x11294)))),IkReal((((r20*x11292*x11295))+(((-1.0)*r21*x11295*x11296))+((r20*x11294*x11296))+(((-1.0)*x11294*x11297)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11299.valid){
continue;
}
CheckValue<IkReal> x11300=IKPowWithIntegerCheck(IKsign((((r00*x11292*x11293))+(((-1.0)*cj3*r00*r21*x11296))+((cj3*r01*x11297))+((cj3*r02*r22))+(((-1.0)*x11293*x11298)))),-1);
if(!x11300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11299.value)+(((1.5707963267949)*(x11300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11301=IKsin(j4);
IkReal x11302=IKcos(j4);
IkReal x11303=(gconst5*sj3);
IkReal x11304=((1.0)*r21);
IkReal x11305=(cj3*gconst5);
IkReal x11306=((1.0)*sj2);
IkReal x11307=((1.0)*r11);
IkReal x11308=((1.0)*cj2);
IkReal x11309=((1.0)*cj3);
IkReal x11310=(gconst4*r10);
IkReal x11311=(gconst4*r00);
IkReal x11312=((1.0)*r01);
IkReal x11313=((1.0)*sj3);
IkReal x11314=(gconst4*r20);
IkReal x11315=(cj1*x11306);
IkReal x11316=(sj1*x11308);
IkReal x11317=((1.0)*x11302);
IkReal x11318=(gconst4*x11301);
IkReal x11319=(r22*x11301);
IkReal x11320=(gconst5*x11301);
IkReal x11321=(r02*x11301);
IkReal x11322=(r12*x11301);
IkReal x11323=(gconst4*sj3*x11302);
IkReal x11324=(cj3*gconst4*x11302);
IkReal x11325=(x11315+x11316);
evalcond[0]=((((-1.0)*x11304*x11318))+(((-1.0)*r22*x11317))+((r20*x11320)));
evalcond[1]=((((-1.0)*x11307*x11318))+((r10*x11320))+(((-1.0)*r12*x11317)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11317))+(((-1.0)*x11312*x11318))+((r00*x11320)));
evalcond[3]=((((-1.0)*x11309*x11321))+((r01*x11303))+(((-1.0)*r00*x11305*x11317))+((sj3*x11311))+((r01*x11324)));
evalcond[4]=((((-1.0)*r00*x11303*x11317))+(((-1.0)*x11309*x11311))+(((-1.0)*x11305*x11312))+(((-1.0)*x11313*x11321))+((r01*x11323)));
evalcond[5]=((((-1.0)*x11309*x11322))+(((-1.0)*sj1*x11306))+((r11*x11303))+((sj3*x11310))+((cj1*cj2))+(((-1.0)*r10*x11305*x11317))+((r11*x11324)));
evalcond[6]=((((-1.0)*x11309*x11319))+((r21*x11324))+(((-1.0)*r20*x11305*x11317))+((sj3*x11314))+((r21*x11303))+(((-1.0)*x11325)));
evalcond[7]=((((-1.0)*x11309*x11314))+(((-1.0)*x11304*x11305))+(((-1.0)*x11313*x11319))+((r21*x11323))+((sj1*sj2))+(((-1.0)*r20*x11303*x11317))+(((-1.0)*cj1*x11308)));
evalcond[8]=((((-1.0)*x11309*x11310))+(((-1.0)*r10*x11303*x11317))+(((-1.0)*x11305*x11307))+(((-1.0)*x11313*x11322))+((r11*x11323))+(((-1.0)*x11325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11326=((1.0)*gconst4);
CheckValue<IkReal> x11327 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*r11*x11326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11327.valid){
continue;
}
CheckValue<IkReal> x11328=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11326))+(((-1.0)*gconst5*r21)))),-1);
if(!x11328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11327.value)+(((1.5707963267949)*(x11328.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11329=IKsin(j4);
IkReal x11330=IKcos(j4);
IkReal x11331=(gconst5*sj3);
IkReal x11332=((1.0)*r21);
IkReal x11333=(cj3*gconst5);
IkReal x11334=((1.0)*sj2);
IkReal x11335=((1.0)*r11);
IkReal x11336=((1.0)*cj2);
IkReal x11337=((1.0)*cj3);
IkReal x11338=(gconst4*r10);
IkReal x11339=(gconst4*r00);
IkReal x11340=((1.0)*r01);
IkReal x11341=((1.0)*sj3);
IkReal x11342=(gconst4*r20);
IkReal x11343=(cj1*x11334);
IkReal x11344=(sj1*x11336);
IkReal x11345=((1.0)*x11330);
IkReal x11346=(gconst4*x11329);
IkReal x11347=(r22*x11329);
IkReal x11348=(gconst5*x11329);
IkReal x11349=(r02*x11329);
IkReal x11350=(r12*x11329);
IkReal x11351=(gconst4*sj3*x11330);
IkReal x11352=(cj3*gconst4*x11330);
IkReal x11353=(x11344+x11343);
evalcond[0]=(((r20*x11348))+(((-1.0)*r22*x11345))+(((-1.0)*x11332*x11346)));
evalcond[1]=(((r10*x11348))+(((-1.0)*x11335*x11346))+(((-1.0)*r12*x11345)));
evalcond[2]=((-1.0)+(((-1.0)*x11340*x11346))+((r00*x11348))+(((-1.0)*r02*x11345)));
evalcond[3]=(((sj3*x11339))+(((-1.0)*r00*x11333*x11345))+(((-1.0)*x11337*x11349))+((r01*x11352))+((r01*x11331)));
evalcond[4]=((((-1.0)*x11337*x11339))+((r01*x11351))+(((-1.0)*r00*x11331*x11345))+(((-1.0)*x11341*x11349))+(((-1.0)*x11333*x11340)));
evalcond[5]=(((r11*x11331))+((sj3*x11338))+((r11*x11352))+(((-1.0)*sj1*x11334))+(((-1.0)*x11337*x11350))+((cj1*cj2))+(((-1.0)*r10*x11333*x11345)));
evalcond[6]=(((sj3*x11342))+(((-1.0)*r20*x11333*x11345))+(((-1.0)*x11337*x11347))+((r21*x11352))+(((-1.0)*x11353))+((r21*x11331)));
evalcond[7]=(((sj1*sj2))+(((-1.0)*cj1*x11336))+(((-1.0)*x11337*x11342))+((r21*x11351))+(((-1.0)*x11332*x11333))+(((-1.0)*r20*x11331*x11345))+(((-1.0)*x11341*x11347)));
evalcond[8]=((((-1.0)*x11333*x11335))+((r11*x11351))+(((-1.0)*x11337*x11338))+(((-1.0)*x11353))+(((-1.0)*r10*x11331*x11345))+(((-1.0)*x11341*x11350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11354=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11354.valid){
continue;
}
CheckValue<IkReal> x11355 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11354.value)))+(x11355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11356=IKsin(j4);
IkReal x11357=IKcos(j4);
IkReal x11358=(gconst5*sj3);
IkReal x11359=((1.0)*r21);
IkReal x11360=(cj3*gconst5);
IkReal x11361=((1.0)*sj2);
IkReal x11362=((1.0)*r11);
IkReal x11363=((1.0)*cj2);
IkReal x11364=((1.0)*cj3);
IkReal x11365=(gconst4*r10);
IkReal x11366=(gconst4*r00);
IkReal x11367=((1.0)*r01);
IkReal x11368=((1.0)*sj3);
IkReal x11369=(gconst4*r20);
IkReal x11370=(cj1*x11361);
IkReal x11371=(sj1*x11363);
IkReal x11372=((1.0)*x11357);
IkReal x11373=(gconst4*x11356);
IkReal x11374=(r22*x11356);
IkReal x11375=(gconst5*x11356);
IkReal x11376=(r02*x11356);
IkReal x11377=(r12*x11356);
IkReal x11378=(gconst4*sj3*x11357);
IkReal x11379=(cj3*gconst4*x11357);
IkReal x11380=(x11371+x11370);
evalcond[0]=(((r20*x11375))+(((-1.0)*r22*x11372))+(((-1.0)*x11359*x11373)));
evalcond[1]=((((-1.0)*x11362*x11373))+((r10*x11375))+(((-1.0)*r12*x11372)));
evalcond[2]=((-1.0)+((r00*x11375))+(((-1.0)*r02*x11372))+(((-1.0)*x11367*x11373)));
evalcond[3]=((((-1.0)*r00*x11360*x11372))+((r01*x11379))+((r01*x11358))+(((-1.0)*x11364*x11376))+((sj3*x11366)));
evalcond[4]=(((r01*x11378))+(((-1.0)*x11368*x11376))+(((-1.0)*x11360*x11367))+(((-1.0)*r00*x11358*x11372))+(((-1.0)*x11364*x11366)));
evalcond[5]=(((r11*x11358))+(((-1.0)*r10*x11360*x11372))+((r11*x11379))+((cj1*cj2))+(((-1.0)*x11364*x11377))+((sj3*x11365))+(((-1.0)*sj1*x11361)));
evalcond[6]=(((r21*x11379))+(((-1.0)*r20*x11360*x11372))+(((-1.0)*x11380))+((r21*x11358))+(((-1.0)*x11364*x11374))+((sj3*x11369)));
evalcond[7]=(((r21*x11378))+(((-1.0)*x11368*x11374))+((sj1*sj2))+(((-1.0)*x11359*x11360))+(((-1.0)*r20*x11358*x11372))+(((-1.0)*cj1*x11363))+(((-1.0)*x11364*x11369)));
evalcond[8]=((((-1.0)*x11368*x11377))+(((-1.0)*r10*x11358*x11372))+(((-1.0)*x11380))+(((-1.0)*x11360*x11362))+((r11*x11378))+(((-1.0)*x11364*x11365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11383 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11383.valid){
continue;
}
IkReal x11381=((1.0)*(x11383.value));
IkReal x11382=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11381)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11381)));
IkReal gconst4=((1.0)*r21*x11382);
IkReal gconst5=((-1.0)*r20*x11382);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11386 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11386.valid){
continue;
}
IkReal x11384=((1.0)*(x11386.value));
IkReal x11385=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11384)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11384)));
IkReal gconst4=((1.0)*r21*x11385);
IkReal gconst5=((-1.0)*r20*x11385);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x11389 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11389.valid){
continue;
}
IkReal x11387=((1.0)*(x11389.value));
IkReal x11388=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11387)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11387)));
IkReal gconst4=((1.0)*r21*x11388);
IkReal gconst5=((-1.0)*r20*x11388);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11392 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11392.valid){
continue;
}
IkReal x11390=((1.0)*(x11392.value));
IkReal x11391=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11390)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11390)));
IkReal gconst4=((1.0)*r21*x11391);
IkReal gconst5=((-1.0)*r20*x11391);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11395 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11395.valid){
continue;
}
IkReal x11393=((1.0)*(x11395.value));
IkReal x11394=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11393)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11393)));
IkReal gconst4=((1.0)*r21*x11394);
IkReal gconst5=((-1.0)*r20*x11394);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11398 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11398.valid){
continue;
}
IkReal x11396=((1.0)*(x11398.value));
IkReal x11397=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11396)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11396)));
IkReal gconst4=((1.0)*r21*x11397);
IkReal gconst5=((-1.0)*r20*x11397);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11399=(gconst4*r01);
IkReal x11400=(gconst5*r00);
CheckValue<IkReal> x11401 = IKatan2WithCheck(IkReal((x11399+(((-1.0)*x11400)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11401.valid){
continue;
}
CheckValue<IkReal> x11402=IKPowWithIntegerCheck(IKsign(((x11400*x11400)+(((-2.0)*x11399*x11400))+(r02*r02)+(x11399*x11399))),-1);
if(!x11402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11401.value)+(((1.5707963267949)*(x11402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11403=IKsin(j4);
IkReal x11404=IKcos(j4);
IkReal x11405=(gconst4*r21);
IkReal x11406=(gconst5*r10);
IkReal x11407=(gconst4*r11);
IkReal x11408=(gconst4*r01);
IkReal x11409=((1.0)*x11404);
IkReal x11410=((1.0)*x11403);
IkReal x11411=(gconst5*x11403);
evalcond[0]=((((-1.0)*x11405*x11410))+(((-1.0)*r22*x11409))+((r20*x11411)));
evalcond[1]=((((-1.0)*x11407*x11410))+((x11403*x11406))+(((-1.0)*r12*x11409)));
evalcond[2]=(((x11404*x11408))+(((-1.0)*r02*x11410))+(((-1.0)*gconst5*r00*x11409)));
evalcond[3]=((1.0)+((r00*x11411))+(((-1.0)*r02*x11409))+(((-1.0)*x11408*x11410)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11410))+((cj1*sj2))+((x11404*x11407))+(((-1.0)*x11406*x11409)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11409))+((x11404*x11405))+(((-1.0)*r22*x11410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11412=((1.0)*gconst4);
CheckValue<IkReal> x11413 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11412))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11413.valid){
continue;
}
CheckValue<IkReal> x11414=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11412))+(((-1.0)*gconst5*r11)))),-1);
if(!x11414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11413.value)+(((1.5707963267949)*(x11414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11415=IKsin(j4);
IkReal x11416=IKcos(j4);
IkReal x11417=(gconst4*r21);
IkReal x11418=(gconst5*r10);
IkReal x11419=(gconst4*r11);
IkReal x11420=(gconst4*r01);
IkReal x11421=((1.0)*x11416);
IkReal x11422=((1.0)*x11415);
IkReal x11423=(gconst5*x11415);
evalcond[0]=((((-1.0)*x11417*x11422))+((r20*x11423))+(((-1.0)*r22*x11421)));
evalcond[1]=(((x11415*x11418))+(((-1.0)*r12*x11421))+(((-1.0)*x11419*x11422)));
evalcond[2]=((((-1.0)*r02*x11422))+(((-1.0)*gconst5*r00*x11421))+((x11416*x11420)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11421))+(((-1.0)*x11420*x11422))+((r00*x11423)));
evalcond[4]=(((cj2*sj1))+((x11416*x11419))+((cj1*sj2))+(((-1.0)*r12*x11422))+(((-1.0)*x11418*x11421)));
evalcond[5]=(((x11416*x11417))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst5*r20*x11421))+(((-1.0)*r22*x11422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11424 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11424.valid){
continue;
}
CheckValue<IkReal> x11425=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11424.value)+(((1.5707963267949)*(x11425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11426=IKsin(j4);
IkReal x11427=IKcos(j4);
IkReal x11428=(gconst4*r21);
IkReal x11429=(gconst5*r10);
IkReal x11430=(gconst4*r11);
IkReal x11431=(gconst4*r01);
IkReal x11432=((1.0)*x11427);
IkReal x11433=((1.0)*x11426);
IkReal x11434=(gconst5*x11426);
evalcond[0]=(((r20*x11434))+(((-1.0)*x11428*x11433))+(((-1.0)*r22*x11432)));
evalcond[1]=(((x11426*x11429))+(((-1.0)*r12*x11432))+(((-1.0)*x11430*x11433)));
evalcond[2]=((((-1.0)*r02*x11433))+((x11427*x11431))+(((-1.0)*gconst5*r00*x11432)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11432))+((r00*x11434))+(((-1.0)*x11431*x11433)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x11433))+(((-1.0)*x11429*x11432))+((x11427*x11430)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11427*x11428))+(((-1.0)*gconst5*r20*x11432))+(((-1.0)*r22*x11433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11437 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11437.valid){
continue;
}
IkReal x11435=((1.0)*(x11437.value));
IkReal x11436=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11435)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11435)));
IkReal gconst4=((1.0)*r21*x11436);
IkReal gconst5=((-1.0)*r20*x11436);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11440 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11440.valid){
continue;
}
IkReal x11438=((1.0)*(x11440.value));
IkReal x11439=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11438)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11438)));
IkReal gconst4=((1.0)*r21*x11439);
IkReal gconst5=((-1.0)*r20*x11439);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11443 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11443.valid){
continue;
}
IkReal x11441=((1.0)*(x11443.value));
IkReal x11442=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11441)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11441)));
IkReal gconst4=((1.0)*r21*x11442);
IkReal gconst5=((-1.0)*r20*x11442);
IkReal x11444=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11448=IKPowWithIntegerCheck(x11444,-1);
if(!x11448.valid){
continue;
}
IkReal x11445=x11448.value;
IkReal x11446=((1.0)*x11445);
IkReal x11447=((((-1.0)*(r02*r02)))+(((-1.0)*x11446*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11445))+(((-1.0)*x11446*(r01*r01)*(r21*r21))));
j4eval[0]=x11447;
j4eval[1]=r02;
j4eval[2]=x11444;
j4eval[3]=IKsign(x11447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11449=(gconst5*r00);
IkReal x11450=(gconst4*r01);
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal((x11449+(((-1.0)*x11450)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(IKsign(((((2.0)*x11449*x11450))+(((-1.0)*(x11450*x11450)))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11449*x11449))))),-1);
if(!x11452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11451.value)+(((1.5707963267949)*(x11452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11453=IKcos(j4);
IkReal x11454=IKsin(j4);
IkReal x11455=((1.0)*x11453);
IkReal x11456=(gconst5*x11453);
IkReal x11457=(gconst5*x11454);
IkReal x11458=((1.0)*gconst4*x11454);
evalcond[0]=(((r02*x11454))+((r00*x11456))+(((-1.0)*gconst4*r01*x11455)));
evalcond[1]=(((r20*x11457))+(((-1.0)*r21*x11458))+(((-1.0)*r22*x11455)));
evalcond[2]=(((r10*x11457))+(((-1.0)*r11*x11458))+(((-1.0)*r12*x11455)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11455))+((r00*x11457))+(((-1.0)*r01*x11458)));
evalcond[4]=(((cj2*sj1))+((r10*x11456))+((cj1*sj2))+((r12*x11454))+(((-1.0)*gconst4*r11*x11455)));
evalcond[5]=((((-1.0)*gconst4*r21*x11455))+((r20*x11456))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11459=((1.0)*gconst4);
CheckValue<IkReal> x11460 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11459))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11460.valid){
continue;
}
CheckValue<IkReal> x11461=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11459))+(((-1.0)*gconst5*r11)))),-1);
if(!x11461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11460.value)+(((1.5707963267949)*(x11461.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11462=IKcos(j4);
IkReal x11463=IKsin(j4);
IkReal x11464=((1.0)*x11462);
IkReal x11465=(gconst5*x11462);
IkReal x11466=(gconst5*x11463);
IkReal x11467=((1.0)*gconst4*x11463);
evalcond[0]=((((-1.0)*gconst4*r01*x11464))+((r02*x11463))+((r00*x11465)));
evalcond[1]=((((-1.0)*r21*x11467))+(((-1.0)*r22*x11464))+((r20*x11466)));
evalcond[2]=((((-1.0)*r12*x11464))+(((-1.0)*r11*x11467))+((r10*x11466)));
evalcond[3]=((1.0)+(((-1.0)*r01*x11467))+(((-1.0)*r02*x11464))+((r00*x11466)));
evalcond[4]=(((cj2*sj1))+((r12*x11463))+(((-1.0)*gconst4*r11*x11464))+((cj1*sj2))+((r10*x11465)));
evalcond[5]=(((r22*x11463))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst4*r21*x11464))+((r20*x11465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11468 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11468.valid){
continue;
}
CheckValue<IkReal> x11469=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11468.value)+(((1.5707963267949)*(x11469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11470=IKcos(j4);
IkReal x11471=IKsin(j4);
IkReal x11472=((1.0)*x11470);
IkReal x11473=(gconst5*x11470);
IkReal x11474=(gconst5*x11471);
IkReal x11475=((1.0)*gconst4*x11471);
evalcond[0]=(((r00*x11473))+(((-1.0)*gconst4*r01*x11472))+((r02*x11471)));
evalcond[1]=((((-1.0)*r21*x11475))+(((-1.0)*r22*x11472))+((r20*x11474)));
evalcond[2]=((((-1.0)*r11*x11475))+(((-1.0)*r12*x11472))+((r10*x11474)));
evalcond[3]=((1.0)+((r00*x11474))+(((-1.0)*r01*x11475))+(((-1.0)*r02*x11472)));
evalcond[4]=(((cj2*sj1))+((r12*x11471))+(((-1.0)*gconst4*r11*x11472))+((cj1*sj2))+((r10*x11473)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x11471))+(((-1.0)*gconst4*r21*x11472))+((r20*x11473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11478 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11478.valid){
continue;
}
IkReal x11476=((1.0)*(x11478.value));
IkReal x11477=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11476)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11476)));
IkReal gconst4=((1.0)*r21*x11477);
IkReal gconst5=((-1.0)*r20*x11477);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11481 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11481.valid){
continue;
}
IkReal x11479=((1.0)*(x11481.value));
IkReal x11480=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11479)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11479)));
IkReal gconst4=((1.0)*r21*x11480);
IkReal gconst5=((-1.0)*r20*x11480);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11484 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11484.valid){
continue;
}
IkReal x11482=((1.0)*(x11484.value));
IkReal x11483=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11482)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11482)));
IkReal gconst4=((1.0)*r21*x11483);
IkReal gconst5=((-1.0)*r20*x11483);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11485=(gconst4*r01);
IkReal x11486=(gconst5*r00);
CheckValue<IkReal> x11487 = IKatan2WithCheck(IkReal((x11485+(((-1.0)*x11486)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11487.valid){
continue;
}
CheckValue<IkReal> x11488=IKPowWithIntegerCheck(IKsign(((x11486*x11486)+(((-2.0)*x11485*x11486))+(x11485*x11485)+(r02*r02))),-1);
if(!x11488.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11487.value)+(((1.5707963267949)*(x11488.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11489=IKsin(j4);
IkReal x11490=IKcos(j4);
IkReal x11491=(gconst4*r21);
IkReal x11492=(gconst5*r10);
IkReal x11493=((1.0)*cj2);
IkReal x11494=(gconst4*r11);
IkReal x11495=(gconst4*r01);
IkReal x11496=((1.0)*x11490);
IkReal x11497=((1.0)*x11489);
IkReal x11498=(gconst5*x11489);
evalcond[0]=((((-1.0)*x11491*x11497))+((r20*x11498))+(((-1.0)*r22*x11496)));
evalcond[1]=((((-1.0)*x11494*x11497))+((x11489*x11492))+(((-1.0)*r12*x11496)));
evalcond[2]=(((x11490*x11495))+(((-1.0)*r02*x11497))+(((-1.0)*gconst5*r00*x11496)));
evalcond[3]=((1.0)+((r00*x11498))+(((-1.0)*x11495*x11497))+(((-1.0)*r02*x11496)));
evalcond[4]=(((x11490*x11494))+((sj1*sj2))+(((-1.0)*cj1*x11493))+(((-1.0)*r12*x11497))+(((-1.0)*x11492*x11496)));
evalcond[5]=((((-1.0)*sj1*x11493))+((x11490*x11491))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst5*r20*x11496))+(((-1.0)*r22*x11497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11499=((1.0)*gconst4);
CheckValue<IkReal> x11500=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11499))+(((-1.0)*gconst5*r11)))),-1);
if(!x11500.valid){
continue;
}
CheckValue<IkReal> x11501 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst5*r20))+(((-1.0)*r21*x11499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11500.value)))+(x11501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11502=IKsin(j4);
IkReal x11503=IKcos(j4);
IkReal x11504=(gconst4*r21);
IkReal x11505=(gconst5*r10);
IkReal x11506=((1.0)*cj2);
IkReal x11507=(gconst4*r11);
IkReal x11508=(gconst4*r01);
IkReal x11509=((1.0)*x11503);
IkReal x11510=((1.0)*x11502);
IkReal x11511=(gconst5*x11502);
evalcond[0]=(((r20*x11511))+(((-1.0)*r22*x11509))+(((-1.0)*x11504*x11510)));
evalcond[1]=((((-1.0)*x11507*x11510))+(((-1.0)*r12*x11509))+((x11502*x11505)));
evalcond[2]=((((-1.0)*gconst5*r00*x11509))+((x11503*x11508))+(((-1.0)*r02*x11510)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11509))+(((-1.0)*x11508*x11510))+((r00*x11511)));
evalcond[4]=(((x11503*x11507))+((sj1*sj2))+(((-1.0)*x11505*x11509))+(((-1.0)*r12*x11510))+(((-1.0)*cj1*x11506)));
evalcond[5]=((((-1.0)*sj1*x11506))+(((-1.0)*gconst5*r20*x11509))+(((-1.0)*r22*x11510))+((x11503*x11504))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11512 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11512.valid){
continue;
}
CheckValue<IkReal> x11513=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11512.value)+(((1.5707963267949)*(x11513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11514=IKsin(j4);
IkReal x11515=IKcos(j4);
IkReal x11516=(gconst4*r21);
IkReal x11517=(gconst5*r10);
IkReal x11518=((1.0)*cj2);
IkReal x11519=(gconst4*r11);
IkReal x11520=(gconst4*r01);
IkReal x11521=((1.0)*x11515);
IkReal x11522=((1.0)*x11514);
IkReal x11523=(gconst5*x11514);
evalcond[0]=((((-1.0)*x11516*x11522))+(((-1.0)*r22*x11521))+((r20*x11523)));
evalcond[1]=((((-1.0)*x11519*x11522))+((x11514*x11517))+(((-1.0)*r12*x11521)));
evalcond[2]=((((-1.0)*r02*x11522))+(((-1.0)*gconst5*r00*x11521))+((x11515*x11520)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11521))+((r00*x11523))+(((-1.0)*x11520*x11522)));
evalcond[4]=((((-1.0)*x11517*x11521))+((sj1*sj2))+(((-1.0)*cj1*x11518))+((x11515*x11519))+(((-1.0)*r12*x11522)));
evalcond[5]=((((-1.0)*gconst5*r20*x11521))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11518))+(((-1.0)*r22*x11522))+((x11515*x11516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x11526 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11526.valid){
continue;
}
IkReal x11524=((1.0)*(x11526.value));
IkReal x11525=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11524)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11524)));
IkReal gconst4=((1.0)*r21*x11525);
IkReal gconst5=((-1.0)*r20*x11525);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11529 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11529.valid){
continue;
}
IkReal x11527=((1.0)*(x11529.value));
IkReal x11528=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11527)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11527)));
IkReal gconst4=((1.0)*r21*x11528);
IkReal gconst5=((-1.0)*r20*x11528);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11532 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11532.valid){
continue;
}
IkReal x11530=((1.0)*(x11532.value));
IkReal x11531=x10352;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11530)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11530)));
IkReal gconst4=((1.0)*r21*x11531);
IkReal gconst5=((-1.0)*r20*x11531);
IkReal x11533=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(x11533,-1);
if(!x11537.valid){
continue;
}
IkReal x11534=x11537.value;
IkReal x11535=((1.0)*x11534);
IkReal x11536=((((-1.0)*x11535*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11534))+(((-1.0)*(r02*r02)))+(((-1.0)*x11535*(r01*r01)*(r21*r21))));
j4eval[0]=x11536;
j4eval[1]=r02;
j4eval[2]=x11533;
j4eval[3]=IKsign(x11536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11538=(gconst5*r00);
IkReal x11539=(gconst4*r01);
CheckValue<IkReal> x11540 = IKatan2WithCheck(IkReal((x11538+(((-1.0)*x11539)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11540.valid){
continue;
}
CheckValue<IkReal> x11541=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11539*x11539)))+(((-1.0)*(x11538*x11538)))+(((2.0)*x11538*x11539))+(((-1.0)*(r02*r02))))),-1);
if(!x11541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11540.value)+(((1.5707963267949)*(x11541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11542=IKcos(j4);
IkReal x11543=IKsin(j4);
IkReal x11544=((1.0)*cj2);
IkReal x11545=((1.0)*x11542);
IkReal x11546=(gconst5*x11542);
IkReal x11547=(gconst5*x11543);
IkReal x11548=((1.0)*gconst4*x11543);
evalcond[0]=(((r00*x11546))+((r02*x11543))+(((-1.0)*gconst4*r01*x11545)));
evalcond[1]=(((r20*x11547))+(((-1.0)*r21*x11548))+(((-1.0)*r22*x11545)));
evalcond[2]=(((r10*x11547))+(((-1.0)*r12*x11545))+(((-1.0)*r11*x11548)));
evalcond[3]=((1.0)+(((-1.0)*r01*x11548))+((r00*x11547))+(((-1.0)*r02*x11545)));
evalcond[4]=(((r10*x11546))+((sj1*sj2))+(((-1.0)*gconst4*r11*x11545))+((r12*x11543))+(((-1.0)*cj1*x11544)));
evalcond[5]=((((-1.0)*gconst4*r21*x11545))+(((-1.0)*cj1*sj2))+((r20*x11546))+((r22*x11543))+(((-1.0)*sj1*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11549=((1.0)*gconst4);
CheckValue<IkReal> x11550 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11549))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11550.valid){
continue;
}
CheckValue<IkReal> x11551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11549))+(((-1.0)*gconst5*r11)))),-1);
if(!x11551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11550.value)+(((1.5707963267949)*(x11551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11552=IKcos(j4);
IkReal x11553=IKsin(j4);
IkReal x11554=((1.0)*cj2);
IkReal x11555=((1.0)*x11552);
IkReal x11556=(gconst5*x11552);
IkReal x11557=(gconst5*x11553);
IkReal x11558=((1.0)*gconst4*x11553);
evalcond[0]=(((r02*x11553))+(((-1.0)*gconst4*r01*x11555))+((r00*x11556)));
evalcond[1]=((((-1.0)*r21*x11558))+(((-1.0)*r22*x11555))+((r20*x11557)));
evalcond[2]=((((-1.0)*r12*x11555))+(((-1.0)*r11*x11558))+((r10*x11557)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11555))+((r00*x11557))+(((-1.0)*r01*x11558)));
evalcond[4]=((((-1.0)*gconst4*r11*x11555))+((r12*x11553))+(((-1.0)*cj1*x11554))+((sj1*sj2))+((r10*x11556)));
evalcond[5]=((((-1.0)*sj1*x11554))+((r22*x11553))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r21*x11555))+((r20*x11556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11559 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11559.valid){
continue;
}
CheckValue<IkReal> x11560=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11559.value)+(((1.5707963267949)*(x11560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11561=IKcos(j4);
IkReal x11562=IKsin(j4);
IkReal x11563=((1.0)*cj2);
IkReal x11564=((1.0)*x11561);
IkReal x11565=(gconst5*x11561);
IkReal x11566=(gconst5*x11562);
IkReal x11567=((1.0)*gconst4*x11562);
evalcond[0]=((((-1.0)*gconst4*r01*x11564))+((r00*x11565))+((r02*x11562)));
evalcond[1]=(((r20*x11566))+(((-1.0)*r21*x11567))+(((-1.0)*r22*x11564)));
evalcond[2]=(((r10*x11566))+(((-1.0)*r12*x11564))+(((-1.0)*r11*x11567)));
evalcond[3]=((1.0)+(((-1.0)*r01*x11567))+((r00*x11566))+(((-1.0)*r02*x11564)));
evalcond[4]=(((r10*x11565))+((sj1*sj2))+(((-1.0)*gconst4*r11*x11564))+((r12*x11562))+(((-1.0)*cj1*x11563)));
evalcond[5]=((((-1.0)*gconst4*r21*x11564))+((r20*x11565))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11563))+((r22*x11562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11568=gconst4*gconst4;
IkReal x11569=gconst5*gconst5;
IkReal x11570=(cj3*r20);
IkReal x11571=(r00*sj3);
IkReal x11572=(r01*sj3);
IkReal x11573=(gconst4*gconst5);
IkReal x11574=(r21*x11568);
IkReal x11575=((1.0)*r01*x11573);
CheckValue<IkReal> x11576 = IKatan2WithCheck(IkReal((((gconst5*r22*x11572))+((gconst4*r22*x11571)))),IkReal((((r20*x11569*x11572))+(((-1.0)*r21*x11572*x11573))+(((-1.0)*x11571*x11574))+((r20*x11571*x11573)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11576.valid){
continue;
}
CheckValue<IkReal> x11577=IKPowWithIntegerCheck(IKsign((((cj3*r01*x11574))+(((-1.0)*x11570*x11575))+((r00*x11569*x11570))+((cj3*r02*r22))+(((-1.0)*cj3*r00*r21*x11573)))),-1);
if(!x11577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11576.value)+(((1.5707963267949)*(x11577.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11578=IKsin(j4);
IkReal x11579=IKcos(j4);
IkReal x11580=(sj1*sj2);
IkReal x11581=(gconst5*sj3);
IkReal x11582=((1.0)*r21);
IkReal x11583=(cj3*gconst5);
IkReal x11584=((1.0)*cj1);
IkReal x11585=(gconst4*r11);
IkReal x11586=(cj2*sj1);
IkReal x11587=(cj3*gconst4);
IkReal x11588=(gconst4*sj3);
IkReal x11589=(cj2*x11584);
IkReal x11590=((1.0)*x11579);
IkReal x11591=((1.0)*x11578);
IkReal x11592=(gconst5*x11578);
IkReal x11593=(x11579*x11588);
evalcond[0]=(((r20*x11592))+(((-1.0)*r22*x11590))+(((-1.0)*gconst4*x11578*x11582)));
evalcond[1]=(((r10*x11592))+(((-1.0)*x11585*x11591))+(((-1.0)*r12*x11590)));
evalcond[2]=((1.0)+(((-1.0)*gconst4*r01*x11591))+((r00*x11592))+(((-1.0)*r02*x11590)));
evalcond[3]=(((r01*x11581))+(((-1.0)*cj3*r02*x11591))+(((-1.0)*r00*x11583*x11590))+((r01*x11579*x11587))+((r00*x11588)));
evalcond[4]=((((-1.0)*r00*x11587))+(((-1.0)*r01*x11583))+((r01*x11593))+(((-1.0)*r00*x11581*x11590))+(((-1.0)*r02*sj3*x11591)));
evalcond[5]=(((cj3*x11579*x11585))+x11580+(((-1.0)*x11589))+(((-1.0)*cj3*r12*x11591))+((r10*x11588))+(((-1.0)*r10*x11583*x11590))+((r11*x11581)));
evalcond[6]=(((r20*x11588))+(((-1.0)*x11586))+(((-1.0)*r20*x11583*x11590))+((r21*x11579*x11587))+((r21*x11581))+(((-1.0)*cj3*r22*x11591))+(((-1.0)*sj2*x11584)));
evalcond[7]=(x11586+((cj1*sj2))+(((-1.0)*r11*x11583))+(((-1.0)*r10*x11587))+(((-1.0)*r10*x11581*x11590))+((sj3*x11579*x11585))+(((-1.0)*r12*sj3*x11591)));
evalcond[8]=(x11580+(((-1.0)*x11589))+(((-1.0)*r22*sj3*x11591))+(((-1.0)*r20*x11581*x11590))+((r21*x11593))+(((-1.0)*x11582*x11583))+(((-1.0)*r20*x11587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11594=((1.0)*gconst4);
CheckValue<IkReal> x11595=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x11594))+(((-1.0)*gconst5*r11)))),-1);
if(!x11595.valid){
continue;
}
CheckValue<IkReal> x11596 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x11594))+((gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11595.value)))+(x11596.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11597=IKsin(j4);
IkReal x11598=IKcos(j4);
IkReal x11599=(sj1*sj2);
IkReal x11600=(gconst5*sj3);
IkReal x11601=((1.0)*r21);
IkReal x11602=(cj3*gconst5);
IkReal x11603=((1.0)*cj1);
IkReal x11604=(gconst4*r11);
IkReal x11605=(cj2*sj1);
IkReal x11606=(cj3*gconst4);
IkReal x11607=(gconst4*sj3);
IkReal x11608=(cj2*x11603);
IkReal x11609=((1.0)*x11598);
IkReal x11610=((1.0)*x11597);
IkReal x11611=(gconst5*x11597);
IkReal x11612=(x11598*x11607);
evalcond[0]=((((-1.0)*r22*x11609))+(((-1.0)*gconst4*x11597*x11601))+((r20*x11611)));
evalcond[1]=((((-1.0)*r12*x11609))+(((-1.0)*x11604*x11610))+((r10*x11611)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11609))+(((-1.0)*gconst4*r01*x11610))+((r00*x11611)));
evalcond[3]=((((-1.0)*cj3*r02*x11610))+((r01*x11600))+(((-1.0)*r00*x11602*x11609))+((r00*x11607))+((r01*x11598*x11606)));
evalcond[4]=((((-1.0)*r01*x11602))+(((-1.0)*r00*x11606))+(((-1.0)*r02*sj3*x11610))+(((-1.0)*r00*x11600*x11609))+((r01*x11612)));
evalcond[5]=(x11599+(((-1.0)*x11608))+(((-1.0)*r10*x11602*x11609))+((r10*x11607))+(((-1.0)*cj3*r12*x11610))+((r11*x11600))+((cj3*x11598*x11604)));
evalcond[6]=((((-1.0)*r20*x11602*x11609))+(((-1.0)*sj2*x11603))+((r21*x11600))+(((-1.0)*x11605))+(((-1.0)*cj3*r22*x11610))+((r21*x11598*x11606))+((r20*x11607)));
evalcond[7]=((((-1.0)*r11*x11602))+x11605+((cj1*sj2))+(((-1.0)*r10*x11600*x11609))+(((-1.0)*r10*x11606))+(((-1.0)*r12*sj3*x11610))+((sj3*x11598*x11604)));
evalcond[8]=(x11599+((r21*x11612))+(((-1.0)*x11608))+(((-1.0)*r22*sj3*x11610))+(((-1.0)*r20*x11606))+(((-1.0)*r20*x11600*x11609))+(((-1.0)*x11601*x11602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11613 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst5*r10))+(((-1.0)*gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11613.valid){
continue;
}
CheckValue<IkReal> x11614=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11614.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11613.value)+(((1.5707963267949)*(x11614.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11615=IKsin(j4);
IkReal x11616=IKcos(j4);
IkReal x11617=(sj1*sj2);
IkReal x11618=(gconst5*sj3);
IkReal x11619=((1.0)*r21);
IkReal x11620=(cj3*gconst5);
IkReal x11621=((1.0)*cj1);
IkReal x11622=(gconst4*r11);
IkReal x11623=(cj2*sj1);
IkReal x11624=(cj3*gconst4);
IkReal x11625=(gconst4*sj3);
IkReal x11626=(cj2*x11621);
IkReal x11627=((1.0)*x11616);
IkReal x11628=((1.0)*x11615);
IkReal x11629=(gconst5*x11615);
IkReal x11630=(x11616*x11625);
evalcond[0]=((((-1.0)*r22*x11627))+(((-1.0)*gconst4*x11615*x11619))+((r20*x11629)));
evalcond[1]=((((-1.0)*r12*x11627))+(((-1.0)*x11622*x11628))+((r10*x11629)));
evalcond[2]=((1.0)+(((-1.0)*gconst4*r01*x11628))+((r00*x11629))+(((-1.0)*r02*x11627)));
evalcond[3]=((((-1.0)*cj3*r02*x11628))+(((-1.0)*r00*x11620*x11627))+((r01*x11616*x11624))+((r00*x11625))+((r01*x11618)));
evalcond[4]=((((-1.0)*r00*x11618*x11627))+(((-1.0)*r02*sj3*x11628))+(((-1.0)*r00*x11624))+(((-1.0)*r01*x11620))+((r01*x11630)));
evalcond[5]=(x11617+((cj3*x11616*x11622))+((r11*x11618))+(((-1.0)*x11626))+(((-1.0)*r10*x11620*x11627))+(((-1.0)*cj3*r12*x11628))+((r10*x11625)));
evalcond[6]=((((-1.0)*sj2*x11621))+(((-1.0)*x11623))+(((-1.0)*r20*x11620*x11627))+((r21*x11618))+(((-1.0)*cj3*r22*x11628))+((r20*x11625))+((r21*x11616*x11624)));
evalcond[7]=((((-1.0)*r11*x11620))+x11623+((sj3*x11616*x11622))+((cj1*sj2))+(((-1.0)*r10*x11618*x11627))+(((-1.0)*r10*x11624))+(((-1.0)*r12*sj3*x11628)));
evalcond[8]=((((-1.0)*x11619*x11620))+x11617+(((-1.0)*x11626))+(((-1.0)*r20*x11624))+((r21*x11630))+(((-1.0)*r22*sj3*x11628))+(((-1.0)*r20*x11618*x11627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x11633 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11633.valid){
continue;
}
IkReal x11631=((1.0)*(x11633.value));
IkReal x11632=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11631)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11632);
rxp1_1=(px*r21);
rxp1_2=(r11*x11632);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11631)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11636 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11636.valid){
continue;
}
IkReal x11634=((1.0)*(x11636.value));
IkReal x11635=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11634)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11635);
rxp1_1=(px*r21);
rxp1_2=(r11*x11635);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11634)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
IkReal x11637=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(x11637+(((-1.0)*x11637*(r10*r10)))+((x11637*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x11640 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11640.valid){
continue;
}
IkReal x11638=((1.0)*(x11640.value));
IkReal x11639=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11638)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11639);
rxp1_1=(px*r21);
rxp1_2=(r11*x11639);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11638)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11643 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11643.valid){
continue;
}
IkReal x11641=((1.0)*(x11643.value));
IkReal x11642=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11641)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11642);
rxp1_1=(px*r21);
rxp1_2=(r11*x11642);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11641)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11646 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11646.valid){
continue;
}
IkReal x11644=((1.0)*(x11646.value));
IkReal x11645=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11644)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11645);
rxp1_1=(px*r21);
rxp1_2=(r11*x11645);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11644)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11649 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11649.valid){
continue;
}
IkReal x11647=((1.0)*(x11649.value));
IkReal x11648=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11647)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11648);
rxp1_1=(px*r21);
rxp1_2=(r11*x11648);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11647)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11652=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11652.valid){
continue;
}
IkReal x11650=x11652.value;
IkReal x11651=(sj0*x11650);
cj4array[0]=(((cj2*sj1*x11651))+((cj1*sj2*x11651)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11653=IKsin(j4);
IkReal x11654=IKcos(j4);
IkReal x11655=(gconst5*x11653);
IkReal x11656=((1.0)*x11654);
IkReal x11657=((1.0)*gconst4*x11653);
evalcond[0]=((-1.0)*r02*x11653);
evalcond[1]=((((-1.0)*r02*x11656))+(((-1.0)*sj0)));
evalcond[2]=(((r20*x11655))+(((-1.0)*r21*x11657)));
evalcond[3]=(((r10*x11655))+(((-1.0)*r11*x11657)));
evalcond[4]=(((gconst4*r21*x11654))+(((-1.0)*gconst5*r20*x11656))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11659=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11659.valid){
continue;
}
IkReal x11658=x11659.value;
cj4array[0]=(((cj1*cj2*x11658))+(((-1.0)*sj1*sj2*x11658)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11660=IKsin(j4);
IkReal x11661=IKcos(j4);
IkReal x11662=((1.0)*sj0);
IkReal x11663=(gconst4*r11);
IkReal x11664=(gconst5*x11660);
IkReal x11665=((1.0)*x11660);
IkReal x11666=((1.0)*x11661);
evalcond[0]=((-1.0)*r02*x11660);
evalcond[1]=((((-1.0)*r02*x11666))+(((-1.0)*x11662)));
evalcond[2]=(((r20*x11664))+(((-1.0)*gconst4*r21*x11665)));
evalcond[3]=(((r10*x11664))+(((-1.0)*x11663*x11665)));
evalcond[4]=((((-1.0)*cj1*sj2*x11662))+(((-1.0)*cj2*sj1*x11662))+((x11661*x11663))+(((-1.0)*gconst5*r10*x11666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11667=IKPowWithIntegerCheck(r02,-1);
if(!x11667.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11667.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11668=IKsin(j4);
IkReal x11669=IKcos(j4);
IkReal x11670=((1.0)*sj0);
IkReal x11671=(gconst5*x11668);
IkReal x11672=(gconst4*x11669);
IkReal x11673=((1.0)*gconst4*x11668);
IkReal x11674=((1.0)*gconst5*x11669);
evalcond[0]=((-1.0)*r02*x11668);
evalcond[1]=((((-1.0)*r21*x11673))+((r20*x11671)));
evalcond[2]=(((r10*x11671))+(((-1.0)*r11*x11673)));
evalcond[3]=((((-1.0)*r20*x11674))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11672)));
evalcond[4]=((((-1.0)*cj1*sj2*x11670))+(((-1.0)*cj2*sj1*x11670))+((r11*x11672))+(((-1.0)*r10*x11674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11677 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11677.valid){
continue;
}
IkReal x11675=((1.0)*(x11677.value));
IkReal x11676=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11675)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11676);
rxp1_1=(px*r21);
rxp1_2=(r11*x11676);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11675)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11680 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11680.valid){
continue;
}
IkReal x11678=((1.0)*(x11680.value));
IkReal x11679=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11678)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11679);
rxp1_1=(px*r21);
rxp1_2=(r11*x11679);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11678)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11683 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x11683.valid){
continue;
}
IkReal x11681=((1.0)*(x11683.value));
IkReal x11682=((-1.0)*px);
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11681)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11682);
rxp1_1=(px*r21);
rxp1_2=(r11*x11682);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11681)));
IkReal gconst4=((1.0)*r21);
IkReal gconst5=((-1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11686=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11686.valid){
continue;
}
IkReal x11684=x11686.value;
IkReal x11685=(sj0*x11684);
cj4array[0]=(((cj1*sj2*x11685))+((cj2*sj1*x11685)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11687=IKsin(j4);
IkReal x11688=IKcos(j4);
IkReal x11689=(gconst5*r20);
IkReal x11690=((1.0)*gconst4*r21);
evalcond[0]=(r02*x11687);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11688)));
evalcond[2]=((((-1.0)*x11687*x11690))+((x11687*x11689)));
evalcond[3]=((((-1.0)*gconst4*r11*x11687))+((gconst5*r10*x11687)));
evalcond[4]=(((x11688*x11689))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11688*x11690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11692=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11692.valid){
continue;
}
IkReal x11691=x11692.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11691))+((cj1*cj2*x11691)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11693=IKsin(j4);
IkReal x11694=IKcos(j4);
IkReal x11695=((1.0)*sj0);
IkReal x11696=((1.0)*gconst4);
IkReal x11697=(gconst5*x11693);
evalcond[0]=(r02*x11693);
evalcond[1]=((((-1.0)*x11695))+(((-1.0)*r02*x11694)));
evalcond[2]=(((r20*x11697))+(((-1.0)*r21*x11693*x11696)));
evalcond[3]=(((r10*x11697))+(((-1.0)*r11*x11693*x11696)));
evalcond[4]=((((-1.0)*cj2*sj1*x11695))+((gconst5*r10*x11694))+(((-1.0)*r11*x11694*x11696))+(((-1.0)*cj1*sj2*x11695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11698=IKPowWithIntegerCheck(r02,-1);
if(!x11698.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11698.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11699=IKsin(j4);
IkReal x11700=IKcos(j4);
IkReal x11701=(gconst5*r20);
IkReal x11702=((1.0)*cj1);
IkReal x11703=(gconst5*r10);
IkReal x11704=((1.0)*gconst4*r21);
IkReal x11705=((1.0)*gconst4*r11);
evalcond[0]=(r02*x11699);
evalcond[1]=(((x11699*x11701))+(((-1.0)*x11699*x11704)));
evalcond[2]=(((x11699*x11703))+(((-1.0)*x11699*x11705)));
evalcond[3]=(((sj1*sj2))+((x11700*x11701))+(((-1.0)*x11700*x11704))+(((-1.0)*cj2*x11702)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x11702))+((x11700*x11703))+(((-1.0)*x11700*x11705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11707=IKPowWithIntegerCheck(r02,-1);
if(!x11707.valid){
continue;
}
IkReal x11706=x11707.value;
CheckValue<IkReal> x11708=IKPowWithIntegerCheck(cj3,-1);
if(!x11708.valid){
continue;
}
if( IKabs((x11706*(x11708.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11706)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11706*(x11708.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11706))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11706*(x11708.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11706));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11709=IKsin(j4);
IkReal x11710=IKcos(j4);
IkReal x11711=(gconst5*sj3);
IkReal x11712=((1.0)*r21);
IkReal x11713=(cj3*gconst5);
IkReal x11714=(sj1*sj2);
IkReal x11715=((1.0)*cj2);
IkReal x11716=((1.0)*r11);
IkReal x11717=(cj1*cj2);
IkReal x11718=(cj3*gconst4);
IkReal x11719=((1.0)*sj0);
IkReal x11720=(gconst4*sj3);
IkReal x11721=((1.0)*x11710);
IkReal x11722=(gconst4*x11709);
IkReal x11723=((1.0)*cj1*sj2);
IkReal x11724=(gconst5*x11709);
IkReal x11725=(x11710*x11720);
IkReal x11726=((1.0)*r02*x11709);
evalcond[0]=((((-1.0)*x11719))+(((-1.0)*r02*x11721)));
evalcond[1]=(((r20*x11724))+(((-1.0)*x11712*x11722)));
evalcond[2]=(cj0+((r10*x11724))+(((-1.0)*x11716*x11722)));
evalcond[3]=((((-1.0)*cj3*x11726))+((cj0*x11717))+(((-1.0)*cj0*x11714)));
evalcond[4]=((((-1.0)*cj0*x11723))+(((-1.0)*sj3*x11726))+(((-1.0)*cj0*sj1*x11715)));
evalcond[5]=((((-1.0)*x11723))+(((-1.0)*sj1*x11715))+((r20*x11720))+((r21*x11711))+((r21*x11710*x11718))+(((-1.0)*r20*x11713*x11721)));
evalcond[6]=((((-1.0)*r20*x11711*x11721))+x11714+(((-1.0)*r20*x11718))+(((-1.0)*x11712*x11713))+(((-1.0)*cj1*x11715))+((r21*x11725)));
evalcond[7]=(((sj0*x11717))+(((-1.0)*r10*x11713*x11721))+((r11*x11710*x11718))+((r10*x11720))+((r11*x11711))+(((-1.0)*x11714*x11719)));
evalcond[8]=((((-1.0)*sj0*sj1*x11715))+(((-1.0)*x11713*x11716))+(((-1.0)*cj1*sj2*x11719))+(((-1.0)*r10*x11718))+((r11*x11725))+(((-1.0)*r10*x11711*x11721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11727=((1.0)*gconst5);
IkReal x11728=((1.0)*gconst4);
CheckValue<IkReal> x11729=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*r11*x11728))),-1);
if(!x11729.valid){
continue;
}
CheckValue<IkReal> x11730=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11727))+((cj3*gconst4*r21))),-1);
if(!x11730.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11729.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11730.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x11727))+(((-1.0)*r20*sj3*x11728)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11729.value)))+IKsqr(((x11730.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x11727))+(((-1.0)*r20*sj3*x11728))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11729.value)), ((x11730.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x11727))+(((-1.0)*r20*sj3*x11728))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11731=IKsin(j4);
IkReal x11732=IKcos(j4);
IkReal x11733=(gconst5*sj3);
IkReal x11734=((1.0)*r21);
IkReal x11735=(cj3*gconst5);
IkReal x11736=(sj1*sj2);
IkReal x11737=((1.0)*cj2);
IkReal x11738=((1.0)*r11);
IkReal x11739=(cj1*cj2);
IkReal x11740=(cj3*gconst4);
IkReal x11741=((1.0)*sj0);
IkReal x11742=(gconst4*sj3);
IkReal x11743=((1.0)*x11732);
IkReal x11744=(gconst4*x11731);
IkReal x11745=((1.0)*cj1*sj2);
IkReal x11746=(gconst5*x11731);
IkReal x11747=(x11732*x11742);
IkReal x11748=((1.0)*r02*x11731);
evalcond[0]=((((-1.0)*x11741))+(((-1.0)*r02*x11743)));
evalcond[1]=(((r20*x11746))+(((-1.0)*x11734*x11744)));
evalcond[2]=((((-1.0)*x11738*x11744))+cj0+((r10*x11746)));
evalcond[3]=(((cj0*x11739))+(((-1.0)*cj3*x11748))+(((-1.0)*cj0*x11736)));
evalcond[4]=((((-1.0)*sj3*x11748))+(((-1.0)*cj0*x11745))+(((-1.0)*cj0*sj1*x11737)));
evalcond[5]=((((-1.0)*r20*x11735*x11743))+((r21*x11732*x11740))+(((-1.0)*x11745))+(((-1.0)*sj1*x11737))+((r20*x11742))+((r21*x11733)));
evalcond[6]=((((-1.0)*x11734*x11735))+x11736+(((-1.0)*r20*x11733*x11743))+(((-1.0)*r20*x11740))+(((-1.0)*cj1*x11737))+((r21*x11747)));
evalcond[7]=(((r11*x11733))+((sj0*x11739))+((r10*x11742))+(((-1.0)*r10*x11735*x11743))+((r11*x11732*x11740))+(((-1.0)*x11736*x11741)));
evalcond[8]=((((-1.0)*sj0*sj1*x11737))+(((-1.0)*cj1*sj2*x11741))+(((-1.0)*r10*x11740))+(((-1.0)*r10*x11733*x11743))+(((-1.0)*x11735*x11738))+((r11*x11747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11749=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11749.valid){
continue;
}
CheckValue<IkReal> x11750=IKPowWithIntegerCheck(r02,-1);
if(!x11750.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11749.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11750.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11749.value)))+IKsqr(((-1.0)*sj0*(x11750.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11749.value)), ((-1.0)*sj0*(x11750.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11751=IKsin(j4);
IkReal x11752=IKcos(j4);
IkReal x11753=(gconst5*sj3);
IkReal x11754=((1.0)*r21);
IkReal x11755=(cj3*gconst5);
IkReal x11756=(sj1*sj2);
IkReal x11757=((1.0)*cj2);
IkReal x11758=((1.0)*r11);
IkReal x11759=(cj1*cj2);
IkReal x11760=(cj3*gconst4);
IkReal x11761=((1.0)*sj0);
IkReal x11762=(gconst4*sj3);
IkReal x11763=((1.0)*x11752);
IkReal x11764=(gconst4*x11751);
IkReal x11765=((1.0)*cj1*sj2);
IkReal x11766=(gconst5*x11751);
IkReal x11767=(x11752*x11762);
IkReal x11768=((1.0)*r02*x11751);
evalcond[0]=((((-1.0)*r02*x11763))+(((-1.0)*x11761)));
evalcond[1]=(((r20*x11766))+(((-1.0)*x11754*x11764)));
evalcond[2]=(cj0+((r10*x11766))+(((-1.0)*x11758*x11764)));
evalcond[3]=(((cj0*x11759))+(((-1.0)*cj0*x11756))+(((-1.0)*cj3*x11768)));
evalcond[4]=((((-1.0)*sj3*x11768))+(((-1.0)*cj0*sj1*x11757))+(((-1.0)*cj0*x11765)));
evalcond[5]=(((r20*x11762))+((r21*x11752*x11760))+(((-1.0)*sj1*x11757))+(((-1.0)*r20*x11755*x11763))+(((-1.0)*x11765))+((r21*x11753)));
evalcond[6]=(x11756+(((-1.0)*x11754*x11755))+(((-1.0)*cj1*x11757))+(((-1.0)*r20*x11753*x11763))+(((-1.0)*r20*x11760))+((r21*x11767)));
evalcond[7]=(((r11*x11752*x11760))+((r11*x11753))+((r10*x11762))+((sj0*x11759))+(((-1.0)*x11756*x11761))+(((-1.0)*r10*x11755*x11763)));
evalcond[8]=((((-1.0)*cj1*sj2*x11761))+((r11*x11767))+(((-1.0)*r10*x11760))+(((-1.0)*x11755*x11758))+(((-1.0)*r10*x11753*x11763))+(((-1.0)*sj0*sj1*x11757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11769=((1.0)*sj0);
IkReal x11770=((1.0)*cj0);
CheckValue<IkReal> x11771 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11769))+(((-1.0)*r02*x11770)))),IkReal(((((-1.0)*gconst5*r00*x11770))+(((-1.0)*gconst5*r10*x11769))+((cj0*gconst4*r01))+((gconst4*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11771.valid){
continue;
}
CheckValue<IkReal> x11772=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11771.value)+(((1.5707963267949)*(x11772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11773=IKsin(j4);
IkReal x11774=IKcos(j4);
IkReal x11775=(gconst5*sj3);
IkReal x11776=((1.0)*r21);
IkReal x11777=(cj3*gconst5);
IkReal x11778=(sj1*sj2);
IkReal x11779=(cj1*cj2);
IkReal x11780=((1.0)*r11);
IkReal x11781=((1.0)*cj3);
IkReal x11782=(gconst4*r20);
IkReal x11783=((1.0)*sj0);
IkReal x11784=(gconst4*r10);
IkReal x11785=(cj2*sj1);
IkReal x11786=((1.0)*cj0);
IkReal x11787=(gconst4*r00);
IkReal x11788=((1.0)*r01);
IkReal x11789=((1.0)*sj3);
IkReal x11790=((1.0)*x11774);
IkReal x11791=(gconst4*x11773);
IkReal x11792=(r12*x11773);
IkReal x11793=(r22*x11773);
IkReal x11794=((1.0)*cj1*sj2);
IkReal x11795=(gconst5*x11773);
IkReal x11796=(r02*x11773);
IkReal x11797=(gconst4*sj3*x11774);
IkReal x11798=(cj3*gconst4*x11774);
evalcond[0]=(((r20*x11795))+(((-1.0)*r22*x11790))+(((-1.0)*x11776*x11791)));
evalcond[1]=(cj0+((r10*x11795))+(((-1.0)*x11780*x11791))+(((-1.0)*r12*x11790)));
evalcond[2]=((((-1.0)*x11788*x11791))+(((-1.0)*r02*x11790))+(((-1.0)*x11783))+((r00*x11795)));
evalcond[3]=((((-1.0)*x11785))+(((-1.0)*x11781*x11793))+(((-1.0)*r20*x11777*x11790))+((sj3*x11782))+((r21*x11775))+((r21*x11798))+(((-1.0)*x11794)));
evalcond[4]=(x11778+(((-1.0)*x11779))+(((-1.0)*x11789*x11793))+(((-1.0)*x11781*x11782))+(((-1.0)*x11776*x11777))+(((-1.0)*r20*x11775*x11790))+((r21*x11797)));
evalcond[5]=((((-1.0)*x11778*x11786))+(((-1.0)*r00*x11777*x11790))+(((-1.0)*x11781*x11796))+((sj3*x11787))+((r01*x11775))+((r01*x11798))+((cj0*x11779)));
evalcond[6]=((((-1.0)*x11778*x11783))+((sj0*x11779))+((r11*x11798))+(((-1.0)*x11781*x11792))+((r11*x11775))+((sj3*x11784))+(((-1.0)*r10*x11777*x11790)));
evalcond[7]=((((-1.0)*x11785*x11786))+(((-1.0)*x11789*x11796))+(((-1.0)*x11781*x11787))+(((-1.0)*x11777*x11788))+((r01*x11797))+(((-1.0)*cj1*sj2*x11786))+(((-1.0)*r00*x11775*x11790)));
evalcond[8]=(((r11*x11797))+(((-1.0)*r10*x11775*x11790))+(((-1.0)*x11789*x11792))+(((-1.0)*x11781*x11784))+(((-1.0)*x11783*x11785))+(((-1.0)*x11777*x11780))+(((-1.0)*cj1*sj2*x11783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11799=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11799.valid){
continue;
}
CheckValue<IkReal> x11800 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst5*r20*sj0))+(((-1.0)*gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11799.value)))+(x11800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11801=IKsin(j4);
IkReal x11802=IKcos(j4);
IkReal x11803=(gconst5*sj3);
IkReal x11804=((1.0)*r21);
IkReal x11805=(cj3*gconst5);
IkReal x11806=(sj1*sj2);
IkReal x11807=(cj1*cj2);
IkReal x11808=((1.0)*r11);
IkReal x11809=((1.0)*cj3);
IkReal x11810=(gconst4*r20);
IkReal x11811=((1.0)*sj0);
IkReal x11812=(gconst4*r10);
IkReal x11813=(cj2*sj1);
IkReal x11814=((1.0)*cj0);
IkReal x11815=(gconst4*r00);
IkReal x11816=((1.0)*r01);
IkReal x11817=((1.0)*sj3);
IkReal x11818=((1.0)*x11802);
IkReal x11819=(gconst4*x11801);
IkReal x11820=(r12*x11801);
IkReal x11821=(r22*x11801);
IkReal x11822=((1.0)*cj1*sj2);
IkReal x11823=(gconst5*x11801);
IkReal x11824=(r02*x11801);
IkReal x11825=(gconst4*sj3*x11802);
IkReal x11826=(cj3*gconst4*x11802);
evalcond[0]=((((-1.0)*r22*x11818))+(((-1.0)*x11804*x11819))+((r20*x11823)));
evalcond[1]=(cj0+(((-1.0)*r12*x11818))+((r10*x11823))+(((-1.0)*x11808*x11819)));
evalcond[2]=((((-1.0)*x11816*x11819))+(((-1.0)*r02*x11818))+(((-1.0)*x11811))+((r00*x11823)));
evalcond[3]=(((r21*x11803))+(((-1.0)*x11813))+(((-1.0)*r20*x11805*x11818))+(((-1.0)*x11822))+((sj3*x11810))+((r21*x11826))+(((-1.0)*x11809*x11821)));
evalcond[4]=((((-1.0)*x11807))+(((-1.0)*x11809*x11810))+(((-1.0)*r20*x11803*x11818))+((r21*x11825))+(((-1.0)*x11804*x11805))+x11806+(((-1.0)*x11817*x11821)));
evalcond[5]=((((-1.0)*r00*x11805*x11818))+((sj3*x11815))+(((-1.0)*x11806*x11814))+((cj0*x11807))+((r01*x11826))+((r01*x11803))+(((-1.0)*x11809*x11824)));
evalcond[6]=((((-1.0)*r10*x11805*x11818))+((r11*x11803))+((sj3*x11812))+(((-1.0)*x11806*x11811))+((sj0*x11807))+((r11*x11826))+(((-1.0)*x11809*x11820)));
evalcond[7]=((((-1.0)*x11805*x11816))+(((-1.0)*x11813*x11814))+(((-1.0)*x11809*x11815))+(((-1.0)*cj1*sj2*x11814))+(((-1.0)*r00*x11803*x11818))+((r01*x11825))+(((-1.0)*x11817*x11824)));
evalcond[8]=((((-1.0)*r10*x11803*x11818))+(((-1.0)*x11809*x11812))+(((-1.0)*x11805*x11808))+(((-1.0)*cj1*sj2*x11811))+((r11*x11825))+(((-1.0)*x11811*x11813))+(((-1.0)*x11817*x11820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11827=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x11827.valid){
continue;
}
CheckValue<IkReal> x11828 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst4*r21))+((cj0*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11827.value)))+(x11828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11829=IKsin(j4);
IkReal x11830=IKcos(j4);
IkReal x11831=(gconst5*sj3);
IkReal x11832=((1.0)*r21);
IkReal x11833=(cj3*gconst5);
IkReal x11834=(sj1*sj2);
IkReal x11835=(cj1*cj2);
IkReal x11836=((1.0)*r11);
IkReal x11837=((1.0)*cj3);
IkReal x11838=(gconst4*r20);
IkReal x11839=((1.0)*sj0);
IkReal x11840=(gconst4*r10);
IkReal x11841=(cj2*sj1);
IkReal x11842=((1.0)*cj0);
IkReal x11843=(gconst4*r00);
IkReal x11844=((1.0)*r01);
IkReal x11845=((1.0)*sj3);
IkReal x11846=((1.0)*x11830);
IkReal x11847=(gconst4*x11829);
IkReal x11848=(r12*x11829);
IkReal x11849=(r22*x11829);
IkReal x11850=((1.0)*cj1*sj2);
IkReal x11851=(gconst5*x11829);
IkReal x11852=(r02*x11829);
IkReal x11853=(gconst4*sj3*x11830);
IkReal x11854=(cj3*gconst4*x11830);
evalcond[0]=(((r20*x11851))+(((-1.0)*x11832*x11847))+(((-1.0)*r22*x11846)));
evalcond[1]=(cj0+(((-1.0)*x11836*x11847))+(((-1.0)*r12*x11846))+((r10*x11851)));
evalcond[2]=((((-1.0)*r02*x11846))+(((-1.0)*x11844*x11847))+((r00*x11851))+(((-1.0)*x11839)));
evalcond[3]=(((r21*x11854))+(((-1.0)*x11850))+((r21*x11831))+((sj3*x11838))+(((-1.0)*x11841))+(((-1.0)*r20*x11833*x11846))+(((-1.0)*x11837*x11849)));
evalcond[4]=(((r21*x11853))+(((-1.0)*x11845*x11849))+(((-1.0)*r20*x11831*x11846))+(((-1.0)*x11837*x11838))+(((-1.0)*x11835))+(((-1.0)*x11832*x11833))+x11834);
evalcond[5]=((((-1.0)*r00*x11833*x11846))+((r01*x11854))+(((-1.0)*x11834*x11842))+(((-1.0)*x11837*x11852))+((cj0*x11835))+((sj3*x11843))+((r01*x11831)));
evalcond[6]=(((r11*x11831))+((r11*x11854))+(((-1.0)*x11834*x11839))+(((-1.0)*x11837*x11848))+(((-1.0)*r10*x11833*x11846))+((sj0*x11835))+((sj3*x11840)));
evalcond[7]=((((-1.0)*x11833*x11844))+(((-1.0)*x11845*x11852))+(((-1.0)*cj1*sj2*x11842))+(((-1.0)*x11841*x11842))+((r01*x11853))+(((-1.0)*x11837*x11843))+(((-1.0)*r00*x11831*x11846)));
evalcond[8]=((((-1.0)*x11833*x11836))+(((-1.0)*x11845*x11848))+(((-1.0)*r10*x11831*x11846))+(((-1.0)*x11839*x11841))+((r11*x11853))+(((-1.0)*cj1*sj2*x11839))+(((-1.0)*x11837*x11840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11856 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11856)==0){
continue;
}
IkReal x11855=pow(x11856,-0.5);
CheckValue<IkReal> x11857 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11857.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11857.value));
IkReal gconst7=((-1.0)*r11*x11855);
IkReal gconst8=(r10*x11855);
CheckValue<IkReal> x11858 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11858.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11858.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11861 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11861.valid){
continue;
}
IkReal x11859=((-1.0)*(x11861.value));
IkReal x11860=x11855;
sj5=gconst7;
cj5=gconst8;
j5=x11859;
IkReal gconst6=x11859;
IkReal gconst7=((-1.0)*r11*x11860);
IkReal gconst8=(r10*x11860);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11862=((1.0)*sj0);
IkReal x11863=((1.0)*cj0);
CheckValue<IkReal> x11864=IKPowWithIntegerCheck(IKsign((((gconst7*r20))+((gconst8*r21)))),-1);
if(!x11864.valid){
continue;
}
CheckValue<IkReal> x11865 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11862))+(((-1.0)*r02*x11863)))),IkReal(((((-1.0)*gconst8*r00*x11863))+((cj0*gconst7*r01))+((gconst7*r11*sj0))+(((-1.0)*gconst8*r10*x11862)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11865.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11864.value)))+(x11865.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11866=IKsin(j4);
IkReal x11867=IKcos(j4);
IkReal x11868=(gconst7*sj3);
IkReal x11869=(cj1*cj2);
IkReal x11870=(cj3*gconst7);
IkReal x11871=(sj1*sj2);
IkReal x11872=(gconst8*r10);
IkReal x11873=(cj3*gconst8);
IkReal x11874=((1.0)*sj0);
IkReal x11875=(gconst8*sj3);
IkReal x11876=((1.0)*x11867);
IkReal x11877=(gconst8*x11866);
IkReal x11878=(r01*x11867);
IkReal x11879=(r11*x11867);
IkReal x11880=((1.0)*cj2*sj1);
IkReal x11881=((1.0)*x11866);
IkReal x11882=((1.0)*cj1*sj2);
IkReal x11883=(r21*x11867);
evalcond[0]=((((-1.0)*r22*x11876))+((r20*x11877))+(((-1.0)*gconst7*r21*x11881)));
evalcond[1]=(cj0+((x11866*x11872))+(((-1.0)*r12*x11876))+(((-1.0)*gconst7*r11*x11881)));
evalcond[2]=((((-1.0)*x11874))+((r00*x11877))+(((-1.0)*gconst7*r01*x11881))+(((-1.0)*r02*x11876)));
evalcond[3]=((((-1.0)*cj3*r22*x11881))+((r20*x11868))+(((-1.0)*r20*x11873*x11876))+((r21*x11875))+(((-1.0)*x11882))+(((-1.0)*x11880))+((x11870*x11883)));
evalcond[4]=((((-1.0)*r21*x11873))+(((-1.0)*x11869))+(((-1.0)*r20*x11875*x11876))+(((-1.0)*r20*x11870))+(((-1.0)*r22*sj3*x11881))+((x11868*x11883))+x11871);
evalcond[5]=((((-1.0)*r00*x11873*x11876))+((r00*x11868))+((r01*x11875))+(((-1.0)*cj0*x11871))+((x11870*x11878))+((cj0*x11869))+(((-1.0)*cj3*r02*x11881)));
evalcond[6]=((((-1.0)*x11871*x11874))+(((-1.0)*cj3*r12*x11881))+(((-1.0)*cj3*x11872*x11876))+((x11870*x11879))+((r10*x11868))+((sj0*x11869))+((r11*x11875)));
evalcond[7]=((((-1.0)*r00*x11870))+(((-1.0)*r00*x11875*x11876))+((x11868*x11878))+(((-1.0)*r01*x11873))+(((-1.0)*cj0*x11882))+(((-1.0)*cj0*x11880))+(((-1.0)*r02*sj3*x11881)));
evalcond[8]=((((-1.0)*r10*x11870))+(((-1.0)*cj1*sj2*x11874))+((x11868*x11879))+(((-1.0)*sj3*x11872*x11876))+(((-1.0)*r12*sj3*x11881))+(((-1.0)*cj2*sj1*x11874))+(((-1.0)*r11*x11873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11884 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst7*r21))+((cj0*gconst8*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11884.valid){
continue;
}
CheckValue<IkReal> x11885=IKPowWithIntegerCheck(IKsign((((gconst7*r00))+((gconst8*r01)))),-1);
if(!x11885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11884.value)+(((1.5707963267949)*(x11885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11886=IKsin(j4);
IkReal x11887=IKcos(j4);
IkReal x11888=(gconst7*sj3);
IkReal x11889=(cj1*cj2);
IkReal x11890=(cj3*gconst7);
IkReal x11891=(sj1*sj2);
IkReal x11892=(gconst8*r10);
IkReal x11893=(cj3*gconst8);
IkReal x11894=((1.0)*sj0);
IkReal x11895=(gconst8*sj3);
IkReal x11896=((1.0)*x11887);
IkReal x11897=(gconst8*x11886);
IkReal x11898=(r01*x11887);
IkReal x11899=(r11*x11887);
IkReal x11900=((1.0)*cj2*sj1);
IkReal x11901=((1.0)*x11886);
IkReal x11902=((1.0)*cj1*sj2);
IkReal x11903=(r21*x11887);
evalcond[0]=((((-1.0)*r22*x11896))+(((-1.0)*gconst7*r21*x11901))+((r20*x11897)));
evalcond[1]=(cj0+((x11886*x11892))+(((-1.0)*r12*x11896))+(((-1.0)*gconst7*r11*x11901)));
evalcond[2]=(((r00*x11897))+(((-1.0)*gconst7*r01*x11901))+(((-1.0)*r02*x11896))+(((-1.0)*x11894)));
evalcond[3]=((((-1.0)*cj3*r22*x11901))+((r21*x11895))+(((-1.0)*r20*x11893*x11896))+((x11890*x11903))+(((-1.0)*x11900))+(((-1.0)*x11902))+((r20*x11888)));
evalcond[4]=((((-1.0)*r20*x11890))+(((-1.0)*x11889))+(((-1.0)*r20*x11895*x11896))+((x11888*x11903))+(((-1.0)*r21*x11893))+x11891+(((-1.0)*r22*sj3*x11901)));
evalcond[5]=((((-1.0)*cj3*r02*x11901))+((r00*x11888))+((r01*x11895))+(((-1.0)*cj0*x11891))+(((-1.0)*r00*x11893*x11896))+((cj0*x11889))+((x11890*x11898)));
evalcond[6]=((((-1.0)*cj3*r12*x11901))+((r10*x11888))+(((-1.0)*x11891*x11894))+((x11890*x11899))+((r11*x11895))+((sj0*x11889))+(((-1.0)*cj3*x11892*x11896)));
evalcond[7]=((((-1.0)*cj0*x11900))+(((-1.0)*cj0*x11902))+(((-1.0)*r00*x11895*x11896))+((x11888*x11898))+(((-1.0)*r02*sj3*x11901))+(((-1.0)*r01*x11893))+(((-1.0)*r00*x11890)));
evalcond[8]=((((-1.0)*r11*x11893))+((x11888*x11899))+(((-1.0)*sj3*x11892*x11896))+(((-1.0)*cj2*sj1*x11894))+(((-1.0)*r10*x11890))+(((-1.0)*cj1*sj2*x11894))+(((-1.0)*r12*sj3*x11901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11905 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11905)==0){
continue;
}
IkReal x11904=pow(x11905,-0.5);
CheckValue<IkReal> x11906 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11906.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11906.value))));
IkReal gconst10=((1.0)*r11*x11904);
IkReal gconst11=((-1.0)*r10*x11904);
CheckValue<IkReal> x11907 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11907.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11907.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11910 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11910.valid){
continue;
}
IkReal x11908=((1.0)*(x11910.value));
IkReal x11909=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11908)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11908)));
IkReal gconst10=((1.0)*r11*x11909);
IkReal gconst11=((-1.0)*r10*x11909);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11913 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11913.valid){
continue;
}
IkReal x11911=((1.0)*(x11913.value));
IkReal x11912=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11911)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11911)));
IkReal gconst10=((1.0)*r11*x11912);
IkReal gconst11=((-1.0)*r10*x11912);
IkReal x11914=r12*r12;
IkReal x11915=((1.0)*sj0);
IkReal x11916=(cj0*r02);
IkReal x11917=x11904;
j4eval[0]=((IKabs((((sj0*x11914*x11917))+((r12*x11916*x11917))+(((-1.0)*x11915*x11917)))))+(IKabs(((((-1.0)*x11916))+(((-1.0)*r12*x11915))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11920 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11920.valid){
continue;
}
IkReal x11918=((1.0)*(x11920.value));
IkReal x11919=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11918)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11918)));
IkReal gconst10=((1.0)*r11*x11919);
IkReal gconst11=((-1.0)*r10*x11919);
CheckValue<IkReal> x11924=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11924.valid){
continue;
}
IkReal x11921=x11924.value;
IkReal x11922=(cj3*x11921);
IkReal x11923=((1.0)*x11922);
j4eval[0]=IKsign((((x11923*(r11*r11)*(r21*r21)))+(((2.0)*r10*r11*r20*r21*x11922))+((cj3*(r22*r22)))+((x11923*(r10*r10)*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x11927 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11927.valid){
continue;
}
IkReal x11925=((1.0)*(x11927.value));
IkReal x11926=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11925)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11925)));
IkReal gconst10=((1.0)*r11*x11926);
IkReal gconst11=((-1.0)*r10*x11926);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11930 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11930.valid){
continue;
}
IkReal x11928=((1.0)*(x11930.value));
IkReal x11929=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11928)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11928)));
IkReal gconst10=((1.0)*r11*x11929);
IkReal gconst11=((-1.0)*r10*x11929);
IkReal x11931=r12*r12;
IkReal x11932=((1.0)*sj0);
IkReal x11933=(cj0*r02);
IkReal x11934=x11904;
j4eval[0]=((IKabs(((((-1.0)*x11933))+(((-1.0)*r12*x11932)))))+(IKabs((((sj0*x11931*x11934))+((r12*x11933*x11934))+(((-1.0)*x11932*x11934))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11937 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11937.valid){
continue;
}
IkReal x11935=((1.0)*(x11937.value));
IkReal x11936=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11935)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11935)));
IkReal gconst10=((1.0)*r11*x11936);
IkReal gconst11=((-1.0)*r10*x11936);
IkReal x11938=r12*r12;
IkReal x11939=(cj1*cj2*r22);
IkReal x11940=(r22*sj1*sj2);
CheckValue<IkReal> x11944=IKPowWithIntegerCheck(((-1.0)+x11938),-1);
if(!x11944.valid){
continue;
}
IkReal x11941=x11944.value;
if((((1.0)+(((-1.0)*x11938)))) < -0.00001)
continue;
IkReal x11942=IKsqrt(((1.0)+(((-1.0)*x11938))));
IkReal x11943=(r12*x11941*x11942);
j4eval[0]=((IKabs(((((-1.0)*x11940*x11943))+((x11939*x11943)))))+(IKabs((x11940+(((-1.0)*x11939))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x11947 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11947.valid){
continue;
}
IkReal x11945=((1.0)*(x11947.value));
IkReal x11946=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11945)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11945)));
IkReal gconst10=((1.0)*r11*x11946);
IkReal gconst11=((-1.0)*r10*x11946);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x11950 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11950.valid){
continue;
}
IkReal x11948=((1.0)*(x11950.value));
IkReal x11949=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11948)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11948)));
IkReal gconst10=((1.0)*r11*x11949);
IkReal gconst11=((-1.0)*r10*x11949);
IkReal x11951=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11955=IKPowWithIntegerCheck(x11951,-1);
if(!x11955.valid){
continue;
}
IkReal x11952=x11955.value;
IkReal x11953=((1.0)*x11952);
IkReal x11954=((((-1.0)*x11953*(r00*r00)*(r10*r10)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11953*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x11952)));
j4eval[0]=x11954;
j4eval[1]=r02;
j4eval[2]=x11951;
j4eval[3]=IKsign(x11954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x11958 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x11958.valid){
continue;
}
IkReal x11956=((1.0)*(x11958.value));
IkReal x11957=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11956)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11956)));
IkReal gconst10=((1.0)*r11*x11957);
IkReal gconst11=((-1.0)*r10*x11957);
IkReal x11959=r12*r12;
IkReal x11960=(cj1*cj2*r22);
IkReal x11961=(r22*sj1*sj2);
CheckValue<IkReal> x11965=IKPowWithIntegerCheck(((-1.0)+x11959),-1);
if(!x11965.valid){
continue;
}
IkReal x11962=x11965.value;
if((((1.0)+(((-1.0)*x11959)))) < -0.00001)
continue;
IkReal x11963=IKsqrt(((1.0)+(((-1.0)*x11959))));
IkReal x11964=(r12*x11962*x11963);
j4eval[0]=((IKabs(((((-1.0)*x11961*x11964))+((x11960*x11964)))))+(IKabs((x11961+(((-1.0)*x11960))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11966=(gconst10*r21);
IkReal x11967=(cj1*cj2);
IkReal x11968=(gconst11*r20);
IkReal x11969=(sj1*sj2);
CheckValue<IkReal> x11970=IKPowWithIntegerCheck(IKsign(((x11966*x11966)+(r22*r22)+(x11968*x11968)+(((-2.0)*x11966*x11968)))),-1);
if(!x11970.valid){
continue;
}
CheckValue<IkReal> x11971 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11967))+((r22*x11969)))),IkReal((((x11968*x11969))+(((-1.0)*x11967*x11968))+(((-1.0)*x11966*x11969))+((x11966*x11967)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11970.value)))+(x11971.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11972=IKsin(j4);
IkReal x11973=IKcos(j4);
IkReal x11974=(gconst11*r00);
IkReal x11975=((1.0)*cj2);
IkReal x11976=((1.0)*x11973);
IkReal x11977=(gconst10*x11973);
IkReal x11978=(gconst11*x11972);
IkReal x11979=((1.0)*x11972);
evalcond[0]=(((r20*x11978))+(((-1.0)*r22*x11976))+(((-1.0)*gconst10*r21*x11979)));
evalcond[1]=((((-1.0)*r12*x11976))+(((-1.0)*gconst10*r11*x11979))+((r10*x11978)));
evalcond[2]=(((r01*x11977))+(((-1.0)*x11974*x11976))+(((-1.0)*r02*x11979)));
evalcond[3]=((-1.0)+((x11972*x11974))+(((-1.0)*gconst10*r01*x11979))+(((-1.0)*r02*x11976)));
evalcond[4]=((((-1.0)*cj1*x11975))+((sj1*sj2))+(((-1.0)*r22*x11979))+((r21*x11977))+(((-1.0)*gconst11*r20*x11976)));
evalcond[5]=((((-1.0)*sj1*x11975))+(((-1.0)*r12*x11979))+((r11*x11977))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x11976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11980=(gconst10*r01);
IkReal x11981=(gconst11*r00);
CheckValue<IkReal> x11982=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11980*x11980)))+(((-1.0)*(r02*r02)))+(((2.0)*x11980*x11981))+(((-1.0)*(x11981*x11981))))),-1);
if(!x11982.valid){
continue;
}
CheckValue<IkReal> x11983 = IKatan2WithCheck(IkReal((x11980+(((-1.0)*x11981)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11982.value)))+(x11983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11984=IKsin(j4);
IkReal x11985=IKcos(j4);
IkReal x11986=(gconst11*r00);
IkReal x11987=((1.0)*cj2);
IkReal x11988=((1.0)*x11985);
IkReal x11989=(gconst10*x11985);
IkReal x11990=(gconst11*x11984);
IkReal x11991=((1.0)*x11984);
evalcond[0]=(((r20*x11990))+(((-1.0)*gconst10*r21*x11991))+(((-1.0)*r22*x11988)));
evalcond[1]=((((-1.0)*r12*x11988))+(((-1.0)*gconst10*r11*x11991))+((r10*x11990)));
evalcond[2]=((((-1.0)*r02*x11991))+(((-1.0)*x11986*x11988))+((r01*x11989)));
evalcond[3]=((-1.0)+((x11984*x11986))+(((-1.0)*r02*x11988))+(((-1.0)*gconst10*r01*x11991)));
evalcond[4]=(((r21*x11989))+((sj1*sj2))+(((-1.0)*gconst11*r20*x11988))+(((-1.0)*cj1*x11987))+(((-1.0)*r22*x11991)));
evalcond[5]=((((-1.0)*sj1*x11987))+(((-1.0)*gconst11*r10*x11988))+(((-1.0)*cj1*sj2))+((r11*x11989))+(((-1.0)*r12*x11991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11992=((1.0)*gconst10);
CheckValue<IkReal> x11993 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x11992))+((gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11993.valid){
continue;
}
CheckValue<IkReal> x11994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11992))+(((-1.0)*gconst11*r21)))),-1);
if(!x11994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11993.value)+(((1.5707963267949)*(x11994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11995=IKsin(j4);
IkReal x11996=IKcos(j4);
IkReal x11997=(gconst11*r00);
IkReal x11998=((1.0)*cj2);
IkReal x11999=((1.0)*x11996);
IkReal x12000=(gconst10*x11996);
IkReal x12001=(gconst11*x11995);
IkReal x12002=((1.0)*x11995);
evalcond[0]=(((r20*x12001))+(((-1.0)*gconst10*r21*x12002))+(((-1.0)*r22*x11999)));
evalcond[1]=((((-1.0)*gconst10*r11*x12002))+(((-1.0)*r12*x11999))+((r10*x12001)));
evalcond[2]=(((r01*x12000))+(((-1.0)*r02*x12002))+(((-1.0)*x11997*x11999)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11999))+(((-1.0)*gconst10*r01*x12002))+((x11995*x11997)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*gconst11*r20*x11999))+(((-1.0)*cj1*x11998))+((r21*x12000))+(((-1.0)*r22*x12002)));
evalcond[5]=((((-1.0)*gconst11*r10*x11999))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11998))+(((-1.0)*r12*x12002))+((r11*x12000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12005 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12005.valid){
continue;
}
IkReal x12003=((1.0)*(x12005.value));
IkReal x12004=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12003)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12003)));
IkReal gconst10=((1.0)*r11*x12004);
IkReal gconst11=((-1.0)*r10*x12004);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12008 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12008.valid){
continue;
}
IkReal x12006=((1.0)*(x12008.value));
IkReal x12007=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12006)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12006)));
IkReal gconst10=((1.0)*r11*x12007);
IkReal gconst11=((-1.0)*r10*x12007);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12011 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12011.valid){
continue;
}
IkReal x12009=((1.0)*(x12011.value));
IkReal x12010=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12009)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12009)));
IkReal gconst10=((1.0)*r11*x12010);
IkReal gconst11=((-1.0)*r10*x12010);
IkReal x12012=r12*r12;
CheckValue<IkReal> x12015=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x12012))),-1);
if(!x12015.valid){
continue;
}
IkReal x12013=x12015.value;
IkReal x12014=((1.0)*x12013);
j4eval[0]=IKsign((((x12014*(r10*r10*r10*r10)))+(((2.0)*x12013*(r10*r10)*(r11*r11)))+x12012+((x12014*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12016=(cj2*sj1);
IkReal x12017=(gconst10*r11);
IkReal x12018=(gconst11*r10);
IkReal x12019=(cj1*sj2);
CheckValue<IkReal> x12020=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x12017*x12017)+(x12018*x12018)+(((-2.0)*x12017*x12018)))),-1);
if(!x12020.valid){
continue;
}
CheckValue<IkReal> x12021 = IKatan2WithCheck(IkReal((((r12*x12016))+((r12*x12019)))),IkReal((((x12018*x12019))+((x12016*x12018))+(((-1.0)*x12016*x12017))+(((-1.0)*x12017*x12019)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12020.value)))+(x12021.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12022=IKsin(j4);
IkReal x12023=IKcos(j4);
IkReal x12024=(gconst11*r00);
IkReal x12025=((1.0)*x12023);
IkReal x12026=(gconst10*x12023);
IkReal x12027=(gconst11*x12022);
IkReal x12028=((1.0)*x12022);
evalcond[0]=(((r20*x12027))+(((-1.0)*gconst10*r21*x12028))+(((-1.0)*r22*x12025)));
evalcond[1]=((((-1.0)*gconst10*r11*x12028))+(((-1.0)*r12*x12025))+((r10*x12027)));
evalcond[2]=(((r01*x12026))+(((-1.0)*x12024*x12025))+(((-1.0)*r02*x12028)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12025))+((x12022*x12024))+(((-1.0)*gconst10*r01*x12028)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x12026))+(((-1.0)*r12*x12028))+(((-1.0)*gconst11*r10*x12025)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12025))+((r21*x12026))+(((-1.0)*r22*x12028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12029=(gconst10*r01);
IkReal x12030=(gconst11*r00);
CheckValue<IkReal> x12031=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12029*x12030))+(x12029*x12029)+(x12030*x12030)+(r02*r02))),-1);
if(!x12031.valid){
continue;
}
CheckValue<IkReal> x12032 = IKatan2WithCheck(IkReal(((((-1.0)*x12030))+x12029)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x12032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12031.value)))+(x12032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12033=IKsin(j4);
IkReal x12034=IKcos(j4);
IkReal x12035=(gconst11*r00);
IkReal x12036=((1.0)*x12034);
IkReal x12037=(gconst10*x12034);
IkReal x12038=(gconst11*x12033);
IkReal x12039=((1.0)*x12033);
evalcond[0]=(((r20*x12038))+(((-1.0)*gconst10*r21*x12039))+(((-1.0)*r22*x12036)));
evalcond[1]=((((-1.0)*gconst10*r11*x12039))+(((-1.0)*r12*x12036))+((r10*x12038)));
evalcond[2]=(((r01*x12037))+(((-1.0)*r02*x12039))+(((-1.0)*x12035*x12036)));
evalcond[3]=((1.0)+(((-1.0)*gconst10*r01*x12039))+((x12033*x12035))+(((-1.0)*r02*x12036)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst11*r10*x12036))+(((-1.0)*r12*x12039))+((r11*x12037)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12037))+(((-1.0)*gconst11*r20*x12036))+(((-1.0)*r22*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12040 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst10*r11))+((gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12040.valid){
continue;
}
CheckValue<IkReal> x12041=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12040.value)+(((1.5707963267949)*(x12041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12042=IKsin(j4);
IkReal x12043=IKcos(j4);
IkReal x12044=(gconst11*r00);
IkReal x12045=((1.0)*x12043);
IkReal x12046=(gconst10*x12043);
IkReal x12047=(gconst11*x12042);
IkReal x12048=((1.0)*x12042);
evalcond[0]=(((r20*x12047))+(((-1.0)*gconst10*r21*x12048))+(((-1.0)*r22*x12045)));
evalcond[1]=(((r10*x12047))+(((-1.0)*r12*x12045))+(((-1.0)*gconst10*r11*x12048)));
evalcond[2]=(((r01*x12046))+(((-1.0)*x12044*x12045))+(((-1.0)*r02*x12048)));
evalcond[3]=((1.0)+(((-1.0)*gconst10*r01*x12048))+(((-1.0)*r02*x12045))+((x12042*x12044)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x12048))+((cj1*sj2))+((r11*x12046))+(((-1.0)*gconst11*r10*x12045)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12046))+(((-1.0)*gconst11*r20*x12045))+(((-1.0)*r22*x12048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12051 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12051.valid){
continue;
}
IkReal x12049=((1.0)*(x12051.value));
IkReal x12050=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12049)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12050);
rxp1_1=(px*r21);
rxp1_2=(r11*x12050);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12049)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12054 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12054.valid){
continue;
}
IkReal x12052=((1.0)*(x12054.value));
IkReal x12053=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12052)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12053);
rxp1_1=(px*r21);
rxp1_2=(r11*x12053);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12052)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12057 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12057.valid){
continue;
}
IkReal x12055=((1.0)*(x12057.value));
IkReal x12056=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12055)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12056);
rxp1_1=(px*r21);
rxp1_2=(r11*x12056);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12055)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12060=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12060.valid){
continue;
}
IkReal x12058=x12060.value;
IkReal x12059=(sj0*x12058);
cj4array[0]=(((cj1*sj2*x12059))+((cj2*sj1*x12059)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12061=IKsin(j4);
IkReal x12062=IKcos(j4);
IkReal x12063=(gconst10*r21);
IkReal x12064=(gconst11*r20);
IkReal x12065=((1.0)*x12061);
IkReal x12066=((1.0)*x12062);
evalcond[0]=((-1.0)*r02*x12061);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12066)));
evalcond[2]=(((x12061*x12064))+(((-1.0)*x12063*x12065)));
evalcond[3]=((((-1.0)*gconst10*r11*x12065))+((gconst11*r10*x12061)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12064*x12066))+((x12062*x12063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12068=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12068.valid){
continue;
}
IkReal x12067=x12068.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12067))+((cj1*cj2*x12067)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12069=IKsin(j4);
IkReal x12070=IKcos(j4);
IkReal x12071=((1.0)*sj0);
IkReal x12072=(gconst10*r11);
IkReal x12073=(gconst11*r10);
IkReal x12074=((1.0)*x12070);
IkReal x12075=((1.0)*x12069);
evalcond[0]=((-1.0)*r02*x12069);
evalcond[1]=((((-1.0)*r02*x12074))+(((-1.0)*x12071)));
evalcond[2]=((((-1.0)*gconst10*r21*x12075))+((gconst11*r20*x12069)));
evalcond[3]=((((-1.0)*x12072*x12075))+((x12069*x12073)));
evalcond[4]=((((-1.0)*x12073*x12074))+(((-1.0)*cj2*sj1*x12071))+((x12070*x12072))+(((-1.0)*cj1*sj2*x12071)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12076=IKPowWithIntegerCheck(r02,-1);
if(!x12076.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12076.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12077=IKsin(j4);
IkReal x12078=IKcos(j4);
IkReal x12079=((1.0)*sj0);
IkReal x12080=(gconst11*r20);
IkReal x12081=(gconst11*r10);
IkReal x12082=(gconst10*x12078);
IkReal x12083=((1.0)*x12078);
IkReal x12084=((1.0)*gconst10*x12077);
evalcond[0]=((-1.0)*r02*x12077);
evalcond[1]=((((-1.0)*r21*x12084))+((x12077*x12080)));
evalcond[2]=((((-1.0)*r11*x12084))+((x12077*x12081)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12080*x12083))+((r21*x12082)));
evalcond[4]=((((-1.0)*cj2*sj1*x12079))+(((-1.0)*cj1*sj2*x12079))+(((-1.0)*x12081*x12083))+((r11*x12082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12085=((1.0)*gconst10);
CheckValue<IkReal> x12086 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12085))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*r11*sj0*x12085)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12086.valid){
continue;
}
CheckValue<IkReal> x12087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12085))+(((-1.0)*gconst11*r21)))),-1);
if(!x12087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12086.value)+(((1.5707963267949)*(x12087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12088=IKsin(j4);
IkReal x12089=IKcos(j4);
IkReal x12090=((1.0)*cj2);
IkReal x12091=((1.0)*sj0);
IkReal x12092=(cj1*sj2);
IkReal x12093=(gconst10*x12089);
IkReal x12094=(gconst11*x12088);
IkReal x12095=((1.0)*x12089);
IkReal x12096=((1.0)*x12088);
evalcond[0]=((((-1.0)*gconst10*r21*x12096))+((r20*x12094)));
evalcond[1]=(cj0+(((-1.0)*gconst10*r11*x12096))+((r10*x12094))+(((-1.0)*r12*x12095)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12090))+(((-1.0)*gconst11*r20*x12095))+((r21*x12093)));
evalcond[3]=(((r00*x12094))+(((-1.0)*r02*x12095))+(((-1.0)*x12091))+(((-1.0)*gconst10*r01*x12096)));
evalcond[4]=(((r01*x12093))+(((-1.0)*cj0*x12092))+(((-1.0)*gconst11*r00*x12095))+(((-1.0)*cj0*sj1*x12090))+(((-1.0)*r02*x12096)));
evalcond[5]=(((r11*x12093))+(((-1.0)*gconst11*r10*x12095))+(((-1.0)*r12*x12096))+(((-1.0)*sj0*sj1*x12090))+(((-1.0)*x12091*x12092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12097=(gconst10*r21);
IkReal x12098=(cj1*cj2);
IkReal x12099=(gconst11*r20);
IkReal x12100=(sj1*sj2);
CheckValue<IkReal> x12101=IKPowWithIntegerCheck(IKsign(((x12099*x12099)+(r22*r22)+(((-2.0)*x12097*x12099))+(x12097*x12097))),-1);
if(!x12101.valid){
continue;
}
CheckValue<IkReal> x12102 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12098))+((r22*x12100)))),IkReal(((((-1.0)*x12098*x12099))+((x12097*x12098))+((x12099*x12100))+(((-1.0)*x12097*x12100)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12101.value)))+(x12102.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12103=IKsin(j4);
IkReal x12104=IKcos(j4);
IkReal x12105=(gconst11*r00);
IkReal x12106=((1.0)*cj2);
IkReal x12107=((1.0)*sj0);
IkReal x12108=(cj1*sj2);
IkReal x12109=((1.0)*x12104);
IkReal x12110=(gconst10*x12104);
IkReal x12111=(gconst11*x12103);
IkReal x12112=((1.0)*x12103);
evalcond[0]=((((-1.0)*r22*x12109))+((r20*x12111))+(((-1.0)*gconst10*r21*x12112)));
evalcond[1]=((((-1.0)*r12*x12109))+((r10*x12111))+cj0+(((-1.0)*gconst10*r11*x12112)));
evalcond[2]=((((-1.0)*gconst10*r01*x12112))+((x12103*x12105))+(((-1.0)*x12107))+(((-1.0)*r02*x12109)));
evalcond[3]=((((-1.0)*r22*x12112))+((sj1*sj2))+(((-1.0)*cj1*x12106))+(((-1.0)*gconst11*r20*x12109))+((r21*x12110)));
evalcond[4]=((((-1.0)*cj0*sj1*x12106))+((r01*x12110))+(((-1.0)*cj0*x12108))+(((-1.0)*r02*x12112))+(((-1.0)*x12105*x12109)));
evalcond[5]=((((-1.0)*sj0*sj1*x12106))+(((-1.0)*r12*x12112))+((r11*x12110))+(((-1.0)*gconst11*r10*x12109))+(((-1.0)*x12107*x12108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12113=((1.0)*sj0);
IkReal x12114=((1.0)*cj0);
CheckValue<IkReal> x12115 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12113))+(((-1.0)*r02*x12114)))),IkReal(((((-1.0)*gconst11*r10*x12113))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*gconst11*r00*x12114)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12115.valid){
continue;
}
CheckValue<IkReal> x12116=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12115.value)+(((1.5707963267949)*(x12116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12117=IKsin(j4);
IkReal x12118=IKcos(j4);
IkReal x12119=(gconst11*r00);
IkReal x12120=((1.0)*cj2);
IkReal x12121=((1.0)*sj0);
IkReal x12122=(cj1*sj2);
IkReal x12123=((1.0)*x12118);
IkReal x12124=(gconst10*x12118);
IkReal x12125=(gconst11*x12117);
IkReal x12126=((1.0)*x12117);
evalcond[0]=((((-1.0)*r22*x12123))+(((-1.0)*gconst10*r21*x12126))+((r20*x12125)));
evalcond[1]=((((-1.0)*gconst10*r11*x12126))+cj0+(((-1.0)*r12*x12123))+((r10*x12125)));
evalcond[2]=((((-1.0)*gconst10*r01*x12126))+(((-1.0)*x12121))+((x12117*x12119))+(((-1.0)*r02*x12123)));
evalcond[3]=(((r21*x12124))+(((-1.0)*cj1*x12120))+((sj1*sj2))+(((-1.0)*r22*x12126))+(((-1.0)*gconst11*r20*x12123)));
evalcond[4]=(((r01*x12124))+(((-1.0)*cj0*x12122))+(((-1.0)*x12119*x12123))+(((-1.0)*r02*x12126))+(((-1.0)*cj0*sj1*x12120)));
evalcond[5]=((((-1.0)*r12*x12126))+(((-1.0)*sj0*sj1*x12120))+(((-1.0)*x12121*x12122))+(((-1.0)*gconst11*r10*x12123))+((r11*x12124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12127=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x12127.valid){
continue;
}
CheckValue<IkReal> x12128 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst10*r21))+((cj0*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12127.value)))+(x12128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12129=IKsin(j4);
IkReal x12130=IKcos(j4);
IkReal x12131=(gconst11*r00);
IkReal x12132=((1.0)*cj2);
IkReal x12133=((1.0)*sj0);
IkReal x12134=(cj1*sj2);
IkReal x12135=((1.0)*x12130);
IkReal x12136=(gconst10*x12130);
IkReal x12137=(gconst11*x12129);
IkReal x12138=((1.0)*x12129);
evalcond[0]=((((-1.0)*r22*x12135))+(((-1.0)*gconst10*r21*x12138))+((r20*x12137)));
evalcond[1]=((((-1.0)*gconst10*r11*x12138))+cj0+(((-1.0)*r12*x12135))+((r10*x12137)));
evalcond[2]=((((-1.0)*gconst10*r01*x12138))+(((-1.0)*x12133))+((x12129*x12131))+(((-1.0)*r02*x12135)));
evalcond[3]=((((-1.0)*cj1*x12132))+((sj1*sj2))+((r21*x12136))+(((-1.0)*r22*x12138))+(((-1.0)*gconst11*r20*x12135)));
evalcond[4]=((((-1.0)*x12131*x12135))+((r01*x12136))+(((-1.0)*cj0*x12134))+(((-1.0)*r02*x12138))+(((-1.0)*cj0*sj1*x12132)));
evalcond[5]=((((-1.0)*sj0*sj1*x12132))+(((-1.0)*x12133*x12134))+(((-1.0)*r12*x12138))+(((-1.0)*gconst11*r10*x12135))+((r11*x12136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x12141 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12141.valid){
continue;
}
IkReal x12139=((1.0)*(x12141.value));
IkReal x12140=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12139)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12139)));
IkReal gconst10=((1.0)*r11*x12140);
IkReal gconst11=((-1.0)*r10*x12140);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12144 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12144.valid){
continue;
}
IkReal x12142=((1.0)*(x12144.value));
IkReal x12143=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12142)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12142)));
IkReal gconst10=((1.0)*r11*x12143);
IkReal gconst11=((-1.0)*r10*x12143);
IkReal x12145=r12*r12;
IkReal x12146=((1.0)*sj0);
IkReal x12147=(cj0*r02);
IkReal x12148=x11904;
j4eval[0]=((IKabs(((((-1.0)*x12147))+(((-1.0)*r12*x12146)))))+(IKabs((((r12*x12147*x12148))+((sj0*x12145*x12148))+(((-1.0)*x12146*x12148))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x12151 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12151.valid){
continue;
}
IkReal x12149=((1.0)*(x12151.value));
IkReal x12150=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12149)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12149)));
IkReal gconst10=((1.0)*r11*x12150);
IkReal gconst11=((-1.0)*r10*x12150);
IkReal x12152=r12*r12;
IkReal x12153=((1.0)+(((-1.0)*x12152)));
IkReal x12154=(r22*sj1*sj2);
IkReal x12155=(cj1*cj2*r22);
CheckValue<IkReal> x12162=IKPowWithIntegerCheck(x12153,-1);
if(!x12162.valid){
continue;
}
IkReal x12156=x12162.value;
CheckValue<IkReal> x12163=IKPowWithIntegerCheck(((-1.0)+x12152),-1);
if(!x12163.valid){
continue;
}
IkReal x12157=x12163.value;
IkReal x12158=((1.0)*x12156);
if((x12153) < -0.00001)
continue;
IkReal x12159=IKsqrt(x12153);
IkReal x12160=(r12*x12157*x12159);
IkReal x12161=((((-2.0)*r10*r11*r20*r21*x12156))+(((-1.0)*(r22*r22)))+(((-1.0)*x12158*(r11*r11)*(r21*r21)))+(((-1.0)*x12158*(r10*r10)*(r20*r20))));
j4eval[0]=x12161;
j4eval[1]=((IKabs(((((-1.0)*x12155))+x12154)))+(IKabs((((x12155*x12160))+(((-1.0)*x12154*x12160))))));
j4eval[2]=IKsign(x12161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12166 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12166.valid){
continue;
}
IkReal x12164=((1.0)*(x12166.value));
IkReal x12165=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12164)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12164)));
IkReal gconst10=((1.0)*r11*x12165);
IkReal gconst11=((-1.0)*r10*x12165);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12169 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12169.valid){
continue;
}
IkReal x12167=((1.0)*(x12169.value));
IkReal x12168=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12167)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12167)));
IkReal gconst10=((1.0)*r11*x12168);
IkReal gconst11=((-1.0)*r10*x12168);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12172 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12172.valid){
continue;
}
IkReal x12170=((1.0)*(x12172.value));
IkReal x12171=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12170)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12170)));
IkReal gconst10=((1.0)*r11*x12171);
IkReal gconst11=((-1.0)*r10*x12171);
IkReal x12173=(cj1*r02*sj2);
IkReal x12174=(cj2*r02*sj1);
IkReal x12175=x11904;
IkReal x12176=(r12*x12175);
j4eval[0]=((IKabs((x12174+x12173)))+(IKabs((((x12173*x12176))+((x12174*x12176))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12177=(cj1*sj2);
IkReal x12178=(gconst10*r01);
IkReal x12179=(cj2*sj1);
IkReal x12180=((1.0)*gconst11*r00);
CheckValue<IkReal> x12181 = IKatan2WithCheck(IkReal(((((-1.0)*x12179*x12180))+((x12178*x12179))+(((-1.0)*x12177*x12180))+((x12177*x12178)))),IkReal((((r02*x12177))+((r02*x12179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12181.valid){
continue;
}
CheckValue<IkReal> x12182=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12181.value)+(((1.5707963267949)*(x12182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12183=IKcos(j4);
IkReal x12184=IKsin(j4);
IkReal x12185=((1.0)*cj2);
IkReal x12186=(gconst10*r01);
IkReal x12187=(gconst10*r21);
IkReal x12188=(gconst10*r11);
IkReal x12189=((1.0)*x12183);
IkReal x12190=(gconst11*x12184);
IkReal x12191=((1.0)*x12184);
IkReal x12192=(gconst11*x12183);
evalcond[0]=((((-1.0)*x12186*x12189))+((r02*x12184))+((r00*x12192)));
evalcond[1]=((((-1.0)*x12187*x12191))+((r20*x12190))+(((-1.0)*r22*x12189)));
evalcond[2]=(((r10*x12190))+(((-1.0)*r12*x12189))+(((-1.0)*x12188*x12191)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12189))+(((-1.0)*x12186*x12191))+((r00*x12190)));
evalcond[4]=(((r22*x12184))+((sj1*sj2))+(((-1.0)*x12187*x12189))+((r20*x12192))+(((-1.0)*cj1*x12185)));
evalcond[5]=(((r12*x12184))+(((-1.0)*cj1*sj2))+((r10*x12192))+(((-1.0)*x12188*x12189))+(((-1.0)*sj1*x12185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12193=(gconst11*r00);
IkReal x12194=(gconst10*r01);
CheckValue<IkReal> x12195=IKPowWithIntegerCheck(IKsign(((((-2.0)*x12193*x12194))+(x12193*x12193)+(x12194*x12194)+(r02*r02))),-1);
if(!x12195.valid){
continue;
}
CheckValue<IkReal> x12196 = IKatan2WithCheck(IkReal((x12193+(((-1.0)*x12194)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12195.value)))+(x12196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12197=IKcos(j4);
IkReal x12198=IKsin(j4);
IkReal x12199=((1.0)*cj2);
IkReal x12200=(gconst10*r01);
IkReal x12201=(gconst10*r21);
IkReal x12202=(gconst10*r11);
IkReal x12203=((1.0)*x12197);
IkReal x12204=(gconst11*x12198);
IkReal x12205=((1.0)*x12198);
IkReal x12206=(gconst11*x12197);
evalcond[0]=((((-1.0)*x12200*x12203))+((r02*x12198))+((r00*x12206)));
evalcond[1]=((((-1.0)*x12201*x12205))+(((-1.0)*r22*x12203))+((r20*x12204)));
evalcond[2]=((((-1.0)*x12202*x12205))+(((-1.0)*r12*x12203))+((r10*x12204)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12203))+(((-1.0)*x12200*x12205))+((r00*x12204)));
evalcond[4]=((((-1.0)*x12201*x12203))+((sj1*sj2))+((r22*x12198))+((r20*x12206))+(((-1.0)*cj1*x12199)));
evalcond[5]=((((-1.0)*x12202*x12203))+((r12*x12198))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12199))+((r10*x12206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12207=((1.0)*gconst10);
CheckValue<IkReal> x12208=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12207)))),-1);
if(!x12208.valid){
continue;
}
CheckValue<IkReal> x12209 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x12207))+((gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12208.value)))+(x12209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12210=IKcos(j4);
IkReal x12211=IKsin(j4);
IkReal x12212=((1.0)*cj2);
IkReal x12213=(gconst10*r01);
IkReal x12214=(gconst10*r21);
IkReal x12215=(gconst10*r11);
IkReal x12216=((1.0)*x12210);
IkReal x12217=(gconst11*x12211);
IkReal x12218=((1.0)*x12211);
IkReal x12219=(gconst11*x12210);
evalcond[0]=(((r02*x12211))+(((-1.0)*x12213*x12216))+((r00*x12219)));
evalcond[1]=((((-1.0)*r22*x12216))+(((-1.0)*x12214*x12218))+((r20*x12217)));
evalcond[2]=((((-1.0)*r12*x12216))+(((-1.0)*x12215*x12218))+((r10*x12217)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12216))+(((-1.0)*x12213*x12218))+((r00*x12217)));
evalcond[4]=(((r22*x12211))+(((-1.0)*cj1*x12212))+((sj1*sj2))+(((-1.0)*x12214*x12216))+((r20*x12219)));
evalcond[5]=((((-1.0)*sj1*x12212))+((r12*x12211))+(((-1.0)*cj1*sj2))+(((-1.0)*x12215*x12216))+((r10*x12219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12222 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12222.valid){
continue;
}
IkReal x12220=((1.0)*(x12222.value));
IkReal x12221=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12220)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12220)));
IkReal gconst10=((1.0)*r11*x12221);
IkReal gconst11=((-1.0)*r10*x12221);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
IkReal x12223=((1.0)*(x12225.value));
IkReal x12224=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12223)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12223)));
IkReal gconst10=((1.0)*r11*x12224);
IkReal gconst11=((-1.0)*r10*x12224);
IkReal x12226=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12230=IKPowWithIntegerCheck(x12226,-1);
if(!x12230.valid){
continue;
}
IkReal x12227=x12230.value;
IkReal x12228=((1.0)*x12227);
IkReal x12229=((((-1.0)*(r02*r02)))+(((-1.0)*x12228*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x12227))+(((-1.0)*x12228*(r01*r01)*(r11*r11))));
j4eval[0]=x12229;
j4eval[1]=r02;
j4eval[2]=x12226;
j4eval[3]=IKsign(x12229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12233 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12233.valid){
continue;
}
IkReal x12231=((1.0)*(x12233.value));
IkReal x12232=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12231)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12231)));
IkReal gconst10=((1.0)*r11*x12232);
IkReal gconst11=((-1.0)*r10*x12232);
IkReal x12234=r12*r12;
IkReal x12235=((1.0)*r02);
IkReal x12236=(cj1*sj2);
IkReal x12237=(cj2*sj1);
CheckValue<IkReal> x12241=IKPowWithIntegerCheck(((-1.0)+x12234),-1);
if(!x12241.valid){
continue;
}
IkReal x12238=x12241.value;
if((((1.0)+(((-1.0)*x12234)))) < -0.00001)
continue;
IkReal x12239=IKsqrt(((1.0)+(((-1.0)*x12234))));
IkReal x12240=(r12*x12238*x12239);
j4eval[0]=((IKabs(((((-1.0)*x12235*x12237*x12240))+(((-1.0)*x12235*x12236*x12240)))))+(IKabs(((((-1.0)*x12235*x12237))+(((-1.0)*x12235*x12236))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12242=(cj1*sj2);
IkReal x12243=(cj2*sj1);
IkReal x12244=((1.0)*r02);
IkReal x12245=(gconst11*r00);
IkReal x12246=((1.0)*gconst10*r01);
CheckValue<IkReal> x12247 = IKatan2WithCheck(IkReal(((((-1.0)*x12242*x12246))+((x12242*x12245))+((x12243*x12245))+(((-1.0)*x12243*x12246)))),IkReal(((((-1.0)*x12242*x12244))+(((-1.0)*x12243*x12244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12247.valid){
continue;
}
CheckValue<IkReal> x12248=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12247.value)+(((1.5707963267949)*(x12248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12249=IKcos(j4);
IkReal x12250=IKsin(j4);
IkReal x12251=(gconst10*r01);
IkReal x12252=(gconst10*r21);
IkReal x12253=(gconst10*r11);
IkReal x12254=((1.0)*x12249);
IkReal x12255=(gconst11*x12250);
IkReal x12256=((1.0)*x12250);
IkReal x12257=(gconst11*x12249);
evalcond[0]=((((-1.0)*x12251*x12254))+((r00*x12257))+((r02*x12250)));
evalcond[1]=(((r20*x12255))+(((-1.0)*x12252*x12256))+(((-1.0)*r22*x12254)));
evalcond[2]=((((-1.0)*r12*x12254))+((r10*x12255))+(((-1.0)*x12253*x12256)));
evalcond[3]=((1.0)+(((-1.0)*x12251*x12256))+((r00*x12255))+(((-1.0)*r02*x12254)));
evalcond[4]=(((cj2*sj1))+((r12*x12250))+((cj1*sj2))+((r10*x12257))+(((-1.0)*x12253*x12254)));
evalcond[5]=(((r22*x12250))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x12257))+(((-1.0)*x12252*x12254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12258=(gconst11*r00);
IkReal x12259=(gconst10*r01);
CheckValue<IkReal> x12260 = IKatan2WithCheck(IkReal((x12258+(((-1.0)*x12259)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12260.valid){
continue;
}
CheckValue<IkReal> x12261=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12258*x12258)))+(((-1.0)*(x12259*x12259)))+(((-1.0)*(r02*r02)))+(((2.0)*x12258*x12259)))),-1);
if(!x12261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12260.value)+(((1.5707963267949)*(x12261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12262=IKcos(j4);
IkReal x12263=IKsin(j4);
IkReal x12264=(gconst10*r01);
IkReal x12265=(gconst10*r21);
IkReal x12266=(gconst10*r11);
IkReal x12267=((1.0)*x12262);
IkReal x12268=(gconst11*x12263);
IkReal x12269=((1.0)*x12263);
IkReal x12270=(gconst11*x12262);
evalcond[0]=((((-1.0)*x12264*x12267))+((r00*x12270))+((r02*x12263)));
evalcond[1]=((((-1.0)*x12265*x12269))+((r20*x12268))+(((-1.0)*r22*x12267)));
evalcond[2]=((((-1.0)*r12*x12267))+((r10*x12268))+(((-1.0)*x12266*x12269)));
evalcond[3]=((1.0)+(((-1.0)*x12264*x12269))+((r00*x12268))+(((-1.0)*r02*x12267)));
evalcond[4]=(((cj2*sj1))+((r12*x12263))+((cj1*sj2))+(((-1.0)*x12266*x12267))+((r10*x12270)));
evalcond[5]=(((r20*x12270))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12265*x12267))+((r22*x12263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12271 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst10*r11))+((gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12271.valid){
continue;
}
CheckValue<IkReal> x12272=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12271.value)+(((1.5707963267949)*(x12272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12273=IKcos(j4);
IkReal x12274=IKsin(j4);
IkReal x12275=(gconst10*r01);
IkReal x12276=(gconst10*r21);
IkReal x12277=(gconst10*r11);
IkReal x12278=((1.0)*x12273);
IkReal x12279=(gconst11*x12274);
IkReal x12280=((1.0)*x12274);
IkReal x12281=(gconst11*x12273);
evalcond[0]=(((r02*x12274))+((r00*x12281))+(((-1.0)*x12275*x12278)));
evalcond[1]=(((r20*x12279))+(((-1.0)*x12276*x12280))+(((-1.0)*r22*x12278)));
evalcond[2]=((((-1.0)*x12277*x12280))+(((-1.0)*r12*x12278))+((r10*x12279)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12278))+(((-1.0)*x12275*x12280))+((r00*x12279)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x12274))+(((-1.0)*x12277*x12278))+((r10*x12281)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12274))+(((-1.0)*x12276*x12278))+((r20*x12281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12284 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12284.valid){
continue;
}
IkReal x12282=((1.0)*(x12284.value));
IkReal x12283=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12282)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12283);
rxp1_1=(px*r21);
rxp1_2=(r11*x12283);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12282)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12287 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12287.valid){
continue;
}
IkReal x12285=((1.0)*(x12287.value));
IkReal x12286=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12285)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12286);
rxp1_1=(px*r21);
rxp1_2=(r11*x12286);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12285)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x12290 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12290.valid){
continue;
}
IkReal x12288=((1.0)*(x12290.value));
IkReal x12289=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12288)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12289);
rxp1_1=(px*r21);
rxp1_2=(r11*x12289);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12288)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12293=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12293.valid){
continue;
}
IkReal x12291=x12293.value;
IkReal x12292=(sj0*x12291);
cj4array[0]=(((cj2*sj1*x12292))+((cj1*sj2*x12292)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12294=IKsin(j4);
IkReal x12295=IKcos(j4);
IkReal x12296=(gconst11*r20);
IkReal x12297=((1.0)*x12295);
IkReal x12298=((1.0)*gconst10*x12294);
evalcond[0]=(r02*x12294);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12297)));
evalcond[2]=((((-1.0)*r21*x12298))+((x12294*x12296)));
evalcond[3]=(((gconst11*r10*x12294))+(((-1.0)*r11*x12298)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x12295*x12296))+(((-1.0)*gconst10*r21*x12297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12300=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12300.valid){
continue;
}
IkReal x12299=x12300.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12299))+((cj1*cj2*x12299)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12301=IKsin(j4);
IkReal x12302=IKcos(j4);
IkReal x12303=((1.0)*sj0);
IkReal x12304=(gconst11*r10);
IkReal x12305=((1.0)*gconst10*r11);
evalcond[0]=(r02*x12301);
evalcond[1]=((((-1.0)*r02*x12302))+(((-1.0)*x12303)));
evalcond[2]=((((-1.0)*gconst10*r21*x12301))+((gconst11*r20*x12301)));
evalcond[3]=((((-1.0)*x12301*x12305))+((x12301*x12304)));
evalcond[4]=((((-1.0)*cj1*sj2*x12303))+(((-1.0)*cj2*sj1*x12303))+((x12302*x12304))+(((-1.0)*x12302*x12305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12306=IKPowWithIntegerCheck(r02,-1);
if(!x12306.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12306.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12307=IKsin(j4);
IkReal x12308=IKcos(j4);
IkReal x12309=((1.0)*cj1);
IkReal x12310=(gconst11*r20);
IkReal x12311=(gconst11*r10);
IkReal x12312=((1.0)*gconst10*r11);
IkReal x12313=((1.0)*gconst10*r21);
evalcond[0]=(r02*x12307);
evalcond[1]=((((-1.0)*x12307*x12313))+((x12307*x12310)));
evalcond[2]=((((-1.0)*x12307*x12312))+((x12307*x12311)));
evalcond[3]=((((-1.0)*cj2*x12309))+((sj1*sj2))+((x12308*x12310))+(((-1.0)*x12308*x12313)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12308*x12311))+(((-1.0)*x12308*x12312))+(((-1.0)*sj0*sj2*x12309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12314=((1.0)*gconst10);
CheckValue<IkReal> x12315=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12314))+(((-1.0)*gconst11*r21)))),-1);
if(!x12315.valid){
continue;
}
CheckValue<IkReal> x12316 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r11*sj0*x12314))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12314))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12315.value)))+(x12316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12317=IKsin(j4);
IkReal x12318=IKcos(j4);
IkReal x12319=((1.0)*cj2);
IkReal x12320=((1.0)*sj0);
IkReal x12321=(gconst10*r01);
IkReal x12322=(gconst10*r21);
IkReal x12323=(cj1*sj2);
IkReal x12324=(gconst10*r11);
IkReal x12325=(gconst11*x12317);
IkReal x12326=((1.0)*x12318);
IkReal x12327=((1.0)*x12317);
IkReal x12328=(gconst11*x12318);
evalcond[0]=(((r20*x12325))+(((-1.0)*x12322*x12327)));
evalcond[1]=(cj0+((r10*x12325))+(((-1.0)*r12*x12326))+(((-1.0)*x12324*x12327)));
evalcond[2]=((((-1.0)*cj1*x12319))+((r20*x12328))+((sj1*sj2))+(((-1.0)*x12322*x12326)));
evalcond[3]=((((-1.0)*x12321*x12327))+((r00*x12325))+(((-1.0)*x12320))+(((-1.0)*r02*x12326)));
evalcond[4]=((((-1.0)*x12321*x12326))+((r00*x12328))+((r02*x12317))+(((-1.0)*cj0*sj1*x12319))+(((-1.0)*cj0*x12323)));
evalcond[5]=(((r12*x12317))+(((-1.0)*sj0*sj1*x12319))+(((-1.0)*x12320*x12323))+((r10*x12328))+(((-1.0)*x12324*x12326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12329=(gconst11*r20);
IkReal x12330=(gconst10*r21);
IkReal x12331=(sj1*sj2);
IkReal x12332=(cj1*cj2);
CheckValue<IkReal> x12333 = IKatan2WithCheck(IkReal((((r22*x12331))+(((-1.0)*r22*x12332)))),IkReal((((x12330*x12332))+(((-1.0)*x12329*x12332))+(((-1.0)*x12330*x12331))+((x12329*x12331)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12333.valid){
continue;
}
CheckValue<IkReal> x12334=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12330*x12330)))+(((-1.0)*(x12329*x12329)))+(((-1.0)*(r22*r22)))+(((2.0)*x12329*x12330)))),-1);
if(!x12334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12333.value)+(((1.5707963267949)*(x12334.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12335=IKsin(j4);
IkReal x12336=IKcos(j4);
IkReal x12337=((1.0)*cj2);
IkReal x12338=((1.0)*sj0);
IkReal x12339=(gconst10*r01);
IkReal x12340=(gconst10*r21);
IkReal x12341=(gconst10*r11);
IkReal x12342=(cj1*sj2);
IkReal x12343=((1.0)*x12336);
IkReal x12344=(gconst11*x12335);
IkReal x12345=((1.0)*x12335);
IkReal x12346=(gconst11*x12336);
evalcond[0]=((((-1.0)*x12340*x12345))+((r20*x12344))+(((-1.0)*r22*x12343)));
evalcond[1]=(cj0+(((-1.0)*x12341*x12345))+(((-1.0)*r12*x12343))+((r10*x12344)));
evalcond[2]=((((-1.0)*r02*x12343))+((r00*x12344))+(((-1.0)*x12338))+(((-1.0)*x12339*x12345)));
evalcond[3]=((((-1.0)*x12340*x12343))+((r20*x12346))+((sj1*sj2))+((r22*x12335))+(((-1.0)*cj1*x12337)));
evalcond[4]=(((r00*x12346))+(((-1.0)*x12339*x12343))+(((-1.0)*cj0*x12342))+((r02*x12335))+(((-1.0)*cj0*sj1*x12337)));
evalcond[5]=((((-1.0)*x12338*x12342))+(((-1.0)*x12341*x12343))+(((-1.0)*sj0*sj1*x12337))+((r12*x12335))+((r10*x12346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12347=((1.0)*sj0);
IkReal x12348=((1.0)*cj0);
CheckValue<IkReal> x12349 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x12348))+(((-1.0)*r12*x12347)))),IkReal(((((-1.0)*gconst11*r00*x12348))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*gconst11*r10*x12347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12349.valid){
continue;
}
CheckValue<IkReal> x12350=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12350.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12349.value)+(((1.5707963267949)*(x12350.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12351=IKsin(j4);
IkReal x12352=IKcos(j4);
IkReal x12353=((1.0)*cj2);
IkReal x12354=((1.0)*sj0);
IkReal x12355=(gconst10*r01);
IkReal x12356=(gconst10*r21);
IkReal x12357=(gconst10*r11);
IkReal x12358=(cj1*sj2);
IkReal x12359=((1.0)*x12352);
IkReal x12360=(gconst11*x12351);
IkReal x12361=((1.0)*x12351);
IkReal x12362=(gconst11*x12352);
evalcond[0]=((((-1.0)*r22*x12359))+((r20*x12360))+(((-1.0)*x12356*x12361)));
evalcond[1]=((((-1.0)*x12357*x12361))+cj0+((r10*x12360))+(((-1.0)*r12*x12359)));
evalcond[2]=((((-1.0)*r02*x12359))+(((-1.0)*x12354))+(((-1.0)*x12355*x12361))+((r00*x12360)));
evalcond[3]=((((-1.0)*x12356*x12359))+((sj1*sj2))+((r22*x12351))+(((-1.0)*cj1*x12353))+((r20*x12362)));
evalcond[4]=((((-1.0)*x12355*x12359))+((r02*x12351))+(((-1.0)*cj0*x12358))+(((-1.0)*cj0*sj1*x12353))+((r00*x12362)));
evalcond[5]=((((-1.0)*x12354*x12358))+(((-1.0)*x12357*x12359))+((r10*x12362))+(((-1.0)*sj0*sj1*x12353))+((r12*x12351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12363=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x12363.valid){
continue;
}
CheckValue<IkReal> x12364 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst10*r21))+((cj0*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12363.value)))+(x12364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12365=IKsin(j4);
IkReal x12366=IKcos(j4);
IkReal x12367=((1.0)*cj2);
IkReal x12368=((1.0)*sj0);
IkReal x12369=(gconst10*r01);
IkReal x12370=(gconst10*r21);
IkReal x12371=(gconst10*r11);
IkReal x12372=(cj1*sj2);
IkReal x12373=((1.0)*x12366);
IkReal x12374=(gconst11*x12365);
IkReal x12375=((1.0)*x12365);
IkReal x12376=(gconst11*x12366);
evalcond[0]=((((-1.0)*r22*x12373))+(((-1.0)*x12370*x12375))+((r20*x12374)));
evalcond[1]=(cj0+((r10*x12374))+(((-1.0)*r12*x12373))+(((-1.0)*x12371*x12375)));
evalcond[2]=((((-1.0)*x12368))+(((-1.0)*x12369*x12375))+(((-1.0)*r02*x12373))+((r00*x12374)));
evalcond[3]=((((-1.0)*cj1*x12367))+((sj1*sj2))+((r22*x12365))+(((-1.0)*x12370*x12373))+((r20*x12376)));
evalcond[4]=((((-1.0)*x12369*x12373))+(((-1.0)*cj0*sj1*x12367))+((r02*x12365))+((r00*x12376))+(((-1.0)*cj0*x12372)));
evalcond[5]=((((-1.0)*sj0*sj1*x12367))+(((-1.0)*x12368*x12372))+((r10*x12376))+(((-1.0)*x12371*x12373))+((r12*x12365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12379 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12379.valid){
continue;
}
IkReal x12377=((1.0)*(x12379.value));
IkReal x12378=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12377)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12377)));
IkReal gconst10=((1.0)*r11*x12378);
IkReal gconst11=((-1.0)*r10*x12378);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12380=gconst11*gconst11;
IkReal x12381=gconst10*gconst10;
IkReal x12382=(r01*sj3);
IkReal x12383=(r00*sj3);
IkReal x12384=(cj3*r01);
IkReal x12385=(cj3*r00);
IkReal x12386=(r20*x12380);
IkReal x12387=(r21*x12381);
IkReal x12388=((1.0)*gconst10*gconst11);
CheckValue<IkReal> x12389 = IKatan2WithCheck(IkReal((((gconst10*r22*x12383))+((gconst11*r22*x12382)))),IkReal(((((-1.0)*r21*x12382*x12388))+((x12382*x12386))+((gconst10*gconst11*r20*x12383))+(((-1.0)*x12383*x12387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12389.valid){
continue;
}
CheckValue<IkReal> x12390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12385*x12388))+((x12385*x12386))+((x12384*x12387))+((cj3*r02*r22))+(((-1.0)*r20*x12384*x12388)))),-1);
if(!x12390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12389.value)+(((1.5707963267949)*(x12390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12391=IKsin(j4);
IkReal x12392=IKcos(j4);
IkReal x12393=(cj3*r10);
IkReal x12394=(r21*sj3);
IkReal x12395=((1.0)*gconst10);
IkReal x12396=(cj3*gconst11);
IkReal x12397=(r01*sj3);
IkReal x12398=((1.0)*sj2);
IkReal x12399=(r20*sj3);
IkReal x12400=(r11*sj3);
IkReal x12401=(gconst10*sj3);
IkReal x12402=((1.0)*cj2);
IkReal x12403=(gconst11*sj3);
IkReal x12404=(cj1*x12398);
IkReal x12405=(sj1*x12402);
IkReal x12406=((1.0)*x12392);
IkReal x12407=((1.0)*x12391);
IkReal x12408=(gconst10*x12392);
IkReal x12409=(gconst11*x12391);
IkReal x12410=(x12404+x12405);
evalcond[0]=((((-1.0)*r22*x12406))+((r20*x12409))+(((-1.0)*r21*x12391*x12395)));
evalcond[1]=((((-1.0)*r12*x12406))+((r10*x12409))+(((-1.0)*r11*x12391*x12395)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x12391*x12395))+(((-1.0)*r02*x12406))+((r00*x12409)));
evalcond[3]=(((gconst11*x12397))+((cj3*r01*x12408))+((r00*x12401))+(((-1.0)*cj3*r02*x12407))+(((-1.0)*r00*x12396*x12406)));
evalcond[4]=((((-1.0)*r01*x12396))+((x12397*x12408))+(((-1.0)*cj3*r00*x12395))+(((-1.0)*r00*x12403*x12406))+(((-1.0)*r02*sj3*x12407)));
evalcond[5]=(((cj3*r11*x12408))+(((-1.0)*sj1*x12398))+(((-1.0)*gconst11*x12393*x12406))+(((-1.0)*cj3*r12*x12407))+((gconst11*x12400))+((r10*x12401))+((cj1*cj2)));
evalcond[6]=(((cj3*r21*x12408))+(((-1.0)*cj3*r22*x12407))+((gconst11*x12394))+((gconst10*x12399))+(((-1.0)*x12410))+(((-1.0)*r20*x12396*x12406)));
evalcond[7]=((((-1.0)*cj3*r20*x12395))+((x12394*x12408))+((sj1*sj2))+(((-1.0)*r21*x12396))+(((-1.0)*cj1*x12402))+(((-1.0)*gconst11*x12399*x12406))+(((-1.0)*r22*sj3*x12407)));
evalcond[8]=(((x12400*x12408))+(((-1.0)*r12*sj3*x12407))+(((-1.0)*r11*x12396))+(((-1.0)*x12410))+(((-1.0)*x12393*x12395))+(((-1.0)*r10*x12403*x12406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12411=((1.0)*gconst10);
CheckValue<IkReal> x12412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12411))+(((-1.0)*gconst11*r21)))),-1);
if(!x12412.valid){
continue;
}
CheckValue<IkReal> x12413 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r11*x12411))+((gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12412.value)))+(x12413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12414=IKsin(j4);
IkReal x12415=IKcos(j4);
IkReal x12416=(cj3*r10);
IkReal x12417=(r21*sj3);
IkReal x12418=((1.0)*gconst10);
IkReal x12419=(cj3*gconst11);
IkReal x12420=(r01*sj3);
IkReal x12421=((1.0)*sj2);
IkReal x12422=(r20*sj3);
IkReal x12423=(r11*sj3);
IkReal x12424=(gconst10*sj3);
IkReal x12425=((1.0)*cj2);
IkReal x12426=(gconst11*sj3);
IkReal x12427=(cj1*x12421);
IkReal x12428=(sj1*x12425);
IkReal x12429=((1.0)*x12415);
IkReal x12430=((1.0)*x12414);
IkReal x12431=(gconst10*x12415);
IkReal x12432=(gconst11*x12414);
IkReal x12433=(x12427+x12428);
evalcond[0]=((((-1.0)*r21*x12414*x12418))+((r20*x12432))+(((-1.0)*r22*x12429)));
evalcond[1]=(((r10*x12432))+(((-1.0)*r12*x12429))+(((-1.0)*r11*x12414*x12418)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x12414*x12418))+((r00*x12432))+(((-1.0)*r02*x12429)));
evalcond[3]=((((-1.0)*r00*x12419*x12429))+(((-1.0)*cj3*r02*x12430))+((cj3*r01*x12431))+((gconst11*x12420))+((r00*x12424)));
evalcond[4]=(((x12420*x12431))+(((-1.0)*r02*sj3*x12430))+(((-1.0)*r01*x12419))+(((-1.0)*r00*x12426*x12429))+(((-1.0)*cj3*r00*x12418)));
evalcond[5]=(((cj3*r11*x12431))+(((-1.0)*sj1*x12421))+((r10*x12424))+(((-1.0)*gconst11*x12416*x12429))+((cj1*cj2))+((gconst11*x12423))+(((-1.0)*cj3*r12*x12430)));
evalcond[6]=(((gconst11*x12417))+((cj3*r21*x12431))+(((-1.0)*cj3*r22*x12430))+((gconst10*x12422))+(((-1.0)*r20*x12419*x12429))+(((-1.0)*x12433)));
evalcond[7]=((((-1.0)*cj3*r20*x12418))+(((-1.0)*r22*sj3*x12430))+((sj1*sj2))+(((-1.0)*r21*x12419))+(((-1.0)*cj1*x12425))+(((-1.0)*gconst11*x12422*x12429))+((x12417*x12431)));
evalcond[8]=(((x12423*x12431))+(((-1.0)*x12416*x12418))+(((-1.0)*r12*sj3*x12430))+(((-1.0)*r10*x12426*x12429))+(((-1.0)*x12433))+(((-1.0)*r11*x12419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12436 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12436.valid){
continue;
}
IkReal x12434=((1.0)*(x12436.value));
IkReal x12435=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12434)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12434)));
IkReal gconst10=((1.0)*r11*x12435);
IkReal gconst11=((-1.0)*r10*x12435);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12437=gconst11*gconst11;
IkReal x12438=gconst10*gconst10;
IkReal x12439=(r01*sj3);
IkReal x12440=(r00*sj3);
IkReal x12441=(cj3*r01);
IkReal x12442=(cj3*r00);
IkReal x12443=(r20*x12437);
IkReal x12444=(r21*x12438);
IkReal x12445=((1.0)*gconst10*gconst11);
CheckValue<IkReal> x12446 = IKatan2WithCheck(IkReal((((gconst10*r22*x12440))+((gconst11*r22*x12439)))),IkReal(((((-1.0)*x12440*x12444))+((gconst10*gconst11*r20*x12440))+((x12439*x12443))+(((-1.0)*r21*x12439*x12445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12446.valid){
continue;
}
CheckValue<IkReal> x12447=IKPowWithIntegerCheck(IKsign((((x12441*x12444))+(((-1.0)*r21*x12442*x12445))+(((-1.0)*r20*x12441*x12445))+((cj3*r02*r22))+((x12442*x12443)))),-1);
if(!x12447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12446.value)+(((1.5707963267949)*(x12447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12448=IKsin(j4);
IkReal x12449=IKcos(j4);
IkReal x12450=(sj1*sj2);
IkReal x12451=(cj3*r10);
IkReal x12452=(r21*sj3);
IkReal x12453=((1.0)*gconst10);
IkReal x12454=(cj3*gconst11);
IkReal x12455=(r01*sj3);
IkReal x12456=((1.0)*cj1);
IkReal x12457=(r20*sj3);
IkReal x12458=(r11*sj3);
IkReal x12459=(cj2*sj1);
IkReal x12460=(gconst10*sj3);
IkReal x12461=(gconst11*sj3);
IkReal x12462=(cj2*x12456);
IkReal x12463=((1.0)*x12449);
IkReal x12464=((1.0)*x12448);
IkReal x12465=(gconst10*x12449);
IkReal x12466=(gconst11*x12448);
evalcond[0]=((((-1.0)*r22*x12463))+((r20*x12466))+(((-1.0)*r21*x12448*x12453)));
evalcond[1]=((((-1.0)*r11*x12448*x12453))+((r10*x12466))+(((-1.0)*r12*x12463)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12463))+((r00*x12466))+(((-1.0)*r01*x12448*x12453)));
evalcond[3]=(((cj3*r01*x12465))+((r00*x12460))+(((-1.0)*r00*x12454*x12463))+(((-1.0)*cj3*r02*x12464))+((gconst11*x12455)));
evalcond[4]=((((-1.0)*r02*sj3*x12464))+(((-1.0)*cj3*r00*x12453))+((x12455*x12465))+(((-1.0)*r01*x12454))+(((-1.0)*r00*x12461*x12463)));
evalcond[5]=((((-1.0)*x12462))+((cj3*r11*x12465))+(((-1.0)*cj3*r12*x12464))+x12450+((r10*x12460))+((gconst11*x12458))+(((-1.0)*gconst11*x12451*x12463)));
evalcond[6]=((((-1.0)*r20*x12454*x12463))+((cj3*r21*x12465))+(((-1.0)*x12459))+(((-1.0)*sj2*x12456))+((gconst10*x12457))+(((-1.0)*cj3*r22*x12464))+((gconst11*x12452)));
evalcond[7]=((((-1.0)*r10*x12461*x12463))+((cj1*sj2))+(((-1.0)*r12*sj3*x12464))+(((-1.0)*x12451*x12453))+((x12458*x12465))+(((-1.0)*r11*x12454))+x12459);
evalcond[8]=((((-1.0)*cj3*r20*x12453))+(((-1.0)*gconst11*x12457*x12463))+(((-1.0)*r22*sj3*x12464))+(((-1.0)*x12462))+(((-1.0)*r21*x12454))+((x12452*x12465))+x12450);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12467 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst10*r11))+((gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12467.valid){
continue;
}
CheckValue<IkReal> x12468=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12468.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12467.value)+(((1.5707963267949)*(x12468.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12469=IKsin(j4);
IkReal x12470=IKcos(j4);
IkReal x12471=(sj1*sj2);
IkReal x12472=(cj3*r10);
IkReal x12473=(r21*sj3);
IkReal x12474=((1.0)*gconst10);
IkReal x12475=(cj3*gconst11);
IkReal x12476=(r01*sj3);
IkReal x12477=((1.0)*cj1);
IkReal x12478=(r20*sj3);
IkReal x12479=(r11*sj3);
IkReal x12480=(cj2*sj1);
IkReal x12481=(gconst10*sj3);
IkReal x12482=(gconst11*sj3);
IkReal x12483=(cj2*x12477);
IkReal x12484=((1.0)*x12470);
IkReal x12485=((1.0)*x12469);
IkReal x12486=(gconst10*x12470);
IkReal x12487=(gconst11*x12469);
evalcond[0]=((((-1.0)*r22*x12484))+(((-1.0)*r21*x12469*x12474))+((r20*x12487)));
evalcond[1]=((((-1.0)*r12*x12484))+(((-1.0)*r11*x12469*x12474))+((r10*x12487)));
evalcond[2]=((1.0)+((r00*x12487))+(((-1.0)*r02*x12484))+(((-1.0)*r01*x12469*x12474)));
evalcond[3]=(((cj3*r01*x12486))+(((-1.0)*cj3*r02*x12485))+((r00*x12481))+(((-1.0)*r00*x12475*x12484))+((gconst11*x12476)));
evalcond[4]=(((x12476*x12486))+(((-1.0)*r01*x12475))+(((-1.0)*r02*sj3*x12485))+(((-1.0)*r00*x12482*x12484))+(((-1.0)*cj3*r00*x12474)));
evalcond[5]=((((-1.0)*x12483))+(((-1.0)*gconst11*x12472*x12484))+(((-1.0)*cj3*r12*x12485))+((cj3*r11*x12486))+((r10*x12481))+x12471+((gconst11*x12479)));
evalcond[6]=(((gconst10*x12478))+((cj3*r21*x12486))+(((-1.0)*x12480))+(((-1.0)*r20*x12475*x12484))+(((-1.0)*cj3*r22*x12485))+(((-1.0)*sj2*x12477))+((gconst11*x12473)));
evalcond[7]=((((-1.0)*r12*sj3*x12485))+(((-1.0)*r10*x12482*x12484))+((cj1*sj2))+(((-1.0)*x12472*x12474))+((x12479*x12486))+x12480+(((-1.0)*r11*x12475)));
evalcond[8]=(((x12473*x12486))+(((-1.0)*x12483))+(((-1.0)*cj3*r20*x12474))+(((-1.0)*r22*sj3*x12485))+(((-1.0)*gconst11*x12478*x12484))+(((-1.0)*r21*x12475))+x12471);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
CheckValue<IkReal> x12490 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12490.valid){
continue;
}
IkReal x12488=((1.0)*(x12490.value));
IkReal x12489=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12488)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12489);
rxp1_1=(px*r21);
rxp1_2=(r11*x12489);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12488)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12493 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12493.valid){
continue;
}
IkReal x12491=((1.0)*(x12493.value));
IkReal x12492=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12491)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12492);
rxp1_1=(px*r21);
rxp1_2=(r11*x12492);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12491)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
IkReal x12494=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=(((r11*r21*x12494))+((r10*r20*x12494)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x12497 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12497.valid){
continue;
}
IkReal x12495=((1.0)*(x12497.value));
IkReal x12496=((-1.0)*px);
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12495)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12496);
rxp1_1=(px*r21);
rxp1_2=(r11*x12496);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12495)));
IkReal gconst10=((1.0)*r11);
IkReal gconst11=((-1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12499=IKPowWithIntegerCheck(r02,-1);
if(!x12499.valid){
continue;
}
IkReal x12498=x12499.value;
CheckValue<IkReal> x12500=IKPowWithIntegerCheck(cj3,-1);
if(!x12500.valid){
continue;
}
if( IKabs((x12498*(x12500.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12498)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12498*(x12500.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12498))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12498*(x12500.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12498));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12501=IKsin(j4);
IkReal x12502=IKcos(j4);
IkReal x12503=(cj1*cj2);
IkReal x12504=(r21*sj3);
IkReal x12505=(sj1*sj2);
IkReal x12506=(r20*sj3);
IkReal x12507=(cj3*r11);
IkReal x12508=((1.0)*gconst11);
IkReal x12509=(r11*sj3);
IkReal x12510=(r10*sj3);
IkReal x12511=((1.0)*sj0);
IkReal x12512=(cj3*r21);
IkReal x12513=((1.0)*gconst10);
IkReal x12514=(cj3*r20);
IkReal x12515=((1.0)*cj3*r10);
IkReal x12516=(gconst11*x12502);
IkReal x12517=(gconst10*x12502);
IkReal x12518=(gconst11*x12501);
IkReal x12519=((1.0)*cj2*sj1);
IkReal x12520=((1.0)*cj1*sj2);
IkReal x12521=((1.0)*r02*x12501);
evalcond[0]=((((-1.0)*x12511))+(((-1.0)*r02*x12502)));
evalcond[1]=(((r20*x12518))+(((-1.0)*r21*x12501*x12513)));
evalcond[2]=((((-1.0)*r11*x12501*x12513))+cj0+((r10*x12518)));
evalcond[3]=((((-1.0)*cj3*x12521))+(((-1.0)*cj0*x12505))+((cj0*x12503)));
evalcond[4]=((((-1.0)*cj0*x12519))+(((-1.0)*cj0*x12520))+(((-1.0)*sj3*x12521)));
evalcond[5]=((((-1.0)*x12519))+(((-1.0)*x12520))+(((-1.0)*x12502*x12508*x12514))+((x12512*x12517))+((gconst10*x12506))+((gconst11*x12504)));
evalcond[6]=((((-1.0)*x12503))+(((-1.0)*x12513*x12514))+((x12504*x12517))+(((-1.0)*x12508*x12512))+(((-1.0)*x12502*x12506*x12508))+x12505);
evalcond[7]=(((sj0*x12503))+(((-1.0)*cj3*r10*x12502*x12508))+((x12507*x12517))+(((-1.0)*x12505*x12511))+((gconst10*x12510))+((gconst11*x12509)));
evalcond[8]=((((-1.0)*cj2*sj1*x12511))+((x12509*x12517))+(((-1.0)*x12507*x12508))+(((-1.0)*cj3*r10*x12513))+(((-1.0)*x12502*x12508*x12510))+(((-1.0)*cj1*sj2*x12511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12522=((1.0)*gconst11);
IkReal x12523=((1.0)*gconst10);
CheckValue<IkReal> x12524=IKPowWithIntegerCheck(((((-1.0)*r11*x12523))+((gconst11*r10))),-1);
if(!x12524.valid){
continue;
}
CheckValue<IkReal> x12525=IKPowWithIntegerCheck((((cj3*gconst10*r21))+(((-1.0)*cj3*r20*x12522))),-1);
if(!x12525.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12524.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12525.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x12522))+(((-1.0)*r20*sj3*x12523)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12524.value)))+IKsqr(((x12525.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x12522))+(((-1.0)*r20*sj3*x12523))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12524.value)), ((x12525.value)*((((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj3*x12522))+(((-1.0)*r20*sj3*x12523))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12526=IKsin(j4);
IkReal x12527=IKcos(j4);
IkReal x12528=(cj1*cj2);
IkReal x12529=(r21*sj3);
IkReal x12530=(sj1*sj2);
IkReal x12531=(r20*sj3);
IkReal x12532=(cj3*r11);
IkReal x12533=((1.0)*gconst11);
IkReal x12534=(r11*sj3);
IkReal x12535=(r10*sj3);
IkReal x12536=((1.0)*sj0);
IkReal x12537=(cj3*r21);
IkReal x12538=((1.0)*gconst10);
IkReal x12539=(cj3*r20);
IkReal x12540=((1.0)*cj3*r10);
IkReal x12541=(gconst11*x12527);
IkReal x12542=(gconst10*x12527);
IkReal x12543=(gconst11*x12526);
IkReal x12544=((1.0)*cj2*sj1);
IkReal x12545=((1.0)*cj1*sj2);
IkReal x12546=((1.0)*r02*x12526);
evalcond[0]=((((-1.0)*r02*x12527))+(((-1.0)*x12536)));
evalcond[1]=(((r20*x12543))+(((-1.0)*r21*x12526*x12538)));
evalcond[2]=(cj0+((r10*x12543))+(((-1.0)*r11*x12526*x12538)));
evalcond[3]=(((cj0*x12528))+(((-1.0)*cj0*x12530))+(((-1.0)*cj3*x12546)));
evalcond[4]=((((-1.0)*cj0*x12545))+(((-1.0)*cj0*x12544))+(((-1.0)*sj3*x12546)));
evalcond[5]=(((x12537*x12542))+((gconst11*x12529))+(((-1.0)*x12527*x12533*x12539))+((gconst10*x12531))+(((-1.0)*x12544))+(((-1.0)*x12545)));
evalcond[6]=((((-1.0)*x12533*x12537))+(((-1.0)*x12538*x12539))+(((-1.0)*x12527*x12531*x12533))+((x12529*x12542))+x12530+(((-1.0)*x12528)));
evalcond[7]=(((sj0*x12528))+(((-1.0)*x12530*x12536))+(((-1.0)*cj3*r10*x12527*x12533))+((x12532*x12542))+((gconst10*x12535))+((gconst11*x12534)));
evalcond[8]=((((-1.0)*cj2*sj1*x12536))+((x12534*x12542))+(((-1.0)*x12527*x12533*x12535))+(((-1.0)*x12532*x12533))+(((-1.0)*cj3*r10*x12538))+(((-1.0)*cj1*sj2*x12536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12547=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12547.valid){
continue;
}
CheckValue<IkReal> x12548=IKPowWithIntegerCheck(r02,-1);
if(!x12548.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12547.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12548.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12547.value)))+IKsqr(((-1.0)*sj0*(x12548.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12547.value)), ((-1.0)*sj0*(x12548.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12549=IKsin(j4);
IkReal x12550=IKcos(j4);
IkReal x12551=(cj1*cj2);
IkReal x12552=(r21*sj3);
IkReal x12553=(sj1*sj2);
IkReal x12554=(r20*sj3);
IkReal x12555=(cj3*r11);
IkReal x12556=((1.0)*gconst11);
IkReal x12557=(r11*sj3);
IkReal x12558=(r10*sj3);
IkReal x12559=((1.0)*sj0);
IkReal x12560=(cj3*r21);
IkReal x12561=((1.0)*gconst10);
IkReal x12562=(cj3*r20);
IkReal x12563=((1.0)*cj3*r10);
IkReal x12564=(gconst11*x12550);
IkReal x12565=(gconst10*x12550);
IkReal x12566=(gconst11*x12549);
IkReal x12567=((1.0)*cj2*sj1);
IkReal x12568=((1.0)*cj1*sj2);
IkReal x12569=((1.0)*r02*x12549);
evalcond[0]=((((-1.0)*r02*x12550))+(((-1.0)*x12559)));
evalcond[1]=(((r20*x12566))+(((-1.0)*r21*x12549*x12561)));
evalcond[2]=((((-1.0)*r11*x12549*x12561))+cj0+((r10*x12566)));
evalcond[3]=((((-1.0)*cj0*x12553))+(((-1.0)*cj3*x12569))+((cj0*x12551)));
evalcond[4]=((((-1.0)*cj0*x12567))+(((-1.0)*cj0*x12568))+(((-1.0)*sj3*x12569)));
evalcond[5]=(((gconst10*x12554))+(((-1.0)*x12550*x12556*x12562))+((x12560*x12565))+((gconst11*x12552))+(((-1.0)*x12568))+(((-1.0)*x12567)));
evalcond[6]=((((-1.0)*x12551))+(((-1.0)*x12561*x12562))+(((-1.0)*x12556*x12560))+((x12552*x12565))+x12553+(((-1.0)*x12550*x12554*x12556)));
evalcond[7]=(((gconst10*x12558))+((sj0*x12551))+(((-1.0)*x12553*x12559))+(((-1.0)*cj3*r10*x12550*x12556))+((gconst11*x12557))+((x12555*x12565)));
evalcond[8]=((((-1.0)*cj2*sj1*x12559))+(((-1.0)*x12555*x12556))+(((-1.0)*x12550*x12556*x12558))+(((-1.0)*cj3*r10*x12561))+((x12557*x12565))+(((-1.0)*cj1*sj2*x12559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x12572 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x12572.valid){
continue;
}
IkReal x12570=((1.0)*(x12572.value));
IkReal x12571=x11904;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12570)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12570)));
IkReal gconst10=((1.0)*r11*x12571);
IkReal gconst11=((-1.0)*r10*x12571);
IkReal x12573=r12*r12;
IkReal x12574=((1.0)*sj0);
IkReal x12575=(cj0*r02);
IkReal x12576=x11904;
j4eval[0]=((IKabs(((((-1.0)*r12*x12574))+(((-1.0)*x12575)))))+(IKabs((((r12*x12575*x12576))+((sj0*x12573*x12576))+(((-1.0)*x12574*x12576))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12577=(gconst11*r21);
IkReal x12578=(gconst10*sj3);
IkReal x12579=(cj3*r12);
IkReal x12580=((1.0)*sj3);
IkReal x12581=(gconst10*r20);
IkReal x12582=(gconst11*r20);
IkReal x12583=(cj1*cj2);
IkReal x12584=((1.0)*sj1*sj2);
CheckValue<IkReal> x12585=IKPowWithIntegerCheck(((((-1.0)*gconst11*r10*x12580*x12582))+((r10*x12577*x12578))+((r11*x12578*x12582))+(((-1.0)*gconst10*r11*r21*x12578))),-1);
if(!x12585.valid){
continue;
}
CheckValue<IkReal> x12586=IKPowWithIntegerCheck(((((-1.0)*x12580*x12582))+((r21*x12578))),-1);
if(!x12586.valid){
continue;
}
if( IKabs(((x12585.value)*((((r12*x12583))+(((-1.0)*r12*x12584))+((cj0*sj3*x12582))+(((-1.0)*cj0*r21*x12578))+((x12579*x12581))+((x12577*x12579)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12586.value)*((((cj3*x12581))+x12583+(((-1.0)*x12584))+((cj3*x12577)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12585.value)*((((r12*x12583))+(((-1.0)*r12*x12584))+((cj0*sj3*x12582))+(((-1.0)*cj0*r21*x12578))+((x12579*x12581))+((x12577*x12579))))))+IKsqr(((x12586.value)*((((cj3*x12581))+x12583+(((-1.0)*x12584))+((cj3*x12577))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12585.value)*((((r12*x12583))+(((-1.0)*r12*x12584))+((cj0*sj3*x12582))+(((-1.0)*cj0*r21*x12578))+((x12579*x12581))+((x12577*x12579))))), ((x12586.value)*((((cj3*x12581))+x12583+(((-1.0)*x12584))+((cj3*x12577))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12587=IKsin(j4);
IkReal x12588=IKcos(j4);
IkReal x12589=((1.0)*sj3);
IkReal x12590=(cj1*cj2);
IkReal x12591=((1.0)*r10);
IkReal x12592=(gconst10*r01);
IkReal x12593=(cj3*gconst10);
IkReal x12594=(gconst10*r21);
IkReal x12595=((1.0)*gconst11);
IkReal x12596=(sj1*sj2);
IkReal x12597=(gconst11*r10);
IkReal x12598=(gconst11*sj3);
IkReal x12599=((1.0)*cj0);
IkReal x12600=(gconst10*r11);
IkReal x12601=(gconst10*sj3);
IkReal x12602=(cj1*sj2);
IkReal x12603=((1.0)*sj0);
IkReal x12604=((1.0)*cj3);
IkReal x12605=(cj2*sj1);
IkReal x12606=(r12*x12587);
IkReal x12607=(cj3*x12588);
IkReal x12608=(sj3*x12588);
IkReal x12609=(gconst11*x12588);
IkReal x12610=((1.0)*x12588);
IkReal x12611=(r02*x12587);
IkReal x12612=((1.0)*x12587);
IkReal x12613=(gconst11*x12587);
evalcond[0]=((((-1.0)*x12594*x12612))+((r20*x12613)));
evalcond[1]=((((-1.0)*r12*x12610))+cj0+((x12587*x12597))+(((-1.0)*x12600*x12612)));
evalcond[2]=((((-1.0)*r02*x12610))+(((-1.0)*x12603))+(((-1.0)*x12592*x12612))+((r00*x12613)));
evalcond[3]=(((r20*x12601))+(((-1.0)*r20*x12595*x12607))+(((-1.0)*x12605))+(((-1.0)*x12602))+((r21*x12598))+((r21*x12588*x12593)));
evalcond[4]=((((-1.0)*r20*x12589*x12609))+((x12594*x12608))+x12596+(((-1.0)*x12590))+(((-1.0)*r20*x12593))+(((-1.0)*cj3*r21*x12595)));
evalcond[5]=(((r01*x12598))+((r00*x12601))+(((-1.0)*x12596*x12599))+((cj0*x12590))+((x12592*x12607))+(((-1.0)*r00*x12595*x12607))+(((-1.0)*x12604*x12611)));
evalcond[6]=(((r11*x12588*x12593))+(((-1.0)*gconst11*x12591*x12607))+((r10*x12601))+(((-1.0)*x12596*x12603))+((sj0*x12590))+(((-1.0)*x12604*x12606))+((r11*x12598)));
evalcond[7]=((((-1.0)*cj3*r01*x12595))+((x12592*x12608))+(((-1.0)*x12589*x12611))+(((-1.0)*r00*x12589*x12609))+(((-1.0)*x12599*x12605))+(((-1.0)*x12599*x12602))+(((-1.0)*r00*x12593)));
evalcond[8]=(((x12600*x12608))+(((-1.0)*cj3*r11*x12595))+(((-1.0)*x12591*x12593))+(((-1.0)*x12588*x12589*x12597))+(((-1.0)*x12589*x12606))+(((-1.0)*x12603*x12605))+(((-1.0)*x12602*x12603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12614=((1.0)*sj0);
IkReal x12615=((1.0)*cj0);
CheckValue<IkReal> x12616 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12614))+(((-1.0)*r02*x12615)))),IkReal(((((-1.0)*gconst11*r00*x12615))+((gconst10*r11*sj0))+(((-1.0)*gconst11*r10*x12614))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12616.valid){
continue;
}
CheckValue<IkReal> x12617=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12617.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12616.value)+(((1.5707963267949)*(x12617.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12618=IKsin(j4);
IkReal x12619=IKcos(j4);
IkReal x12620=((1.0)*sj3);
IkReal x12621=(cj1*cj2);
IkReal x12622=((1.0)*r10);
IkReal x12623=(gconst10*r01);
IkReal x12624=(cj3*gconst10);
IkReal x12625=(gconst10*r21);
IkReal x12626=((1.0)*gconst11);
IkReal x12627=(sj1*sj2);
IkReal x12628=(gconst11*r10);
IkReal x12629=(gconst11*sj3);
IkReal x12630=((1.0)*cj0);
IkReal x12631=(gconst10*r11);
IkReal x12632=(gconst10*sj3);
IkReal x12633=(cj1*sj2);
IkReal x12634=((1.0)*sj0);
IkReal x12635=((1.0)*cj3);
IkReal x12636=(cj2*sj1);
IkReal x12637=(r12*x12618);
IkReal x12638=(cj3*x12619);
IkReal x12639=(sj3*x12619);
IkReal x12640=(gconst11*x12619);
IkReal x12641=((1.0)*x12619);
IkReal x12642=(r02*x12618);
IkReal x12643=((1.0)*x12618);
IkReal x12644=(gconst11*x12618);
evalcond[0]=(((r20*x12644))+(((-1.0)*x12625*x12643)));
evalcond[1]=(cj0+((x12618*x12628))+(((-1.0)*x12631*x12643))+(((-1.0)*r12*x12641)));
evalcond[2]=((((-1.0)*r02*x12641))+((r00*x12644))+(((-1.0)*x12634))+(((-1.0)*x12623*x12643)));
evalcond[3]=(((r21*x12619*x12624))+(((-1.0)*x12636))+(((-1.0)*x12633))+((r20*x12632))+((r21*x12629))+(((-1.0)*r20*x12626*x12638)));
evalcond[4]=(((x12625*x12639))+(((-1.0)*x12621))+(((-1.0)*cj3*r21*x12626))+x12627+(((-1.0)*r20*x12624))+(((-1.0)*r20*x12620*x12640)));
evalcond[5]=((((-1.0)*x12627*x12630))+(((-1.0)*r00*x12626*x12638))+((r00*x12632))+((x12623*x12638))+((r01*x12629))+((cj0*x12621))+(((-1.0)*x12635*x12642)));
evalcond[6]=((((-1.0)*x12627*x12634))+((sj0*x12621))+(((-1.0)*gconst11*x12622*x12638))+((r10*x12632))+((r11*x12619*x12624))+((r11*x12629))+(((-1.0)*x12635*x12637)));
evalcond[7]=((((-1.0)*cj3*r01*x12626))+(((-1.0)*r00*x12624))+(((-1.0)*x12620*x12642))+((x12623*x12639))+(((-1.0)*x12630*x12633))+(((-1.0)*x12630*x12636))+(((-1.0)*r00*x12620*x12640)));
evalcond[8]=((((-1.0)*x12622*x12624))+(((-1.0)*x12620*x12637))+(((-1.0)*cj3*r11*x12626))+(((-1.0)*x12633*x12634))+(((-1.0)*x12634*x12636))+(((-1.0)*x12619*x12620*x12628))+((x12631*x12639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12645=r20*r20;
IkReal x12646=gconst11*gconst11;
IkReal x12647=gconst10*gconst10;
IkReal x12648=r21*r21;
IkReal x12649=(gconst11*r20);
IkReal x12650=(r20*sj3);
IkReal x12651=(gconst10*r21);
IkReal x12652=(cj2*sj1);
IkReal x12653=((1.0)*cj1*sj2);
IkReal x12654=(gconst10*gconst11*sj3);
CheckValue<IkReal> x12655=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj3*x12649*x12651))+((cj3*x12645*x12646))+((cj3*(r22*r22)))+((cj3*x12647*x12648)))),-1);
if(!x12655.valid){
continue;
}
CheckValue<IkReal> x12656 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12652))+((gconst10*r22*x12650))+((gconst11*r21*r22*sj3))+(((-1.0)*r22*x12653)))),IkReal((((x12645*x12654))+((r21*x12646*x12650))+((x12651*x12652))+(((-1.0)*x12648*x12654))+(((-1.0)*x12649*x12653))+((cj1*sj2*x12651))+(((-1.0)*r21*x12647*x12650))+(((-1.0)*x12649*x12652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12655.value)))+(x12656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12657=IKsin(j4);
IkReal x12658=IKcos(j4);
IkReal x12659=(cj1*cj2);
IkReal x12660=(cj3*r10);
IkReal x12661=(cj3*r01);
IkReal x12662=((1.0)*gconst10);
IkReal x12663=(r21*sj3);
IkReal x12664=(cj3*gconst11);
IkReal x12665=(r01*sj3);
IkReal x12666=(gconst11*sj3);
IkReal x12667=((1.0)*sj2);
IkReal x12668=(cj0*sj1);
IkReal x12669=(gconst10*sj3);
IkReal x12670=((1.0)*sj0);
IkReal x12671=(cj2*sj1);
IkReal x12672=((1.0)*x12658);
IkReal x12673=((1.0)*x12657);
IkReal x12674=(gconst10*x12658);
IkReal x12675=(gconst11*x12657);
evalcond[0]=(((r20*x12675))+(((-1.0)*r22*x12672))+(((-1.0)*r21*x12657*x12662)));
evalcond[1]=(((r10*x12675))+cj0+(((-1.0)*r12*x12672))+(((-1.0)*r11*x12657*x12662)));
evalcond[2]=((((-1.0)*r01*x12657*x12662))+(((-1.0)*x12670))+(((-1.0)*r02*x12672))+((r00*x12675)));
evalcond[3]=((((-1.0)*cj1*x12667))+(((-1.0)*r20*x12664*x12672))+((gconst11*x12663))+((cj3*r21*x12674))+(((-1.0)*x12671))+(((-1.0)*cj3*r22*x12673))+((r20*x12669)));
evalcond[4]=((((-1.0)*r21*x12664))+(((-1.0)*cj3*r20*x12662))+(((-1.0)*r22*sj3*x12673))+((sj1*sj2))+((x12663*x12674))+(((-1.0)*x12659))+(((-1.0)*r20*x12666*x12672)));
evalcond[5]=((((-1.0)*x12667*x12668))+((x12661*x12674))+((gconst11*x12665))+(((-1.0)*r00*x12664*x12672))+(((-1.0)*cj3*r02*x12673))+((r00*x12669))+((cj0*x12659)));
evalcond[6]=(((r10*x12669))+((sj0*x12659))+((r11*x12666))+(((-1.0)*cj3*r12*x12673))+(((-1.0)*sj0*sj1*x12667))+(((-1.0)*gconst11*x12660*x12672))+((cj3*r11*x12674)));
evalcond[7]=((((-1.0)*r00*x12666*x12672))+(((-1.0)*r02*sj3*x12673))+(((-1.0)*gconst11*x12661))+(((-1.0)*cj3*r00*x12662))+(((-1.0)*cj0*cj1*x12667))+(((-1.0)*cj2*x12668))+((x12665*x12674)));
evalcond[8]=((((-1.0)*x12670*x12671))+(((-1.0)*x12660*x12662))+((r11*x12658*x12669))+(((-1.0)*r12*sj3*x12673))+(((-1.0)*r11*x12664))+(((-1.0)*r10*x12666*x12672))+(((-1.0)*cj1*sj0*x12667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12676=((1.0)*sj0);
IkReal x12677=((1.0)*cj0);
CheckValue<IkReal> x12678 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x12677))+(((-1.0)*r12*x12676)))),IkReal(((((-1.0)*gconst11*r00*x12677))+(((-1.0)*gconst11*r10*x12676))+((gconst10*r11*sj0))+((cj0*gconst10*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12678.valid){
continue;
}
CheckValue<IkReal> x12679=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12678.value)+(((1.5707963267949)*(x12679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12680=IKsin(j4);
IkReal x12681=IKcos(j4);
IkReal x12682=(cj1*cj2);
IkReal x12683=(cj3*r10);
IkReal x12684=(cj3*r01);
IkReal x12685=((1.0)*gconst10);
IkReal x12686=(r21*sj3);
IkReal x12687=(cj3*gconst11);
IkReal x12688=(r01*sj3);
IkReal x12689=(gconst11*sj3);
IkReal x12690=((1.0)*sj2);
IkReal x12691=(cj0*sj1);
IkReal x12692=(gconst10*sj3);
IkReal x12693=((1.0)*sj0);
IkReal x12694=(cj2*sj1);
IkReal x12695=((1.0)*x12681);
IkReal x12696=((1.0)*x12680);
IkReal x12697=(gconst10*x12681);
IkReal x12698=(gconst11*x12680);
evalcond[0]=((((-1.0)*r22*x12695))+(((-1.0)*r21*x12680*x12685))+((r20*x12698)));
evalcond[1]=(cj0+(((-1.0)*r12*x12695))+((r10*x12698))+(((-1.0)*r11*x12680*x12685)));
evalcond[2]=(((r00*x12698))+(((-1.0)*r01*x12680*x12685))+(((-1.0)*r02*x12695))+(((-1.0)*x12693)));
evalcond[3]=((((-1.0)*cj1*x12690))+(((-1.0)*cj3*r22*x12696))+((cj3*r21*x12697))+(((-1.0)*r20*x12687*x12695))+((gconst11*x12686))+(((-1.0)*x12694))+((r20*x12692)));
evalcond[4]=((((-1.0)*r20*x12689*x12695))+(((-1.0)*r21*x12687))+((sj1*sj2))+(((-1.0)*cj3*r20*x12685))+(((-1.0)*r22*sj3*x12696))+((x12686*x12697))+(((-1.0)*x12682)));
evalcond[5]=(((r00*x12692))+((cj0*x12682))+((x12684*x12697))+((gconst11*x12688))+(((-1.0)*cj3*r02*x12696))+(((-1.0)*x12690*x12691))+(((-1.0)*r00*x12687*x12695)));
evalcond[6]=((((-1.0)*cj3*r12*x12696))+((r10*x12692))+((r11*x12689))+(((-1.0)*gconst11*x12683*x12695))+((sj0*x12682))+((cj3*r11*x12697))+(((-1.0)*sj0*sj1*x12690)));
evalcond[7]=((((-1.0)*r02*sj3*x12696))+(((-1.0)*cj0*cj1*x12690))+(((-1.0)*gconst11*x12684))+(((-1.0)*cj2*x12691))+(((-1.0)*cj3*r00*x12685))+(((-1.0)*r00*x12689*x12695))+((x12688*x12697)));
evalcond[8]=((((-1.0)*r11*x12687))+(((-1.0)*r10*x12689*x12695))+(((-1.0)*r12*sj3*x12696))+(((-1.0)*x12693*x12694))+((r11*x12681*x12692))+(((-1.0)*cj1*sj0*x12690))+(((-1.0)*x12683*x12685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12699=IKPowWithIntegerCheck(IKsign((((gconst10*r00))+((gconst11*r01)))),-1);
if(!x12699.valid){
continue;
}
CheckValue<IkReal> x12700 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst10*r21))+((cj0*gconst11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12699.value)))+(x12700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12701=IKsin(j4);
IkReal x12702=IKcos(j4);
IkReal x12703=(cj1*cj2);
IkReal x12704=(cj3*r10);
IkReal x12705=(cj3*r01);
IkReal x12706=((1.0)*gconst10);
IkReal x12707=(r21*sj3);
IkReal x12708=(cj3*gconst11);
IkReal x12709=(r01*sj3);
IkReal x12710=(gconst11*sj3);
IkReal x12711=((1.0)*sj2);
IkReal x12712=(cj0*sj1);
IkReal x12713=(gconst10*sj3);
IkReal x12714=((1.0)*sj0);
IkReal x12715=(cj2*sj1);
IkReal x12716=((1.0)*x12702);
IkReal x12717=((1.0)*x12701);
IkReal x12718=(gconst10*x12702);
IkReal x12719=(gconst11*x12701);
evalcond[0]=((((-1.0)*r22*x12716))+(((-1.0)*r21*x12701*x12706))+((r20*x12719)));
evalcond[1]=((((-1.0)*r12*x12716))+cj0+((r10*x12719))+(((-1.0)*r11*x12701*x12706)));
evalcond[2]=((((-1.0)*x12714))+((r00*x12719))+(((-1.0)*r01*x12701*x12706))+(((-1.0)*r02*x12716)));
evalcond[3]=((((-1.0)*x12715))+((cj3*r21*x12718))+((gconst11*x12707))+((r20*x12713))+(((-1.0)*r20*x12708*x12716))+(((-1.0)*cj1*x12711))+(((-1.0)*cj3*r22*x12717)));
evalcond[4]=((((-1.0)*r20*x12710*x12716))+((sj1*sj2))+(((-1.0)*cj3*r20*x12706))+(((-1.0)*r22*sj3*x12717))+((x12707*x12718))+(((-1.0)*r21*x12708))+(((-1.0)*x12703)));
evalcond[5]=(((gconst11*x12709))+(((-1.0)*cj3*r02*x12717))+(((-1.0)*r00*x12708*x12716))+((r00*x12713))+((x12705*x12718))+((cj0*x12703))+(((-1.0)*x12711*x12712)));
evalcond[6]=((((-1.0)*cj3*r12*x12717))+((r11*x12710))+(((-1.0)*gconst11*x12704*x12716))+((cj3*r11*x12718))+((r10*x12713))+((sj0*x12703))+(((-1.0)*sj0*sj1*x12711)));
evalcond[7]=((((-1.0)*gconst11*x12705))+(((-1.0)*r02*sj3*x12717))+(((-1.0)*cj3*r00*x12706))+(((-1.0)*cj0*cj1*x12711))+((x12709*x12718))+(((-1.0)*r00*x12710*x12716))+(((-1.0)*cj2*x12712)));
evalcond[8]=((((-1.0)*cj1*sj0*x12711))+(((-1.0)*r11*x12708))+(((-1.0)*x12714*x12715))+(((-1.0)*x12704*x12706))+((r11*x12702*x12713))+(((-1.0)*r10*x12710*x12716))+(((-1.0)*r12*sj3*x12717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12720=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12720;
j4eval[1]=IKsign(x12720);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12721=((1.0)*sj5);
IkReal x12722=((((-1.0)*r20*x12721))+(((-1.0)*cj5*r21)));
j4eval[0]=x12722;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12721))+((cj5*r00))))));
j4eval[2]=IKsign(x12722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12723=cj5*cj5;
IkReal x12724=(cj3*r11*r21);
IkReal x12725=((1.0)*cj3*cj5*sj5);
IkReal x12726=(((cj3*r12*r22))+(((-1.0)*x12723*x12724))+(((-1.0)*r10*r21*x12725))+x12724+(((-1.0)*r11*r20*x12725))+((cj3*r10*r20*x12723)));
j4eval[0]=x12726;
j4eval[1]=IKsign(x12726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12727=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12727;
j4eval[1]=IKsign(x12727);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12728=((1.0)*sj5);
IkReal x12729=((((-1.0)*r20*x12728))+(((-1.0)*cj5*r21)));
j4eval[0]=x12729;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12728))+((cj5*r00))))));
j4eval[2]=IKsign(x12729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12730=cj5*cj5;
IkReal x12731=r11*r11;
IkReal x12732=(r11*sj5);
IkReal x12733=(cj5*r10);
IkReal x12734=((((-1.0)*x12730*x12731))+(r12*r12)+x12731+(((-2.0)*x12732*x12733))+((x12730*(r10*r10))));
j4eval[0]=x12734;
j4eval[1]=IKsign(x12734);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12733))+x12732))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12735=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12735);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12735);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12736=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12736);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12736);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12737=IKPowWithIntegerCheck(r22,-1);
if(!x12737.valid){
continue;
}
CheckValue<IkReal> x12738=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12738.valid){
continue;
}
if( IKabs(((x12737.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12738.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12737.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12738.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12737.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12738.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12739=IKsin(j4);
IkReal x12740=IKcos(j4);
IkReal x12741=((1.0)*cj1);
IkReal x12742=(cj5*r00);
IkReal x12743=(cj5*r10);
IkReal x12744=(sj5*x12740);
IkReal x12745=((1.0)*x12740);
IkReal x12746=((1.0)*sj5*x12739);
evalcond[0]=((-1.0)*r22*x12740);
evalcond[1]=(((x12739*x12742))+(((-1.0)*r01*x12746)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12739))+(((-1.0)*cj2*x12741)));
evalcond[3]=(((r11*x12744))+(((-1.0)*x12743*x12745)));
evalcond[4]=((1.0)+(((-1.0)*r11*x12746))+((x12739*x12743)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12741))+(((-1.0)*x12742*x12745))+((r01*x12744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12747=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12747.valid){
continue;
}
CheckValue<IkReal> x12748=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x12748.valid){
continue;
}
if( IKabs(((-1.0)*(x12747.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12748.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12747.value)))+IKsqr(((x12748.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12747.value)), ((x12748.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12749=IKsin(j4);
IkReal x12750=IKcos(j4);
IkReal x12751=((1.0)*cj1);
IkReal x12752=(cj5*r00);
IkReal x12753=(cj5*r10);
IkReal x12754=(sj5*x12750);
IkReal x12755=((1.0)*x12750);
IkReal x12756=((1.0)*sj5*x12749);
evalcond[0]=((-1.0)*r22*x12750);
evalcond[1]=((((-1.0)*r01*x12756))+((x12749*x12752)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12749))+(((-1.0)*cj2*x12751)));
evalcond[3]=(((r11*x12754))+(((-1.0)*x12753*x12755)));
evalcond[4]=((1.0)+(((-1.0)*r11*x12756))+((x12749*x12753)));
evalcond[5]=((((-1.0)*x12752*x12755))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x12751))+((r01*x12754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12757=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12757);
rxp1_1=(px*r21);
rxp1_2=(r11*x12757);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12758=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12758);
rxp1_1=(px*r21);
rxp1_2=(r11*x12758);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12759=((1.0)*sj1);
CheckValue<IkReal> x12760=IKPowWithIntegerCheck(r02,-1);
if(!x12760.valid){
continue;
}
CheckValue<IkReal> x12761=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12761.valid){
continue;
}
if( IKabs(((x12760.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12759)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12761.value)*(((((-1.0)*sj2*x12759))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12760.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12759))))))+IKsqr(((x12761.value)*(((((-1.0)*sj2*x12759))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12760.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12759))))), ((x12761.value)*(((((-1.0)*sj2*x12759))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12762=IKsin(j4);
IkReal x12763=IKcos(j4);
IkReal x12764=(r11*sj5);
IkReal x12765=(r21*sj5);
IkReal x12766=((1.0)*cj1);
IkReal x12767=((1.0)*x12762);
IkReal x12768=(cj5*x12762);
IkReal x12769=((1.0)*cj5*x12763);
evalcond[0]=((-1.0)*r02*x12763);
evalcond[1]=(((r20*x12768))+(((-1.0)*x12765*x12767)));
evalcond[2]=((((-1.0)*r10*x12769))+((x12763*x12764)));
evalcond[3]=((1.0)+(((-1.0)*x12764*x12767))+((r10*x12768)));
evalcond[4]=((((-1.0)*sj2*x12766))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x12767)));
evalcond[5]=((((-1.0)*r20*x12769))+((x12763*x12765))+((sj1*sj2))+(((-1.0)*cj2*x12766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12770=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x12770.valid){
continue;
}
CheckValue<IkReal> x12771=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12771.valid){
continue;
}
if( IKabs(((-1.0)*(x12770.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12770.value)))+IKsqr(((x12771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12770.value)), ((x12771.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12772=IKsin(j4);
IkReal x12773=IKcos(j4);
IkReal x12774=(r11*sj5);
IkReal x12775=(r21*sj5);
IkReal x12776=((1.0)*cj1);
IkReal x12777=((1.0)*x12772);
IkReal x12778=(cj5*x12772);
IkReal x12779=((1.0)*cj5*x12773);
evalcond[0]=((-1.0)*r02*x12773);
evalcond[1]=(((r20*x12778))+(((-1.0)*x12775*x12777)));
evalcond[2]=(((x12773*x12774))+(((-1.0)*r10*x12779)));
evalcond[3]=((1.0)+(((-1.0)*x12774*x12777))+((r10*x12778)));
evalcond[4]=((((-1.0)*cj2*sj1))+(((-1.0)*r02*x12777))+(((-1.0)*sj2*x12776)));
evalcond[5]=(((x12773*x12775))+(((-1.0)*r20*x12779))+((sj1*sj2))+(((-1.0)*cj2*x12776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12780=cj5*cj5;
IkReal x12781=r11*r11;
IkReal x12782=(cj5*r10);
IkReal x12783=(r11*sj5);
CheckValue<IkReal> x12784=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x12780*x12781))+((x12780*(r10*r10)))+x12781+(((-2.0)*x12782*x12783)))),-1);
if(!x12784.valid){
continue;
}
CheckValue<IkReal> x12785 = IKatan2WithCheck(IkReal((x12783+(((-1.0)*x12782)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12784.value)))+(x12785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12786=IKsin(j4);
IkReal x12787=IKcos(j4);
IkReal x12788=(cj5*r00);
IkReal x12789=((1.0)*cj1);
IkReal x12790=((1.0)*x12787);
IkReal x12791=(sj5*x12787);
IkReal x12792=(cj5*x12786);
IkReal x12793=((1.0)*x12786);
IkReal x12794=(sj5*x12793);
evalcond[0]=((((-1.0)*r21*x12794))+(((-1.0)*r22*x12790))+((r20*x12792)));
evalcond[1]=(((x12786*x12788))+(((-1.0)*r01*x12794))+(((-1.0)*r02*x12790)));
evalcond[2]=((((-1.0)*cj5*r10*x12790))+((r11*x12791))+(((-1.0)*r12*x12793)));
evalcond[3]=((1.0)+((r10*x12792))+(((-1.0)*r11*x12794))+(((-1.0)*r12*x12790)));
evalcond[4]=((((-1.0)*cj5*r20*x12790))+(((-1.0)*cj2*x12789))+(((-1.0)*r22*x12793))+((sj1*sj2))+((r21*x12791)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*r02*x12793))+((r01*x12791))+(((-1.0)*x12788*x12790))+(((-1.0)*sj2*x12789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12795=((1.0)*sj5);
CheckValue<IkReal> x12796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12795))+(((-1.0)*cj5*r21)))),-1);
if(!x12796.valid){
continue;
}
CheckValue<IkReal> x12797 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x12795))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12796.value)))+(x12797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12798=IKsin(j4);
IkReal x12799=IKcos(j4);
IkReal x12800=(cj5*r00);
IkReal x12801=((1.0)*cj1);
IkReal x12802=((1.0)*x12799);
IkReal x12803=(sj5*x12799);
IkReal x12804=(cj5*x12798);
IkReal x12805=((1.0)*x12798);
IkReal x12806=(sj5*x12805);
evalcond[0]=(((r20*x12804))+(((-1.0)*r21*x12806))+(((-1.0)*r22*x12802)));
evalcond[1]=(((x12798*x12800))+(((-1.0)*r02*x12802))+(((-1.0)*r01*x12806)));
evalcond[2]=((((-1.0)*r12*x12805))+((r11*x12803))+(((-1.0)*cj5*r10*x12802)));
evalcond[3]=((1.0)+((r10*x12804))+(((-1.0)*r11*x12806))+(((-1.0)*r12*x12802)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj2*x12801))+((r21*x12803))+(((-1.0)*r22*x12805))+(((-1.0)*cj5*r20*x12802)));
evalcond[5]=((((-1.0)*x12800*x12802))+(((-1.0)*sj2*x12801))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x12805))+((r01*x12803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12807=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x12807.valid){
continue;
}
CheckValue<IkReal> x12808 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12807.value)))+(x12808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12809=IKsin(j4);
IkReal x12810=IKcos(j4);
IkReal x12811=(cj5*r00);
IkReal x12812=((1.0)*cj1);
IkReal x12813=((1.0)*x12810);
IkReal x12814=(sj5*x12810);
IkReal x12815=(cj5*x12809);
IkReal x12816=((1.0)*x12809);
IkReal x12817=(sj5*x12816);
evalcond[0]=((((-1.0)*r21*x12817))+((r20*x12815))+(((-1.0)*r22*x12813)));
evalcond[1]=((((-1.0)*r02*x12813))+(((-1.0)*r01*x12817))+((x12809*x12811)));
evalcond[2]=((((-1.0)*cj5*r10*x12813))+(((-1.0)*r12*x12816))+((r11*x12814)));
evalcond[3]=((1.0)+(((-1.0)*r11*x12817))+(((-1.0)*r12*x12813))+((r10*x12815)));
evalcond[4]=(((sj1*sj2))+((r21*x12814))+(((-1.0)*cj5*r20*x12813))+(((-1.0)*r22*x12816))+(((-1.0)*cj2*x12812)));
evalcond[5]=((((-1.0)*r02*x12816))+(((-1.0)*cj2*sj1))+((r01*x12814))+(((-1.0)*sj2*x12812))+(((-1.0)*x12811*x12813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12818=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12818;
j4eval[1]=IKsign(x12818);
j4eval[2]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12819=((1.0)*sj5);
IkReal x12820=((((-1.0)*r20*x12819))+(((-1.0)*cj5*r21)));
j4eval[0]=x12820;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x12819))+((cj5*r00))))));
j4eval[2]=IKsign(x12820);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12821=(sj1*sj2);
IkReal x12822=(cj1*cj2);
IkReal x12823=(r11*sj5);
IkReal x12824=(cj5*r10);
IkReal x12825=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x12825;
j4eval[1]=IKsign(x12825);
j4eval[2]=((IKabs((((x12822*x12823))+((x12821*x12824))+(((-1.0)*x12822*x12824))+(((-1.0)*x12821*x12823)))))+(IKabs(((((-1.0)*r12*x12821))+((r12*x12822))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12826=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12826);
rxp1_1=(px*r21);
rxp1_2=(r11*x12826);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12827=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12827);
rxp1_1=(px*r21);
rxp1_2=(r11*x12827);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12828=((1.0)*sj5);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*x12828)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x12828)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12829=((1.0)*sj5);
CheckValue<IkReal> x12830=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x12829))),-1);
if(!x12830.valid){
continue;
}
CheckValue<IkReal> x12831=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x12829))),-1);
if(!x12831.valid){
continue;
}
if( IKabs(((-1.0)*(x12830.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12831.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12830.value)))+IKsqr(((x12831.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12830.value)), ((x12831.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12832=IKsin(j4);
IkReal x12833=IKcos(j4);
IkReal x12834=((1.0)*cj2);
IkReal x12835=((1.0)*r11*sj5);
IkReal x12836=(cj5*x12833);
IkReal x12837=((1.0)*r21*sj5);
IkReal x12838=(cj5*x12832);
evalcond[0]=((-1.0)*r02*x12833);
evalcond[1]=((((-1.0)*x12832*x12837))+((r20*x12838)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r02*x12832))+(((-1.0)*sj1*x12834)));
evalcond[3]=(((r10*x12836))+(((-1.0)*x12833*x12835)));
evalcond[4]=((1.0)+((r10*x12838))+(((-1.0)*x12832*x12835)));
evalcond[5]=((((-1.0)*x12833*x12837))+((sj1*sj2))+((r20*x12836))+(((-1.0)*cj1*x12834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12839=IKPowWithIntegerCheck(r02,-1);
if(!x12839.valid){
continue;
}
CheckValue<IkReal> x12840=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12840.valid){
continue;
}
if( IKabs(((x12839.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12840.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12839.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12840.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12839.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12840.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12841=IKsin(j4);
IkReal x12842=IKcos(j4);
IkReal x12843=((1.0)*cj2);
IkReal x12844=((1.0)*r11*sj5);
IkReal x12845=(cj5*x12842);
IkReal x12846=((1.0)*r21*sj5);
IkReal x12847=(cj5*x12841);
evalcond[0]=((-1.0)*r02*x12842);
evalcond[1]=((((-1.0)*x12841*x12846))+((r20*x12847)));
evalcond[2]=((((-1.0)*cj1*sj2))+((r02*x12841))+(((-1.0)*sj1*x12843)));
evalcond[3]=(((r10*x12845))+(((-1.0)*x12842*x12844)));
evalcond[4]=((1.0)+((r10*x12847))+(((-1.0)*x12841*x12844)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*cj1*x12843))+(((-1.0)*x12842*x12846))+((r20*x12845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12848=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12848;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12849=((1.0)*sj5);
IkReal x12850=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12849)));
j4eval[0]=x12850;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x12849)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12851=cj5*cj5;
IkReal x12852=(r11*r21);
IkReal x12853=(cj5*r20);
IkReal x12854=(r21*sj5);
IkReal x12855=((((-1.0)*r10*r20*x12851))+(((-1.0)*r12*r22))+(((-1.0)*x12852))+((cj5*r10*x12854))+((x12851*x12852))+((r11*sj5*x12853)));
j4eval[0]=x12855;
j4eval[1]=((IKabs(r22))+(IKabs((x12853+(((-1.0)*x12854))))));
j4eval[2]=IKsign(x12855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12856=cj5*cj5;
IkReal x12857=(r11*r21);
IkReal x12858=(cj5*r20);
IkReal x12859=(r21*sj5);
CheckValue<IkReal> x12860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x12856))+((x12856*x12857))+(((-1.0)*r12*r22))+(((-1.0)*x12857))+((cj5*r10*x12859))+((r11*sj5*x12858)))),-1);
if(!x12860.valid){
continue;
}
CheckValue<IkReal> x12861 = IKatan2WithCheck(IkReal((x12858+(((-1.0)*x12859)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12860.value)))+(x12861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12862=IKcos(j4);
IkReal x12863=IKsin(j4);
IkReal x12864=(r11*sj5);
IkReal x12865=(cj5*r00);
IkReal x12866=(r21*sj5);
IkReal x12867=(r01*sj5);
IkReal x12868=(cj5*r20);
IkReal x12869=(cj5*r10);
IkReal x12870=((1.0)*x12862);
IkReal x12871=((1.0)*x12863);
evalcond[0]=((((-1.0)*x12866*x12870))+((r22*x12863))+((x12862*x12868)));
evalcond[1]=((((-1.0)*x12864*x12870))+((r12*x12863))+((x12862*x12869)));
evalcond[2]=((((-1.0)*r22*x12870))+(((-1.0)*x12866*x12871))+((x12863*x12868)));
evalcond[3]=((((-1.0)*x12867*x12871))+(((-1.0)*r02*x12870))+((x12863*x12865)));
evalcond[4]=((-1.0)+(((-1.0)*x12867*x12870))+((x12862*x12865))+((r02*x12863)));
evalcond[5]=((1.0)+(((-1.0)*x12864*x12871))+(((-1.0)*r12*x12870))+((x12863*x12869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12872=((1.0)*sj5);
CheckValue<IkReal> x12873=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12872)))),-1);
if(!x12873.valid){
continue;
}
CheckValue<IkReal> x12874 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x12872)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12873.value)))+(x12874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12875=IKcos(j4);
IkReal x12876=IKsin(j4);
IkReal x12877=(r11*sj5);
IkReal x12878=(cj5*r00);
IkReal x12879=(r21*sj5);
IkReal x12880=(r01*sj5);
IkReal x12881=(cj5*r20);
IkReal x12882=(cj5*r10);
IkReal x12883=((1.0)*x12875);
IkReal x12884=((1.0)*x12876);
evalcond[0]=((((-1.0)*x12879*x12883))+((r22*x12876))+((x12875*x12881)));
evalcond[1]=((((-1.0)*x12877*x12883))+((x12875*x12882))+((r12*x12876)));
evalcond[2]=((((-1.0)*r22*x12883))+(((-1.0)*x12879*x12884))+((x12876*x12881)));
evalcond[3]=((((-1.0)*r02*x12883))+(((-1.0)*x12880*x12884))+((x12876*x12878)));
evalcond[4]=((-1.0)+((r02*x12876))+(((-1.0)*x12880*x12883))+((x12875*x12878)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12883))+(((-1.0)*x12877*x12884))+((x12876*x12882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12885=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12885.valid){
continue;
}
CheckValue<IkReal> x12886 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12885.value)))+(x12886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12887=IKcos(j4);
IkReal x12888=IKsin(j4);
IkReal x12889=(r11*sj5);
IkReal x12890=(cj5*r00);
IkReal x12891=(r21*sj5);
IkReal x12892=(r01*sj5);
IkReal x12893=(cj5*r20);
IkReal x12894=(cj5*r10);
IkReal x12895=((1.0)*x12887);
IkReal x12896=((1.0)*x12888);
evalcond[0]=((((-1.0)*x12891*x12895))+((r22*x12888))+((x12887*x12893)));
evalcond[1]=((((-1.0)*x12889*x12895))+((x12887*x12894))+((r12*x12888)));
evalcond[2]=((((-1.0)*x12891*x12896))+(((-1.0)*r22*x12895))+((x12888*x12893)));
evalcond[3]=((((-1.0)*x12892*x12896))+((x12888*x12890))+(((-1.0)*r02*x12895)));
evalcond[4]=((-1.0)+(((-1.0)*x12892*x12895))+((x12887*x12890))+((r02*x12888)));
evalcond[5]=((1.0)+((x12888*x12894))+(((-1.0)*x12889*x12896))+(((-1.0)*r12*x12895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12897=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12897;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12898=((1.0)*sj5);
IkReal x12899=((((-1.0)*r20*x12898))+(((-1.0)*cj5*r21)));
j4eval[0]=x12899;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12898))))));
j4eval[2]=IKsign(x12899);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12900=cj5*cj5;
IkReal x12901=(r11*r21);
IkReal x12902=(cj5*r20);
IkReal x12903=(r21*sj5);
IkReal x12904=((((-1.0)*r12*r22))+(((-1.0)*x12901))+(((-1.0)*r10*r20*x12900))+((x12900*x12901))+((r11*sj5*x12902))+((cj5*r10*x12903)));
j4eval[0]=x12904;
j4eval[1]=((IKabs(r22))+(IKabs((x12902+(((-1.0)*x12903))))));
j4eval[2]=IKsign(x12904);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12905=cj5*cj5;
IkReal x12906=(r11*r21);
IkReal x12907=(cj5*r20);
IkReal x12908=(r21*sj5);
CheckValue<IkReal> x12909=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*x12906))+(((-1.0)*r10*r20*x12905))+((r11*sj5*x12907))+((x12905*x12906))+((cj5*r10*x12908)))),-1);
if(!x12909.valid){
continue;
}
CheckValue<IkReal> x12910 = IKatan2WithCheck(IkReal((x12907+(((-1.0)*x12908)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12910.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12909.value)))+(x12910.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12911=IKcos(j4);
IkReal x12912=IKsin(j4);
IkReal x12913=(r11*sj5);
IkReal x12914=(cj5*r00);
IkReal x12915=(r21*sj5);
IkReal x12916=(r01*sj5);
IkReal x12917=(cj5*r20);
IkReal x12918=(cj5*r10);
IkReal x12919=((1.0)*x12911);
IkReal x12920=((1.0)*x12912);
evalcond[0]=(((x12911*x12917))+(((-1.0)*x12915*x12919))+((r22*x12912)));
evalcond[1]=(((x12911*x12918))+((r12*x12912))+(((-1.0)*x12913*x12919)));
evalcond[2]=((((-1.0)*x12915*x12920))+(((-1.0)*r22*x12919))+((x12912*x12917)));
evalcond[3]=((((-1.0)*r02*x12919))+((x12912*x12914))+(((-1.0)*x12916*x12920)));
evalcond[4]=((1.0)+((x12911*x12914))+((r02*x12912))+(((-1.0)*x12916*x12919)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12919))+((x12912*x12918))+(((-1.0)*x12913*x12920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12921=((1.0)*sj5);
CheckValue<IkReal> x12922 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x12921)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12922.valid){
continue;
}
CheckValue<IkReal> x12923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12921))+(((-1.0)*cj5*r21)))),-1);
if(!x12923.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12922.value)+(((1.5707963267949)*(x12923.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12924=IKcos(j4);
IkReal x12925=IKsin(j4);
IkReal x12926=(r11*sj5);
IkReal x12927=(cj5*r00);
IkReal x12928=(r21*sj5);
IkReal x12929=(r01*sj5);
IkReal x12930=(cj5*r20);
IkReal x12931=(cj5*r10);
IkReal x12932=((1.0)*x12924);
IkReal x12933=((1.0)*x12925);
evalcond[0]=((((-1.0)*x12928*x12932))+((x12924*x12930))+((r22*x12925)));
evalcond[1]=((((-1.0)*x12926*x12932))+((x12924*x12931))+((r12*x12925)));
evalcond[2]=((((-1.0)*x12928*x12933))+((x12925*x12930))+(((-1.0)*r22*x12932)));
evalcond[3]=((((-1.0)*r02*x12932))+(((-1.0)*x12929*x12933))+((x12925*x12927)));
evalcond[4]=((1.0)+(((-1.0)*x12929*x12932))+((r02*x12925))+((x12924*x12927)));
evalcond[5]=((1.0)+(((-1.0)*x12926*x12933))+(((-1.0)*r12*x12932))+((x12925*x12931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12934 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12934.valid){
continue;
}
CheckValue<IkReal> x12935=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12934.value)+(((1.5707963267949)*(x12935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12936=IKcos(j4);
IkReal x12937=IKsin(j4);
IkReal x12938=(r11*sj5);
IkReal x12939=(cj5*r00);
IkReal x12940=(r21*sj5);
IkReal x12941=(r01*sj5);
IkReal x12942=(cj5*r20);
IkReal x12943=(cj5*r10);
IkReal x12944=((1.0)*x12936);
IkReal x12945=((1.0)*x12937);
evalcond[0]=(((x12936*x12942))+((r22*x12937))+(((-1.0)*x12940*x12944)));
evalcond[1]=(((r12*x12937))+((x12936*x12943))+(((-1.0)*x12938*x12944)));
evalcond[2]=(((x12937*x12942))+(((-1.0)*r22*x12944))+(((-1.0)*x12940*x12945)));
evalcond[3]=(((x12937*x12939))+(((-1.0)*r02*x12944))+(((-1.0)*x12941*x12945)));
evalcond[4]=((1.0)+((r02*x12937))+((x12936*x12939))+(((-1.0)*x12941*x12944)));
evalcond[5]=((1.0)+((x12937*x12943))+(((-1.0)*x12938*x12945))+(((-1.0)*r12*x12944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12946=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12946;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x12946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12947=((1.0)*sj5);
IkReal x12948=((((-1.0)*cj5*r11))+(((-1.0)*r10*x12947)));
j4eval[0]=x12948;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x12947))))));
j4eval[2]=IKsign(x12948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12949=cj5*cj5;
IkReal x12950=(r11*r21);
IkReal x12951=(cj5*r20);
IkReal x12952=(r21*sj5);
IkReal x12953=((((-1.0)*r12*r22))+((r11*sj5*x12951))+((x12949*x12950))+(((-1.0)*x12950))+((cj5*r10*x12952))+(((-1.0)*r10*r20*x12949)));
j4eval[0]=x12953;
j4eval[1]=((IKabs((x12951+(((-1.0)*x12952)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12954=cj5*cj5;
IkReal x12955=(r11*r21);
IkReal x12956=(cj5*r20);
IkReal x12957=(r21*sj5);
CheckValue<IkReal> x12958 = IKatan2WithCheck(IkReal((x12956+(((-1.0)*x12957)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12958.valid){
continue;
}
CheckValue<IkReal> x12959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*r20*x12954))+(((-1.0)*r12*r22))+((r11*sj5*x12956))+(((-1.0)*x12955))+((x12954*x12955))+((cj5*r10*x12957)))),-1);
if(!x12959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12958.value)+(((1.5707963267949)*(x12959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12960=IKcos(j4);
IkReal x12961=IKsin(j4);
IkReal x12962=(r11*sj5);
IkReal x12963=(cj5*r00);
IkReal x12964=(r21*sj5);
IkReal x12965=(r01*sj5);
IkReal x12966=(cj5*r20);
IkReal x12967=(cj5*r10);
IkReal x12968=((1.0)*x12960);
IkReal x12969=((1.0)*x12961);
evalcond[0]=(((x12960*x12966))+((r22*x12961))+(((-1.0)*x12964*x12968)));
evalcond[1]=((((-1.0)*x12962*x12968))+((x12960*x12967))+((r12*x12961)));
evalcond[2]=(((x12961*x12966))+(((-1.0)*r22*x12968))+(((-1.0)*x12964*x12969)));
evalcond[3]=((((-1.0)*x12965*x12969))+((x12961*x12963))+(((-1.0)*r02*x12968)));
evalcond[4]=((-1.0)+(((-1.0)*x12965*x12968))+((r02*x12961))+((x12960*x12963)));
evalcond[5]=((1.0)+(((-1.0)*x12962*x12969))+((x12961*x12967))+(((-1.0)*r12*x12968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12970=((1.0)*sj5);
CheckValue<IkReal> x12971 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x12970)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12971.valid){
continue;
}
CheckValue<IkReal> x12972=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x12970)))),-1);
if(!x12972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12971.value)+(((1.5707963267949)*(x12972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12973=IKcos(j4);
IkReal x12974=IKsin(j4);
IkReal x12975=(r11*sj5);
IkReal x12976=(cj5*r00);
IkReal x12977=(r21*sj5);
IkReal x12978=(r01*sj5);
IkReal x12979=(cj5*r20);
IkReal x12980=(cj5*r10);
IkReal x12981=((1.0)*x12973);
IkReal x12982=((1.0)*x12974);
evalcond[0]=((((-1.0)*x12977*x12981))+((x12973*x12979))+((r22*x12974)));
evalcond[1]=((((-1.0)*x12975*x12981))+((x12973*x12980))+((r12*x12974)));
evalcond[2]=((((-1.0)*r22*x12981))+((x12974*x12979))+(((-1.0)*x12977*x12982)));
evalcond[3]=(((x12974*x12976))+(((-1.0)*r02*x12981))+(((-1.0)*x12978*x12982)));
evalcond[4]=((-1.0)+((r02*x12974))+((x12973*x12976))+(((-1.0)*x12978*x12981)));
evalcond[5]=((1.0)+(((-1.0)*x12975*x12982))+(((-1.0)*r12*x12981))+((x12974*x12980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12983=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12983.valid){
continue;
}
CheckValue<IkReal> x12984 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12983.value)))+(x12984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12985=IKcos(j4);
IkReal x12986=IKsin(j4);
IkReal x12987=(r11*sj5);
IkReal x12988=(cj5*r00);
IkReal x12989=(r21*sj5);
IkReal x12990=(r01*sj5);
IkReal x12991=(cj5*r20);
IkReal x12992=(cj5*r10);
IkReal x12993=((1.0)*x12985);
IkReal x12994=((1.0)*x12986);
evalcond[0]=(((r22*x12986))+(((-1.0)*x12989*x12993))+((x12985*x12991)));
evalcond[1]=(((x12985*x12992))+(((-1.0)*x12987*x12993))+((r12*x12986)));
evalcond[2]=((((-1.0)*r22*x12993))+(((-1.0)*x12989*x12994))+((x12986*x12991)));
evalcond[3]=((((-1.0)*r02*x12993))+(((-1.0)*x12990*x12994))+((x12986*x12988)));
evalcond[4]=((-1.0)+((x12985*x12988))+(((-1.0)*x12990*x12993))+((r02*x12986)));
evalcond[5]=((1.0)+(((-1.0)*x12987*x12994))+(((-1.0)*r12*x12993))+((x12986*x12992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12995=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12995;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x12995);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12996=((1.0)*sj5);
IkReal x12997=((((-1.0)*r20*x12996))+(((-1.0)*cj5*r21)));
j4eval[0]=x12997;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x12996))))));
j4eval[2]=IKsign(x12997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12998=cj5*cj5;
IkReal x12999=(r11*r21);
IkReal x13000=(cj5*r20);
IkReal x13001=(r21*sj5);
IkReal x13002=(((r11*sj5*x13000))+(((-1.0)*r10*r20*x12998))+((x12998*x12999))+(((-1.0)*r12*r22))+((cj5*r10*x13001))+(((-1.0)*x12999)));
j4eval[0]=x13002;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x13001))+x13000))));
j4eval[2]=IKsign(x13002);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13003=cj5*cj5;
IkReal x13004=(r11*r21);
IkReal x13005=(cj5*r20);
IkReal x13006=(r21*sj5);
CheckValue<IkReal> x13007=IKPowWithIntegerCheck(IKsign((((r11*sj5*x13005))+(((-1.0)*r12*r22))+((cj5*r10*x13006))+((x13003*x13004))+(((-1.0)*x13004))+(((-1.0)*r10*r20*x13003)))),-1);
if(!x13007.valid){
continue;
}
CheckValue<IkReal> x13008 = IKatan2WithCheck(IkReal(((((-1.0)*x13006))+x13005)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13007.value)))+(x13008.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13009=IKcos(j4);
IkReal x13010=IKsin(j4);
IkReal x13011=(r11*sj5);
IkReal x13012=(cj5*r00);
IkReal x13013=(r21*sj5);
IkReal x13014=(r01*sj5);
IkReal x13015=(cj5*r20);
IkReal x13016=(cj5*r10);
IkReal x13017=((1.0)*x13009);
IkReal x13018=((1.0)*x13010);
evalcond[0]=((((-1.0)*x13013*x13017))+((x13009*x13015))+((r22*x13010)));
evalcond[1]=(((x13009*x13016))+((r12*x13010))+(((-1.0)*x13011*x13017)));
evalcond[2]=((((-1.0)*x13013*x13018))+(((-1.0)*r22*x13017))+((x13010*x13015)));
evalcond[3]=((((-1.0)*x13014*x13018))+((x13010*x13012))+(((-1.0)*r02*x13017)));
evalcond[4]=((1.0)+((x13009*x13012))+((r02*x13010))+(((-1.0)*x13014*x13017)));
evalcond[5]=((1.0)+(((-1.0)*x13011*x13018))+((x13010*x13016))+(((-1.0)*r12*x13017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13019=((1.0)*sj5);
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x13019)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
CheckValue<IkReal> x13021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13019))+(((-1.0)*cj5*r21)))),-1);
if(!x13021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13020.value)+(((1.5707963267949)*(x13021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13022=IKcos(j4);
IkReal x13023=IKsin(j4);
IkReal x13024=(r11*sj5);
IkReal x13025=(cj5*r00);
IkReal x13026=(r21*sj5);
IkReal x13027=(r01*sj5);
IkReal x13028=(cj5*r20);
IkReal x13029=(cj5*r10);
IkReal x13030=((1.0)*x13022);
IkReal x13031=((1.0)*x13023);
evalcond[0]=((((-1.0)*x13026*x13030))+((x13022*x13028))+((r22*x13023)));
evalcond[1]=(((x13022*x13029))+((r12*x13023))+(((-1.0)*x13024*x13030)));
evalcond[2]=((((-1.0)*x13026*x13031))+(((-1.0)*r22*x13030))+((x13023*x13028)));
evalcond[3]=((((-1.0)*r02*x13030))+((x13023*x13025))+(((-1.0)*x13027*x13031)));
evalcond[4]=((1.0)+((r02*x13023))+((x13022*x13025))+(((-1.0)*x13027*x13030)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13030))+((x13023*x13029))+(((-1.0)*x13024*x13031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13032 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13032.valid){
continue;
}
CheckValue<IkReal> x13033=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13032.value)+(((1.5707963267949)*(x13033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13034=IKcos(j4);
IkReal x13035=IKsin(j4);
IkReal x13036=(r11*sj5);
IkReal x13037=(cj5*r00);
IkReal x13038=(r21*sj5);
IkReal x13039=(r01*sj5);
IkReal x13040=(cj5*r20);
IkReal x13041=(cj5*r10);
IkReal x13042=((1.0)*x13034);
IkReal x13043=((1.0)*x13035);
evalcond[0]=((((-1.0)*x13038*x13042))+((r22*x13035))+((x13034*x13040)));
evalcond[1]=(((r12*x13035))+(((-1.0)*x13036*x13042))+((x13034*x13041)));
evalcond[2]=((((-1.0)*x13038*x13043))+((x13035*x13040))+(((-1.0)*r22*x13042)));
evalcond[3]=((((-1.0)*x13039*x13043))+((x13035*x13037))+(((-1.0)*r02*x13042)));
evalcond[4]=((1.0)+(((-1.0)*x13039*x13042))+((x13034*x13037))+((r02*x13035)));
evalcond[5]=((1.0)+((x13035*x13041))+(((-1.0)*x13036*x13043))+(((-1.0)*r12*x13042)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13044=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13044;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13045=((1.0)*sj5);
IkReal x13046=((((-1.0)*r20*x13045))+(((-1.0)*cj5*r21)));
j4eval[0]=x13046;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13045))))));
j4eval[2]=IKsign(x13046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x13047=cj5*cj5;
IkReal x13048=(r11*r21);
IkReal x13049=(cj5*r20);
IkReal x13050=(r21*sj5);
IkReal x13051=((((-1.0)*x13048))+(((-1.0)*r12*r22))+((r11*sj5*x13049))+((x13047*x13048))+((cj5*r10*x13050))+(((-1.0)*r10*r20*x13047)));
j4eval[0]=x13051;
j4eval[1]=((IKabs(((((-1.0)*x13050))+x13049)))+(IKabs(r22)));
j4eval[2]=IKsign(x13051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13052=cj5*cj5;
IkReal x13053=(r11*r21);
IkReal x13054=(cj5*r20);
IkReal x13055=(r21*sj5);
CheckValue<IkReal> x13056 = IKatan2WithCheck(IkReal(((((-1.0)*x13055))+x13054)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13056.valid){
continue;
}
CheckValue<IkReal> x13057=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13053))+(((-1.0)*r12*r22))+(((-1.0)*r10*r20*x13052))+((r11*sj5*x13054))+((cj5*r10*x13055))+((x13052*x13053)))),-1);
if(!x13057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13056.value)+(((1.5707963267949)*(x13057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13058=IKcos(j4);
IkReal x13059=IKsin(j4);
IkReal x13060=(r11*sj5);
IkReal x13061=(cj5*r00);
IkReal x13062=(r21*sj5);
IkReal x13063=(r01*sj5);
IkReal x13064=(cj5*r20);
IkReal x13065=(cj5*r10);
IkReal x13066=((1.0)*x13058);
IkReal x13067=((1.0)*x13059);
evalcond[0]=((((-1.0)*x13062*x13066))+((r22*x13059))+((x13058*x13064)));
evalcond[1]=(((r12*x13059))+(((-1.0)*x13060*x13066))+((x13058*x13065)));
evalcond[2]=(((x13059*x13064))+(((-1.0)*x13062*x13067))+(((-1.0)*r22*x13066)));
evalcond[3]=(((x13059*x13061))+(((-1.0)*x13063*x13067))+(((-1.0)*r02*x13066)));
evalcond[4]=((1.0)+((r02*x13059))+(((-1.0)*x13063*x13066))+((x13058*x13061)));
evalcond[5]=((1.0)+((x13059*x13065))+(((-1.0)*x13060*x13067))+(((-1.0)*r12*x13066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13068=((1.0)*sj5);
CheckValue<IkReal> x13069 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x13068)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13069.valid){
continue;
}
CheckValue<IkReal> x13070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13068))+(((-1.0)*cj5*r21)))),-1);
if(!x13070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13069.value)+(((1.5707963267949)*(x13070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13071=IKcos(j4);
IkReal x13072=IKsin(j4);
IkReal x13073=(r11*sj5);
IkReal x13074=(cj5*r00);
IkReal x13075=(r21*sj5);
IkReal x13076=(r01*sj5);
IkReal x13077=(cj5*r20);
IkReal x13078=(cj5*r10);
IkReal x13079=((1.0)*x13071);
IkReal x13080=((1.0)*x13072);
evalcond[0]=((((-1.0)*x13075*x13079))+((x13071*x13077))+((r22*x13072)));
evalcond[1]=((((-1.0)*x13073*x13079))+((r12*x13072))+((x13071*x13078)));
evalcond[2]=(((x13072*x13077))+(((-1.0)*x13075*x13080))+(((-1.0)*r22*x13079)));
evalcond[3]=((((-1.0)*r02*x13079))+((x13072*x13074))+(((-1.0)*x13076*x13080)));
evalcond[4]=((1.0)+(((-1.0)*x13076*x13079))+((r02*x13072))+((x13071*x13074)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13079))+((x13072*x13078))+(((-1.0)*x13073*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13081 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13081.valid){
continue;
}
CheckValue<IkReal> x13082=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13081.value)+(((1.5707963267949)*(x13082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13083=IKcos(j4);
IkReal x13084=IKsin(j4);
IkReal x13085=(r11*sj5);
IkReal x13086=(cj5*r00);
IkReal x13087=(r21*sj5);
IkReal x13088=(r01*sj5);
IkReal x13089=(cj5*r20);
IkReal x13090=(cj5*r10);
IkReal x13091=((1.0)*x13083);
IkReal x13092=((1.0)*x13084);
evalcond[0]=(((x13083*x13089))+(((-1.0)*x13087*x13091))+((r22*x13084)));
evalcond[1]=((((-1.0)*x13085*x13091))+((r12*x13084))+((x13083*x13090)));
evalcond[2]=((((-1.0)*x13087*x13092))+(((-1.0)*r22*x13091))+((x13084*x13089)));
evalcond[3]=(((x13084*x13086))+(((-1.0)*x13088*x13092))+(((-1.0)*r02*x13091)));
evalcond[4]=((1.0)+((x13083*x13086))+((r02*x13084))+(((-1.0)*x13088*x13091)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13091))+(((-1.0)*x13085*x13092))+((x13084*x13090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13093=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13093;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x13093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13094=((1.0)*sj5);
IkReal x13095=((((-1.0)*cj5*r11))+(((-1.0)*r10*x13094)));
j4eval[0]=x13095;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x13094))))));
j4eval[2]=IKsign(x13095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13096=cj5*cj5;
IkReal x13097=(r11*r21);
IkReal x13098=(cj5*r20);
IkReal x13099=(r21*sj5);
IkReal x13100=(((cj5*r10*x13099))+(((-1.0)*r10*r20*x13096))+((r11*sj5*x13098))+(((-1.0)*r12*r22))+(((-1.0)*x13097))+((x13096*x13097)));
j4eval[0]=x13100;
j4eval[1]=((IKabs((x13098+(((-1.0)*x13099)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13100);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13101=cj5*cj5;
IkReal x13102=(r11*r21);
IkReal x13103=(cj5*r20);
IkReal x13104=(r21*sj5);
CheckValue<IkReal> x13105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13101*x13102))+((r11*sj5*x13103))+(((-1.0)*r10*r20*x13101))+(((-1.0)*x13102))+((cj5*r10*x13104)))),-1);
if(!x13105.valid){
continue;
}
CheckValue<IkReal> x13106 = IKatan2WithCheck(IkReal(((((-1.0)*x13104))+x13103)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13105.value)))+(x13106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13107=IKcos(j4);
IkReal x13108=IKsin(j4);
IkReal x13109=(r11*sj5);
IkReal x13110=(cj5*r00);
IkReal x13111=(r21*sj5);
IkReal x13112=(r01*sj5);
IkReal x13113=(cj5*r20);
IkReal x13114=(cj5*r10);
IkReal x13115=((1.0)*x13107);
IkReal x13116=((1.0)*x13108);
evalcond[0]=(((x13107*x13113))+((r22*x13108))+(((-1.0)*x13111*x13115)));
evalcond[1]=(((x13107*x13114))+(((-1.0)*x13109*x13115))+((r12*x13108)));
evalcond[2]=(((x13108*x13113))+(((-1.0)*x13111*x13116))+(((-1.0)*r22*x13115)));
evalcond[3]=((((-1.0)*x13112*x13116))+((x13108*x13110))+(((-1.0)*r02*x13115)));
evalcond[4]=((-1.0)+((x13107*x13110))+(((-1.0)*x13112*x13115))+((r02*x13108)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13115))+((x13108*x13114))+(((-1.0)*x13109*x13116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13117=((1.0)*sj5);
CheckValue<IkReal> x13118 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x13117)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13118.valid){
continue;
}
CheckValue<IkReal> x13119=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13117)))),-1);
if(!x13119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13118.value)+(((1.5707963267949)*(x13119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13120=IKcos(j4);
IkReal x13121=IKsin(j4);
IkReal x13122=(r11*sj5);
IkReal x13123=(cj5*r00);
IkReal x13124=(r21*sj5);
IkReal x13125=(r01*sj5);
IkReal x13126=(cj5*r20);
IkReal x13127=(cj5*r10);
IkReal x13128=((1.0)*x13120);
IkReal x13129=((1.0)*x13121);
evalcond[0]=((((-1.0)*x13124*x13128))+((x13120*x13126))+((r22*x13121)));
evalcond[1]=((((-1.0)*x13122*x13128))+((x13120*x13127))+((r12*x13121)));
evalcond[2]=((((-1.0)*x13124*x13129))+((x13121*x13126))+(((-1.0)*r22*x13128)));
evalcond[3]=((((-1.0)*r02*x13128))+(((-1.0)*x13125*x13129))+((x13121*x13123)));
evalcond[4]=((-1.0)+(((-1.0)*x13125*x13128))+((x13120*x13123))+((r02*x13121)));
evalcond[5]=((1.0)+((x13121*x13127))+(((-1.0)*x13122*x13129))+(((-1.0)*r12*x13128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13130=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13130.valid){
continue;
}
CheckValue<IkReal> x13131 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13130.value)))+(x13131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13132=IKcos(j4);
IkReal x13133=IKsin(j4);
IkReal x13134=(r11*sj5);
IkReal x13135=(cj5*r00);
IkReal x13136=(r21*sj5);
IkReal x13137=(r01*sj5);
IkReal x13138=(cj5*r20);
IkReal x13139=(cj5*r10);
IkReal x13140=((1.0)*x13132);
IkReal x13141=((1.0)*x13133);
evalcond[0]=(((x13132*x13138))+(((-1.0)*x13136*x13140))+((r22*x13133)));
evalcond[1]=(((r12*x13133))+((x13132*x13139))+(((-1.0)*x13134*x13140)));
evalcond[2]=(((x13133*x13138))+(((-1.0)*r22*x13140))+(((-1.0)*x13136*x13141)));
evalcond[3]=(((x13133*x13135))+(((-1.0)*x13137*x13141))+(((-1.0)*r02*x13140)));
evalcond[4]=((-1.0)+((x13132*x13135))+(((-1.0)*x13137*x13140))+((r02*x13133)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13140))+((x13133*x13139))+(((-1.0)*x13134*x13141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13142=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13142;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x13142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13143=((1.0)*sj5);
IkReal x13144=((((-1.0)*r20*x13143))+(((-1.0)*cj5*r21)));
j4eval[0]=x13144;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x13143))))));
j4eval[2]=IKsign(x13144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13145=cj5*cj5;
IkReal x13146=(r11*r21);
IkReal x13147=(cj5*r20);
IkReal x13148=(r21*sj5);
IkReal x13149=((((-1.0)*r12*r22))+((x13145*x13146))+((r11*sj5*x13147))+((cj5*r10*x13148))+(((-1.0)*x13146))+(((-1.0)*r10*r20*x13145)));
j4eval[0]=x13149;
j4eval[1]=((IKabs((x13147+(((-1.0)*x13148)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13150=cj5*cj5;
IkReal x13151=(r11*r21);
IkReal x13152=(cj5*r20);
IkReal x13153=(r21*sj5);
CheckValue<IkReal> x13154 = IKatan2WithCheck(IkReal((x13152+(((-1.0)*x13153)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13154.valid){
continue;
}
CheckValue<IkReal> x13155=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13153))+((r11*sj5*x13152))+(((-1.0)*r12*r22))+((x13150*x13151))+(((-1.0)*r10*r20*x13150))+(((-1.0)*x13151)))),-1);
if(!x13155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13154.value)+(((1.5707963267949)*(x13155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13156=IKcos(j4);
IkReal x13157=IKsin(j4);
IkReal x13158=(r11*sj5);
IkReal x13159=(cj5*r00);
IkReal x13160=(r21*sj5);
IkReal x13161=(r01*sj5);
IkReal x13162=(cj5*r20);
IkReal x13163=(cj5*r10);
IkReal x13164=((1.0)*x13156);
IkReal x13165=((1.0)*x13157);
evalcond[0]=((((-1.0)*x13160*x13164))+((x13156*x13162))+((r22*x13157)));
evalcond[1]=(((x13156*x13163))+(((-1.0)*x13158*x13164))+((r12*x13157)));
evalcond[2]=(((x13157*x13162))+(((-1.0)*x13160*x13165))+(((-1.0)*r22*x13164)));
evalcond[3]=(((x13157*x13159))+(((-1.0)*x13161*x13165))+(((-1.0)*r02*x13164)));
evalcond[4]=((1.0)+((r02*x13157))+(((-1.0)*x13161*x13164))+((x13156*x13159)));
evalcond[5]=((1.0)+((x13157*x13163))+(((-1.0)*r12*x13164))+(((-1.0)*x13158*x13165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13166=((1.0)*sj5);
CheckValue<IkReal> x13167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13166))+(((-1.0)*cj5*r21)))),-1);
if(!x13167.valid){
continue;
}
CheckValue<IkReal> x13168 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x13166)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13167.value)))+(x13168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13169=IKcos(j4);
IkReal x13170=IKsin(j4);
IkReal x13171=(r11*sj5);
IkReal x13172=(cj5*r00);
IkReal x13173=(r21*sj5);
IkReal x13174=(r01*sj5);
IkReal x13175=(cj5*r20);
IkReal x13176=(cj5*r10);
IkReal x13177=((1.0)*x13169);
IkReal x13178=((1.0)*x13170);
evalcond[0]=((((-1.0)*x13173*x13177))+((r22*x13170))+((x13169*x13175)));
evalcond[1]=(((r12*x13170))+(((-1.0)*x13171*x13177))+((x13169*x13176)));
evalcond[2]=((((-1.0)*x13173*x13178))+((x13170*x13175))+(((-1.0)*r22*x13177)));
evalcond[3]=(((x13170*x13172))+(((-1.0)*r02*x13177))+(((-1.0)*x13174*x13178)));
evalcond[4]=((1.0)+((r02*x13170))+((x13169*x13172))+(((-1.0)*x13174*x13177)));
evalcond[5]=((1.0)+((x13170*x13176))+(((-1.0)*r12*x13177))+(((-1.0)*x13171*x13178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13179 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13179.valid){
continue;
}
CheckValue<IkReal> x13180=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13179.value)+(((1.5707963267949)*(x13180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13181=IKcos(j4);
IkReal x13182=IKsin(j4);
IkReal x13183=(r11*sj5);
IkReal x13184=(cj5*r00);
IkReal x13185=(r21*sj5);
IkReal x13186=(r01*sj5);
IkReal x13187=(cj5*r20);
IkReal x13188=(cj5*r10);
IkReal x13189=((1.0)*x13181);
IkReal x13190=((1.0)*x13182);
evalcond[0]=(((r22*x13182))+(((-1.0)*x13185*x13189))+((x13181*x13187)));
evalcond[1]=(((r12*x13182))+(((-1.0)*x13183*x13189))+((x13181*x13188)));
evalcond[2]=(((x13182*x13187))+(((-1.0)*r22*x13189))+(((-1.0)*x13185*x13190)));
evalcond[3]=(((x13182*x13184))+(((-1.0)*r02*x13189))+(((-1.0)*x13186*x13190)));
evalcond[4]=((1.0)+((r02*x13182))+(((-1.0)*x13186*x13189))+((x13181*x13184)));
evalcond[5]=((1.0)+((x13182*x13188))+(((-1.0)*r12*x13189))+(((-1.0)*x13183*x13190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13191=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13191;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x13191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13192=((1.0)*sj5);
IkReal x13193=((((-1.0)*cj5*r11))+(((-1.0)*r10*x13192)));
j4eval[0]=x13193;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x13192))))));
j4eval[2]=IKsign(x13193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13194=cj5*cj5;
IkReal x13195=(r11*r21);
IkReal x13196=(cj5*r20);
IkReal x13197=(r21*sj5);
IkReal x13198=((((-1.0)*x13195))+(((-1.0)*r12*r22))+((x13194*x13195))+((r11*sj5*x13196))+(((-1.0)*r10*r20*x13194))+((cj5*r10*x13197)));
j4eval[0]=x13198;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*x13197))+x13196))));
j4eval[2]=IKsign(x13198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13199=cj5*cj5;
IkReal x13200=(r11*r21);
IkReal x13201=(cj5*r20);
IkReal x13202=(r21*sj5);
CheckValue<IkReal> x13203 = IKatan2WithCheck(IkReal((x13201+(((-1.0)*x13202)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13203.valid){
continue;
}
CheckValue<IkReal> x13204=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13199*x13200))+((r11*sj5*x13201))+(((-1.0)*r10*r20*x13199))+((cj5*r10*x13202))+(((-1.0)*x13200)))),-1);
if(!x13204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13203.value)+(((1.5707963267949)*(x13204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13205=IKcos(j4);
IkReal x13206=IKsin(j4);
IkReal x13207=(r11*sj5);
IkReal x13208=(cj5*r00);
IkReal x13209=(r21*sj5);
IkReal x13210=(r01*sj5);
IkReal x13211=(cj5*r20);
IkReal x13212=(cj5*r10);
IkReal x13213=((1.0)*x13205);
IkReal x13214=((1.0)*x13206);
evalcond[0]=(((x13205*x13211))+((r22*x13206))+(((-1.0)*x13209*x13213)));
evalcond[1]=(((x13205*x13212))+(((-1.0)*x13207*x13213))+((r12*x13206)));
evalcond[2]=(((x13206*x13211))+(((-1.0)*r22*x13213))+(((-1.0)*x13209*x13214)));
evalcond[3]=((((-1.0)*x13210*x13214))+(((-1.0)*r02*x13213))+((x13206*x13208)));
evalcond[4]=((-1.0)+((x13205*x13208))+((r02*x13206))+(((-1.0)*x13210*x13213)));
evalcond[5]=((1.0)+(((-1.0)*x13207*x13214))+((x13206*x13212))+(((-1.0)*r12*x13213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13215=((1.0)*sj5);
CheckValue<IkReal> x13216 = IKatan2WithCheck(IkReal((((cj5*r20))+(((-1.0)*r21*x13215)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13216.valid){
continue;
}
CheckValue<IkReal> x13217=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x13215)))),-1);
if(!x13217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13216.value)+(((1.5707963267949)*(x13217.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13218=IKcos(j4);
IkReal x13219=IKsin(j4);
IkReal x13220=(r11*sj5);
IkReal x13221=(cj5*r00);
IkReal x13222=(r21*sj5);
IkReal x13223=(r01*sj5);
IkReal x13224=(cj5*r20);
IkReal x13225=(cj5*r10);
IkReal x13226=((1.0)*x13218);
IkReal x13227=((1.0)*x13219);
evalcond[0]=(((x13218*x13224))+((r22*x13219))+(((-1.0)*x13222*x13226)));
evalcond[1]=(((x13218*x13225))+(((-1.0)*x13220*x13226))+((r12*x13219)));
evalcond[2]=((((-1.0)*r22*x13226))+((x13219*x13224))+(((-1.0)*x13222*x13227)));
evalcond[3]=(((x13219*x13221))+(((-1.0)*x13223*x13227))+(((-1.0)*r02*x13226)));
evalcond[4]=((-1.0)+((x13218*x13221))+(((-1.0)*x13223*x13226))+((r02*x13219)));
evalcond[5]=((1.0)+(((-1.0)*x13220*x13227))+((x13219*x13225))+(((-1.0)*r12*x13226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13228=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13228.valid){
continue;
}
CheckValue<IkReal> x13229 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13228.value)))+(x13229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13230=IKcos(j4);
IkReal x13231=IKsin(j4);
IkReal x13232=(r11*sj5);
IkReal x13233=(cj5*r00);
IkReal x13234=(r21*sj5);
IkReal x13235=(r01*sj5);
IkReal x13236=(cj5*r20);
IkReal x13237=(cj5*r10);
IkReal x13238=((1.0)*x13230);
IkReal x13239=((1.0)*x13231);
evalcond[0]=(((x13230*x13236))+(((-1.0)*x13234*x13238))+((r22*x13231)));
evalcond[1]=(((x13230*x13237))+(((-1.0)*x13232*x13238))+((r12*x13231)));
evalcond[2]=((((-1.0)*x13234*x13239))+(((-1.0)*r22*x13238))+((x13231*x13236)));
evalcond[3]=((((-1.0)*x13235*x13239))+(((-1.0)*r02*x13238))+((x13231*x13233)));
evalcond[4]=((-1.0)+((x13230*x13233))+(((-1.0)*x13235*x13238))+((r02*x13231)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13238))+(((-1.0)*x13232*x13239))+((x13231*x13237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13240=(sj1*sj2);
IkReal x13241=(cj1*cj2);
IkReal x13242=(cj5*r10);
IkReal x13243=(r11*sj5);
CheckValue<IkReal> x13244=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13244.valid){
continue;
}
CheckValue<IkReal> x13245 = IKatan2WithCheck(IkReal(((((-1.0)*x13241*x13242))+((x13241*x13243))+((x13240*x13242))+(((-1.0)*x13240*x13243)))),IkReal(((((-1.0)*r12*x13240))+((r12*x13241)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13244.value)))+(x13245.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13246=IKcos(j4);
IkReal x13247=IKsin(j4);
IkReal x13248=(cj5*r10);
IkReal x13249=((1.0)*cj1);
IkReal x13250=((1.0)*x13246);
IkReal x13251=(cj5*x13247);
IkReal x13252=(cj5*x13246);
IkReal x13253=((1.0)*sj5*x13247);
evalcond[0]=(((x13246*x13248))+((r12*x13247))+(((-1.0)*r11*sj5*x13250)));
evalcond[1]=((((-1.0)*r22*x13250))+(((-1.0)*r21*x13253))+((r20*x13251)));
evalcond[2]=((((-1.0)*r02*x13250))+((r00*x13251))+(((-1.0)*r01*x13253)));
evalcond[3]=((1.0)+(((-1.0)*r11*x13253))+(((-1.0)*r12*x13250))+((x13247*x13248)));
evalcond[4]=(((sj1*sj2))+((r22*x13247))+(((-1.0)*r21*sj5*x13250))+(((-1.0)*cj2*x13249))+((r20*x13252)));
evalcond[5]=(((r02*x13247))+(((-1.0)*r01*sj5*x13250))+(((-1.0)*cj2*sj1))+((r00*x13252))+(((-1.0)*sj2*x13249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13254=((1.0)*sj5);
CheckValue<IkReal> x13255 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x13254))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13255.valid){
continue;
}
CheckValue<IkReal> x13256=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x13254)))),-1);
if(!x13256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13255.value)+(((1.5707963267949)*(x13256.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13257=IKcos(j4);
IkReal x13258=IKsin(j4);
IkReal x13259=(cj5*r10);
IkReal x13260=((1.0)*cj1);
IkReal x13261=((1.0)*x13257);
IkReal x13262=(cj5*x13258);
IkReal x13263=(cj5*x13257);
IkReal x13264=((1.0)*sj5*x13258);
evalcond[0]=((((-1.0)*r11*sj5*x13261))+((r12*x13258))+((x13257*x13259)));
evalcond[1]=((((-1.0)*r21*x13264))+((r20*x13262))+(((-1.0)*r22*x13261)));
evalcond[2]=((((-1.0)*r01*x13264))+((r00*x13262))+(((-1.0)*r02*x13261)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13261))+(((-1.0)*r11*x13264))+((x13258*x13259)));
evalcond[4]=((((-1.0)*r21*sj5*x13261))+((r20*x13263))+((sj1*sj2))+(((-1.0)*cj2*x13260))+((r22*x13258)));
evalcond[5]=((((-1.0)*r01*sj5*x13261))+(((-1.0)*sj2*x13260))+((r02*x13258))+(((-1.0)*cj2*sj1))+((r00*x13263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13265=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x13265.valid){
continue;
}
CheckValue<IkReal> x13266 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13266.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13265.value)))+(x13266.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13267=IKcos(j4);
IkReal x13268=IKsin(j4);
IkReal x13269=(cj5*r10);
IkReal x13270=((1.0)*cj1);
IkReal x13271=((1.0)*x13267);
IkReal x13272=(cj5*x13268);
IkReal x13273=(cj5*x13267);
IkReal x13274=((1.0)*sj5*x13268);
evalcond[0]=(((r12*x13268))+(((-1.0)*r11*sj5*x13271))+((x13267*x13269)));
evalcond[1]=(((r20*x13272))+(((-1.0)*r22*x13271))+(((-1.0)*r21*x13274)));
evalcond[2]=((((-1.0)*r01*x13274))+((r00*x13272))+(((-1.0)*r02*x13271)));
evalcond[3]=((1.0)+(((-1.0)*r11*x13274))+(((-1.0)*r12*x13271))+((x13268*x13269)));
evalcond[4]=((((-1.0)*r21*sj5*x13271))+((r20*x13273))+((sj1*sj2))+(((-1.0)*cj2*x13270))+((r22*x13268)));
evalcond[5]=((((-1.0)*r01*sj5*x13271))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x13270))+((r00*x13273))+((r02*x13268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13275=((-1.0)*r20);
IkReal x13277 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13277)==0){
continue;
}
IkReal x13276=pow(x13277,-0.5);
CheckValue<IkReal> x13278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13275),IKFAST_ATAN2_MAGTHRESH);
if(!x13278.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13278.value));
IkReal gconst19=(r21*x13276);
IkReal gconst20=(x13275*x13276);
CheckValue<IkReal> x13279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13279.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13279.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13280=((-1.0)*r20);
IkReal x13281=x13276;
CheckValue<IkReal> x13283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13280),IKFAST_ATAN2_MAGTHRESH);
if(!x13283.valid){
continue;
}
IkReal x13282=((-1.0)*(x13283.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13282;
IkReal gconst18=x13282;
IkReal gconst19=(r21*x13281);
IkReal gconst20=(x13280*x13281);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13284=((-1.0)*r20);
IkReal x13285=x13276;
CheckValue<IkReal> x13287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13284),IKFAST_ATAN2_MAGTHRESH);
if(!x13287.valid){
continue;
}
IkReal x13286=((-1.0)*(x13287.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13286;
IkReal gconst18=x13286;
IkReal gconst19=(r21*x13285);
IkReal gconst20=(x13284*x13285);
CheckValue<IkReal> x13295=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13295.valid){
continue;
}
IkReal x13288=x13295.value;
IkReal x13289=(cj3*x13288);
IkReal x13290=(r11*x13289);
IkReal x13291=(r01*x13289);
IkReal x13292=(r00*x13289);
IkReal x13293=(r10*x13289);
IkReal x13294=(r20*r21*x13289);
j4eval[0]=IKsign((((r10*x13292*(r20*r20)))+((cj3*r02*r12))+((r10*r20*r21*x13291))+((r01*x13290*(r21*r21)))+((r00*r20*r21*x13290))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13296=((-1.0)*r20);
IkReal x13297=x13276;
CheckValue<IkReal> x13299 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13296),IKFAST_ATAN2_MAGTHRESH);
if(!x13299.valid){
continue;
}
IkReal x13298=((-1.0)*(x13299.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13298;
IkReal gconst18=x13298;
IkReal gconst19=(r21*x13297);
IkReal gconst20=(x13296*x13297);
CheckValue<IkReal> x13307=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13307.valid){
continue;
}
IkReal x13300=x13307.value;
IkReal x13301=(sj3*x13300);
IkReal x13302=(r11*x13301);
IkReal x13303=(r00*x13301);
IkReal x13304=(r01*x13301);
IkReal x13305=(r10*x13301);
IkReal x13306=(r20*r21*x13301);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x13304))+((r01*x13302*(r21*r21)))+((r10*x13303*(r20*r20)))+((r00*r20*r21*x13302))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13308=((-1.0)*r20);
IkReal x13309=x13276;
CheckValue<IkReal> x13311 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13308),IKFAST_ATAN2_MAGTHRESH);
if(!x13311.valid){
continue;
}
IkReal x13310=((-1.0)*(x13311.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13310;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13310;
IkReal gconst19=(r21*x13309);
IkReal gconst20=(x13308*x13309);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13312=((-1.0)*r20);
IkReal x13313=x13276;
CheckValue<IkReal> x13315 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13312),IKFAST_ATAN2_MAGTHRESH);
if(!x13315.valid){
continue;
}
IkReal x13314=((-1.0)*(x13315.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13314;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13314;
IkReal gconst19=(r21*x13313);
IkReal gconst20=(x13312*x13313);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13316=((-1.0)*r20);
IkReal x13317=x13276;
CheckValue<IkReal> x13319 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13316),IKFAST_ATAN2_MAGTHRESH);
if(!x13319.valid){
continue;
}
IkReal x13318=((-1.0)*(x13319.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13318;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst18=x13318;
IkReal gconst19=(r21*x13317);
IkReal gconst20=(x13316*x13317);
IkReal x13320=r22*r22;
IkReal x13321=(r02*sj1*sj2);
IkReal x13322=(cj1*cj2*r02);
CheckValue<IkReal> x13326=IKPowWithIntegerCheck(((-1.0)+x13320),-1);
if(!x13326.valid){
continue;
}
IkReal x13323=x13326.value;
if((((1.0)+(((-1.0)*x13320)))) < -0.00001)
continue;
IkReal x13324=IKsqrt(((1.0)+(((-1.0)*x13320))));
IkReal x13325=(r22*x13323*x13324);
j4eval[0]=((IKabs((((x13321*x13325))+(((-1.0)*x13322*x13325)))))+(IKabs(((((-1.0)*x13321))+x13322))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13327=(gconst19*r01);
IkReal x13328=(cj1*cj2);
IkReal x13329=(gconst20*r00);
IkReal x13330=((1.0)*sj1*sj2);
CheckValue<IkReal> x13331=IKPowWithIntegerCheck(IKsign(((((-2.0)*x13327*x13329))+(x13329*x13329)+(x13327*x13327)+(r02*r02))),-1);
if(!x13331.valid){
continue;
}
CheckValue<IkReal> x13332 = IKatan2WithCheck(IkReal((((r02*x13328))+(((-1.0)*r02*x13330)))),IkReal((((x13328*x13329))+((sj1*sj2*x13327))+(((-1.0)*x13327*x13328))+(((-1.0)*x13329*x13330)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13331.value)))+(x13332.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13333=IKsin(j4);
IkReal x13334=IKcos(j4);
IkReal x13335=(gconst20*r20);
IkReal x13336=(gconst20*r00);
IkReal x13337=((1.0)*sj1);
IkReal x13338=(gconst20*r10);
IkReal x13339=((1.0)*x13334);
IkReal x13340=(gconst19*x13334);
IkReal x13341=((1.0)*x13333);
evalcond[0]=((((-1.0)*r22*x13339))+((x13333*x13335))+(((-1.0)*gconst19*r21*x13341)));
evalcond[1]=((((-1.0)*gconst19*r01*x13341))+((x13333*x13336))+(((-1.0)*r02*x13339)));
evalcond[2]=((((-1.0)*x13338*x13339))+(((-1.0)*r12*x13341))+((r11*x13340)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13339))+((x13333*x13338))+(((-1.0)*gconst19*r11*x13341)));
evalcond[4]=((((-1.0)*sj2*x13337))+(((-1.0)*r02*x13341))+(((-1.0)*x13336*x13339))+((cj1*cj2))+((r01*x13340)));
evalcond[5]=(((r21*x13340))+(((-1.0)*cj1*sj2))+(((-1.0)*x13335*x13339))+(((-1.0)*cj2*x13337))+(((-1.0)*r22*x13341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13342=(gconst20*r10);
IkReal x13343=(gconst19*r11);
CheckValue<IkReal> x13344 = IKatan2WithCheck(IkReal(((((-1.0)*x13342))+x13343)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13344.valid){
continue;
}
CheckValue<IkReal> x13345=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13343*x13343)+(x13342*x13342)+(((-2.0)*x13342*x13343)))),-1);
if(!x13345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13344.value)+(((1.5707963267949)*(x13345.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13346=IKsin(j4);
IkReal x13347=IKcos(j4);
IkReal x13348=(gconst20*r20);
IkReal x13349=(gconst20*r00);
IkReal x13350=((1.0)*sj1);
IkReal x13351=(gconst20*r10);
IkReal x13352=((1.0)*x13347);
IkReal x13353=(gconst19*x13347);
IkReal x13354=((1.0)*x13346);
evalcond[0]=((((-1.0)*r22*x13352))+(((-1.0)*gconst19*r21*x13354))+((x13346*x13348)));
evalcond[1]=((((-1.0)*r02*x13352))+((x13346*x13349))+(((-1.0)*gconst19*r01*x13354)));
evalcond[2]=((((-1.0)*r12*x13354))+(((-1.0)*x13351*x13352))+((r11*x13353)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13352))+((x13346*x13351))+(((-1.0)*gconst19*r11*x13354)));
evalcond[4]=((((-1.0)*r02*x13354))+((r01*x13353))+((cj1*cj2))+(((-1.0)*x13349*x13352))+(((-1.0)*sj2*x13350)));
evalcond[5]=((((-1.0)*r22*x13354))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13350))+((r21*x13353))+(((-1.0)*x13348*x13352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13355 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13355.valid){
continue;
}
CheckValue<IkReal> x13356=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x13356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13355.value)+(((1.5707963267949)*(x13356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13357=IKsin(j4);
IkReal x13358=IKcos(j4);
IkReal x13359=(gconst20*r20);
IkReal x13360=(gconst20*r00);
IkReal x13361=((1.0)*sj1);
IkReal x13362=(gconst20*r10);
IkReal x13363=((1.0)*x13358);
IkReal x13364=(gconst19*x13358);
IkReal x13365=((1.0)*x13357);
evalcond[0]=(((x13357*x13359))+(((-1.0)*r22*x13363))+(((-1.0)*gconst19*r21*x13365)));
evalcond[1]=(((x13357*x13360))+(((-1.0)*gconst19*r01*x13365))+(((-1.0)*r02*x13363)));
evalcond[2]=((((-1.0)*r12*x13365))+((r11*x13364))+(((-1.0)*x13362*x13363)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13363))+((x13357*x13362))+(((-1.0)*gconst19*r11*x13365)));
evalcond[4]=((((-1.0)*sj2*x13361))+(((-1.0)*x13360*x13363))+((r01*x13364))+(((-1.0)*r02*x13365))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x13365))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13361))+((r21*x13364))+(((-1.0)*x13359*x13363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13366=((-1.0)*r20);
IkReal x13367=x13276;
CheckValue<IkReal> x13369 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13366),IKFAST_ATAN2_MAGTHRESH);
if(!x13369.valid){
continue;
}
IkReal x13368=((-1.0)*(x13369.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13368;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13368;
IkReal gconst19=(r21*x13367);
IkReal gconst20=(x13366*x13367);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13370=((-1.0)*r20);
IkReal x13371=x13276;
CheckValue<IkReal> x13373 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13370),IKFAST_ATAN2_MAGTHRESH);
if(!x13373.valid){
continue;
}
IkReal x13372=((-1.0)*(x13373.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13372;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13372;
IkReal gconst19=(r21*x13371);
IkReal gconst20=(x13370*x13371);
IkReal x13374=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13378=IKPowWithIntegerCheck(x13374,-1);
if(!x13378.valid){
continue;
}
IkReal x13375=x13378.value;
IkReal x13376=((1.0)*x13375);
IkReal x13377=((((-2.0)*r10*r11*r20*r21*x13375))+(((-1.0)*(r12*r12)))+(((-1.0)*x13376*(r11*r11)*(r21*r21)))+(((-1.0)*x13376*(r10*r10)*(r20*r20))));
j4eval[0]=x13377;
j4eval[1]=r12;
j4eval[2]=x13374;
j4eval[3]=IKsign(x13377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13379=((-1.0)*r20);
IkReal x13380=x13276;
CheckValue<IkReal> x13382 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13379),IKFAST_ATAN2_MAGTHRESH);
if(!x13382.valid){
continue;
}
IkReal x13381=((-1.0)*(x13382.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13381;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst18=x13381;
IkReal gconst19=(r21*x13380);
IkReal gconst20=(x13379*x13380);
IkReal x13383=r22*r22;
IkReal x13384=(cj1*r12*sj2);
IkReal x13385=(cj2*r12*sj1);
CheckValue<IkReal> x13389=IKPowWithIntegerCheck(((-1.0)+x13383),-1);
if(!x13389.valid){
continue;
}
IkReal x13386=x13389.value;
if((((1.0)+(((-1.0)*x13383)))) < -0.00001)
continue;
IkReal x13387=IKsqrt(((1.0)+(((-1.0)*x13383))));
IkReal x13388=(r22*x13386*x13387);
j4eval[0]=((IKabs((((x13385*x13388))+((x13384*x13388)))))+(IKabs((x13384+x13385))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13390=(gconst19*r11);
IkReal x13391=(cj2*sj1);
IkReal x13392=(cj1*sj2);
IkReal x13393=((1.0)*gconst20*r10);
CheckValue<IkReal> x13394 = IKatan2WithCheck(IkReal(((((-1.0)*x13391*x13393))+((x13390*x13391))+((x13390*x13392))+(((-1.0)*x13392*x13393)))),IkReal((((r12*x13392))+((r12*x13391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13394.valid){
continue;
}
CheckValue<IkReal> x13395=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x13395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13394.value)+(((1.5707963267949)*(x13395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13396=IKcos(j4);
IkReal x13397=IKsin(j4);
IkReal x13398=(gconst20*r00);
IkReal x13399=((1.0)*sj1);
IkReal x13400=(gconst19*r21);
IkReal x13401=(gconst19*r01);
IkReal x13402=(gconst19*r11);
IkReal x13403=((1.0)*x13396);
IkReal x13404=(gconst20*x13397);
IkReal x13405=(gconst20*x13396);
IkReal x13406=((1.0)*x13397);
evalcond[0]=(((r12*x13397))+((r10*x13405))+(((-1.0)*x13402*x13403)));
evalcond[1]=((((-1.0)*x13400*x13406))+(((-1.0)*r22*x13403))+((r20*x13404)));
evalcond[2]=((((-1.0)*r02*x13403))+(((-1.0)*x13401*x13406))+((x13397*x13398)));
evalcond[3]=((1.0)+((r10*x13404))+(((-1.0)*x13402*x13406))+(((-1.0)*r12*x13403)));
evalcond[4]=((((-1.0)*x13401*x13403))+((cj1*cj2))+(((-1.0)*sj2*x13399))+((x13396*x13398))+((r02*x13397)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13400*x13403))+((r22*x13397))+(((-1.0)*cj2*x13399))+((r20*x13405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13407=(gconst20*r10);
IkReal x13408=(gconst19*r11);
CheckValue<IkReal> x13409 = IKatan2WithCheck(IkReal((x13407+(((-1.0)*x13408)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13409.valid){
continue;
}
CheckValue<IkReal> x13410=IKPowWithIntegerCheck(IKsign(((((2.0)*x13407*x13408))+(((-1.0)*(x13408*x13408)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13407*x13407))))),-1);
if(!x13410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13409.value)+(((1.5707963267949)*(x13410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13411=IKcos(j4);
IkReal x13412=IKsin(j4);
IkReal x13413=(gconst20*r00);
IkReal x13414=((1.0)*sj1);
IkReal x13415=(gconst19*r21);
IkReal x13416=(gconst19*r01);
IkReal x13417=(gconst19*r11);
IkReal x13418=((1.0)*x13411);
IkReal x13419=(gconst20*x13412);
IkReal x13420=(gconst20*x13411);
IkReal x13421=((1.0)*x13412);
evalcond[0]=(((r12*x13412))+((r10*x13420))+(((-1.0)*x13417*x13418)));
evalcond[1]=((((-1.0)*x13415*x13421))+(((-1.0)*r22*x13418))+((r20*x13419)));
evalcond[2]=((((-1.0)*x13416*x13421))+(((-1.0)*r02*x13418))+((x13412*x13413)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13418))+(((-1.0)*x13417*x13421))+((r10*x13419)));
evalcond[4]=((((-1.0)*sj2*x13414))+((r02*x13412))+((x13411*x13413))+(((-1.0)*x13416*x13418))+((cj1*cj2)));
evalcond[5]=(((r22*x13412))+(((-1.0)*cj2*x13414))+(((-1.0)*cj1*sj2))+(((-1.0)*x13415*x13418))+((r20*x13420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13422 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13422.valid){
continue;
}
CheckValue<IkReal> x13423=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x13423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13422.value)+(((1.5707963267949)*(x13423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13424=IKcos(j4);
IkReal x13425=IKsin(j4);
IkReal x13426=(gconst20*r00);
IkReal x13427=((1.0)*sj1);
IkReal x13428=(gconst19*r21);
IkReal x13429=(gconst19*r01);
IkReal x13430=(gconst19*r11);
IkReal x13431=((1.0)*x13424);
IkReal x13432=(gconst20*x13425);
IkReal x13433=(gconst20*x13424);
IkReal x13434=((1.0)*x13425);
evalcond[0]=(((r12*x13425))+(((-1.0)*x13430*x13431))+((r10*x13433)));
evalcond[1]=((((-1.0)*r22*x13431))+(((-1.0)*x13428*x13434))+((r20*x13432)));
evalcond[2]=((((-1.0)*x13429*x13434))+((x13425*x13426))+(((-1.0)*r02*x13431)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13431))+(((-1.0)*x13430*x13434))+((r10*x13432)));
evalcond[4]=((((-1.0)*sj2*x13427))+(((-1.0)*x13429*x13431))+((x13424*x13426))+((r02*x13425))+((cj1*cj2)));
evalcond[5]=((((-1.0)*cj2*x13427))+(((-1.0)*cj1*sj2))+((r22*x13425))+(((-1.0)*x13428*x13431))+((r20*x13433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13435=((-1.0)*r20);
IkReal x13436=x13276;
CheckValue<IkReal> x13438 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13435),IKFAST_ATAN2_MAGTHRESH);
if(!x13438.valid){
continue;
}
IkReal x13437=((-1.0)*(x13438.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13437;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13437;
IkReal gconst19=(r21*x13436);
IkReal gconst20=(x13435*x13436);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13439=((-1.0)*r20);
IkReal x13440=x13276;
CheckValue<IkReal> x13442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13439),IKFAST_ATAN2_MAGTHRESH);
if(!x13442.valid){
continue;
}
IkReal x13441=((-1.0)*(x13442.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13441;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13441;
IkReal gconst19=(r21*x13440);
IkReal gconst20=(x13439*x13440);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13443=((-1.0)*r20);
IkReal x13444=x13276;
CheckValue<IkReal> x13446 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13443),IKFAST_ATAN2_MAGTHRESH);
if(!x13446.valid){
continue;
}
IkReal x13445=((-1.0)*(x13446.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13445;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst18=x13445;
IkReal gconst19=(r21*x13444);
IkReal gconst20=(x13443*x13444);
IkReal x13447=r22*r22;
IkReal x13448=(r12*sj1*sj2);
CheckValue<IkReal> x13453=IKPowWithIntegerCheck(((-1.0)+x13447),-1);
if(!x13453.valid){
continue;
}
IkReal x13449=x13453.value;
IkReal x13450=((1.0)*cj1*cj2*r12);
if((((1.0)+(((-1.0)*x13447)))) < -0.00001)
continue;
IkReal x13451=IKsqrt(((1.0)+(((-1.0)*x13447))));
IkReal x13452=(r22*x13449*x13451);
j4eval[0]=((IKabs((x13448+(((-1.0)*x13450)))))+(IKabs(((((-1.0)*x13450*x13452))+((x13448*x13452))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13454=(sj1*sj2);
IkReal x13455=(gconst20*r10);
IkReal x13456=(cj1*cj2);
IkReal x13457=(gconst19*r11);
CheckValue<IkReal> x13458 = IKatan2WithCheck(IkReal(((((-1.0)*x13454*x13455))+((x13455*x13456))+(((-1.0)*x13456*x13457))+((x13454*x13457)))),IkReal(((((-1.0)*r12*x13456))+((r12*x13454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13458.valid){
continue;
}
CheckValue<IkReal> x13459=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x13459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13458.value)+(((1.5707963267949)*(x13459.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13460=IKsin(j4);
IkReal x13461=IKcos(j4);
IkReal x13462=(gconst20*r20);
IkReal x13463=(gconst20*r00);
IkReal x13464=((1.0)*cj2);
IkReal x13465=(gconst20*r10);
IkReal x13466=((1.0)*x13461);
IkReal x13467=(gconst19*x13461);
IkReal x13468=((1.0)*x13460);
evalcond[0]=((((-1.0)*r22*x13466))+((x13460*x13462))+(((-1.0)*gconst19*r21*x13468)));
evalcond[1]=(((x13460*x13463))+(((-1.0)*gconst19*r01*x13468))+(((-1.0)*r02*x13466)));
evalcond[2]=((((-1.0)*x13465*x13466))+((r11*x13467))+(((-1.0)*r12*x13468)));
evalcond[3]=((1.0)+((x13460*x13465))+(((-1.0)*gconst19*r11*x13468))+(((-1.0)*r12*x13466)));
evalcond[4]=((((-1.0)*r22*x13468))+(((-1.0)*cj1*x13464))+((r21*x13467))+(((-1.0)*x13462*x13466))+((sj1*sj2)));
evalcond[5]=((((-1.0)*x13463*x13466))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13464))+(((-1.0)*r02*x13468))+((r01*x13467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13469=(gconst20*r10);
IkReal x13470=(gconst19*r11);
CheckValue<IkReal> x13471=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13469*x13470))+(x13470*x13470)+(x13469*x13469))),-1);
if(!x13471.valid){
continue;
}
CheckValue<IkReal> x13472 = IKatan2WithCheck(IkReal((x13470+(((-1.0)*x13469)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13471.value)))+(x13472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13473=IKsin(j4);
IkReal x13474=IKcos(j4);
IkReal x13475=(gconst20*r20);
IkReal x13476=(gconst20*r00);
IkReal x13477=((1.0)*cj2);
IkReal x13478=(gconst20*r10);
IkReal x13479=((1.0)*x13474);
IkReal x13480=(gconst19*x13474);
IkReal x13481=((1.0)*x13473);
evalcond[0]=(((x13473*x13475))+(((-1.0)*gconst19*r21*x13481))+(((-1.0)*r22*x13479)));
evalcond[1]=((((-1.0)*r02*x13479))+(((-1.0)*gconst19*r01*x13481))+((x13473*x13476)));
evalcond[2]=((((-1.0)*x13478*x13479))+(((-1.0)*r12*x13481))+((r11*x13480)));
evalcond[3]=((1.0)+(((-1.0)*gconst19*r11*x13481))+(((-1.0)*r12*x13479))+((x13473*x13478)));
evalcond[4]=((((-1.0)*cj1*x13477))+(((-1.0)*x13475*x13479))+(((-1.0)*r22*x13481))+((sj1*sj2))+((r21*x13480)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13477))+(((-1.0)*r02*x13481))+(((-1.0)*x13476*x13479))+((r01*x13480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13482 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13482.valid){
continue;
}
CheckValue<IkReal> x13483=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x13483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13482.value)+(((1.5707963267949)*(x13483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13484=IKsin(j4);
IkReal x13485=IKcos(j4);
IkReal x13486=(gconst20*r20);
IkReal x13487=(gconst20*r00);
IkReal x13488=((1.0)*cj2);
IkReal x13489=(gconst20*r10);
IkReal x13490=((1.0)*x13485);
IkReal x13491=(gconst19*x13485);
IkReal x13492=((1.0)*x13484);
evalcond[0]=((((-1.0)*r22*x13490))+((x13484*x13486))+(((-1.0)*gconst19*r21*x13492)));
evalcond[1]=((((-1.0)*gconst19*r01*x13492))+(((-1.0)*r02*x13490))+((x13484*x13487)));
evalcond[2]=((((-1.0)*x13489*x13490))+(((-1.0)*r12*x13492))+((r11*x13491)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13490))+(((-1.0)*gconst19*r11*x13492))+((x13484*x13489)));
evalcond[4]=((((-1.0)*r22*x13492))+((sj1*sj2))+(((-1.0)*x13486*x13490))+(((-1.0)*cj1*x13488))+((r21*x13491)));
evalcond[5]=((((-1.0)*sj1*x13488))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x13492))+((r01*x13491))+(((-1.0)*x13487*x13490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13493=((-1.0)*r20);
IkReal x13494=x13276;
CheckValue<IkReal> x13496 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13493),IKFAST_ATAN2_MAGTHRESH);
if(!x13496.valid){
continue;
}
IkReal x13495=((-1.0)*(x13496.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13495;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13495;
IkReal gconst19=(r21*x13494);
IkReal gconst20=(x13493*x13494);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13497=((-1.0)*r20);
IkReal x13498=x13276;
CheckValue<IkReal> x13500 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13497),IKFAST_ATAN2_MAGTHRESH);
if(!x13500.valid){
continue;
}
IkReal x13499=((-1.0)*(x13500.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13499;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13499;
IkReal gconst19=(r21*x13498);
IkReal gconst20=(x13497*x13498);
IkReal x13501=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13505=IKPowWithIntegerCheck(x13501,-1);
if(!x13505.valid){
continue;
}
IkReal x13502=x13505.value;
IkReal x13503=((1.0)*x13502);
IkReal x13504=((((-1.0)*x13503*(r11*r11)*(r21*r21)))+(((-1.0)*x13503*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x13502))+(((-1.0)*(r12*r12))));
j4eval[0]=x13504;
j4eval[1]=r12;
j4eval[2]=x13501;
j4eval[3]=IKsign(x13504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13506=((-1.0)*r20);
IkReal x13507=x13276;
CheckValue<IkReal> x13509 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13506),IKFAST_ATAN2_MAGTHRESH);
if(!x13509.valid){
continue;
}
IkReal x13508=((-1.0)*(x13509.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13508;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst18=x13508;
IkReal gconst19=(r21*x13507);
IkReal gconst20=(x13506*x13507);
IkReal x13510=r22*r22;
IkReal x13511=(cj1*cj2*r12);
CheckValue<IkReal> x13516=IKPowWithIntegerCheck(((-1.0)+x13510),-1);
if(!x13516.valid){
continue;
}
IkReal x13512=x13516.value;
IkReal x13513=((1.0)*r12*sj1*sj2);
if((((1.0)+(((-1.0)*x13510)))) < -0.00001)
continue;
IkReal x13514=IKsqrt(((1.0)+(((-1.0)*x13510))));
IkReal x13515=(r22*x13512*x13514);
j4eval[0]=((IKabs((x13511+(((-1.0)*x13513)))))+(IKabs((((x13511*x13515))+(((-1.0)*x13513*x13515))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13517=(sj1*sj2);
IkReal x13518=(gconst20*r10);
IkReal x13519=(cj1*cj2);
IkReal x13520=(gconst19*r11);
CheckValue<IkReal> x13521 = IKatan2WithCheck(IkReal((((x13519*x13520))+(((-1.0)*x13517*x13520))+(((-1.0)*x13518*x13519))+((x13517*x13518)))),IkReal(((((-1.0)*r12*x13517))+((r12*x13519)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13521.valid){
continue;
}
CheckValue<IkReal> x13522=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x13522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13521.value)+(((1.5707963267949)*(x13522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13523=IKcos(j4);
IkReal x13524=IKsin(j4);
IkReal x13525=(gconst20*r00);
IkReal x13526=((1.0)*cj2);
IkReal x13527=(gconst19*r21);
IkReal x13528=(gconst19*r01);
IkReal x13529=(gconst19*r11);
IkReal x13530=((1.0)*x13523);
IkReal x13531=(gconst20*x13524);
IkReal x13532=(gconst20*x13523);
IkReal x13533=((1.0)*x13524);
evalcond[0]=((((-1.0)*x13529*x13530))+((r10*x13532))+((r12*x13524)));
evalcond[1]=((((-1.0)*r22*x13530))+((r20*x13531))+(((-1.0)*x13527*x13533)));
evalcond[2]=((((-1.0)*x13528*x13533))+((x13524*x13525))+(((-1.0)*r02*x13530)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13530))+(((-1.0)*x13529*x13533))+((r10*x13531)));
evalcond[4]=(((r20*x13532))+((sj1*sj2))+(((-1.0)*cj1*x13526))+((r22*x13524))+(((-1.0)*x13527*x13530)));
evalcond[5]=((((-1.0)*sj1*x13526))+((r02*x13524))+(((-1.0)*cj1*sj2))+(((-1.0)*x13528*x13530))+((x13523*x13525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13534=(gconst20*r10);
IkReal x13535=(gconst19*r11);
CheckValue<IkReal> x13536=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13534*x13534)))+(((-1.0)*(x13535*x13535)))+(((-1.0)*(r12*r12)))+(((2.0)*x13534*x13535)))),-1);
if(!x13536.valid){
continue;
}
CheckValue<IkReal> x13537 = IKatan2WithCheck(IkReal((x13534+(((-1.0)*x13535)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13536.value)))+(x13537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13538=IKcos(j4);
IkReal x13539=IKsin(j4);
IkReal x13540=(gconst20*r00);
IkReal x13541=((1.0)*cj2);
IkReal x13542=(gconst19*r21);
IkReal x13543=(gconst19*r01);
IkReal x13544=(gconst19*r11);
IkReal x13545=((1.0)*x13538);
IkReal x13546=(gconst20*x13539);
IkReal x13547=(gconst20*x13538);
IkReal x13548=((1.0)*x13539);
evalcond[0]=((((-1.0)*x13544*x13545))+((r10*x13547))+((r12*x13539)));
evalcond[1]=(((r20*x13546))+(((-1.0)*x13542*x13548))+(((-1.0)*r22*x13545)));
evalcond[2]=(((x13539*x13540))+(((-1.0)*r02*x13545))+(((-1.0)*x13543*x13548)));
evalcond[3]=((1.0)+(((-1.0)*x13544*x13548))+((r10*x13546))+(((-1.0)*r12*x13545)));
evalcond[4]=(((sj1*sj2))+((r22*x13539))+((r20*x13547))+(((-1.0)*x13542*x13545))+(((-1.0)*cj1*x13541)));
evalcond[5]=(((r02*x13539))+(((-1.0)*cj1*sj2))+(((-1.0)*x13543*x13545))+(((-1.0)*sj1*x13541))+((x13538*x13540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13549 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13549.valid){
continue;
}
CheckValue<IkReal> x13550=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x13550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13549.value)+(((1.5707963267949)*(x13550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13551=IKcos(j4);
IkReal x13552=IKsin(j4);
IkReal x13553=(gconst20*r00);
IkReal x13554=((1.0)*cj2);
IkReal x13555=(gconst19*r21);
IkReal x13556=(gconst19*r01);
IkReal x13557=(gconst19*r11);
IkReal x13558=((1.0)*x13551);
IkReal x13559=(gconst20*x13552);
IkReal x13560=(gconst20*x13551);
IkReal x13561=((1.0)*x13552);
evalcond[0]=((((-1.0)*x13557*x13558))+((r10*x13560))+((r12*x13552)));
evalcond[1]=((((-1.0)*x13555*x13561))+((r20*x13559))+(((-1.0)*r22*x13558)));
evalcond[2]=((((-1.0)*r02*x13558))+(((-1.0)*x13556*x13561))+((x13552*x13553)));
evalcond[3]=((1.0)+((r10*x13559))+(((-1.0)*x13557*x13561))+(((-1.0)*r12*x13558)));
evalcond[4]=(((r22*x13552))+((r20*x13560))+(((-1.0)*x13555*x13558))+((sj1*sj2))+(((-1.0)*cj1*x13554)));
evalcond[5]=(((x13551*x13553))+(((-1.0)*cj1*sj2))+(((-1.0)*x13556*x13558))+(((-1.0)*sj1*x13554))+((r02*x13552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13562=((-1.0)*r20);
IkReal x13563=((-1.0)*px);
CheckValue<IkReal> x13565 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13562),IKFAST_ATAN2_MAGTHRESH);
if(!x13565.valid){
continue;
}
IkReal x13564=((-1.0)*(x13565.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13564;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13563);
rxp1_1=(px*r21);
rxp1_2=(r11*x13563);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst18=x13564;
IkReal gconst19=r21;
IkReal gconst20=x13562;
IkReal x13566=(r11*r21);
IkReal x13567=(r10*r20);
j4eval[0]=((((-1.0)*x13566))+(((-1.0)*x13567)));
j4eval[1]=(((sj3*x13567))+((sj3*x13566)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13568=((-1.0)*r20);
IkReal x13569=((-1.0)*px);
CheckValue<IkReal> x13571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13568),IKFAST_ATAN2_MAGTHRESH);
if(!x13571.valid){
continue;
}
IkReal x13570=((-1.0)*(x13571.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13570;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13569);
rxp1_1=(px*r21);
rxp1_2=(r11*x13569);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst18=x13570;
IkReal gconst19=r21;
IkReal gconst20=x13568;
IkReal x13572=(r10*r20);
IkReal x13573=(r11*r21);
j4eval[0]=((((-1.0)*x13573))+(((-1.0)*x13572)));
j4eval[1]=(((cj3*x13572))+((cj3*x13573)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13574=((-1.0)*r20);
IkReal x13575=((-1.0)*px);
CheckValue<IkReal> x13577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x13574),IKFAST_ATAN2_MAGTHRESH);
if(!x13577.valid){
continue;
}
IkReal x13576=((-1.0)*(x13577.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13576;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13575);
rxp1_1=(px*r21);
rxp1_2=(r11*x13575);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst18=x13576;
IkReal gconst19=r21;
IkReal gconst20=x13574;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r10*r20))+((cj3*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13578=((1.0)*sj3);
CheckValue<IkReal> x13579=IKPowWithIntegerCheck(cj3,-1);
if(!x13579.valid){
continue;
}
CheckValue<IkReal> x13580=IKPowWithIntegerCheck(r02,-1);
if(!x13580.valid){
continue;
}
CheckValue<IkReal> x13581=IKPowWithIntegerCheck((((cj3*gconst19*r11))+(((-1.0)*cj3*gconst20*r10))),-1);
if(!x13581.valid){
continue;
}
if( IKabs(((x13579.value)*(x13580.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13581.value)*(((((-1.0)*gconst20*r11*x13578))+(((-1.0)*gconst19*r10*x13578)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13579.value)*(x13580.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13581.value)*(((((-1.0)*gconst20*r11*x13578))+(((-1.0)*gconst19*r10*x13578))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13579.value)*(x13580.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13581.value)*(((((-1.0)*gconst20*r11*x13578))+(((-1.0)*gconst19*r10*x13578))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13582=IKsin(j4);
IkReal x13583=IKcos(j4);
IkReal x13584=((1.0)*gconst20);
IkReal x13585=(cj3*r21);
IkReal x13586=(sj1*sj2);
IkReal x13587=(cj3*gconst19);
IkReal x13588=((1.0)*cj2);
IkReal x13589=(gconst19*r21);
IkReal x13590=(gconst19*sj3);
IkReal x13591=(gconst20*sj3);
IkReal x13592=(gconst19*r11);
IkReal x13593=((1.0)*cj1*sj2);
IkReal x13594=(sj1*x13588);
IkReal x13595=(sj3*x13583);
IkReal x13596=(gconst20*x13582);
IkReal x13597=(cj3*x13583);
IkReal x13598=((1.0)*x13582);
IkReal x13599=(r02*x13598);
IkReal x13600=(x13594+x13593);
evalcond[0]=((-1.0)*r02*x13583);
evalcond[1]=((((-1.0)*x13589*x13598))+((r20*x13596)));
evalcond[2]=((1.0)+(((-1.0)*x13592*x13598))+((r10*x13596)));
evalcond[3]=((((-1.0)*x13586))+((cj1*cj2))+(((-1.0)*cj3*x13599)));
evalcond[4]=((((-1.0)*sj3*x13599))+(((-1.0)*x13600)));
evalcond[5]=((((-1.0)*r10*x13584*x13597))+((r11*x13591))+((r10*x13590))+((r11*x13583*x13587)));
evalcond[6]=((((-1.0)*r10*x13584*x13595))+((r11*x13583*x13590))+(((-1.0)*r10*x13587))+(((-1.0)*cj3*r11*x13584)));
evalcond[7]=((((-1.0)*r20*x13584*x13597))+((r21*x13591))+((gconst19*x13583*x13585))+(((-1.0)*x13600))+((r20*x13590)));
evalcond[8]=(x13586+((x13589*x13595))+(((-1.0)*r20*x13584*x13595))+(((-1.0)*x13584*x13585))+(((-1.0)*r20*x13587))+(((-1.0)*cj1*x13588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13601=(gconst19*r11);
IkReal x13602=((1.0)*sj3);
IkReal x13603=(gconst20*r10);
CheckValue<IkReal> x13604=IKPowWithIntegerCheck(((((-1.0)*x13601))+x13603),-1);
if(!x13604.valid){
continue;
}
CheckValue<IkReal> x13605=IKPowWithIntegerCheck(((((-1.0)*cj3*x13603))+((cj3*x13601))),-1);
if(!x13605.valid){
continue;
}
if( IKabs(((-1.0)*(x13604.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13605.value)*(((((-1.0)*gconst20*r11*x13602))+(((-1.0)*gconst19*r10*x13602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13604.value)))+IKsqr(((x13605.value)*(((((-1.0)*gconst20*r11*x13602))+(((-1.0)*gconst19*r10*x13602))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13604.value)), ((x13605.value)*(((((-1.0)*gconst20*r11*x13602))+(((-1.0)*gconst19*r10*x13602))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13606=IKsin(j4);
IkReal x13607=IKcos(j4);
IkReal x13608=((1.0)*gconst20);
IkReal x13609=(cj3*r21);
IkReal x13610=(sj1*sj2);
IkReal x13611=(cj3*gconst19);
IkReal x13612=((1.0)*cj2);
IkReal x13613=(gconst19*r21);
IkReal x13614=(gconst19*sj3);
IkReal x13615=(gconst20*sj3);
IkReal x13616=(gconst19*r11);
IkReal x13617=((1.0)*cj1*sj2);
IkReal x13618=(sj1*x13612);
IkReal x13619=(sj3*x13607);
IkReal x13620=(gconst20*x13606);
IkReal x13621=(cj3*x13607);
IkReal x13622=((1.0)*x13606);
IkReal x13623=(r02*x13622);
IkReal x13624=(x13618+x13617);
evalcond[0]=((-1.0)*r02*x13607);
evalcond[1]=((((-1.0)*x13613*x13622))+((r20*x13620)));
evalcond[2]=((1.0)+((r10*x13620))+(((-1.0)*x13616*x13622)));
evalcond[3]=((((-1.0)*x13610))+(((-1.0)*cj3*x13623))+((cj1*cj2)));
evalcond[4]=((((-1.0)*sj3*x13623))+(((-1.0)*x13624)));
evalcond[5]=((((-1.0)*r10*x13608*x13621))+((r11*x13607*x13611))+((r11*x13615))+((r10*x13614)));
evalcond[6]=((((-1.0)*r10*x13608*x13619))+(((-1.0)*cj3*r11*x13608))+((r11*x13607*x13614))+(((-1.0)*r10*x13611)));
evalcond[7]=(((r21*x13615))+((r20*x13614))+(((-1.0)*r20*x13608*x13621))+(((-1.0)*x13624))+((gconst19*x13607*x13609)));
evalcond[8]=((((-1.0)*cj1*x13612))+(((-1.0)*r20*x13611))+x13610+(((-1.0)*r20*x13608*x13619))+(((-1.0)*x13608*x13609))+((x13613*x13619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13625=(gconst20*r10);
IkReal x13626=(gconst19*r11);
CheckValue<IkReal> x13627=IKPowWithIntegerCheck((x13625+(((-1.0)*x13626))),-1);
if(!x13627.valid){
continue;
}
CheckValue<IkReal> x13628=IKPowWithIntegerCheck(((((-1.0)*sj3*x13625))+((sj3*x13626))),-1);
if(!x13628.valid){
continue;
}
if( IKabs(((-1.0)*(x13627.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13628.value)*((((cj3*gconst19*r10))+((cj3*gconst20*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13627.value)))+IKsqr(((x13628.value)*((((cj3*gconst19*r10))+((cj3*gconst20*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13627.value)), ((x13628.value)*((((cj3*gconst19*r10))+((cj3*gconst20*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13629=IKsin(j4);
IkReal x13630=IKcos(j4);
IkReal x13631=((1.0)*gconst20);
IkReal x13632=(cj3*r21);
IkReal x13633=(sj1*sj2);
IkReal x13634=(cj3*gconst19);
IkReal x13635=((1.0)*cj2);
IkReal x13636=(gconst19*r21);
IkReal x13637=(gconst19*sj3);
IkReal x13638=(gconst20*sj3);
IkReal x13639=(gconst19*r11);
IkReal x13640=((1.0)*cj1*sj2);
IkReal x13641=(sj1*x13635);
IkReal x13642=(sj3*x13630);
IkReal x13643=(gconst20*x13629);
IkReal x13644=(cj3*x13630);
IkReal x13645=((1.0)*x13629);
IkReal x13646=(r02*x13645);
IkReal x13647=(x13641+x13640);
evalcond[0]=((-1.0)*r02*x13630);
evalcond[1]=((((-1.0)*x13636*x13645))+((r20*x13643)));
evalcond[2]=((1.0)+(((-1.0)*x13639*x13645))+((r10*x13643)));
evalcond[3]=((((-1.0)*x13633))+((cj1*cj2))+(((-1.0)*cj3*x13646)));
evalcond[4]=((((-1.0)*sj3*x13646))+(((-1.0)*x13647)));
evalcond[5]=(((r11*x13638))+((r10*x13637))+((r11*x13630*x13634))+(((-1.0)*r10*x13631*x13644)));
evalcond[6]=((((-1.0)*r10*x13634))+(((-1.0)*cj3*r11*x13631))+((r11*x13630*x13637))+(((-1.0)*r10*x13631*x13642)));
evalcond[7]=((((-1.0)*x13647))+((gconst19*x13630*x13632))+((r21*x13638))+((r20*x13637))+(((-1.0)*r20*x13631*x13644)));
evalcond[8]=(x13633+(((-1.0)*x13631*x13632))+(((-1.0)*cj1*x13635))+((x13636*x13642))+(((-1.0)*r20*x13634))+(((-1.0)*r20*x13631*x13642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13648=gconst20*gconst20;
IkReal x13649=gconst19*gconst19;
IkReal x13650=(r00*r10);
IkReal x13651=(r11*sj3);
IkReal x13652=(r01*r10);
IkReal x13653=(cj3*r11);
IkReal x13654=((1.0)*r02);
IkReal x13655=((1.0)*gconst19*gconst20);
CheckValue<IkReal> x13656=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((sj3*x13648*x13650))+((r01*x13649*x13651))+(((-1.0)*r00*x13651*x13655))+(((-1.0)*sj3*x13652*x13655)))),-1);
if(!x13656.valid){
continue;
}
CheckValue<IkReal> x13657 = IKatan2WithCheck(IkReal(((((-1.0)*gconst20*x13653*x13654))+(((-1.0)*cj3*gconst19*r10*x13654)))),IkReal(((((-1.0)*r00*x13648*x13653))+((gconst19*gconst20*r01*x13653))+(((-1.0)*cj3*x13650*x13655))+((cj3*x13649*x13652)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13656.value)))+(x13657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13658=IKsin(j4);
IkReal x13659=IKcos(j4);
IkReal x13660=(gconst20*sj3);
IkReal x13661=(gconst20*r00);
IkReal x13662=(sj1*sj2);
IkReal x13663=(cj3*r11);
IkReal x13664=(gconst19*r00);
IkReal x13665=((1.0)*cj3);
IkReal x13666=(gconst19*r20);
IkReal x13667=((1.0)*cj1);
IkReal x13668=(gconst19*r10);
IkReal x13669=(cj3*gconst20);
IkReal x13670=(sj2*x13667);
IkReal x13671=((1.0)*cj2*sj1);
IkReal x13672=((1.0)*x13659);
IkReal x13673=((1.0)*x13658);
IkReal x13674=(gconst19*x13659);
IkReal x13675=(gconst20*x13658);
IkReal x13676=(x13670+x13671);
evalcond[0]=(((r20*x13675))+(((-1.0)*gconst19*r21*x13673))+(((-1.0)*r22*x13672)));
evalcond[1]=((((-1.0)*r02*x13672))+(((-1.0)*gconst19*r01*x13673))+((x13658*x13661)));
evalcond[2]=((1.0)+(((-1.0)*gconst19*r11*x13673))+(((-1.0)*r12*x13672))+((r10*x13675)));
evalcond[3]=(((r11*x13660))+(((-1.0)*r12*x13658*x13665))+((sj3*x13668))+((x13663*x13674))+(((-1.0)*gconst20*r10*x13659*x13665)));
evalcond[4]=((((-1.0)*gconst20*x13663))+(((-1.0)*r10*x13660*x13672))+((r11*sj3*x13674))+(((-1.0)*x13665*x13668))+(((-1.0)*r12*sj3*x13673)));
evalcond[5]=((((-1.0)*r02*x13658*x13665))+(((-1.0)*x13659*x13661*x13665))+((r01*x13660))+((sj3*x13664))+(((-1.0)*x13662))+((cj1*cj2))+((cj3*r01*x13674)));
evalcond[6]=(((cj3*r21*x13674))+(((-1.0)*x13676))+((sj3*x13666))+((r21*x13660))+(((-1.0)*gconst20*r20*x13659*x13665))+(((-1.0)*r22*x13658*x13665)));
evalcond[7]=((((-1.0)*cj2*x13667))+x13662+(((-1.0)*r20*x13660*x13672))+(((-1.0)*gconst20*r21*x13665))+(((-1.0)*x13665*x13666))+((r21*sj3*x13674))+(((-1.0)*r22*sj3*x13673)));
evalcond[8]=((((-1.0)*gconst20*r01*x13665))+(((-1.0)*r00*x13660*x13672))+((r01*sj3*x13674))+(((-1.0)*x13676))+(((-1.0)*r02*sj3*x13673))+(((-1.0)*x13664*x13665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13677=gconst20*gconst20;
IkReal x13678=gconst19*gconst19;
IkReal x13679=(r00*r10);
IkReal x13680=(gconst19*sj3);
IkReal x13681=(r01*r11);
IkReal x13682=((1.0)*gconst20);
IkReal x13683=(r01*r10);
IkReal x13684=(cj3*gconst19);
IkReal x13685=(r00*r11);
CheckValue<IkReal> x13686=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+((cj3*x13678*x13681))+((cj3*x13677*x13679))+(((-1.0)*x13682*x13684*x13685))+(((-1.0)*x13682*x13683*x13684)))),-1);
if(!x13686.valid){
continue;
}
CheckValue<IkReal> x13687 = IKatan2WithCheck(IkReal((((r02*r10*x13680))+((gconst20*r02*r11*sj3)))),IkReal((((gconst20*x13679*x13680))+(((-1.0)*sj3*x13678*x13683))+(((-1.0)*x13680*x13681*x13682))+((sj3*x13677*x13685)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13687.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13686.value)))+(x13687.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13688=IKsin(j4);
IkReal x13689=IKcos(j4);
IkReal x13690=(gconst20*sj3);
IkReal x13691=(gconst20*r00);
IkReal x13692=(sj1*sj2);
IkReal x13693=(cj3*r11);
IkReal x13694=(gconst19*r00);
IkReal x13695=((1.0)*cj3);
IkReal x13696=(gconst19*r20);
IkReal x13697=((1.0)*cj1);
IkReal x13698=(gconst19*r10);
IkReal x13699=(cj3*gconst20);
IkReal x13700=(sj2*x13697);
IkReal x13701=((1.0)*cj2*sj1);
IkReal x13702=((1.0)*x13689);
IkReal x13703=((1.0)*x13688);
IkReal x13704=(gconst19*x13689);
IkReal x13705=(gconst20*x13688);
IkReal x13706=(x13700+x13701);
evalcond[0]=((((-1.0)*r22*x13702))+((r20*x13705))+(((-1.0)*gconst19*r21*x13703)));
evalcond[1]=(((x13688*x13691))+(((-1.0)*r02*x13702))+(((-1.0)*gconst19*r01*x13703)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13702))+((r10*x13705))+(((-1.0)*gconst19*r11*x13703)));
evalcond[3]=(((sj3*x13698))+((x13693*x13704))+(((-1.0)*gconst20*r10*x13689*x13695))+((r11*x13690))+(((-1.0)*r12*x13688*x13695)));
evalcond[4]=(((r11*sj3*x13704))+(((-1.0)*gconst20*x13693))+(((-1.0)*r10*x13690*x13702))+(((-1.0)*x13695*x13698))+(((-1.0)*r12*sj3*x13703)));
evalcond[5]=(((sj3*x13694))+(((-1.0)*r02*x13688*x13695))+((r01*x13690))+(((-1.0)*x13689*x13691*x13695))+((cj3*r01*x13704))+((cj1*cj2))+(((-1.0)*x13692)));
evalcond[6]=(((sj3*x13696))+(((-1.0)*r22*x13688*x13695))+((r21*x13690))+((cj3*r21*x13704))+(((-1.0)*gconst20*r20*x13689*x13695))+(((-1.0)*x13706)));
evalcond[7]=(x13692+(((-1.0)*r20*x13690*x13702))+(((-1.0)*cj2*x13697))+(((-1.0)*r22*sj3*x13703))+(((-1.0)*x13695*x13696))+((r21*sj3*x13704))+(((-1.0)*gconst20*r21*x13695)));
evalcond[8]=((((-1.0)*gconst20*r01*x13695))+((r01*sj3*x13704))+(((-1.0)*r00*x13690*x13702))+(((-1.0)*x13694*x13695))+(((-1.0)*r02*sj3*x13703))+(((-1.0)*x13706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13707 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst19*r21))+((gconst20*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13707.valid){
continue;
}
CheckValue<IkReal> x13708=IKPowWithIntegerCheck(IKsign((((gconst20*r01))+((gconst19*r00)))),-1);
if(!x13708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13707.value)+(((1.5707963267949)*(x13708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13709=IKsin(j4);
IkReal x13710=IKcos(j4);
IkReal x13711=(gconst20*sj3);
IkReal x13712=(gconst20*r00);
IkReal x13713=(sj1*sj2);
IkReal x13714=(cj3*r11);
IkReal x13715=(gconst19*r00);
IkReal x13716=((1.0)*cj3);
IkReal x13717=(gconst19*r20);
IkReal x13718=((1.0)*cj1);
IkReal x13719=(gconst19*r10);
IkReal x13720=(cj3*gconst20);
IkReal x13721=(sj2*x13718);
IkReal x13722=((1.0)*cj2*sj1);
IkReal x13723=((1.0)*x13710);
IkReal x13724=((1.0)*x13709);
IkReal x13725=(gconst19*x13710);
IkReal x13726=(gconst20*x13709);
IkReal x13727=(x13722+x13721);
evalcond[0]=(((r20*x13726))+(((-1.0)*r22*x13723))+(((-1.0)*gconst19*r21*x13724)));
evalcond[1]=((((-1.0)*r02*x13723))+(((-1.0)*gconst19*r01*x13724))+((x13709*x13712)));
evalcond[2]=((1.0)+((r10*x13726))+(((-1.0)*r12*x13723))+(((-1.0)*gconst19*r11*x13724)));
evalcond[3]=(((sj3*x13719))+(((-1.0)*gconst20*r10*x13710*x13716))+(((-1.0)*r12*x13709*x13716))+((x13714*x13725))+((r11*x13711)));
evalcond[4]=((((-1.0)*r12*sj3*x13724))+(((-1.0)*gconst20*x13714))+(((-1.0)*x13716*x13719))+((r11*sj3*x13725))+(((-1.0)*r10*x13711*x13723)));
evalcond[5]=((((-1.0)*x13713))+((sj3*x13715))+((r01*x13711))+(((-1.0)*x13710*x13712*x13716))+((cj1*cj2))+((cj3*r01*x13725))+(((-1.0)*r02*x13709*x13716)));
evalcond[6]=(((r21*x13711))+((sj3*x13717))+((cj3*r21*x13725))+(((-1.0)*r22*x13709*x13716))+(((-1.0)*x13727))+(((-1.0)*gconst20*r20*x13710*x13716)));
evalcond[7]=(((r21*sj3*x13725))+(((-1.0)*gconst20*r21*x13716))+x13713+(((-1.0)*cj2*x13718))+(((-1.0)*r22*sj3*x13724))+(((-1.0)*x13716*x13717))+(((-1.0)*r20*x13711*x13723)));
evalcond[8]=((((-1.0)*r02*sj3*x13724))+(((-1.0)*r00*x13711*x13723))+(((-1.0)*x13715*x13716))+(((-1.0)*gconst20*r01*x13716))+(((-1.0)*x13727))+((r01*sj3*x13725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13728=((-1.0)*r21);
IkReal x13730 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13730)==0){
continue;
}
IkReal x13729=pow(x13730,-0.5);
CheckValue<IkReal> x13731 = IKatan2WithCheck(IkReal(x13728),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13731.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13731.value))));
IkReal gconst22=(x13728*x13729);
IkReal gconst23=((1.0)*r20*x13729);
CheckValue<IkReal> x13732 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13732.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13732.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13733=((-1.0)*r21);
CheckValue<IkReal> x13736 = IKatan2WithCheck(IkReal(x13733),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13736.valid){
continue;
}
IkReal x13734=((1.0)*(x13736.value));
IkReal x13735=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13734)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13734)));
IkReal gconst22=(x13733*x13735);
IkReal gconst23=((1.0)*r20*x13735);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13737=((-1.0)*r21);
CheckValue<IkReal> x13740 = IKatan2WithCheck(IkReal(x13737),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13740.valid){
continue;
}
IkReal x13738=((1.0)*(x13740.value));
IkReal x13739=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13738)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13738)));
IkReal gconst22=(x13737*x13739);
IkReal gconst23=((1.0)*r20*x13739);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13741=((-1.0)*r21);
CheckValue<IkReal> x13744 = IKatan2WithCheck(IkReal(x13741),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13744.valid){
continue;
}
IkReal x13742=((1.0)*(x13744.value));
IkReal x13743=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13742)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13742)));
IkReal gconst22=(x13741*x13743);
IkReal gconst23=((1.0)*r20*x13743);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13745=((-1.0)*r21);
CheckValue<IkReal> x13748 = IKatan2WithCheck(IkReal(x13745),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13748.valid){
continue;
}
IkReal x13746=((1.0)*(x13748.value));
IkReal x13747=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13746)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13746)));
IkReal gconst22=(x13745*x13747);
IkReal gconst23=((1.0)*r20*x13747);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13749=((-1.0)*r21);
CheckValue<IkReal> x13752 = IKatan2WithCheck(IkReal(x13749),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13752.valid){
continue;
}
IkReal x13750=((1.0)*(x13752.value));
IkReal x13751=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13750)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13750)));
IkReal gconst22=(x13749*x13751);
IkReal gconst23=((1.0)*r20*x13751);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13753=((-1.0)*r21);
CheckValue<IkReal> x13756 = IKatan2WithCheck(IkReal(x13753),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13756.valid){
continue;
}
IkReal x13754=((1.0)*(x13756.value));
IkReal x13755=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13754)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13754)));
IkReal gconst22=(x13753*x13755);
IkReal gconst23=((1.0)*r20*x13755);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13757=(gconst23*r10);
IkReal x13758=(gconst22*r11);
CheckValue<IkReal> x13759 = IKatan2WithCheck(IkReal((x13758+(((-1.0)*x13757)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13759.valid){
continue;
}
CheckValue<IkReal> x13760=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13758*x13758)+(((-2.0)*x13757*x13758))+(x13757*x13757))),-1);
if(!x13760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13759.value)+(((1.5707963267949)*(x13760.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13761=IKsin(j4);
IkReal x13762=IKcos(j4);
IkReal x13763=((1.0)*cj2);
IkReal x13764=((1.0)*x13762);
IkReal x13765=(gconst23*x13761);
IkReal x13766=((1.0)*x13761);
IkReal x13767=(gconst22*x13762);
IkReal x13768=(gconst22*x13766);
evalcond[0]=((((-1.0)*r22*x13764))+(((-1.0)*r21*x13768))+((r20*x13765)));
evalcond[1]=((((-1.0)*r01*x13768))+(((-1.0)*r02*x13764))+((r00*x13765)));
evalcond[2]=((((-1.0)*gconst23*r10*x13764))+((r11*x13767))+(((-1.0)*r12*x13766)));
evalcond[3]=((1.0)+(((-1.0)*r11*x13768))+((r10*x13765))+(((-1.0)*r12*x13764)));
evalcond[4]=((((-1.0)*cj1*x13763))+(((-1.0)*r22*x13766))+((sj1*sj2))+(((-1.0)*gconst23*r20*x13764))+((r21*x13767)));
evalcond[5]=((((-1.0)*sj1*x13763))+((r01*x13767))+(((-1.0)*r02*x13766))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst23*r00*x13764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13769=((1.0)*gconst22);
CheckValue<IkReal> x13770=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x13769)))),-1);
if(!x13770.valid){
continue;
}
CheckValue<IkReal> x13771 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x13769))+((gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13770.value)))+(x13771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13772=IKsin(j4);
IkReal x13773=IKcos(j4);
IkReal x13774=((1.0)*cj2);
IkReal x13775=((1.0)*x13773);
IkReal x13776=(gconst23*x13772);
IkReal x13777=((1.0)*x13772);
IkReal x13778=(gconst22*x13773);
IkReal x13779=(gconst22*x13777);
evalcond[0]=((((-1.0)*r22*x13775))+(((-1.0)*r21*x13779))+((r20*x13776)));
evalcond[1]=((((-1.0)*r01*x13779))+((r00*x13776))+(((-1.0)*r02*x13775)));
evalcond[2]=(((r11*x13778))+(((-1.0)*r12*x13777))+(((-1.0)*gconst23*r10*x13775)));
evalcond[3]=((1.0)+((r10*x13776))+(((-1.0)*r12*x13775))+(((-1.0)*r11*x13779)));
evalcond[4]=((((-1.0)*cj1*x13774))+(((-1.0)*r22*x13777))+((sj1*sj2))+(((-1.0)*gconst23*r20*x13775))+((r21*x13778)));
evalcond[5]=((((-1.0)*sj1*x13774))+(((-1.0)*cj1*sj2))+((r01*x13778))+(((-1.0)*r02*x13777))+(((-1.0)*gconst23*r00*x13775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13780=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x13780.valid){
continue;
}
CheckValue<IkReal> x13781 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13780.value)))+(x13781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13782=IKsin(j4);
IkReal x13783=IKcos(j4);
IkReal x13784=((1.0)*cj2);
IkReal x13785=((1.0)*x13783);
IkReal x13786=(gconst23*x13782);
IkReal x13787=((1.0)*x13782);
IkReal x13788=(gconst22*x13783);
IkReal x13789=(gconst22*x13787);
evalcond[0]=((((-1.0)*r21*x13789))+((r20*x13786))+(((-1.0)*r22*x13785)));
evalcond[1]=((((-1.0)*r02*x13785))+((r00*x13786))+(((-1.0)*r01*x13789)));
evalcond[2]=((((-1.0)*r12*x13787))+((r11*x13788))+(((-1.0)*gconst23*r10*x13785)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13785))+(((-1.0)*r11*x13789))+((r10*x13786)));
evalcond[4]=((((-1.0)*cj1*x13784))+((sj1*sj2))+((r21*x13788))+(((-1.0)*r22*x13787))+(((-1.0)*gconst23*r20*x13785)));
evalcond[5]=(((r01*x13788))+(((-1.0)*r02*x13787))+(((-1.0)*sj1*x13784))+(((-1.0)*gconst23*r00*x13785))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13790=((-1.0)*r21);
CheckValue<IkReal> x13793 = IKatan2WithCheck(IkReal(x13790),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13793.valid){
continue;
}
IkReal x13791=((1.0)*(x13793.value));
IkReal x13792=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13791)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13791)));
IkReal gconst22=(x13790*x13792);
IkReal gconst23=((1.0)*r20*x13792);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13794=((-1.0)*r21);
CheckValue<IkReal> x13797 = IKatan2WithCheck(IkReal(x13794),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13797.valid){
continue;
}
IkReal x13795=((1.0)*(x13797.value));
IkReal x13796=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13795)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13795)));
IkReal gconst22=(x13794*x13796);
IkReal gconst23=((1.0)*r20*x13796);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13798=((-1.0)*r21);
CheckValue<IkReal> x13801 = IKatan2WithCheck(IkReal(x13798),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13801.valid){
continue;
}
IkReal x13799=((1.0)*(x13801.value));
IkReal x13800=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13799)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13799)));
IkReal gconst22=(x13798*x13800);
IkReal gconst23=((1.0)*r20*x13800);
IkReal x13802=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13806=IKPowWithIntegerCheck(x13802,-1);
if(!x13806.valid){
continue;
}
IkReal x13803=x13806.value;
IkReal x13804=((1.0)*x13803);
IkReal x13805=((((-1.0)*x13804*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13803))+(((-1.0)*(r12*r12)))+(((-1.0)*x13804*(r10*r10)*(r20*r20))));
j4eval[0]=x13805;
j4eval[1]=r12;
j4eval[2]=x13802;
j4eval[3]=IKsign(x13805);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13807=(gconst23*r10);
IkReal x13808=(gconst22*r11);
CheckValue<IkReal> x13809=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((2.0)*x13807*x13808))+(((-1.0)*(x13807*x13807)))+(((-1.0)*(x13808*x13808))))),-1);
if(!x13809.valid){
continue;
}
CheckValue<IkReal> x13810 = IKatan2WithCheck(IkReal((x13807+(((-1.0)*x13808)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13809.value)))+(x13810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13811=IKcos(j4);
IkReal x13812=IKsin(j4);
IkReal x13813=((1.0)*cj2);
IkReal x13814=((1.0)*x13811);
IkReal x13815=(gconst23*x13811);
IkReal x13816=(gconst23*x13812);
IkReal x13817=((1.0)*gconst22*x13812);
evalcond[0]=(((r10*x13815))+((r12*x13812))+(((-1.0)*gconst22*r11*x13814)));
evalcond[1]=((((-1.0)*r21*x13817))+(((-1.0)*r22*x13814))+((r20*x13816)));
evalcond[2]=(((r00*x13816))+(((-1.0)*r02*x13814))+(((-1.0)*r01*x13817)));
evalcond[3]=((1.0)+((r10*x13816))+(((-1.0)*r12*x13814))+(((-1.0)*r11*x13817)));
evalcond[4]=(((sj1*sj2))+((r22*x13812))+(((-1.0)*cj1*x13813))+(((-1.0)*gconst22*r21*x13814))+((r20*x13815)));
evalcond[5]=(((r00*x13815))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13813))+((r02*x13812))+(((-1.0)*gconst22*r01*x13814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13818=((1.0)*gconst22);
CheckValue<IkReal> x13819 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst23*r00))+(((-1.0)*r01*x13818)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13819.valid){
continue;
}
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x13818))+(((-1.0)*gconst23*r21)))),-1);
if(!x13820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13819.value)+(((1.5707963267949)*(x13820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13821=IKcos(j4);
IkReal x13822=IKsin(j4);
IkReal x13823=((1.0)*cj2);
IkReal x13824=((1.0)*x13821);
IkReal x13825=(gconst23*x13821);
IkReal x13826=(gconst23*x13822);
IkReal x13827=((1.0)*gconst22*x13822);
evalcond[0]=(((r10*x13825))+((r12*x13822))+(((-1.0)*gconst22*r11*x13824)));
evalcond[1]=((((-1.0)*r21*x13827))+(((-1.0)*r22*x13824))+((r20*x13826)));
evalcond[2]=(((r00*x13826))+(((-1.0)*r02*x13824))+(((-1.0)*r01*x13827)));
evalcond[3]=((1.0)+((r10*x13826))+(((-1.0)*r11*x13827))+(((-1.0)*r12*x13824)));
evalcond[4]=(((sj1*sj2))+((r22*x13822))+((r20*x13825))+(((-1.0)*cj1*x13823))+(((-1.0)*gconst22*r21*x13824)));
evalcond[5]=((((-1.0)*gconst22*r01*x13824))+(((-1.0)*sj1*x13823))+((r00*x13825))+(((-1.0)*cj1*sj2))+((r02*x13822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13828=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x13828.valid){
continue;
}
CheckValue<IkReal> x13829 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13828.value)))+(x13829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13830=IKcos(j4);
IkReal x13831=IKsin(j4);
IkReal x13832=((1.0)*cj2);
IkReal x13833=((1.0)*x13830);
IkReal x13834=(gconst23*x13830);
IkReal x13835=(gconst23*x13831);
IkReal x13836=((1.0)*gconst22*x13831);
evalcond[0]=(((r12*x13831))+(((-1.0)*gconst22*r11*x13833))+((r10*x13834)));
evalcond[1]=((((-1.0)*r22*x13833))+(((-1.0)*r21*x13836))+((r20*x13835)));
evalcond[2]=((((-1.0)*r02*x13833))+((r00*x13835))+(((-1.0)*r01*x13836)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13833))+(((-1.0)*r11*x13836))+((r10*x13835)));
evalcond[4]=(((r22*x13831))+((sj1*sj2))+(((-1.0)*cj1*x13832))+((r20*x13834))+(((-1.0)*gconst22*r21*x13833)));
evalcond[5]=((((-1.0)*gconst22*r01*x13833))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13832))+((r02*x13831))+((r00*x13834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13837=((-1.0)*r21);
CheckValue<IkReal> x13840 = IKatan2WithCheck(IkReal(x13837),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13840.valid){
continue;
}
IkReal x13838=((1.0)*(x13840.value));
IkReal x13839=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13838)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13838)));
IkReal gconst22=(x13837*x13839);
IkReal gconst23=((1.0)*r20*x13839);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13841=((-1.0)*r21);
CheckValue<IkReal> x13844 = IKatan2WithCheck(IkReal(x13841),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13844.valid){
continue;
}
IkReal x13842=((1.0)*(x13844.value));
IkReal x13843=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13842)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13842)));
IkReal gconst22=(x13841*x13843);
IkReal gconst23=((1.0)*r20*x13843);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13845=((-1.0)*r21);
CheckValue<IkReal> x13848 = IKatan2WithCheck(IkReal(x13845),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13848.valid){
continue;
}
IkReal x13846=((1.0)*(x13848.value));
IkReal x13847=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13846)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13846)));
IkReal gconst22=(x13845*x13847);
IkReal gconst23=((1.0)*r20*x13847);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13849=(gconst23*r10);
IkReal x13850=(gconst22*r11);
CheckValue<IkReal> x13851=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13849*x13849)+(x13850*x13850)+(((-2.0)*x13849*x13850)))),-1);
if(!x13851.valid){
continue;
}
CheckValue<IkReal> x13852 = IKatan2WithCheck(IkReal((x13850+(((-1.0)*x13849)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13851.value)))+(x13852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13853=IKsin(j4);
IkReal x13854=IKcos(j4);
IkReal x13855=((1.0)*sj1);
IkReal x13856=((1.0)*x13854);
IkReal x13857=(gconst23*x13853);
IkReal x13858=((1.0)*x13853);
IkReal x13859=(gconst22*x13854);
IkReal x13860=(gconst22*x13858);
evalcond[0]=((((-1.0)*r22*x13856))+((r20*x13857))+(((-1.0)*r21*x13860)));
evalcond[1]=(((r00*x13857))+(((-1.0)*r02*x13856))+(((-1.0)*r01*x13860)));
evalcond[2]=((((-1.0)*r12*x13858))+((r11*x13859))+(((-1.0)*gconst23*r10*x13856)));
evalcond[3]=((1.0)+(((-1.0)*r11*x13860))+(((-1.0)*r12*x13856))+((r10*x13857)));
evalcond[4]=(((r01*x13859))+(((-1.0)*sj2*x13855))+(((-1.0)*gconst23*r00*x13856))+(((-1.0)*r02*x13858))+((cj1*cj2)));
evalcond[5]=((((-1.0)*r22*x13858))+(((-1.0)*cj1*sj2))+((r21*x13859))+(((-1.0)*cj2*x13855))+(((-1.0)*gconst23*r20*x13856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13861=((1.0)*gconst22);
CheckValue<IkReal> x13862=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x13861)))),-1);
if(!x13862.valid){
continue;
}
CheckValue<IkReal> x13863 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst23*r00))+(((-1.0)*r01*x13861)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13862.value)))+(x13863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13864=IKsin(j4);
IkReal x13865=IKcos(j4);
IkReal x13866=((1.0)*sj1);
IkReal x13867=((1.0)*x13865);
IkReal x13868=(gconst23*x13864);
IkReal x13869=((1.0)*x13864);
IkReal x13870=(gconst22*x13865);
IkReal x13871=(gconst22*x13869);
evalcond[0]=((((-1.0)*r22*x13867))+((r20*x13868))+(((-1.0)*r21*x13871)));
evalcond[1]=(((r00*x13868))+(((-1.0)*r01*x13871))+(((-1.0)*r02*x13867)));
evalcond[2]=((((-1.0)*r12*x13869))+((r11*x13870))+(((-1.0)*gconst23*r10*x13867)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13867))+(((-1.0)*r11*x13871))+((r10*x13868)));
evalcond[4]=((((-1.0)*sj2*x13866))+(((-1.0)*gconst23*r00*x13867))+(((-1.0)*r02*x13869))+((r01*x13870))+((cj1*cj2)));
evalcond[5]=((((-1.0)*gconst23*r20*x13867))+(((-1.0)*r22*x13869))+((r21*x13870))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13872=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x13872.valid){
continue;
}
CheckValue<IkReal> x13873 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13872.value)))+(x13873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13874=IKsin(j4);
IkReal x13875=IKcos(j4);
IkReal x13876=((1.0)*sj1);
IkReal x13877=((1.0)*x13875);
IkReal x13878=(gconst23*x13874);
IkReal x13879=((1.0)*x13874);
IkReal x13880=(gconst22*x13875);
IkReal x13881=(gconst22*x13879);
evalcond[0]=((((-1.0)*r21*x13881))+(((-1.0)*r22*x13877))+((r20*x13878)));
evalcond[1]=((((-1.0)*r01*x13881))+(((-1.0)*r02*x13877))+((r00*x13878)));
evalcond[2]=((((-1.0)*gconst23*r10*x13877))+(((-1.0)*r12*x13879))+((r11*x13880)));
evalcond[3]=((1.0)+(((-1.0)*r11*x13881))+(((-1.0)*r12*x13877))+((r10*x13878)));
evalcond[4]=((((-1.0)*r02*x13879))+(((-1.0)*sj2*x13876))+((r01*x13880))+((cj1*cj2))+(((-1.0)*gconst23*r00*x13877)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r22*x13879))+(((-1.0)*cj2*x13876))+(((-1.0)*gconst23*r20*x13877))+((r21*x13880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13882=((-1.0)*r21);
CheckValue<IkReal> x13885 = IKatan2WithCheck(IkReal(x13882),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13885.valid){
continue;
}
IkReal x13883=((1.0)*(x13885.value));
IkReal x13884=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13883)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13883)));
IkReal gconst22=(x13882*x13884);
IkReal gconst23=((1.0)*r20*x13884);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13886=((-1.0)*r21);
CheckValue<IkReal> x13889 = IKatan2WithCheck(IkReal(x13886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13889.valid){
continue;
}
IkReal x13887=((1.0)*(x13889.value));
IkReal x13888=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13887)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13887)));
IkReal gconst22=(x13886*x13888);
IkReal gconst23=((1.0)*r20*x13888);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13890=((-1.0)*r21);
CheckValue<IkReal> x13893 = IKatan2WithCheck(IkReal(x13890),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13893.valid){
continue;
}
IkReal x13891=((1.0)*(x13893.value));
IkReal x13892=x13729;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13891)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13891)));
IkReal gconst22=(x13890*x13892);
IkReal gconst23=((1.0)*r20*x13892);
IkReal x13894=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13898=IKPowWithIntegerCheck(x13894,-1);
if(!x13898.valid){
continue;
}
IkReal x13895=x13898.value;
IkReal x13896=((1.0)*x13895);
IkReal x13897=((((-2.0)*r10*r11*r20*r21*x13895))+(((-1.0)*(r12*r12)))+(((-1.0)*x13896*(r10*r10)*(r20*r20)))+(((-1.0)*x13896*(r11*r11)*(r21*r21))));
j4eval[0]=x13897;
j4eval[1]=r12;
j4eval[2]=x13894;
j4eval[3]=IKsign(x13897);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13899=(gconst23*r10);
IkReal x13900=(gconst22*r11);
CheckValue<IkReal> x13901 = IKatan2WithCheck(IkReal((x13899+(((-1.0)*x13900)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13901.valid){
continue;
}
CheckValue<IkReal> x13902=IKPowWithIntegerCheck(IKsign(((((2.0)*x13899*x13900))+(((-1.0)*(x13900*x13900)))+(((-1.0)*(x13899*x13899)))+(((-1.0)*(r12*r12))))),-1);
if(!x13902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13901.value)+(((1.5707963267949)*(x13902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13903=IKcos(j4);
IkReal x13904=IKsin(j4);
IkReal x13905=((1.0)*sj1);
IkReal x13906=((1.0)*x13903);
IkReal x13907=(gconst23*x13903);
IkReal x13908=(gconst23*x13904);
IkReal x13909=((1.0)*gconst22*x13904);
evalcond[0]=(((r10*x13907))+((r12*x13904))+(((-1.0)*gconst22*r11*x13906)));
evalcond[1]=((((-1.0)*r22*x13906))+((r20*x13908))+(((-1.0)*r21*x13909)));
evalcond[2]=((((-1.0)*r01*x13909))+((r00*x13908))+(((-1.0)*r02*x13906)));
evalcond[3]=((1.0)+((r10*x13908))+(((-1.0)*r11*x13909))+(((-1.0)*r12*x13906)));
evalcond[4]=(((r02*x13904))+(((-1.0)*sj2*x13905))+((r00*x13907))+((cj1*cj2))+(((-1.0)*gconst22*r01*x13906)));
evalcond[5]=(((r22*x13904))+(((-1.0)*cj1*sj2))+((r20*x13907))+(((-1.0)*cj2*x13905))+(((-1.0)*gconst22*r21*x13906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13910=((1.0)*gconst22);
CheckValue<IkReal> x13911=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r21))+(((-1.0)*r20*x13910)))),-1);
if(!x13911.valid){
continue;
}
CheckValue<IkReal> x13912 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x13910))+((gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13911.value)))+(x13912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13913=IKcos(j4);
IkReal x13914=IKsin(j4);
IkReal x13915=((1.0)*sj1);
IkReal x13916=((1.0)*x13913);
IkReal x13917=(gconst23*x13913);
IkReal x13918=(gconst23*x13914);
IkReal x13919=((1.0)*gconst22*x13914);
evalcond[0]=(((r10*x13917))+((r12*x13914))+(((-1.0)*gconst22*r11*x13916)));
evalcond[1]=((((-1.0)*r22*x13916))+((r20*x13918))+(((-1.0)*r21*x13919)));
evalcond[2]=((((-1.0)*r01*x13919))+((r00*x13918))+(((-1.0)*r02*x13916)));
evalcond[3]=((1.0)+((r10*x13918))+(((-1.0)*r12*x13916))+(((-1.0)*r11*x13919)));
evalcond[4]=(((r02*x13914))+(((-1.0)*sj2*x13915))+((r00*x13917))+(((-1.0)*gconst22*r01*x13916))+((cj1*cj2)));
evalcond[5]=(((r22*x13914))+(((-1.0)*cj1*sj2))+((r20*x13917))+(((-1.0)*cj2*x13915))+(((-1.0)*gconst22*r21*x13916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13920=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x13920.valid){
continue;
}
CheckValue<IkReal> x13921 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13920.value)))+(x13921.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13922=IKcos(j4);
IkReal x13923=IKsin(j4);
IkReal x13924=((1.0)*sj1);
IkReal x13925=((1.0)*x13922);
IkReal x13926=(gconst23*x13922);
IkReal x13927=(gconst23*x13923);
IkReal x13928=((1.0)*gconst22*x13923);
evalcond[0]=(((r10*x13926))+(((-1.0)*gconst22*r11*x13925))+((r12*x13923)));
evalcond[1]=(((r20*x13927))+(((-1.0)*r22*x13925))+(((-1.0)*r21*x13928)));
evalcond[2]=((((-1.0)*r01*x13928))+((r00*x13927))+(((-1.0)*r02*x13925)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13925))+((r10*x13927))+(((-1.0)*r11*x13928)));
evalcond[4]=((((-1.0)*sj2*x13924))+(((-1.0)*gconst22*r01*x13925))+((r00*x13926))+((r02*x13923))+((cj1*cj2)));
evalcond[5]=(((r20*x13926))+(((-1.0)*cj1*sj2))+((r22*x13923))+(((-1.0)*gconst22*r21*x13925))+(((-1.0)*cj2*x13924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13929=((-1.0)*r21);
IkReal x13930=((-1.0)*px);
CheckValue<IkReal> x13932 = IKatan2WithCheck(IkReal(x13929),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13932.valid){
continue;
}
IkReal x13931=((1.0)*(x13932.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13931)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13930);
rxp1_1=(px*r21);
rxp1_2=(r11*x13930);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13931)));
IkReal gconst22=x13929;
IkReal gconst23=((1.0)*r20);
IkReal x13933=((1.0)*r11*r21);
IkReal x13934=((1.0)*r10*r20);
j4eval[0]=(x13934+x13933);
j4eval[1]=((((-1.0)*sj3*x13933))+(((-1.0)*sj3*x13934)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13935=((-1.0)*r21);
IkReal x13936=((-1.0)*px);
CheckValue<IkReal> x13938 = IKatan2WithCheck(IkReal(x13935),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13938.valid){
continue;
}
IkReal x13937=((1.0)*(x13938.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13937)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13936);
rxp1_1=(px*r21);
rxp1_2=(r11*x13936);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13937)));
IkReal gconst22=x13935;
IkReal gconst23=((1.0)*r20);
IkReal x13939=((1.0)*cj3);
IkReal x13940=(r10*r20);
IkReal x13941=(r11*r21);
j4eval[0]=((((1.0)*x13940))+(((1.0)*x13941)));
j4eval[1]=((((-1.0)*x13939*x13941))+(((-1.0)*x13939*x13940)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13942=((-1.0)*r21);
IkReal x13943=((-1.0)*px);
CheckValue<IkReal> x13945 = IKatan2WithCheck(IkReal(x13942),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x13945.valid){
continue;
}
IkReal x13944=((1.0)*(x13945.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13944)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x13943);
rxp1_1=(px*r21);
rxp1_2=(r11*x13943);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13944)));
IkReal gconst22=x13942;
IkReal gconst23=((1.0)*r20);
IkReal x13946=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r21*x13946))+(((-1.0)*r10*r20*x13946)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13947=((1.0)*sj3);
CheckValue<IkReal> x13948=IKPowWithIntegerCheck(cj3,-1);
if(!x13948.valid){
continue;
}
CheckValue<IkReal> x13949=IKPowWithIntegerCheck(r02,-1);
if(!x13949.valid){
continue;
}
CheckValue<IkReal> x13950=IKPowWithIntegerCheck((((cj3*gconst22*r11))+(((-1.0)*cj3*gconst23*r10))),-1);
if(!x13950.valid){
continue;
}
if( IKabs(((x13948.value)*(x13949.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13950.value)*(((((-1.0)*gconst23*r11*x13947))+(((-1.0)*gconst22*r10*x13947)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13948.value)*(x13949.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13950.value)*(((((-1.0)*gconst23*r11*x13947))+(((-1.0)*gconst22*r10*x13947))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13948.value)*(x13949.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13950.value)*(((((-1.0)*gconst23*r11*x13947))+(((-1.0)*gconst22*r10*x13947))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13951=IKsin(j4);
IkReal x13952=IKcos(j4);
IkReal x13953=(gconst23*sj3);
IkReal x13954=((1.0)*r10);
IkReal x13955=((1.0)*r21);
IkReal x13956=(sj1*sj2);
IkReal x13957=(cj3*gconst22);
IkReal x13958=(cj3*gconst23);
IkReal x13959=((1.0)*cj2);
IkReal x13960=(gconst22*sj3);
IkReal x13961=((1.0)*r20);
IkReal x13962=((1.0)*r11);
IkReal x13963=((1.0)*cj1*sj2);
IkReal x13964=(sj1*x13959);
IkReal x13965=(gconst22*x13951);
IkReal x13966=(gconst23*x13951);
IkReal x13967=(r21*x13952);
IkReal x13968=(r11*x13952);
IkReal x13969=((1.0)*r02*x13951);
IkReal x13970=(x13963+x13964);
evalcond[0]=((-1.0)*r02*x13952);
evalcond[1]=(((r20*x13966))+(((-1.0)*x13955*x13965)));
evalcond[2]=((1.0)+((r10*x13966))+(((-1.0)*x13962*x13965)));
evalcond[3]=((((-1.0)*cj3*x13969))+((cj1*cj2))+(((-1.0)*x13956)));
evalcond[4]=((((-1.0)*sj3*x13969))+(((-1.0)*x13970)));
evalcond[5]=(((r11*x13953))+((x13957*x13968))+((r10*x13960))+(((-1.0)*x13952*x13954*x13958)));
evalcond[6]=((((-1.0)*x13952*x13953*x13954))+((x13960*x13968))+(((-1.0)*x13958*x13962))+(((-1.0)*x13954*x13957)));
evalcond[7]=(((x13957*x13967))+((r21*x13953))+((r20*x13960))+(((-1.0)*x13952*x13958*x13961))+(((-1.0)*x13970)));
evalcond[8]=((((-1.0)*x13955*x13958))+x13956+(((-1.0)*x13957*x13961))+(((-1.0)*cj1*x13959))+((x13960*x13967))+(((-1.0)*x13952*x13953*x13961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13971=((1.0)*sj3);
IkReal x13972=(gconst22*r11);
IkReal x13973=(gconst23*r10);
CheckValue<IkReal> x13974=IKPowWithIntegerCheck((x13973+(((-1.0)*x13972))),-1);
if(!x13974.valid){
continue;
}
CheckValue<IkReal> x13975=IKPowWithIntegerCheck((((cj3*x13972))+(((-1.0)*cj3*x13973))),-1);
if(!x13975.valid){
continue;
}
if( IKabs(((-1.0)*(x13974.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13975.value)*(((((-1.0)*gconst22*r10*x13971))+(((-1.0)*gconst23*r11*x13971)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13974.value)))+IKsqr(((x13975.value)*(((((-1.0)*gconst22*r10*x13971))+(((-1.0)*gconst23*r11*x13971))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13974.value)), ((x13975.value)*(((((-1.0)*gconst22*r10*x13971))+(((-1.0)*gconst23*r11*x13971))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13976=IKsin(j4);
IkReal x13977=IKcos(j4);
IkReal x13978=(gconst23*sj3);
IkReal x13979=((1.0)*r10);
IkReal x13980=((1.0)*r21);
IkReal x13981=(sj1*sj2);
IkReal x13982=(cj3*gconst22);
IkReal x13983=(cj3*gconst23);
IkReal x13984=((1.0)*cj2);
IkReal x13985=(gconst22*sj3);
IkReal x13986=((1.0)*r20);
IkReal x13987=((1.0)*r11);
IkReal x13988=((1.0)*cj1*sj2);
IkReal x13989=(sj1*x13984);
IkReal x13990=(gconst22*x13976);
IkReal x13991=(gconst23*x13976);
IkReal x13992=(r21*x13977);
IkReal x13993=(r11*x13977);
IkReal x13994=((1.0)*r02*x13976);
IkReal x13995=(x13988+x13989);
evalcond[0]=((-1.0)*r02*x13977);
evalcond[1]=(((r20*x13991))+(((-1.0)*x13980*x13990)));
evalcond[2]=((1.0)+((r10*x13991))+(((-1.0)*x13987*x13990)));
evalcond[3]=((((-1.0)*cj3*x13994))+((cj1*cj2))+(((-1.0)*x13981)));
evalcond[4]=((((-1.0)*sj3*x13994))+(((-1.0)*x13995)));
evalcond[5]=((((-1.0)*x13977*x13979*x13983))+((r11*x13978))+((r10*x13985))+((x13982*x13993)));
evalcond[6]=((((-1.0)*x13979*x13982))+(((-1.0)*x13983*x13987))+(((-1.0)*x13977*x13978*x13979))+((x13985*x13993)));
evalcond[7]=(((r20*x13985))+(((-1.0)*x13977*x13983*x13986))+((x13982*x13992))+(((-1.0)*x13995))+((r21*x13978)));
evalcond[8]=((((-1.0)*x13977*x13978*x13986))+(((-1.0)*x13982*x13986))+x13981+(((-1.0)*cj1*x13984))+(((-1.0)*x13980*x13983))+((x13985*x13992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13996=(gconst23*r10);
IkReal x13997=(gconst22*r11);
CheckValue<IkReal> x13998=IKPowWithIntegerCheck((x13996+(((-1.0)*x13997))),-1);
if(!x13998.valid){
continue;
}
CheckValue<IkReal> x13999=IKPowWithIntegerCheck(((((-1.0)*sj3*x13996))+((sj3*x13997))),-1);
if(!x13999.valid){
continue;
}
if( IKabs(((-1.0)*(x13998.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13999.value)*((((cj3*gconst22*r10))+((cj3*gconst23*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13998.value)))+IKsqr(((x13999.value)*((((cj3*gconst22*r10))+((cj3*gconst23*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13998.value)), ((x13999.value)*((((cj3*gconst22*r10))+((cj3*gconst23*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14000=IKsin(j4);
IkReal x14001=IKcos(j4);
IkReal x14002=(gconst23*sj3);
IkReal x14003=((1.0)*r10);
IkReal x14004=((1.0)*r21);
IkReal x14005=(sj1*sj2);
IkReal x14006=(cj3*gconst22);
IkReal x14007=(cj3*gconst23);
IkReal x14008=((1.0)*cj2);
IkReal x14009=(gconst22*sj3);
IkReal x14010=((1.0)*r20);
IkReal x14011=((1.0)*r11);
IkReal x14012=((1.0)*cj1*sj2);
IkReal x14013=(sj1*x14008);
IkReal x14014=(gconst22*x14000);
IkReal x14015=(gconst23*x14000);
IkReal x14016=(r21*x14001);
IkReal x14017=(r11*x14001);
IkReal x14018=((1.0)*r02*x14000);
IkReal x14019=(x14013+x14012);
evalcond[0]=((-1.0)*r02*x14001);
evalcond[1]=((((-1.0)*x14004*x14014))+((r20*x14015)));
evalcond[2]=((1.0)+(((-1.0)*x14011*x14014))+((r10*x14015)));
evalcond[3]=((((-1.0)*cj3*x14018))+((cj1*cj2))+(((-1.0)*x14005)));
evalcond[4]=((((-1.0)*x14019))+(((-1.0)*sj3*x14018)));
evalcond[5]=(((r10*x14009))+((x14006*x14017))+((r11*x14002))+(((-1.0)*x14001*x14003*x14007)));
evalcond[6]=((((-1.0)*x14001*x14002*x14003))+(((-1.0)*x14007*x14011))+(((-1.0)*x14003*x14006))+((x14009*x14017)));
evalcond[7]=((((-1.0)*x14019))+((x14006*x14016))+((r21*x14002))+((r20*x14009))+(((-1.0)*x14001*x14007*x14010)));
evalcond[8]=((((-1.0)*x14001*x14002*x14010))+(((-1.0)*x14006*x14010))+(((-1.0)*x14004*x14007))+x14005+(((-1.0)*cj1*x14008))+((x14009*x14016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14020=gconst22*gconst22;
IkReal x14021=gconst23*gconst23;
IkReal x14022=(cj3*r21);
IkReal x14023=(gconst22*r10);
IkReal x14024=((1.0)*gconst23);
IkReal x14025=(r11*sj3);
IkReal x14026=(r20*x14021);
CheckValue<IkReal> x14027 = IKatan2WithCheck(IkReal((((gconst23*r22*x14025))+((r22*sj3*x14023)))),IkReal((((gconst23*r20*sj3*x14023))+((x14025*x14026))+(((-1.0)*r10*r21*sj3*x14020))+(((-1.0)*gconst22*r21*x14024*x14025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14027.valid){
continue;
}
CheckValue<IkReal> x14028=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x14022*x14023*x14024))+((r11*x14020*x14022))+((cj3*r10*x14026))+(((-1.0)*cj3*gconst22*r11*r20*x14024)))),-1);
if(!x14028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14027.value)+(((1.5707963267949)*(x14028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14029=IKsin(j4);
IkReal x14030=IKcos(j4);
IkReal x14031=(gconst23*sj3);
IkReal x14032=(gconst22*r21);
IkReal x14033=(gconst22*sj3);
IkReal x14034=(sj1*sj2);
IkReal x14035=(gconst22*r01);
IkReal x14036=((1.0)*cj3);
IkReal x14037=((1.0)*cj2);
IkReal x14038=(cj3*gconst23);
IkReal x14039=(gconst22*r11);
IkReal x14040=((1.0)*cj1*sj2);
IkReal x14041=(sj1*x14037);
IkReal x14042=((1.0)*x14030);
IkReal x14043=((1.0)*x14029);
IkReal x14044=(gconst23*x14029);
IkReal x14045=(cj3*x14030);
IkReal x14046=(x14040+x14041);
evalcond[0]=((((-1.0)*x14032*x14043))+((r20*x14044))+(((-1.0)*r22*x14042)));
evalcond[1]=(((r00*x14044))+(((-1.0)*x14035*x14043))+(((-1.0)*r02*x14042)));
evalcond[2]=((1.0)+((r10*x14044))+(((-1.0)*r12*x14042))+(((-1.0)*x14039*x14043)));
evalcond[3]=(((r11*x14031))+(((-1.0)*r12*x14029*x14036))+((r10*x14033))+(((-1.0)*gconst23*r10*x14030*x14036))+((x14039*x14045)));
evalcond[4]=((((-1.0)*r10*x14031*x14042))+(((-1.0)*r12*sj3*x14043))+(((-1.0)*gconst23*r11*x14036))+(((-1.0)*gconst22*r10*x14036))+((r11*x14030*x14033)));
evalcond[5]=(((r01*x14031))+((r00*x14033))+(((-1.0)*x14034))+(((-1.0)*r02*x14029*x14036))+(((-1.0)*gconst23*r00*x14030*x14036))+((cj1*cj2))+((x14035*x14045)));
evalcond[6]=(((r20*x14033))+((r21*x14031))+((x14032*x14045))+(((-1.0)*x14046))+(((-1.0)*gconst23*r20*x14030*x14036))+(((-1.0)*r22*x14029*x14036)));
evalcond[7]=(((sj3*x14030*x14032))+(((-1.0)*r22*sj3*x14043))+x14034+(((-1.0)*gconst23*r21*x14036))+(((-1.0)*r20*x14031*x14042))+(((-1.0)*gconst22*r20*x14036))+(((-1.0)*cj1*x14037)));
evalcond[8]=((((-1.0)*gconst22*r00*x14036))+(((-1.0)*r02*sj3*x14043))+(((-1.0)*r00*x14031*x14042))+(((-1.0)*x14046))+(((-1.0)*gconst23*r01*x14036))+((r01*x14030*x14033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14047=((1.0)*gconst22);
CheckValue<IkReal> x14048 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14047))+((gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14048.valid){
continue;
}
CheckValue<IkReal> x14049=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14047))+(((-1.0)*gconst23*r21)))),-1);
if(!x14049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14048.value)+(((1.5707963267949)*(x14049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14050=IKsin(j4);
IkReal x14051=IKcos(j4);
IkReal x14052=(gconst23*sj3);
IkReal x14053=(gconst22*r21);
IkReal x14054=(gconst22*sj3);
IkReal x14055=(sj1*sj2);
IkReal x14056=(gconst22*r01);
IkReal x14057=((1.0)*cj3);
IkReal x14058=((1.0)*cj2);
IkReal x14059=(cj3*gconst23);
IkReal x14060=(gconst22*r11);
IkReal x14061=((1.0)*cj1*sj2);
IkReal x14062=(sj1*x14058);
IkReal x14063=((1.0)*x14051);
IkReal x14064=((1.0)*x14050);
IkReal x14065=(gconst23*x14050);
IkReal x14066=(cj3*x14051);
IkReal x14067=(x14061+x14062);
evalcond[0]=((((-1.0)*r22*x14063))+((r20*x14065))+(((-1.0)*x14053*x14064)));
evalcond[1]=((((-1.0)*x14056*x14064))+((r00*x14065))+(((-1.0)*r02*x14063)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14063))+(((-1.0)*x14060*x14064))+((r10*x14065)));
evalcond[3]=(((x14060*x14066))+(((-1.0)*gconst23*r10*x14051*x14057))+((r11*x14052))+((r10*x14054))+(((-1.0)*r12*x14050*x14057)));
evalcond[4]=(((r11*x14051*x14054))+(((-1.0)*r10*x14052*x14063))+(((-1.0)*gconst23*r11*x14057))+(((-1.0)*r12*sj3*x14064))+(((-1.0)*gconst22*r10*x14057)));
evalcond[5]=((((-1.0)*x14055))+((r00*x14054))+((x14056*x14066))+(((-1.0)*gconst23*r00*x14051*x14057))+(((-1.0)*r02*x14050*x14057))+((cj1*cj2))+((r01*x14052)));
evalcond[6]=(((r20*x14054))+(((-1.0)*gconst23*r20*x14051*x14057))+((x14053*x14066))+(((-1.0)*r22*x14050*x14057))+(((-1.0)*x14067))+((r21*x14052)));
evalcond[7]=((((-1.0)*cj1*x14058))+(((-1.0)*r22*sj3*x14064))+((sj3*x14051*x14053))+(((-1.0)*gconst22*r20*x14057))+(((-1.0)*r20*x14052*x14063))+(((-1.0)*gconst23*r21*x14057))+x14055);
evalcond[8]=(((r01*x14051*x14054))+(((-1.0)*r02*sj3*x14064))+(((-1.0)*r00*x14052*x14063))+(((-1.0)*gconst22*r00*x14057))+(((-1.0)*gconst23*r01*x14057))+(((-1.0)*x14067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14068=IKPowWithIntegerCheck(IKsign((((gconst22*r00))+((gconst23*r01)))),-1);
if(!x14068.valid){
continue;
}
CheckValue<IkReal> x14069 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst23*r20))+(((-1.0)*gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14068.value)))+(x14069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14070=IKsin(j4);
IkReal x14071=IKcos(j4);
IkReal x14072=(gconst23*sj3);
IkReal x14073=(gconst22*r21);
IkReal x14074=(gconst22*sj3);
IkReal x14075=(sj1*sj2);
IkReal x14076=(gconst22*r01);
IkReal x14077=((1.0)*cj3);
IkReal x14078=((1.0)*cj2);
IkReal x14079=(cj3*gconst23);
IkReal x14080=(gconst22*r11);
IkReal x14081=((1.0)*cj1*sj2);
IkReal x14082=(sj1*x14078);
IkReal x14083=((1.0)*x14071);
IkReal x14084=((1.0)*x14070);
IkReal x14085=(gconst23*x14070);
IkReal x14086=(cj3*x14071);
IkReal x14087=(x14082+x14081);
evalcond[0]=((((-1.0)*r22*x14083))+((r20*x14085))+(((-1.0)*x14073*x14084)));
evalcond[1]=((((-1.0)*x14076*x14084))+((r00*x14085))+(((-1.0)*r02*x14083)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14083))+(((-1.0)*x14080*x14084))+((r10*x14085)));
evalcond[3]=((((-1.0)*gconst23*r10*x14071*x14077))+((r11*x14072))+((r10*x14074))+((x14080*x14086))+(((-1.0)*r12*x14070*x14077)));
evalcond[4]=((((-1.0)*gconst23*r11*x14077))+(((-1.0)*r12*sj3*x14084))+((r11*x14071*x14074))+(((-1.0)*gconst22*r10*x14077))+(((-1.0)*r10*x14072*x14083)));
evalcond[5]=((((-1.0)*gconst23*r00*x14071*x14077))+((x14076*x14086))+((r00*x14074))+((r01*x14072))+(((-1.0)*x14075))+(((-1.0)*r02*x14070*x14077))+((cj1*cj2)));
evalcond[6]=((((-1.0)*x14087))+((r21*x14072))+(((-1.0)*r22*x14070*x14077))+((r20*x14074))+(((-1.0)*gconst23*r20*x14071*x14077))+((x14073*x14086)));
evalcond[7]=((((-1.0)*r22*sj3*x14084))+((sj3*x14071*x14073))+(((-1.0)*cj1*x14078))+(((-1.0)*gconst23*r21*x14077))+(((-1.0)*r20*x14072*x14083))+(((-1.0)*gconst22*r20*x14077))+x14075);
evalcond[8]=(((r01*x14071*x14074))+(((-1.0)*gconst23*r01*x14077))+(((-1.0)*x14087))+(((-1.0)*r02*sj3*x14084))+(((-1.0)*r00*x14072*x14083))+(((-1.0)*gconst22*r00*x14077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14089 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14089)==0){
continue;
}
IkReal x14088=pow(x14089,-0.5);
CheckValue<IkReal> x14090 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14090.valid){
continue;
}
IkReal gconst24=((-1.0)*(x14090.value));
IkReal gconst25=((-1.0)*r01*x14088);
IkReal gconst26=(r00*x14088);
CheckValue<IkReal> x14091 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14091.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14091.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14094 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14094.valid){
continue;
}
IkReal x14092=((-1.0)*(x14094.value));
IkReal x14093=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14092;
IkReal gconst24=x14092;
IkReal gconst25=((-1.0)*r01*x14093);
IkReal gconst26=(r00*x14093);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14097 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14097.valid){
continue;
}
IkReal x14095=((-1.0)*(x14097.value));
IkReal x14096=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14095;
IkReal gconst24=x14095;
IkReal gconst25=((-1.0)*r01*x14096);
IkReal gconst26=(r00*x14096);
CheckValue<IkReal> x14105=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14105.valid){
continue;
}
IkReal x14098=x14105.value;
IkReal x14099=(cj3*x14098);
IkReal x14100=(r21*x14099);
IkReal x14101=(r10*x14099);
IkReal x14102=(r11*x14099);
IkReal x14103=(r20*x14099);
IkReal x14104=(r00*r01*x14099);
j4eval[0]=IKsign((((cj3*r12*r22))+((r11*x14100*(r01*r01)))+((r00*r01*r10*x14100))+((r20*x14101*(r00*r00)))+((r00*r01*r20*x14102))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14108 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14108.valid){
continue;
}
IkReal x14106=((-1.0)*(x14108.value));
IkReal x14107=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14106;
IkReal gconst24=x14106;
IkReal gconst25=((-1.0)*r01*x14107);
IkReal gconst26=(r00*x14107);
CheckValue<IkReal> x14116=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14116.valid){
continue;
}
IkReal x14109=x14116.value;
IkReal x14110=(sj3*x14109);
IkReal x14111=(r11*x14110);
IkReal x14112=(r21*x14110);
IkReal x14113=(r20*x14110);
IkReal x14114=(r10*x14110);
IkReal x14115=(r00*r01*x14110);
j4eval[0]=IKsign((((r21*x14111*(r01*r01)))+((r00*r01*r10*x14112))+((r10*x14113*(r00*r00)))+((r12*r22*sj3))+((r00*r01*r20*x14111))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14119 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14119.valid){
continue;
}
IkReal x14117=((-1.0)*(x14119.value));
IkReal x14118=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14117;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst24=x14117;
IkReal gconst25=((-1.0)*r01*x14118);
IkReal gconst26=(r00*x14118);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x14122 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14122.valid){
continue;
}
IkReal x14120=((-1.0)*(x14122.value));
IkReal x14121=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14120;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst24=x14120;
IkReal gconst25=((-1.0)*r01*x14121);
IkReal gconst26=(r00*x14121);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14125 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14125.valid){
continue;
}
IkReal x14123=((-1.0)*(x14125.value));
IkReal x14124=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14123;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst24=x14123;
IkReal gconst25=((-1.0)*r01*x14124);
IkReal gconst26=(r00*x14124);
IkReal x14126=r02*r02;
IkReal x14127=(r12*sj1*sj2);
IkReal x14128=(cj1*cj2*r12);
CheckValue<IkReal> x14132=IKPowWithIntegerCheck(((-1.0)+x14126),-1);
if(!x14132.valid){
continue;
}
IkReal x14129=x14132.value;
if((((1.0)+(((-1.0)*x14126)))) < -0.00001)
continue;
IkReal x14130=IKsqrt(((1.0)+(((-1.0)*x14126))));
IkReal x14131=(r02*x14129*x14130);
j4eval[0]=((IKabs((((x14127*x14131))+(((-1.0)*x14128*x14131)))))+(IKabs(((((-1.0)*x14127))+x14128))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14133=(sj1*sj2);
IkReal x14134=(cj1*cj2);
IkReal x14135=(gconst26*r10);
IkReal x14136=((1.0)*gconst25);
CheckValue<IkReal> x14137 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x14133*x14136))+(((-1.0)*x14134*x14135))+((gconst25*r11*x14134))+((x14133*x14135)))),IkReal(((((-1.0)*r12*x14133))+((r12*x14134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14137.valid){
continue;
}
CheckValue<IkReal> x14138=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r21))+(((-1.0)*r20*x14136)))),-1);
if(!x14138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14137.value)+(((1.5707963267949)*(x14138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14139=IKsin(j4);
IkReal x14140=IKcos(j4);
IkReal x14141=(gconst26*r10);
IkReal x14142=((1.0)*sj1);
IkReal x14143=(gconst26*r20);
IkReal x14144=(gconst26*r00);
IkReal x14145=((1.0)*x14140);
IkReal x14146=(gconst25*x14140);
IkReal x14147=((1.0)*x14139);
IkReal x14148=(gconst25*x14147);
evalcond[0]=((((-1.0)*r22*x14145))+(((-1.0)*r21*x14148))+((x14139*x14143)));
evalcond[1]=(((x14139*x14144))+(((-1.0)*r02*x14145))+(((-1.0)*r01*x14148)));
evalcond[2]=((((-1.0)*r12*x14147))+(((-1.0)*x14141*x14145))+((r11*x14146)));
evalcond[3]=((1.0)+((x14139*x14141))+(((-1.0)*r11*x14148))+(((-1.0)*r12*x14145)));
evalcond[4]=((((-1.0)*x14144*x14145))+((r01*x14146))+((cj1*cj2))+(((-1.0)*r02*x14147))+(((-1.0)*sj2*x14142)));
evalcond[5]=((((-1.0)*r22*x14147))+(((-1.0)*cj1*sj2))+((r21*x14146))+(((-1.0)*x14143*x14145))+(((-1.0)*cj2*x14142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14149=(gconst25*r11);
IkReal x14150=(gconst26*r10);
CheckValue<IkReal> x14151=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x14149*x14150))+(x14150*x14150)+(x14149*x14149))),-1);
if(!x14151.valid){
continue;
}
CheckValue<IkReal> x14152 = IKatan2WithCheck(IkReal((x14149+(((-1.0)*x14150)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14151.value)))+(x14152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14153=IKsin(j4);
IkReal x14154=IKcos(j4);
IkReal x14155=(gconst26*r10);
IkReal x14156=((1.0)*sj1);
IkReal x14157=(gconst26*r20);
IkReal x14158=(gconst26*r00);
IkReal x14159=((1.0)*x14154);
IkReal x14160=(gconst25*x14154);
IkReal x14161=((1.0)*x14153);
IkReal x14162=(gconst25*x14161);
evalcond[0]=(((x14153*x14157))+(((-1.0)*r22*x14159))+(((-1.0)*r21*x14162)));
evalcond[1]=(((x14153*x14158))+(((-1.0)*r01*x14162))+(((-1.0)*r02*x14159)));
evalcond[2]=((((-1.0)*r12*x14161))+((r11*x14160))+(((-1.0)*x14155*x14159)));
evalcond[3]=((1.0)+((x14153*x14155))+(((-1.0)*r12*x14159))+(((-1.0)*r11*x14162)));
evalcond[4]=((((-1.0)*r02*x14161))+((r01*x14160))+(((-1.0)*sj2*x14156))+((cj1*cj2))+(((-1.0)*x14158*x14159)));
evalcond[5]=((((-1.0)*x14157*x14159))+(((-1.0)*r22*x14161))+(((-1.0)*cj1*sj2))+((r21*x14160))+(((-1.0)*cj2*x14156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14163=((1.0)*gconst25);
CheckValue<IkReal> x14164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14163))+(((-1.0)*gconst26*r21)))),-1);
if(!x14164.valid){
continue;
}
CheckValue<IkReal> x14165 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14163))+((gconst26*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14165.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14164.value)))+(x14165.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14166=IKsin(j4);
IkReal x14167=IKcos(j4);
IkReal x14168=(gconst26*r10);
IkReal x14169=((1.0)*sj1);
IkReal x14170=(gconst26*r20);
IkReal x14171=(gconst26*r00);
IkReal x14172=((1.0)*x14167);
IkReal x14173=(gconst25*x14167);
IkReal x14174=((1.0)*x14166);
IkReal x14175=(gconst25*x14174);
evalcond[0]=(((x14166*x14170))+(((-1.0)*r22*x14172))+(((-1.0)*r21*x14175)));
evalcond[1]=(((x14166*x14171))+(((-1.0)*r02*x14172))+(((-1.0)*r01*x14175)));
evalcond[2]=((((-1.0)*x14168*x14172))+((r11*x14173))+(((-1.0)*r12*x14174)));
evalcond[3]=((1.0)+((x14166*x14168))+(((-1.0)*r11*x14175))+(((-1.0)*r12*x14172)));
evalcond[4]=(((r01*x14173))+(((-1.0)*r02*x14174))+(((-1.0)*sj2*x14169))+((cj1*cj2))+(((-1.0)*x14171*x14172)));
evalcond[5]=(((r21*x14173))+(((-1.0)*cj1*sj2))+(((-1.0)*r22*x14174))+(((-1.0)*x14170*x14172))+(((-1.0)*cj2*x14169)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14178 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14178.valid){
continue;
}
IkReal x14176=((-1.0)*(x14178.value));
IkReal x14177=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14176;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst24=x14176;
IkReal gconst25=((-1.0)*r01*x14177);
IkReal gconst26=(r00*x14177);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x14181 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14181.valid){
continue;
}
IkReal x14179=((-1.0)*(x14181.value));
IkReal x14180=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14179;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst24=x14179;
IkReal gconst25=((-1.0)*r01*x14180);
IkReal gconst26=(r00*x14180);
IkReal x14182=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x14186=IKPowWithIntegerCheck(x14182,-1);
if(!x14186.valid){
continue;
}
IkReal x14183=x14186.value;
IkReal x14184=((1.0)*x14183);
IkReal x14185=((((-1.0)*x14184*(r00*r00)*(r10*r10)))+(((-1.0)*x14184*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x14183))+(((-1.0)*(r12*r12))));
j4eval[0]=x14185;
j4eval[1]=IKsign(x14185);
j4eval[2]=r12;
j4eval[3]=x14182;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14189 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14189.valid){
continue;
}
IkReal x14187=((-1.0)*(x14189.value));
IkReal x14188=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14187;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst24=x14187;
IkReal gconst25=((-1.0)*r01*x14188);
IkReal gconst26=(r00*x14188);
IkReal x14190=r02*r02;
IkReal x14191=(cj1*cj2*r12);
IkReal x14192=(r12*sj1*sj2);
CheckValue<IkReal> x14196=IKPowWithIntegerCheck(((-1.0)+x14190),-1);
if(!x14196.valid){
continue;
}
IkReal x14193=x14196.value;
if((((1.0)+(((-1.0)*x14190)))) < -0.00001)
continue;
IkReal x14194=IKsqrt(((1.0)+(((-1.0)*x14190))));
IkReal x14195=(r02*x14193*x14194);
j4eval[0]=((IKabs(((((-1.0)*x14191))+x14192)))+(IKabs(((((-1.0)*x14192*x14195))+((x14191*x14195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14197=((1.0)*gconst25);
IkReal x14198=(cj1*cj2);
IkReal x14199=(sj1*sj2);
IkReal x14200=(gconst26*r10);
CheckValue<IkReal> x14201 = IKatan2WithCheck(IkReal(((((-1.0)*x14199*x14200))+((gconst25*r11*x14199))+((x14198*x14200))+(((-1.0)*r11*x14197*x14198)))),IkReal(((((-1.0)*r12*x14198))+((r12*x14199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14201.valid){
continue;
}
CheckValue<IkReal> x14202=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r21))+(((-1.0)*r20*x14197)))),-1);
if(!x14202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14201.value)+(((1.5707963267949)*(x14202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14203=IKcos(j4);
IkReal x14204=IKsin(j4);
IkReal x14205=(gconst26*r10);
IkReal x14206=((1.0)*sj1);
IkReal x14207=((1.0)*x14203);
IkReal x14208=(gconst26*x14203);
IkReal x14209=(gconst26*x14204);
IkReal x14210=((1.0)*gconst25*x14204);
evalcond[0]=(((x14203*x14205))+(((-1.0)*gconst25*r11*x14207))+((r12*x14204)));
evalcond[1]=((((-1.0)*r21*x14210))+((r20*x14209))+(((-1.0)*r22*x14207)));
evalcond[2]=((((-1.0)*r01*x14210))+((r00*x14209))+(((-1.0)*r02*x14207)));
evalcond[3]=((1.0)+((x14204*x14205))+(((-1.0)*r12*x14207))+(((-1.0)*r11*x14210)));
evalcond[4]=((((-1.0)*sj2*x14206))+((r02*x14204))+((r00*x14208))+((cj1*cj2))+(((-1.0)*gconst25*r01*x14207)));
evalcond[5]=((((-1.0)*cj2*x14206))+((r20*x14208))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst25*r21*x14207))+((r22*x14204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14211=(gconst25*r11);
IkReal x14212=(gconst26*r10);
CheckValue<IkReal> x14213 = IKatan2WithCheck(IkReal(((((-1.0)*x14211))+x14212)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14213.valid){
continue;
}
CheckValue<IkReal> x14214=IKPowWithIntegerCheck(IKsign(((((2.0)*x14211*x14212))+(((-1.0)*(x14212*x14212)))+(((-1.0)*(x14211*x14211)))+(((-1.0)*(r12*r12))))),-1);
if(!x14214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14213.value)+(((1.5707963267949)*(x14214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14215=IKcos(j4);
IkReal x14216=IKsin(j4);
IkReal x14217=(gconst26*r10);
IkReal x14218=((1.0)*sj1);
IkReal x14219=((1.0)*x14215);
IkReal x14220=(gconst26*x14215);
IkReal x14221=(gconst26*x14216);
IkReal x14222=((1.0)*gconst25*x14216);
evalcond[0]=(((r12*x14216))+(((-1.0)*gconst25*r11*x14219))+((x14215*x14217)));
evalcond[1]=(((r20*x14221))+(((-1.0)*r21*x14222))+(((-1.0)*r22*x14219)));
evalcond[2]=((((-1.0)*r01*x14222))+(((-1.0)*r02*x14219))+((r00*x14221)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14219))+(((-1.0)*r11*x14222))+((x14216*x14217)));
evalcond[4]=(((r00*x14220))+((r02*x14216))+((cj1*cj2))+(((-1.0)*sj2*x14218))+(((-1.0)*gconst25*r01*x14219)));
evalcond[5]=(((r20*x14220))+((r22*x14216))+(((-1.0)*gconst25*r21*x14219))+(((-1.0)*cj1*sj2))+(((-1.0)*cj2*x14218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14223=((1.0)*gconst25);
CheckValue<IkReal> x14224 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14223))+((gconst26*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14224.valid){
continue;
}
CheckValue<IkReal> x14225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14223))+(((-1.0)*gconst26*r21)))),-1);
if(!x14225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14224.value)+(((1.5707963267949)*(x14225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14226=IKcos(j4);
IkReal x14227=IKsin(j4);
IkReal x14228=(gconst26*r10);
IkReal x14229=((1.0)*sj1);
IkReal x14230=((1.0)*x14226);
IkReal x14231=(gconst26*x14226);
IkReal x14232=(gconst26*x14227);
IkReal x14233=((1.0)*gconst25*x14227);
evalcond[0]=((((-1.0)*gconst25*r11*x14230))+((x14226*x14228))+((r12*x14227)));
evalcond[1]=(((r20*x14232))+(((-1.0)*r21*x14233))+(((-1.0)*r22*x14230)));
evalcond[2]=((((-1.0)*r01*x14233))+(((-1.0)*r02*x14230))+((r00*x14232)));
evalcond[3]=((1.0)+(((-1.0)*r11*x14233))+(((-1.0)*r12*x14230))+((x14227*x14228)));
evalcond[4]=(((r02*x14227))+((r00*x14231))+((cj1*cj2))+(((-1.0)*gconst25*r01*x14230))+(((-1.0)*sj2*x14229)));
evalcond[5]=(((r20*x14231))+(((-1.0)*cj1*sj2))+((r22*x14227))+(((-1.0)*gconst25*r21*x14230))+(((-1.0)*cj2*x14229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14236 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14236.valid){
continue;
}
IkReal x14234=((-1.0)*(x14236.value));
IkReal x14235=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14234;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst24=x14234;
IkReal gconst25=((-1.0)*r01*x14235);
IkReal gconst26=(r00*x14235);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x14239 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14239.valid){
continue;
}
IkReal x14237=((-1.0)*(x14239.value));
IkReal x14238=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14237;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst24=x14237;
IkReal gconst25=((-1.0)*r01*x14238);
IkReal gconst26=(r00*x14238);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14242 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14242.valid){
continue;
}
IkReal x14240=((-1.0)*(x14242.value));
IkReal x14241=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14240;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst24=x14240;
IkReal gconst25=((-1.0)*r01*x14241);
IkReal gconst26=(r00*x14241);
IkReal x14243=r02*r02;
IkReal x14244=(sj1*sj2);
IkReal x14245=((1.0)*cj1*cj2);
CheckValue<IkReal> x14249=IKPowWithIntegerCheck(((-1.0)+x14243),-1);
if(!x14249.valid){
continue;
}
IkReal x14246=x14249.value;
if((((1.0)+(((-1.0)*x14243)))) < -0.00001)
continue;
IkReal x14247=IKsqrt(((1.0)+(((-1.0)*x14243))));
IkReal x14248=(r02*r22*x14246*x14247);
j4eval[0]=((IKabs(((((-1.0)*r22*x14245))+((r22*x14244)))))+(IKabs(((((-1.0)*x14245*x14248))+((x14244*x14248))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14250=(gconst26*r20);
IkReal x14251=(cj1*cj2);
IkReal x14252=(sj1*sj2);
IkReal x14253=(gconst25*r21);
CheckValue<IkReal> x14254=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x14250*x14253))+(x14250*x14250)+(x14253*x14253))),-1);
if(!x14254.valid){
continue;
}
CheckValue<IkReal> x14255 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x14251))+((r22*x14252)))),IkReal(((((-1.0)*x14250*x14251))+((x14251*x14253))+((x14250*x14252))+(((-1.0)*x14252*x14253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14254.value)))+(x14255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14256=IKsin(j4);
IkReal x14257=IKcos(j4);
IkReal x14258=(gconst26*r10);
IkReal x14259=((1.0)*cj2);
IkReal x14260=(gconst26*r20);
IkReal x14261=(gconst26*r00);
IkReal x14262=((1.0)*x14257);
IkReal x14263=(gconst25*x14257);
IkReal x14264=((1.0)*x14256);
IkReal x14265=(gconst25*x14264);
evalcond[0]=((((-1.0)*r22*x14262))+((x14256*x14260))+(((-1.0)*r21*x14265)));
evalcond[1]=((((-1.0)*r02*x14262))+((x14256*x14261))+(((-1.0)*r01*x14265)));
evalcond[2]=(((r11*x14263))+(((-1.0)*x14258*x14262))+(((-1.0)*r12*x14264)));
evalcond[3]=((1.0)+(((-1.0)*r11*x14265))+((x14256*x14258))+(((-1.0)*r12*x14262)));
evalcond[4]=(((r21*x14263))+(((-1.0)*x14260*x14262))+(((-1.0)*cj1*x14259))+(((-1.0)*r22*x14264))+((sj1*sj2)));
evalcond[5]=((((-1.0)*r02*x14264))+(((-1.0)*x14261*x14262))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14259))+((r01*x14263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14266=(gconst25*r11);
IkReal x14267=(gconst26*r10);
CheckValue<IkReal> x14268 = IKatan2WithCheck(IkReal(((((-1.0)*x14267))+x14266)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14268.valid){
continue;
}
CheckValue<IkReal> x14269=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x14266*x14267))+(x14267*x14267)+(x14266*x14266))),-1);
if(!x14269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14268.value)+(((1.5707963267949)*(x14269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14270=IKsin(j4);
IkReal x14271=IKcos(j4);
IkReal x14272=(gconst26*r10);
IkReal x14273=((1.0)*cj2);
IkReal x14274=(gconst26*r20);
IkReal x14275=(gconst26*r00);
IkReal x14276=((1.0)*x14271);
IkReal x14277=(gconst25*x14271);
IkReal x14278=((1.0)*x14270);
IkReal x14279=(gconst25*x14278);
evalcond[0]=((((-1.0)*r22*x14276))+((x14270*x14274))+(((-1.0)*r21*x14279)));
evalcond[1]=((((-1.0)*r02*x14276))+((x14270*x14275))+(((-1.0)*r01*x14279)));
evalcond[2]=((((-1.0)*x14272*x14276))+((r11*x14277))+(((-1.0)*r12*x14278)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14276))+((x14270*x14272))+(((-1.0)*r11*x14279)));
evalcond[4]=((((-1.0)*x14274*x14276))+((r21*x14277))+((sj1*sj2))+(((-1.0)*cj1*x14273))+(((-1.0)*r22*x14278)));
evalcond[5]=((((-1.0)*r02*x14278))+((r01*x14277))+(((-1.0)*x14275*x14276))+(((-1.0)*sj1*x14273))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14280=((1.0)*gconst25);
CheckValue<IkReal> x14281=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r21))+(((-1.0)*r20*x14280)))),-1);
if(!x14281.valid){
continue;
}
CheckValue<IkReal> x14282 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst26*r00))+(((-1.0)*r01*x14280)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14282.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14281.value)))+(x14282.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14283=IKsin(j4);
IkReal x14284=IKcos(j4);
IkReal x14285=(gconst26*r10);
IkReal x14286=((1.0)*cj2);
IkReal x14287=(gconst26*r20);
IkReal x14288=(gconst26*r00);
IkReal x14289=((1.0)*x14284);
IkReal x14290=(gconst25*x14284);
IkReal x14291=((1.0)*x14283);
IkReal x14292=(gconst25*x14291);
evalcond[0]=((((-1.0)*r22*x14289))+((x14283*x14287))+(((-1.0)*r21*x14292)));
evalcond[1]=(((x14283*x14288))+(((-1.0)*r02*x14289))+(((-1.0)*r01*x14292)));
evalcond[2]=((((-1.0)*r12*x14291))+((r11*x14290))+(((-1.0)*x14285*x14289)));
evalcond[3]=((1.0)+((x14283*x14285))+(((-1.0)*r11*x14292))+(((-1.0)*r12*x14289)));
evalcond[4]=((((-1.0)*r22*x14291))+((r21*x14290))+((sj1*sj2))+(((-1.0)*x14287*x14289))+(((-1.0)*cj1*x14286)));
evalcond[5]=(((r01*x14290))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x14291))+(((-1.0)*sj1*x14286))+(((-1.0)*x14288*x14289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14295 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14295.valid){
continue;
}
IkReal x14293=((-1.0)*(x14295.value));
IkReal x14294=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14293;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst24=x14293;
IkReal gconst25=((-1.0)*r01*x14294);
IkReal gconst26=(r00*x14294);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x14298 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14298.valid){
continue;
}
IkReal x14296=((-1.0)*(x14298.value));
IkReal x14297=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14296;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst24=x14296;
IkReal gconst25=((-1.0)*r01*x14297);
IkReal gconst26=(r00*x14297);
IkReal x14299=((1.0)+(((-1.0)*(r02*r02))));
CheckValue<IkReal> x14303=IKPowWithIntegerCheck(x14299,-1);
if(!x14303.valid){
continue;
}
IkReal x14300=x14303.value;
IkReal x14301=((1.0)*x14300);
IkReal x14302=((((-2.0)*r00*r01*r10*r11*x14300))+(((-1.0)*x14301*(r00*r00)*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x14301*(r01*r01)*(r11*r11))));
j4eval[0]=x14302;
j4eval[1]=IKsign(x14302);
j4eval[2]=r12;
j4eval[3]=x14299;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14306 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14306.valid){
continue;
}
IkReal x14304=((-1.0)*(x14306.value));
IkReal x14305=x14088;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14304;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst24=x14304;
IkReal gconst25=((-1.0)*r01*x14305);
IkReal gconst26=(r00*x14305);
IkReal x14307=r02*r02;
IkReal x14308=(cj1*r12*sj2);
IkReal x14309=(cj2*r12*sj1);
CheckValue<IkReal> x14313=IKPowWithIntegerCheck(((-1.0)+x14307),-1);
if(!x14313.valid){
continue;
}
IkReal x14310=x14313.value;
if((((1.0)+(((-1.0)*x14307)))) < -0.00001)
continue;
IkReal x14311=IKsqrt(((1.0)+(((-1.0)*x14307))));
IkReal x14312=((1.0)*r02*x14310*x14311);
j4eval[0]=((IKabs(((((-1.0)*x14309*x14312))+(((-1.0)*x14308*x14312)))))+(IKabs((x14309+x14308))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14314=(cj2*sj1);
IkReal x14315=(gconst25*r11);
IkReal x14316=(cj1*sj2);
IkReal x14317=((1.0)*gconst26);
CheckValue<IkReal> x14318=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst25*r20))+(((-1.0)*r21*x14317)))),-1);
if(!x14318.valid){
continue;
}
CheckValue<IkReal> x14319 = IKatan2WithCheck(IkReal((((x14314*x14315))+(((-1.0)*r10*x14316*x14317))+((x14315*x14316))+(((-1.0)*r10*x14314*x14317)))),IkReal((((r12*x14316))+((r12*x14314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14319.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14318.value)))+(x14319.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14320=IKcos(j4);
IkReal x14321=IKsin(j4);
IkReal x14322=(gconst26*r10);
IkReal x14323=((1.0)*cj2);
IkReal x14324=((1.0)*x14320);
IkReal x14325=(gconst26*x14320);
IkReal x14326=(gconst26*x14321);
IkReal x14327=((1.0)*gconst25*x14321);
evalcond[0]=(((x14320*x14322))+(((-1.0)*gconst25*r11*x14324))+((r12*x14321)));
evalcond[1]=((((-1.0)*r21*x14327))+((r20*x14326))+(((-1.0)*r22*x14324)));
evalcond[2]=(((r00*x14326))+(((-1.0)*r02*x14324))+(((-1.0)*r01*x14327)));
evalcond[3]=((1.0)+((x14321*x14322))+(((-1.0)*r12*x14324))+(((-1.0)*r11*x14327)));
evalcond[4]=(((sj1*sj2))+((r20*x14325))+(((-1.0)*cj1*x14323))+(((-1.0)*gconst25*r21*x14324))+((r22*x14321)));
evalcond[5]=(((r00*x14325))+(((-1.0)*cj1*sj2))+((r02*x14321))+(((-1.0)*sj1*x14323))+(((-1.0)*gconst25*r01*x14324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14328=(gconst25*r11);
IkReal x14329=(gconst26*r10);
CheckValue<IkReal> x14330 = IKatan2WithCheck(IkReal((x14329+(((-1.0)*x14328)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14330.valid){
continue;
}
CheckValue<IkReal> x14331=IKPowWithIntegerCheck(IKsign(((((2.0)*x14328*x14329))+(((-1.0)*(x14328*x14328)))+(((-1.0)*(x14329*x14329)))+(((-1.0)*(r12*r12))))),-1);
if(!x14331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14330.value)+(((1.5707963267949)*(x14331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14332=IKcos(j4);
IkReal x14333=IKsin(j4);
IkReal x14334=(gconst26*r10);
IkReal x14335=((1.0)*cj2);
IkReal x14336=((1.0)*x14332);
IkReal x14337=(gconst26*x14332);
IkReal x14338=(gconst26*x14333);
IkReal x14339=((1.0)*gconst25*x14333);
evalcond[0]=((((-1.0)*gconst25*r11*x14336))+((r12*x14333))+((x14332*x14334)));
evalcond[1]=(((r20*x14338))+(((-1.0)*r22*x14336))+(((-1.0)*r21*x14339)));
evalcond[2]=((((-1.0)*r02*x14336))+((r00*x14338))+(((-1.0)*r01*x14339)));
evalcond[3]=((1.0)+((x14333*x14334))+(((-1.0)*r12*x14336))+(((-1.0)*r11*x14339)));
evalcond[4]=((((-1.0)*cj1*x14335))+((r20*x14337))+((sj1*sj2))+(((-1.0)*gconst25*r21*x14336))+((r22*x14333)));
evalcond[5]=(((r02*x14333))+(((-1.0)*sj1*x14335))+(((-1.0)*cj1*sj2))+((r00*x14337))+(((-1.0)*gconst25*r01*x14336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14340=((1.0)*gconst25);
CheckValue<IkReal> x14341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14340))+(((-1.0)*gconst26*r21)))),-1);
if(!x14341.valid){
continue;
}
CheckValue<IkReal> x14342 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14340))+((gconst26*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14341.value)))+(x14342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14343=IKcos(j4);
IkReal x14344=IKsin(j4);
IkReal x14345=(gconst26*r10);
IkReal x14346=((1.0)*cj2);
IkReal x14347=((1.0)*x14343);
IkReal x14348=(gconst26*x14343);
IkReal x14349=(gconst26*x14344);
IkReal x14350=((1.0)*gconst25*x14344);
evalcond[0]=((((-1.0)*gconst25*r11*x14347))+((x14343*x14345))+((r12*x14344)));
evalcond[1]=((((-1.0)*r21*x14350))+(((-1.0)*r22*x14347))+((r20*x14349)));
evalcond[2]=(((r00*x14349))+(((-1.0)*r01*x14350))+(((-1.0)*r02*x14347)));
evalcond[3]=((1.0)+(((-1.0)*r12*x14347))+((x14344*x14345))+(((-1.0)*r11*x14350)));
evalcond[4]=((((-1.0)*gconst25*r21*x14347))+((r22*x14344))+((sj1*sj2))+(((-1.0)*cj1*x14346))+((r20*x14348)));
evalcond[5]=((((-1.0)*gconst25*r01*x14347))+((r00*x14348))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14346))+((r02*x14344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14351=((-1.0)*r01);
CheckValue<IkReal> x14353 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14353.valid){
continue;
}
IkReal x14352=((-1.0)*(x14353.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14352;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x14351);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x14352;
IkReal gconst25=x14351;
IkReal gconst26=r00;
IkReal x14354=(r00*r10);
IkReal x14355=((1.0)*sj3);
IkReal x14356=(r01*r11);
j4eval[0]=(x14356+x14354);
j4eval[1]=((((-1.0)*x14354*x14355))+(((-1.0)*x14355*x14356)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14357=((-1.0)*r01);
CheckValue<IkReal> x14359 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14359.valid){
continue;
}
IkReal x14358=((-1.0)*(x14359.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14358;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x14357);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x14358;
IkReal gconst25=x14357;
IkReal gconst26=r00;
IkReal x14360=(r01*r11);
IkReal x14361=(r00*r10);
IkReal x14362=((1.0)*cj3);
j4eval[0]=(x14361+x14360);
j4eval[1]=((((-1.0)*x14361*x14362))+(((-1.0)*x14360*x14362)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14363=((-1.0)*r01);
CheckValue<IkReal> x14365 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14365.valid){
continue;
}
IkReal x14364=((-1.0)*(x14365.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x14364;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=((-1.0)*pz*r00);
rxp1_0=(pz*r11);
rxp1_1=(pz*x14363);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst24=x14364;
IkReal gconst25=x14363;
IkReal gconst26=r00;
IkReal x14366=((1.0)*cj3);
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=((((-1.0)*r00*r10*x14366))+(((-1.0)*r01*r11*x14366)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14367=((1.0)*r10);
CheckValue<IkReal> x14368=IKPowWithIntegerCheck(r22,-1);
if(!x14368.valid){
continue;
}
CheckValue<IkReal> x14369=IKPowWithIntegerCheck(sj3,-1);
if(!x14369.valid){
continue;
}
CheckValue<IkReal> x14370=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst26*x14367))+((cj3*gconst25*r11))),-1);
if(!x14370.valid){
continue;
}
if( IKabs(((x14368.value)*(x14369.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14370.value)*(((((-1.0)*gconst25*sj3*x14367))+(((-1.0)*gconst26*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14368.value)*(x14369.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14370.value)*(((((-1.0)*gconst25*sj3*x14367))+(((-1.0)*gconst26*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14368.value)*(x14369.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14370.value)*(((((-1.0)*gconst25*sj3*x14367))+(((-1.0)*gconst26*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14371=IKsin(j4);
IkReal x14372=IKcos(j4);
IkReal x14373=(gconst26*sj3);
IkReal x14374=(gconst26*r10);
IkReal x14375=(gconst25*sj3);
IkReal x14376=(sj1*sj2);
IkReal x14377=(gconst25*r11);
IkReal x14378=((1.0)*cj2);
IkReal x14379=(gconst25*r01);
IkReal x14380=((1.0)*r00);
IkReal x14381=((1.0)*r10);
IkReal x14382=(cj3*gconst25);
IkReal x14383=((1.0)*cj1*sj2);
IkReal x14384=(sj1*x14378);
IkReal x14385=(cj3*x14372);
IkReal x14386=((1.0)*x14371);
IkReal x14387=((1.0)*cj3*gconst26);
IkReal x14388=(x14383+x14384);
evalcond[0]=((-1.0)*r22*x14372);
evalcond[1]=((((-1.0)*x14379*x14386))+((gconst26*r00*x14371)));
evalcond[2]=((1.0)+(((-1.0)*x14377*x14386))+((x14371*x14374)));
evalcond[3]=((((-1.0)*r22*sj3*x14386))+(((-1.0)*cj1*x14378))+x14376);
evalcond[4]=((((-1.0)*x14388))+(((-1.0)*cj3*r22*x14386)));
evalcond[5]=((((-1.0)*x14374*x14385))+((x14377*x14385))+((r10*x14375))+((r11*x14373)));
evalcond[6]=((((-1.0)*x14372*x14373*x14381))+(((-1.0)*r11*x14387))+((r11*x14372*x14375))+(((-1.0)*x14381*x14382)));
evalcond[7]=(((r01*x14373))+((r00*x14375))+((x14379*x14385))+(((-1.0)*x14376))+(((-1.0)*gconst26*x14380*x14385))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x14388))+(((-1.0)*x14372*x14373*x14380))+(((-1.0)*x14380*x14382))+(((-1.0)*r01*x14387))+((r01*x14372*x14375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14389=(gconst26*r10);
IkReal x14390=((1.0)*gconst25);
CheckValue<IkReal> x14391=IKPowWithIntegerCheck(((((-1.0)*r11*x14390))+x14389),-1);
if(!x14391.valid){
continue;
}
CheckValue<IkReal> x14392=IKPowWithIntegerCheck((((cj3*gconst25*r11))+(((-1.0)*cj3*x14389))),-1);
if(!x14392.valid){
continue;
}
if( IKabs(((-1.0)*(x14391.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14392.value)*(((((-1.0)*gconst26*r11*sj3))+(((-1.0)*r10*sj3*x14390)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14391.value)))+IKsqr(((x14392.value)*(((((-1.0)*gconst26*r11*sj3))+(((-1.0)*r10*sj3*x14390))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14391.value)), ((x14392.value)*(((((-1.0)*gconst26*r11*sj3))+(((-1.0)*r10*sj3*x14390))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14393=IKsin(j4);
IkReal x14394=IKcos(j4);
IkReal x14395=(gconst26*sj3);
IkReal x14396=(gconst26*r10);
IkReal x14397=(gconst25*sj3);
IkReal x14398=(sj1*sj2);
IkReal x14399=(gconst25*r11);
IkReal x14400=((1.0)*cj2);
IkReal x14401=(gconst25*r01);
IkReal x14402=((1.0)*r00);
IkReal x14403=((1.0)*r10);
IkReal x14404=(cj3*gconst25);
IkReal x14405=((1.0)*cj1*sj2);
IkReal x14406=(sj1*x14400);
IkReal x14407=(cj3*x14394);
IkReal x14408=((1.0)*x14393);
IkReal x14409=((1.0)*cj3*gconst26);
IkReal x14410=(x14406+x14405);
evalcond[0]=((-1.0)*r22*x14394);
evalcond[1]=((((-1.0)*x14401*x14408))+((gconst26*r00*x14393)));
evalcond[2]=((1.0)+((x14393*x14396))+(((-1.0)*x14399*x14408)));
evalcond[3]=((((-1.0)*r22*sj3*x14408))+(((-1.0)*cj1*x14400))+x14398);
evalcond[4]=((((-1.0)*x14410))+(((-1.0)*cj3*r22*x14408)));
evalcond[5]=((((-1.0)*x14396*x14407))+((x14399*x14407))+((r10*x14397))+((r11*x14395)));
evalcond[6]=(((r11*x14394*x14397))+(((-1.0)*x14394*x14395*x14403))+(((-1.0)*x14403*x14404))+(((-1.0)*r11*x14409)));
evalcond[7]=((((-1.0)*x14398))+((r01*x14395))+((x14401*x14407))+((r00*x14397))+(((-1.0)*gconst26*x14402*x14407))+((cj1*cj2)));
evalcond[8]=((((-1.0)*x14410))+(((-1.0)*x14402*x14404))+((r01*x14394*x14397))+(((-1.0)*r01*x14409))+(((-1.0)*x14394*x14395*x14402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14411=(gconst25*r11);
IkReal x14412=(gconst26*r10);
CheckValue<IkReal> x14413=IKPowWithIntegerCheck(((((-1.0)*x14411))+x14412),-1);
if(!x14413.valid){
continue;
}
CheckValue<IkReal> x14414=IKPowWithIntegerCheck((((sj3*x14411))+(((-1.0)*sj3*x14412))),-1);
if(!x14414.valid){
continue;
}
if( IKabs(((-1.0)*(x14413.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14414.value)*((((cj3*gconst25*r10))+((cj3*gconst26*r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14413.value)))+IKsqr(((x14414.value)*((((cj3*gconst25*r10))+((cj3*gconst26*r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14413.value)), ((x14414.value)*((((cj3*gconst25*r10))+((cj3*gconst26*r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14415=IKsin(j4);
IkReal x14416=IKcos(j4);
IkReal x14417=(gconst26*sj3);
IkReal x14418=(gconst26*r10);
IkReal x14419=(gconst25*sj3);
IkReal x14420=(sj1*sj2);
IkReal x14421=(gconst25*r11);
IkReal x14422=((1.0)*cj2);
IkReal x14423=(gconst25*r01);
IkReal x14424=((1.0)*r00);
IkReal x14425=((1.0)*r10);
IkReal x14426=(cj3*gconst25);
IkReal x14427=((1.0)*cj1*sj2);
IkReal x14428=(sj1*x14422);
IkReal x14429=(cj3*x14416);
IkReal x14430=((1.0)*x14415);
IkReal x14431=((1.0)*cj3*gconst26);
IkReal x14432=(x14427+x14428);
evalcond[0]=((-1.0)*r22*x14416);
evalcond[1]=((((-1.0)*x14423*x14430))+((gconst26*r00*x14415)));
evalcond[2]=((1.0)+(((-1.0)*x14421*x14430))+((x14415*x14418)));
evalcond[3]=((((-1.0)*cj1*x14422))+x14420+(((-1.0)*r22*sj3*x14430)));
evalcond[4]=((((-1.0)*x14432))+(((-1.0)*cj3*r22*x14430)));
evalcond[5]=(((r11*x14417))+(((-1.0)*x14418*x14429))+((x14421*x14429))+((r10*x14419)));
evalcond[6]=((((-1.0)*x14416*x14417*x14425))+(((-1.0)*x14425*x14426))+((r11*x14416*x14419))+(((-1.0)*r11*x14431)));
evalcond[7]=(((x14423*x14429))+((r00*x14419))+((r01*x14417))+(((-1.0)*x14420))+((cj1*cj2))+(((-1.0)*gconst26*x14424*x14429)));
evalcond[8]=((((-1.0)*x14432))+(((-1.0)*x14416*x14417*x14424))+((r01*x14416*x14419))+(((-1.0)*x14424*x14426))+(((-1.0)*r01*x14431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14433=gconst25*gconst25;
IkReal x14434=gconst26*gconst26;
IkReal x14435=(gconst26*r21);
IkReal x14436=(cj3*r22);
IkReal x14437=(cj3*r11);
IkReal x14438=((1.0)*r20);
IkReal x14439=(r11*sj3);
IkReal x14440=((1.0)*gconst25*r10);
IkReal x14441=(r21*x14433);
CheckValue<IkReal> x14442=IKPowWithIntegerCheck(IKsign((((x14439*x14441))+((r10*r20*sj3*x14434))+(((-1.0)*gconst25*gconst26*x14438*x14439))+(((-1.0)*sj3*x14435*x14440))+((r12*r22*sj3)))),-1);
if(!x14442.valid){
continue;
}
CheckValue<IkReal> x14443 = IKatan2WithCheck(IkReal(((((-1.0)*x14436*x14440))+(((-1.0)*gconst26*r11*x14436)))),IkReal(((((-1.0)*cj3*gconst25*gconst26*r10*x14438))+((cj3*r10*x14441))+((gconst25*x14435*x14437))+(((-1.0)*x14434*x14437*x14438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14442.value)))+(x14443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14444=IKsin(j4);
IkReal x14445=IKcos(j4);
IkReal x14446=(gconst25*r21);
IkReal x14447=(gconst26*sj3);
IkReal x14448=(cj3*gconst26);
IkReal x14449=(gconst25*sj3);
IkReal x14450=(sj1*sj2);
IkReal x14451=(gconst25*r11);
IkReal x14452=((1.0)*cj1);
IkReal x14453=(gconst25*r01);
IkReal x14454=(sj2*x14452);
IkReal x14455=((1.0)*cj2*sj1);
IkReal x14456=((1.0)*x14445);
IkReal x14457=((1.0)*x14444);
IkReal x14458=(gconst26*x14444);
IkReal x14459=((1.0)*cj3*gconst25);
IkReal x14460=(cj3*x14445);
IkReal x14461=(x14455+x14454);
evalcond[0]=((((-1.0)*x14446*x14457))+((r20*x14458))+(((-1.0)*r22*x14456)));
evalcond[1]=(((r00*x14458))+(((-1.0)*x14453*x14457))+(((-1.0)*r02*x14456)));
evalcond[2]=((1.0)+((r10*x14458))+(((-1.0)*x14451*x14457))+(((-1.0)*r12*x14456)));
evalcond[3]=((((-1.0)*r10*x14448*x14456))+((r10*x14449))+((r11*x14447))+((x14451*x14460))+(((-1.0)*cj3*r12*x14457)));
evalcond[4]=(((r11*x14445*x14449))+(((-1.0)*r10*x14447*x14456))+(((-1.0)*r12*sj3*x14457))+(((-1.0)*r11*x14448))+(((-1.0)*r10*x14459)));
evalcond[5]=((((-1.0)*cj3*r02*x14457))+(((-1.0)*r00*x14448*x14456))+((r01*x14447))+((r00*x14449))+(((-1.0)*x14450))+((cj1*cj2))+((x14453*x14460)));
evalcond[6]=(((x14446*x14460))+((r20*x14449))+(((-1.0)*x14461))+(((-1.0)*cj3*r22*x14457))+(((-1.0)*r20*x14448*x14456))+((r21*x14447)));
evalcond[7]=((((-1.0)*r21*x14448))+(((-1.0)*r20*x14447*x14456))+(((-1.0)*r22*sj3*x14457))+x14450+(((-1.0)*r20*x14459))+(((-1.0)*cj2*x14452))+((sj3*x14445*x14446)));
evalcond[8]=((((-1.0)*r00*x14459))+(((-1.0)*r00*x14447*x14456))+(((-1.0)*x14461))+(((-1.0)*r01*x14448))+(((-1.0)*r02*sj3*x14457))+((r01*x14445*x14449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14462=gconst25*gconst25;
IkReal x14463=gconst26*gconst26;
IkReal x14464=(r20*sj3);
IkReal x14465=(gconst25*r10);
IkReal x14466=(r22*sj3);
IkReal x14467=((1.0)*sj3);
IkReal x14468=(cj3*r11);
IkReal x14469=(gconst26*r21);
IkReal x14470=(r21*x14462);
CheckValue<IkReal> x14471=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*cj3*x14465*x14469))+(((-1.0)*gconst25*gconst26*r20*x14468))+((cj3*r10*r20*x14463))+((x14468*x14470)))),-1);
if(!x14471.valid){
continue;
}
CheckValue<IkReal> x14472 = IKatan2WithCheck(IkReal((((gconst26*r11*x14466))+((x14465*x14466)))),IkReal((((gconst26*x14464*x14465))+((r11*x14463*x14464))+(((-1.0)*gconst25*r11*x14467*x14469))+(((-1.0)*r10*x14467*x14470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14471.value)))+(x14472.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14473=IKsin(j4);
IkReal x14474=IKcos(j4);
IkReal x14475=(gconst25*r21);
IkReal x14476=(gconst26*sj3);
IkReal x14477=(cj3*gconst26);
IkReal x14478=(gconst25*sj3);
IkReal x14479=(sj1*sj2);
IkReal x14480=(gconst25*r11);
IkReal x14481=((1.0)*cj1);
IkReal x14482=(gconst25*r01);
IkReal x14483=(sj2*x14481);
IkReal x14484=((1.0)*cj2*sj1);
IkReal x14485=((1.0)*x14474);
IkReal x14486=((1.0)*x14473);
IkReal x14487=(gconst26*x14473);
IkReal x14488=((1.0)*cj3*gconst25);
IkReal x14489=(cj3*x14474);
IkReal x14490=(x14484+x14483);
evalcond[0]=((((-1.0)*r22*x14485))+(((-1.0)*x14475*x14486))+((r20*x14487)));
evalcond[1]=((((-1.0)*r02*x14485))+((r00*x14487))+(((-1.0)*x14482*x14486)));
evalcond[2]=((1.0)+(((-1.0)*x14480*x14486))+((r10*x14487))+(((-1.0)*r12*x14485)));
evalcond[3]=((((-1.0)*r10*x14477*x14485))+((r10*x14478))+((x14480*x14489))+(((-1.0)*cj3*r12*x14486))+((r11*x14476)));
evalcond[4]=((((-1.0)*r11*x14477))+(((-1.0)*r10*x14476*x14485))+((r11*x14474*x14478))+(((-1.0)*r10*x14488))+(((-1.0)*r12*sj3*x14486)));
evalcond[5]=((((-1.0)*r00*x14477*x14485))+((x14482*x14489))+((r00*x14478))+((r01*x14476))+(((-1.0)*x14479))+(((-1.0)*cj3*r02*x14486))+((cj1*cj2)));
evalcond[6]=((((-1.0)*x14490))+((r21*x14476))+((x14475*x14489))+(((-1.0)*r20*x14477*x14485))+((r20*x14478))+(((-1.0)*cj3*r22*x14486)));
evalcond[7]=((((-1.0)*r20*x14488))+(((-1.0)*r22*sj3*x14486))+x14479+(((-1.0)*r20*x14476*x14485))+(((-1.0)*r21*x14477))+(((-1.0)*cj2*x14481))+((sj3*x14474*x14475)));
evalcond[8]=(((r01*x14474*x14478))+(((-1.0)*r02*sj3*x14486))+(((-1.0)*r00*x14476*x14485))+(((-1.0)*r01*x14477))+(((-1.0)*x14490))+(((-1.0)*r00*x14488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14491=((1.0)*gconst25);
CheckValue<IkReal> x14492 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14491))+((gconst26*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14492.valid){
continue;
}
CheckValue<IkReal> x14493=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst26*r21))+(((-1.0)*r20*x14491)))),-1);
if(!x14493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14492.value)+(((1.5707963267949)*(x14493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14494=IKsin(j4);
IkReal x14495=IKcos(j4);
IkReal x14496=(gconst25*r21);
IkReal x14497=(gconst26*sj3);
IkReal x14498=(cj3*gconst26);
IkReal x14499=(gconst25*sj3);
IkReal x14500=(sj1*sj2);
IkReal x14501=(gconst25*r11);
IkReal x14502=((1.0)*cj1);
IkReal x14503=(gconst25*r01);
IkReal x14504=(sj2*x14502);
IkReal x14505=((1.0)*cj2*sj1);
IkReal x14506=((1.0)*x14495);
IkReal x14507=((1.0)*x14494);
IkReal x14508=(gconst26*x14494);
IkReal x14509=((1.0)*cj3*gconst25);
IkReal x14510=(cj3*x14495);
IkReal x14511=(x14505+x14504);
evalcond[0]=(((r20*x14508))+(((-1.0)*x14496*x14507))+(((-1.0)*r22*x14506)));
evalcond[1]=((((-1.0)*r02*x14506))+(((-1.0)*x14503*x14507))+((r00*x14508)));
evalcond[2]=((1.0)+(((-1.0)*x14501*x14507))+(((-1.0)*r12*x14506))+((r10*x14508)));
evalcond[3]=(((r10*x14499))+((r11*x14497))+(((-1.0)*cj3*r12*x14507))+((x14501*x14510))+(((-1.0)*r10*x14498*x14506)));
evalcond[4]=((((-1.0)*r10*x14497*x14506))+(((-1.0)*r11*x14498))+((r11*x14495*x14499))+(((-1.0)*r10*x14509))+(((-1.0)*r12*sj3*x14507)));
evalcond[5]=(((x14503*x14510))+(((-1.0)*x14500))+((r00*x14499))+(((-1.0)*r00*x14498*x14506))+((cj1*cj2))+((r01*x14497))+(((-1.0)*cj3*r02*x14507)));
evalcond[6]=(((r21*x14497))+(((-1.0)*cj3*r22*x14507))+((x14496*x14510))+(((-1.0)*r20*x14498*x14506))+(((-1.0)*x14511))+((r20*x14499)));
evalcond[7]=((((-1.0)*r20*x14497*x14506))+((sj3*x14495*x14496))+(((-1.0)*r21*x14498))+(((-1.0)*r20*x14509))+x14500+(((-1.0)*cj2*x14502))+(((-1.0)*r22*sj3*x14507)));
evalcond[8]=((((-1.0)*x14511))+(((-1.0)*r00*x14509))+(((-1.0)*r01*x14498))+((r01*x14495*x14499))+(((-1.0)*r02*sj3*x14507))+(((-1.0)*r00*x14497*x14506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14513 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14513)==0){
continue;
}
IkReal x14512=pow(x14513,-0.5);
CheckValue<IkReal> x14514 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14514.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x14514.value))));
IkReal gconst28=((1.0)*r01*x14512);
IkReal gconst29=((-1.0)*r00*x14512);
CheckValue<IkReal> x14515 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14515.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14515.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14518 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14518.valid){
continue;
}
IkReal x14516=((1.0)*(x14518.value));
IkReal x14517=x14512;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14516)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14516)));
IkReal gconst28=((1.0)*r01*x14517);
IkReal gconst29=((-1.0)*r00*x14517);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14521 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14521.valid){
continue;
}
IkReal x14519=((1.0)*(x14521.value));
IkReal x14520=x14512;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x14519)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x14519)));
IkReal gconst28=((1.0)*r01*x14520);
IkReal gconst29=((-1.0)*r00*x14520);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14522=gconst29*gconst29;
IkReal x14523=gconst28*gconst28;
IkReal x14524=((1.0)*r10);
IkReal x14525=(cj3*r11);
IkReal x14526=(r20*sj3);
IkReal x14527=(gconst28*gconst29);
IkReal x14528=(r11*sj3);
IkReal x14529=(r21*x14523);
CheckValue<IkReal> x14530=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*r20*x14525*x14527))+(((-1.0)*cj3*r21*x14524*x14527))+((x14525*x14529))+((cj3*r10*r20*x14522)))),-1);
if(!x14530.valid){
continue;
}
CheckValue<IkReal> x14531 = IKatan2WithCheck(IkReal((((gconst28*r10*r22*sj3))+((gconst29*r22*x14528)))),IkReal((((r11*x14522*x14526))+(((-1.0)*r21*x14527*x14528))+((r10*x14526*x14527))+(((-1.0)*sj3*x14524*x14529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14530.value)))+(x14531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14532=IKsin(j4);
IkReal x14533=IKcos(j4);
IkReal x14534=((1.0)*r22);
IkReal x14535=((1.0)*sj3);
IkReal x14536=(gconst29*sj3);
IkReal x14537=(gconst28*sj3);
IkReal x14538=(sj1*sj2);
IkReal x14539=(gconst29*r10);
IkReal x14540=((1.0)*cj2);
IkReal x14541=(cj3*gconst28);
IkReal x14542=((1.0)*r20);
IkReal x14543=((1.0)*r11);
IkReal x14544=(cj3*gconst29);
IkReal x14545=((1.0)*cj3);
IkReal x14546=((1.0)*r21);
IkReal x14547=((1.0)*r01);
IkReal x14548=((1.0)*cj1*sj2);
IkReal x14549=(sj1*x14540);
IkReal x14550=(r12*x14532);
IkReal x14551=(r21*x14533);
IkReal x14552=(cj3*x14532);
IkReal x14553=(gconst29*x14533);
IkReal x14554=((1.0)*x14533);
IkReal x14555=(r01*x14533);
IkReal x14556=(gconst28*x14532);
IkReal x14557=(r11*x14533);
IkReal x14558=(gconst29*x14532);
IkReal x14559=(x14549+x14548);
evalcond[0]=((((-1.0)*x14546*x14556))+((r20*x14558))+(((-1.0)*x14533*x14534)));
evalcond[1]=((((-1.0)*r02*x14554))+((r00*x14558))+(((-1.0)*x14547*x14556)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14554))+((x14532*x14539))+(((-1.0)*x14543*x14556)));
evalcond[3]=((((-1.0)*x14545*x14550))+(((-1.0)*x14533*x14539*x14545))+((r11*x14536))+((x14541*x14557))+((r10*x14537)));
evalcond[4]=(((x14537*x14557))+(((-1.0)*x14543*x14544))+(((-1.0)*x14533*x14535*x14539))+(((-1.0)*x14535*x14550))+(((-1.0)*r10*x14541)));
evalcond[5]=((((-1.0)*x14538))+((r00*x14537))+((r01*x14536))+(((-1.0)*r00*x14544*x14554))+(((-1.0)*r02*x14532*x14545))+((x14541*x14555))+((cj1*cj2)));
evalcond[6]=(((r21*x14536))+(((-1.0)*x14533*x14542*x14544))+(((-1.0)*x14534*x14552))+(((-1.0)*x14559))+((x14541*x14551))+((r20*x14537)));
evalcond[7]=((((-1.0)*r20*x14535*x14553))+((x14537*x14551))+(((-1.0)*sj3*x14532*x14534))+(((-1.0)*cj1*x14540))+x14538+(((-1.0)*x14541*x14542))+(((-1.0)*x14544*x14546)));
evalcond[8]=((((-1.0)*r00*x14541))+((x14537*x14555))+(((-1.0)*r02*x14532*x14535))+(((-1.0)*x14559))+(((-1.0)*r00*x14535*x14553))+(((-1.0)*x14544*x14547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14560=((1.0)*gconst28);
CheckValue<IkReal> x14561 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14560))+((gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14561.valid){
continue;
}
CheckValue<IkReal> x14562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14560))+(((-1.0)*gconst29*r21)))),-1);
if(!x14562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14561.value)+(((1.5707963267949)*(x14562.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14563=IKsin(j4);
IkReal x14564=IKcos(j4);
IkReal x14565=((1.0)*r22);
IkReal x14566=((1.0)*sj3);
IkReal x14567=(gconst29*sj3);
IkReal x14568=(gconst28*sj3);
IkReal x14569=(sj1*sj2);
IkReal x14570=(gconst29*r10);
IkReal x14571=((1.0)*cj2);
IkReal x14572=(cj3*gconst28);
IkReal x14573=((1.0)*r20);
IkReal x14574=((1.0)*r11);
IkReal x14575=(cj3*gconst29);
IkReal x14576=((1.0)*cj3);
IkReal x14577=((1.0)*r21);
IkReal x14578=((1.0)*r01);
IkReal x14579=((1.0)*cj1*sj2);
IkReal x14580=(sj1*x14571);
IkReal x14581=(r12*x14563);
IkReal x14582=(r21*x14564);
IkReal x14583=(cj3*x14563);
IkReal x14584=(gconst29*x14564);
IkReal x14585=((1.0)*x14564);
IkReal x14586=(r01*x14564);
IkReal x14587=(gconst28*x14563);
IkReal x14588=(r11*x14564);
IkReal x14589=(gconst29*x14563);
IkReal x14590=(x14579+x14580);
evalcond[0]=(((r20*x14589))+(((-1.0)*x14577*x14587))+(((-1.0)*x14564*x14565)));
evalcond[1]=((((-1.0)*x14578*x14587))+(((-1.0)*r02*x14585))+((r00*x14589)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14585))+((x14563*x14570))+(((-1.0)*x14574*x14587)));
evalcond[3]=(((x14572*x14588))+(((-1.0)*x14576*x14581))+((r11*x14567))+(((-1.0)*x14564*x14570*x14576))+((r10*x14568)));
evalcond[4]=(((x14568*x14588))+(((-1.0)*r10*x14572))+(((-1.0)*x14566*x14581))+(((-1.0)*x14574*x14575))+(((-1.0)*x14564*x14566*x14570)));
evalcond[5]=(((r01*x14567))+((x14572*x14586))+(((-1.0)*r02*x14563*x14576))+(((-1.0)*r00*x14575*x14585))+(((-1.0)*x14569))+((cj1*cj2))+((r00*x14568)));
evalcond[6]=(((r21*x14567))+(((-1.0)*x14590))+((x14572*x14582))+((r20*x14568))+(((-1.0)*x14565*x14583))+(((-1.0)*x14564*x14573*x14575)));
evalcond[7]=(((x14568*x14582))+(((-1.0)*cj1*x14571))+(((-1.0)*r20*x14566*x14584))+(((-1.0)*x14572*x14573))+x14569+(((-1.0)*sj3*x14563*x14565))+(((-1.0)*x14575*x14577)));
evalcond[8]=(((x14568*x14586))+(((-1.0)*x14590))+(((-1.0)*r02*x14563*x14566))+(((-1.0)*r00*x14566*x14584))+(((-1.0)*r00*x14572))+(((-1.0)*x14575*x14578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14591 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst28*r21))+((gconst29*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14591.valid){
continue;
}
CheckValue<IkReal> x14592=IKPowWithIntegerCheck(IKsign((((gconst29*r01))+((gconst28*r00)))),-1);
if(!x14592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14591.value)+(((1.5707963267949)*(x14592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14593=IKsin(j4);
IkReal x14594=IKcos(j4);
IkReal x14595=((1.0)*r22);
IkReal x14596=((1.0)*sj3);
IkReal x14597=(gconst29*sj3);
IkReal x14598=(gconst28*sj3);
IkReal x14599=(sj1*sj2);
IkReal x14600=(gconst29*r10);
IkReal x14601=((1.0)*cj2);
IkReal x14602=(cj3*gconst28);
IkReal x14603=((1.0)*r20);
IkReal x14604=((1.0)*r11);
IkReal x14605=(cj3*gconst29);
IkReal x14606=((1.0)*cj3);
IkReal x14607=((1.0)*r21);
IkReal x14608=((1.0)*r01);
IkReal x14609=((1.0)*cj1*sj2);
IkReal x14610=(sj1*x14601);
IkReal x14611=(r12*x14593);
IkReal x14612=(r21*x14594);
IkReal x14613=(cj3*x14593);
IkReal x14614=(gconst29*x14594);
IkReal x14615=((1.0)*x14594);
IkReal x14616=(r01*x14594);
IkReal x14617=(gconst28*x14593);
IkReal x14618=(r11*x14594);
IkReal x14619=(gconst29*x14593);
IkReal x14620=(x14610+x14609);
evalcond[0]=((((-1.0)*x14594*x14595))+(((-1.0)*x14607*x14617))+((r20*x14619)));
evalcond[1]=(((r00*x14619))+(((-1.0)*r02*x14615))+(((-1.0)*x14608*x14617)));
evalcond[2]=((1.0)+(((-1.0)*x14604*x14617))+((x14593*x14600))+(((-1.0)*r12*x14615)));
evalcond[3]=(((x14602*x14618))+((r10*x14598))+(((-1.0)*x14606*x14611))+(((-1.0)*x14594*x14600*x14606))+((r11*x14597)));
evalcond[4]=((((-1.0)*x14604*x14605))+(((-1.0)*x14594*x14596*x14600))+((x14598*x14618))+(((-1.0)*r10*x14602))+(((-1.0)*x14596*x14611)));
evalcond[5]=(((x14602*x14616))+(((-1.0)*x14599))+(((-1.0)*r02*x14593*x14606))+((r01*x14597))+((cj1*cj2))+(((-1.0)*r00*x14605*x14615))+((r00*x14598)));
evalcond[6]=(((r20*x14598))+(((-1.0)*x14620))+((x14602*x14612))+(((-1.0)*x14595*x14613))+((r21*x14597))+(((-1.0)*x14594*x14603*x14605)));
evalcond[7]=((((-1.0)*sj3*x14593*x14595))+(((-1.0)*cj1*x14601))+x14599+((x14598*x14612))+(((-1.0)*x14605*x14607))+(((-1.0)*r20*x14596*x14614))+(((-1.0)*x14602*x14603)));
evalcond[8]=((((-1.0)*x14620))+(((-1.0)*r02*x14593*x14596))+(((-1.0)*r00*x14602))+((x14598*x14616))+(((-1.0)*x14605*x14608))+(((-1.0)*r00*x14596*x14614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14621=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14621);
rxp1_1=(px*r21);
rxp1_2=(r11*x14621);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14622=(cj5*r10);
IkReal x14623=(r11*sj5);
j4eval[0]=(x14622+(((-1.0)*x14623)));
j4eval[1]=(((sj3*x14623))+(((-1.0)*sj3*x14622)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14624=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14624);
rxp1_1=(px*r21);
rxp1_2=(r11*x14624);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14625=(r11*sj5);
IkReal x14626=(cj5*r10);
j4eval[0]=(x14626+(((-1.0)*x14625)));
j4eval[1]=(((cj3*x14625))+(((-1.0)*cj3*x14626)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14627=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14627);
rxp1_1=(px*r21);
rxp1_2=(r11*x14627);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14628=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14628);
rxp1_1=(px*r21);
rxp1_2=(r11*x14628);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14629=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14629);
rxp1_1=(px*r21);
rxp1_2=(r11*x14629);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14630=IKPowWithIntegerCheck(r02,-1);
if(!x14630.valid){
continue;
}
CheckValue<IkReal> x14631=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14631.valid){
continue;
}
if( IKabs(((x14630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14631.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14631.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14630.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14631.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14632=IKsin(j4);
IkReal x14633=IKcos(j4);
IkReal x14634=(r11*sj5);
IkReal x14635=(r21*sj5);
IkReal x14636=((1.0)*sj2);
IkReal x14637=((1.0)*x14632);
IkReal x14638=(cj5*x14632);
IkReal x14639=((1.0)*cj5*x14633);
evalcond[0]=((-1.0)*r02*x14633);
evalcond[1]=(((r20*x14638))+(((-1.0)*x14635*x14637)));
evalcond[2]=((((-1.0)*sj1*x14636))+((cj1*cj2))+(((-1.0)*r02*x14637)));
evalcond[3]=(((x14633*x14634))+(((-1.0)*r10*x14639)));
evalcond[4]=((1.0)+((r10*x14638))+(((-1.0)*x14634*x14637)));
evalcond[5]=(((x14633*x14635))+(((-1.0)*r20*x14639))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x14636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14640=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14640.valid){
continue;
}
CheckValue<IkReal> x14641=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14641.valid){
continue;
}
if( IKabs(((-1.0)*(x14640.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14641.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14640.value)))+IKsqr(((x14641.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14640.value)), ((x14641.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14642=IKsin(j4);
IkReal x14643=IKcos(j4);
IkReal x14644=(r11*sj5);
IkReal x14645=(r21*sj5);
IkReal x14646=((1.0)*sj2);
IkReal x14647=((1.0)*x14642);
IkReal x14648=(cj5*x14642);
IkReal x14649=((1.0)*cj5*x14643);
evalcond[0]=((-1.0)*r02*x14643);
evalcond[1]=(((r20*x14648))+(((-1.0)*x14645*x14647)));
evalcond[2]=((((-1.0)*r02*x14647))+((cj1*cj2))+(((-1.0)*sj1*x14646)));
evalcond[3]=((((-1.0)*r10*x14649))+((x14643*x14644)));
evalcond[4]=((1.0)+((r10*x14648))+(((-1.0)*x14644*x14647)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x14646))+((x14643*x14645))+(((-1.0)*r20*x14649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14650=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14650);
rxp1_1=(px*r21);
rxp1_2=(r11*x14650);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14651=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14651);
rxp1_1=(px*r21);
rxp1_2=(r11*x14651);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14652=((1.0)*sj5);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*x14652)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*x14652)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14653=((1.0)*sj5);
CheckValue<IkReal> x14654=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*x14653))),-1);
if(!x14654.valid){
continue;
}
CheckValue<IkReal> x14655=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*x14653))),-1);
if(!x14655.valid){
continue;
}
if( IKabs(((-1.0)*(x14654.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14655.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14654.value)))+IKsqr(((x14655.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14654.value)), ((x14655.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14656=IKsin(j4);
IkReal x14657=IKcos(j4);
IkReal x14658=((1.0)*sj2);
IkReal x14659=((1.0)*r11*sj5);
IkReal x14660=(cj5*x14657);
IkReal x14661=((1.0)*r21*sj5);
IkReal x14662=(cj5*x14656);
evalcond[0]=((-1.0)*r02*x14657);
evalcond[1]=(((cj1*cj2))+((r02*x14656))+(((-1.0)*sj1*x14658)));
evalcond[2]=((((-1.0)*x14656*x14661))+((r20*x14662)));
evalcond[3]=(((r10*x14660))+(((-1.0)*x14657*x14659)));
evalcond[4]=((1.0)+((r10*x14662))+(((-1.0)*x14656*x14659)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*x14658))+(((-1.0)*x14657*x14661))+((r20*x14660)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14663=IKPowWithIntegerCheck(r02,-1);
if(!x14663.valid){
continue;
}
CheckValue<IkReal> x14664=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x14664.valid){
continue;
}
if( IKabs(((x14663.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14664.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14663.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14664.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14663.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14664.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14665=IKsin(j4);
IkReal x14666=IKcos(j4);
IkReal x14667=((1.0)*sj2);
IkReal x14668=((1.0)*r11*sj5);
IkReal x14669=(cj5*x14666);
IkReal x14670=((1.0)*r21*sj5);
IkReal x14671=(cj5*x14665);
evalcond[0]=((-1.0)*r02*x14666);
evalcond[1]=(((r02*x14665))+(((-1.0)*sj1*x14667))+((cj1*cj2)));
evalcond[2]=((((-1.0)*x14665*x14670))+((r20*x14671)));
evalcond[3]=(((r10*x14669))+(((-1.0)*x14666*x14668)));
evalcond[4]=((1.0)+((r10*x14671))+(((-1.0)*x14665*x14668)));
evalcond[5]=((((-1.0)*x14666*x14670))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*x14667))+((r20*x14669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14672=((1.0)*r10);
CheckValue<IkReal> x14673=IKPowWithIntegerCheck(cj3,-1);
if(!x14673.valid){
continue;
}
CheckValue<IkReal> x14674=IKPowWithIntegerCheck(r02,-1);
if(!x14674.valid){
continue;
}
CheckValue<IkReal> x14675=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14672))+((cj3*r11*sj5))),-1);
if(!x14675.valid){
continue;
}
if( IKabs(((x14673.value)*(x14674.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14675.value)*(((((-1.0)*sj3*sj5*x14672))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14673.value)*(x14674.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x14675.value)*(((((-1.0)*sj3*sj5*x14672))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14673.value)*(x14674.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x14675.value)*(((((-1.0)*sj3*sj5*x14672))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14676=IKsin(j4);
IkReal x14677=IKcos(j4);
IkReal x14678=(r11*sj5);
IkReal x14679=(sj1*sj2);
IkReal x14680=((1.0)*cj3);
IkReal x14681=(r10*sj5);
IkReal x14682=(cj5*r10);
IkReal x14683=(r21*sj5);
IkReal x14684=((1.0)*cj1);
IkReal x14685=(cj5*r11);
IkReal x14686=(cj5*r20);
IkReal x14687=(r20*sj5);
IkReal x14688=(cj5*r21);
IkReal x14689=(sj2*x14684);
IkReal x14690=((1.0)*cj2*sj1);
IkReal x14691=((1.0)*x14676);
IkReal x14692=(cj3*x14677);
IkReal x14693=(sj3*x14677);
IkReal x14694=(x14690+x14689);
evalcond[0]=((-1.0)*r02*x14677);
evalcond[1]=(((x14676*x14686))+(((-1.0)*x14683*x14691)));
evalcond[2]=((1.0)+((x14676*x14682))+(((-1.0)*x14678*x14691)));
evalcond[3]=((((-1.0)*x14679))+(((-1.0)*r02*x14676*x14680))+((cj1*cj2)));
evalcond[4]=((((-1.0)*r02*sj3*x14691))+(((-1.0)*x14694)));
evalcond[5]=(((x14678*x14692))+((sj3*x14681))+((sj3*x14685))+(((-1.0)*x14677*x14680*x14682)));
evalcond[6]=(((x14678*x14693))+(((-1.0)*x14682*x14693))+(((-1.0)*x14680*x14685))+(((-1.0)*x14680*x14681)));
evalcond[7]=(((sj3*x14688))+((sj3*x14687))+(((-1.0)*x14677*x14680*x14686))+(((-1.0)*x14694))+((x14683*x14692)));
evalcond[8]=((((-1.0)*x14686*x14693))+(((-1.0)*x14680*x14687))+(((-1.0)*x14680*x14688))+x14679+(((-1.0)*cj2*x14684))+((x14683*x14693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14695=(cj5*r10);
IkReal x14696=((1.0)*sj3);
IkReal x14697=(r11*sj5);
CheckValue<IkReal> x14698=IKPowWithIntegerCheck((x14695+(((-1.0)*x14697))),-1);
if(!x14698.valid){
continue;
}
CheckValue<IkReal> x14699=IKPowWithIntegerCheck((((cj3*x14697))+(((-1.0)*cj3*x14695))),-1);
if(!x14699.valid){
continue;
}
if( IKabs(((-1.0)*(x14698.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14699.value)*(((((-1.0)*cj5*r11*x14696))+(((-1.0)*r10*sj5*x14696)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14698.value)))+IKsqr(((x14699.value)*(((((-1.0)*cj5*r11*x14696))+(((-1.0)*r10*sj5*x14696))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14698.value)), ((x14699.value)*(((((-1.0)*cj5*r11*x14696))+(((-1.0)*r10*sj5*x14696))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14700=IKsin(j4);
IkReal x14701=IKcos(j4);
IkReal x14702=(r11*sj5);
IkReal x14703=(sj1*sj2);
IkReal x14704=((1.0)*cj3);
IkReal x14705=(r10*sj5);
IkReal x14706=(cj5*r10);
IkReal x14707=(r21*sj5);
IkReal x14708=((1.0)*cj1);
IkReal x14709=(cj5*r11);
IkReal x14710=(cj5*r20);
IkReal x14711=(r20*sj5);
IkReal x14712=(cj5*r21);
IkReal x14713=(sj2*x14708);
IkReal x14714=((1.0)*cj2*sj1);
IkReal x14715=((1.0)*x14700);
IkReal x14716=(cj3*x14701);
IkReal x14717=(sj3*x14701);
IkReal x14718=(x14713+x14714);
evalcond[0]=((-1.0)*r02*x14701);
evalcond[1]=(((x14700*x14710))+(((-1.0)*x14707*x14715)));
evalcond[2]=((1.0)+(((-1.0)*x14702*x14715))+((x14700*x14706)));
evalcond[3]=((((-1.0)*r02*x14700*x14704))+(((-1.0)*x14703))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14718))+(((-1.0)*r02*sj3*x14715)));
evalcond[5]=(((x14702*x14716))+((sj3*x14705))+((sj3*x14709))+(((-1.0)*x14701*x14704*x14706)));
evalcond[6]=((((-1.0)*x14706*x14717))+(((-1.0)*x14704*x14709))+(((-1.0)*x14704*x14705))+((x14702*x14717)));
evalcond[7]=(((sj3*x14711))+((sj3*x14712))+(((-1.0)*x14701*x14704*x14710))+((x14707*x14716))+(((-1.0)*x14718)));
evalcond[8]=((((-1.0)*x14710*x14717))+(((-1.0)*cj2*x14708))+((x14707*x14717))+x14703+(((-1.0)*x14704*x14711))+(((-1.0)*x14704*x14712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14719=(cj5*r10);
IkReal x14720=(r11*sj5);
CheckValue<IkReal> x14721=IKPowWithIntegerCheck(((((-1.0)*x14720))+x14719),-1);
if(!x14721.valid){
continue;
}
CheckValue<IkReal> x14722=IKPowWithIntegerCheck(((((-1.0)*sj3*x14719))+((sj3*x14720))),-1);
if(!x14722.valid){
continue;
}
if( IKabs(((-1.0)*(x14721.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14722.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x14721.value)))+IKsqr(((x14722.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x14721.value)), ((x14722.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14723=IKsin(j4);
IkReal x14724=IKcos(j4);
IkReal x14725=(r11*sj5);
IkReal x14726=(sj1*sj2);
IkReal x14727=((1.0)*cj3);
IkReal x14728=(r10*sj5);
IkReal x14729=(cj5*r10);
IkReal x14730=(r21*sj5);
IkReal x14731=((1.0)*cj1);
IkReal x14732=(cj5*r11);
IkReal x14733=(cj5*r20);
IkReal x14734=(r20*sj5);
IkReal x14735=(cj5*r21);
IkReal x14736=(sj2*x14731);
IkReal x14737=((1.0)*cj2*sj1);
IkReal x14738=((1.0)*x14723);
IkReal x14739=(cj3*x14724);
IkReal x14740=(sj3*x14724);
IkReal x14741=(x14736+x14737);
evalcond[0]=((-1.0)*r02*x14724);
evalcond[1]=(((x14723*x14733))+(((-1.0)*x14730*x14738)));
evalcond[2]=((1.0)+((x14723*x14729))+(((-1.0)*x14725*x14738)));
evalcond[3]=((((-1.0)*x14726))+(((-1.0)*r02*x14723*x14727))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x14741))+(((-1.0)*r02*sj3*x14738)));
evalcond[5]=(((sj3*x14728))+((sj3*x14732))+(((-1.0)*x14724*x14727*x14729))+((x14725*x14739)));
evalcond[6]=(((x14725*x14740))+(((-1.0)*x14729*x14740))+(((-1.0)*x14727*x14732))+(((-1.0)*x14727*x14728)));
evalcond[7]=((((-1.0)*x14741))+(((-1.0)*x14724*x14727*x14733))+((sj3*x14735))+((sj3*x14734))+((x14730*x14739)));
evalcond[8]=(((x14730*x14740))+(((-1.0)*cj2*x14731))+x14726+(((-1.0)*x14727*x14735))+(((-1.0)*x14727*x14734))+(((-1.0)*x14733*x14740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14742=cj5*cj5;
IkReal x14743=(r11*sj3);
IkReal x14744=(cj3*r10);
IkReal x14745=(cj3*r11);
IkReal x14746=(r10*sj3);
IkReal x14747=(cj5*r20*sj5);
IkReal x14748=(r21*x14742);
IkReal x14749=(r20*x14742);
IkReal x14750=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x14751 = IKatan2WithCheck(IkReal((((cj5*r22*x14743))+((r22*sj5*x14746)))),IkReal((((x14743*x14749))+(((-1.0)*r21*x14746))+((x14746*x14748))+((x14746*x14747))+(((-1.0)*x14743*x14750)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14751.valid){
continue;
}
CheckValue<IkReal> x14752=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x14744*x14750))+((r21*x14745))+(((-1.0)*x14745*x14747))+(((-1.0)*x14745*x14748))+((x14744*x14749)))),-1);
if(!x14752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14751.value)+(((1.5707963267949)*(x14752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14753=IKsin(j4);
IkReal x14754=IKcos(j4);
IkReal x14755=((1.0)*r22);
IkReal x14756=(cj1*cj2);
IkReal x14757=(r11*sj5);
IkReal x14758=((1.0)*cj3);
IkReal x14759=(cj5*r21);
IkReal x14760=(r00*sj5);
IkReal x14761=(sj1*sj2);
IkReal x14762=(cj5*r01);
IkReal x14763=(r10*sj5);
IkReal x14764=(cj5*r10);
IkReal x14765=(r21*sj5);
IkReal x14766=(r01*sj5);
IkReal x14767=(cj5*r00);
IkReal x14768=(cj5*r20);
IkReal x14769=(r20*sj5);
IkReal x14770=(cj5*r11);
IkReal x14771=((1.0)*cj1*sj2);
IkReal x14772=((1.0)*cj2*sj1);
IkReal x14773=((1.0)*x14753);
IkReal x14774=(cj3*x14754);
IkReal x14775=((1.0)*x14754);
IkReal x14776=(sj3*x14754);
IkReal x14777=(x14771+x14772);
evalcond[0]=((((-1.0)*x14765*x14773))+((x14753*x14768))+(((-1.0)*x14754*x14755)));
evalcond[1]=((((-1.0)*r02*x14775))+((x14753*x14767))+(((-1.0)*x14766*x14773)));
evalcond[2]=((1.0)+((x14753*x14764))+(((-1.0)*x14757*x14773))+(((-1.0)*r12*x14775)));
evalcond[3]=(((x14757*x14774))+(((-1.0)*r12*x14753*x14758))+((sj3*x14770))+(((-1.0)*x14754*x14758*x14764))+((sj3*x14763)));
evalcond[4]=((((-1.0)*x14758*x14763))+((x14757*x14776))+(((-1.0)*sj3*x14764*x14775))+(((-1.0)*x14758*x14770))+(((-1.0)*r12*sj3*x14773)));
evalcond[5]=((((-1.0)*x14754*x14758*x14767))+(((-1.0)*x14761))+((x14766*x14774))+(((-1.0)*r02*x14753*x14758))+x14756+((sj3*x14760))+((sj3*x14762)));
evalcond[6]=(((x14765*x14774))+(((-1.0)*x14754*x14758*x14768))+(((-1.0)*x14777))+((sj3*x14759))+((sj3*x14769))+(((-1.0)*cj3*x14753*x14755)));
evalcond[7]=((((-1.0)*x14758*x14769))+((x14765*x14776))+(((-1.0)*sj3*x14753*x14755))+(((-1.0)*sj3*x14768*x14775))+x14761+(((-1.0)*x14758*x14759))+(((-1.0)*x14756)));
evalcond[8]=((((-1.0)*x14758*x14760))+(((-1.0)*x14758*x14762))+(((-1.0)*sj3*x14767*x14775))+(((-1.0)*x14777))+((x14766*x14776))+(((-1.0)*r02*sj3*x14773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14778=((1.0)*sj5);
CheckValue<IkReal> x14779 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*x14778))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14779.valid){
continue;
}
CheckValue<IkReal> x14780=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x14778))+(((-1.0)*cj5*r21)))),-1);
if(!x14780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14779.value)+(((1.5707963267949)*(x14780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14781=IKsin(j4);
IkReal x14782=IKcos(j4);
IkReal x14783=((1.0)*r22);
IkReal x14784=(cj1*cj2);
IkReal x14785=(r11*sj5);
IkReal x14786=((1.0)*cj3);
IkReal x14787=(cj5*r21);
IkReal x14788=(r00*sj5);
IkReal x14789=(sj1*sj2);
IkReal x14790=(cj5*r01);
IkReal x14791=(r10*sj5);
IkReal x14792=(cj5*r10);
IkReal x14793=(r21*sj5);
IkReal x14794=(r01*sj5);
IkReal x14795=(cj5*r00);
IkReal x14796=(cj5*r20);
IkReal x14797=(r20*sj5);
IkReal x14798=(cj5*r11);
IkReal x14799=((1.0)*cj1*sj2);
IkReal x14800=((1.0)*cj2*sj1);
IkReal x14801=((1.0)*x14781);
IkReal x14802=(cj3*x14782);
IkReal x14803=((1.0)*x14782);
IkReal x14804=(sj3*x14782);
IkReal x14805=(x14800+x14799);
evalcond[0]=((((-1.0)*x14782*x14783))+(((-1.0)*x14793*x14801))+((x14781*x14796)));
evalcond[1]=((((-1.0)*x14794*x14801))+((x14781*x14795))+(((-1.0)*r02*x14803)));
evalcond[2]=((1.0)+(((-1.0)*r12*x14803))+((x14781*x14792))+(((-1.0)*x14785*x14801)));
evalcond[3]=((((-1.0)*x14782*x14786*x14792))+((sj3*x14798))+((sj3*x14791))+(((-1.0)*r12*x14781*x14786))+((x14785*x14802)));
evalcond[4]=((((-1.0)*sj3*x14792*x14803))+(((-1.0)*x14786*x14791))+(((-1.0)*x14786*x14798))+(((-1.0)*r12*sj3*x14801))+((x14785*x14804)));
evalcond[5]=((((-1.0)*x14789))+(((-1.0)*r02*x14781*x14786))+(((-1.0)*x14782*x14786*x14795))+x14784+((sj3*x14790))+((x14794*x14802))+((sj3*x14788)));
evalcond[6]=((((-1.0)*cj3*x14781*x14783))+((x14793*x14802))+(((-1.0)*x14805))+(((-1.0)*x14782*x14786*x14796))+((sj3*x14797))+((sj3*x14787)));
evalcond[7]=(((x14793*x14804))+(((-1.0)*x14784))+(((-1.0)*x14786*x14797))+(((-1.0)*x14786*x14787))+(((-1.0)*sj3*x14796*x14803))+x14789+(((-1.0)*sj3*x14781*x14783)));
evalcond[8]=((((-1.0)*x14805))+(((-1.0)*x14786*x14790))+(((-1.0)*r02*sj3*x14801))+(((-1.0)*x14786*x14788))+(((-1.0)*sj3*x14795*x14803))+((x14794*x14804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14806=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14806.valid){
continue;
}
CheckValue<IkReal> x14807 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14806.value)))+(x14807.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14808=IKsin(j4);
IkReal x14809=IKcos(j4);
IkReal x14810=((1.0)*r22);
IkReal x14811=(cj1*cj2);
IkReal x14812=(r11*sj5);
IkReal x14813=((1.0)*cj3);
IkReal x14814=(cj5*r21);
IkReal x14815=(r00*sj5);
IkReal x14816=(sj1*sj2);
IkReal x14817=(cj5*r01);
IkReal x14818=(r10*sj5);
IkReal x14819=(cj5*r10);
IkReal x14820=(r21*sj5);
IkReal x14821=(r01*sj5);
IkReal x14822=(cj5*r00);
IkReal x14823=(cj5*r20);
IkReal x14824=(r20*sj5);
IkReal x14825=(cj5*r11);
IkReal x14826=((1.0)*cj1*sj2);
IkReal x14827=((1.0)*cj2*sj1);
IkReal x14828=((1.0)*x14808);
IkReal x14829=(cj3*x14809);
IkReal x14830=((1.0)*x14809);
IkReal x14831=(sj3*x14809);
IkReal x14832=(x14826+x14827);
evalcond[0]=((((-1.0)*x14820*x14828))+((x14808*x14823))+(((-1.0)*x14809*x14810)));
evalcond[1]=(((x14808*x14822))+(((-1.0)*x14821*x14828))+(((-1.0)*r02*x14830)));
evalcond[2]=((1.0)+((x14808*x14819))+(((-1.0)*r12*x14830))+(((-1.0)*x14812*x14828)));
evalcond[3]=(((sj3*x14818))+(((-1.0)*x14809*x14813*x14819))+((sj3*x14825))+((x14812*x14829))+(((-1.0)*r12*x14808*x14813)));
evalcond[4]=(((x14812*x14831))+(((-1.0)*x14813*x14818))+(((-1.0)*r12*sj3*x14828))+(((-1.0)*x14813*x14825))+(((-1.0)*sj3*x14819*x14830)));
evalcond[5]=(((sj3*x14815))+((sj3*x14817))+((x14821*x14829))+(((-1.0)*r02*x14808*x14813))+(((-1.0)*x14809*x14813*x14822))+x14811+(((-1.0)*x14816)));
evalcond[6]=(((sj3*x14814))+((x14820*x14829))+((sj3*x14824))+(((-1.0)*x14809*x14813*x14823))+(((-1.0)*cj3*x14808*x14810))+(((-1.0)*x14832)));
evalcond[7]=(x14816+(((-1.0)*x14813*x14814))+(((-1.0)*x14813*x14824))+((x14820*x14831))+(((-1.0)*x14811))+(((-1.0)*sj3*x14823*x14830))+(((-1.0)*sj3*x14808*x14810)));
evalcond[8]=((((-1.0)*x14813*x14815))+(((-1.0)*x14813*x14817))+(((-1.0)*r02*sj3*x14828))+((x14821*x14831))+(((-1.0)*x14832))+(((-1.0)*sj3*x14822*x14830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14833=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14833;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14834=((1.0)*sj5);
IkReal x14835=((((-1.0)*r00*x14834))+(((-1.0)*cj5*r01)));
j4eval[0]=x14835;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x14834))))));
j4eval[2]=IKsign(x14835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x14836=cj5*cj5;
IkReal x14837=(cj3*r11*r21);
IkReal x14838=((1.0)*cj3*cj5*sj5);
IkReal x14839=(((cj3*r12*r22))+x14837+(((-1.0)*x14836*x14837))+(((-1.0)*r11*r20*x14838))+((cj3*r10*r20*x14836))+(((-1.0)*r10*r21*x14838)));
j4eval[0]=x14839;
j4eval[1]=IKsign(x14839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14840=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14840;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14841=((1.0)*sj5);
IkReal x14842=((((-1.0)*r00*x14841))+(((-1.0)*cj5*r01)));
j4eval[0]=x14842;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*x14841))))));
j4eval[2]=IKsign(x14842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14843=cj5*cj5;
IkReal x14844=r11*r11;
IkReal x14845=(cj5*r10);
IkReal x14846=(r11*sj5);
IkReal x14847=((((-1.0)*x14844))+((x14843*x14844))+(((-1.0)*x14843*(r10*r10)))+(((2.0)*x14845*x14846))+(((-1.0)*(r12*r12))));
j4eval[0]=x14847;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x14845))+x14846))));
j4eval[2]=IKsign(x14847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14848=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14848);
rxp1_1=(px*r21);
rxp1_2=(r11*x14848);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14849=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14849);
rxp1_1=(px*r21);
rxp1_2=(r11*x14849);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14850=IKPowWithIntegerCheck(r02,-1);
if(!x14850.valid){
continue;
}
CheckValue<IkReal> x14851=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14851.valid){
continue;
}
if( IKabs(((x14850.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14851.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14850.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x14851.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14850.value)*((((cj2*sj1))+((cj1*sj2))))), ((x14851.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14852=IKsin(j4);
IkReal x14853=IKcos(j4);
IkReal x14854=(r11*sj5);
IkReal x14855=(cj5*r10);
IkReal x14856=(cj5*r20);
IkReal x14857=(r21*sj5);
IkReal x14858=((1.0)*x14852);
IkReal x14859=((1.0)*x14853);
evalcond[0]=((-1.0)*r02*x14853);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x14858)));
evalcond[2]=(((x14852*x14856))+(((-1.0)*x14857*x14858)));
evalcond[3]=(((x14853*x14854))+(((-1.0)*x14855*x14859)));
evalcond[4]=((-1.0)+((x14852*x14855))+(((-1.0)*x14854*x14858)));
evalcond[5]=((((-1.0)*x14856*x14859))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14853*x14857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14860=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14860.valid){
continue;
}
CheckValue<IkReal> x14861=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x14861.valid){
continue;
}
if( IKabs(x14860.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14861.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14860.value)+IKsqr(((x14861.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14860.value, ((x14861.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14862=IKsin(j4);
IkReal x14863=IKcos(j4);
IkReal x14864=(r11*sj5);
IkReal x14865=(cj5*r10);
IkReal x14866=(cj5*r20);
IkReal x14867=(r21*sj5);
IkReal x14868=((1.0)*x14862);
IkReal x14869=((1.0)*x14863);
evalcond[0]=((-1.0)*r02*x14863);
evalcond[1]=(((cj2*sj1))+(((-1.0)*r02*x14868))+((cj1*sj2)));
evalcond[2]=((((-1.0)*x14867*x14868))+((x14862*x14866)));
evalcond[3]=(((x14863*x14864))+(((-1.0)*x14865*x14869)));
evalcond[4]=((-1.0)+(((-1.0)*x14864*x14868))+((x14862*x14865)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14866*x14869))+((x14863*x14867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14870=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14870);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14870);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14871=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14871);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14871);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14872=((1.0)*cj2);
CheckValue<IkReal> x14873=IKPowWithIntegerCheck(r22,-1);
if(!x14873.valid){
continue;
}
CheckValue<IkReal> x14874=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14874.valid){
continue;
}
if( IKabs(((x14873.value)*((((sj1*sj2))+(((-1.0)*cj1*x14872)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14874.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14872)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14873.value)*((((sj1*sj2))+(((-1.0)*cj1*x14872))))))+IKsqr(((x14874.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14872))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14873.value)*((((sj1*sj2))+(((-1.0)*cj1*x14872))))), ((x14874.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14872))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14875=IKsin(j4);
IkReal x14876=IKcos(j4);
IkReal x14877=(cj5*r00);
IkReal x14878=(cj5*r10);
IkReal x14879=(sj5*x14876);
IkReal x14880=((1.0)*x14876);
IkReal x14881=((1.0)*sj5*x14875);
evalcond[0]=((-1.0)*r22*x14876);
evalcond[1]=((((-1.0)*r01*x14881))+((x14875*x14877)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x14875)));
evalcond[3]=(((r11*x14879))+(((-1.0)*x14878*x14880)));
evalcond[4]=((-1.0)+((x14875*x14878))+(((-1.0)*r11*x14881)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r01*x14879))+(((-1.0)*x14877*x14880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14882=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x14882.valid){
continue;
}
CheckValue<IkReal> x14883=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x14883.valid){
continue;
}
if( IKabs(x14882.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14883.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14882.value)+IKsqr(((x14883.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14882.value, ((x14883.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14884=IKsin(j4);
IkReal x14885=IKcos(j4);
IkReal x14886=(cj5*r00);
IkReal x14887=(cj5*r10);
IkReal x14888=(sj5*x14885);
IkReal x14889=((1.0)*x14885);
IkReal x14890=((1.0)*sj5*x14884);
evalcond[0]=((-1.0)*r22*x14885);
evalcond[1]=((((-1.0)*r01*x14890))+((x14884*x14886)));
evalcond[2]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x14884)));
evalcond[3]=(((r11*x14888))+(((-1.0)*x14887*x14889)));
evalcond[4]=((-1.0)+((x14884*x14887))+(((-1.0)*r11*x14890)));
evalcond[5]=(((cj2*sj1))+((cj1*sj2))+((r01*x14888))+(((-1.0)*x14886*x14889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14891=cj5*cj5;
IkReal x14892=r11*r11;
IkReal x14893=(cj5*r10);
IkReal x14894=(r11*sj5);
CheckValue<IkReal> x14895=IKPowWithIntegerCheck(IKsign(((((2.0)*x14893*x14894))+((x14891*x14892))+(((-1.0)*(r12*r12)))+(((-1.0)*x14892))+(((-1.0)*x14891*(r10*r10))))),-1);
if(!x14895.valid){
continue;
}
CheckValue<IkReal> x14896 = IKatan2WithCheck(IkReal((x14894+(((-1.0)*x14893)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x14896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14895.value)))+(x14896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14897=IKsin(j4);
IkReal x14898=IKcos(j4);
IkReal x14899=(cj5*r00);
IkReal x14900=((1.0)*x14898);
IkReal x14901=(sj5*x14898);
IkReal x14902=(cj5*x14897);
IkReal x14903=((1.0)*x14897);
IkReal x14904=(sj5*x14903);
evalcond[0]=((((-1.0)*r22*x14900))+((r20*x14902))+(((-1.0)*r21*x14904)));
evalcond[1]=(((x14897*x14899))+(((-1.0)*r02*x14900))+(((-1.0)*r01*x14904)));
evalcond[2]=((((-1.0)*r12*x14903))+((r11*x14901))+(((-1.0)*cj5*r10*x14900)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14900))+(((-1.0)*r11*x14904))+((r10*x14902)));
evalcond[4]=(((cj2*sj1))+((r01*x14901))+(((-1.0)*r02*x14903))+(((-1.0)*x14899*x14900))+((cj1*sj2)));
evalcond[5]=(((r21*x14901))+(((-1.0)*r22*x14903))+(((-1.0)*cj5*r20*x14900))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14905=((1.0)*sj5);
CheckValue<IkReal> x14906 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14906.valid){
continue;
}
CheckValue<IkReal> x14907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14905))+(((-1.0)*cj5*r01)))),-1);
if(!x14907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14906.value)+(((1.5707963267949)*(x14907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14908=IKsin(j4);
IkReal x14909=IKcos(j4);
IkReal x14910=(cj5*r00);
IkReal x14911=((1.0)*x14909);
IkReal x14912=(sj5*x14909);
IkReal x14913=(cj5*x14908);
IkReal x14914=((1.0)*x14908);
IkReal x14915=(sj5*x14914);
evalcond[0]=((((-1.0)*r22*x14911))+((r20*x14913))+(((-1.0)*r21*x14915)));
evalcond[1]=((((-1.0)*r02*x14911))+(((-1.0)*r01*x14915))+((x14908*x14910)));
evalcond[2]=((((-1.0)*r12*x14914))+((r11*x14912))+(((-1.0)*cj5*r10*x14911)));
evalcond[3]=((-1.0)+((r10*x14913))+(((-1.0)*r11*x14915))+(((-1.0)*r12*x14911)));
evalcond[4]=(((cj2*sj1))+((r01*x14912))+(((-1.0)*r02*x14914))+(((-1.0)*x14910*x14911))+((cj1*sj2)));
evalcond[5]=(((r21*x14912))+(((-1.0)*r22*x14914))+(((-1.0)*cj5*r20*x14911))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14916=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14916.valid){
continue;
}
CheckValue<IkReal> x14917 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14916.value)))+(x14917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14918=IKsin(j4);
IkReal x14919=IKcos(j4);
IkReal x14920=(cj5*r00);
IkReal x14921=((1.0)*x14919);
IkReal x14922=(sj5*x14919);
IkReal x14923=(cj5*x14918);
IkReal x14924=((1.0)*x14918);
IkReal x14925=(sj5*x14924);
evalcond[0]=((((-1.0)*r21*x14925))+(((-1.0)*r22*x14921))+((r20*x14923)));
evalcond[1]=(((x14918*x14920))+(((-1.0)*r01*x14925))+(((-1.0)*r02*x14921)));
evalcond[2]=((((-1.0)*cj5*r10*x14921))+(((-1.0)*r12*x14924))+((r11*x14922)));
evalcond[3]=((-1.0)+((r10*x14923))+(((-1.0)*r11*x14925))+(((-1.0)*r12*x14921)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14920*x14921))+((cj1*sj2))+((r01*x14922))+(((-1.0)*r02*x14924)));
evalcond[5]=((((-1.0)*cj1*cj2))+((r21*x14922))+((sj1*sj2))+(((-1.0)*r22*x14924))+(((-1.0)*cj5*r20*x14921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14926=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14926;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x14926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14927=((1.0)*sj5);
IkReal x14928=((((-1.0)*r00*x14927))+(((-1.0)*cj5*r01)));
j4eval[0]=x14928;
j4eval[1]=((IKabs((((cj5*r20))+(((-1.0)*r21*x14927)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14929=cj5*cj5;
IkReal x14930=r11*r11;
IkReal x14931=(r11*sj5);
IkReal x14932=(cj5*r10);
IkReal x14933=((r12*r12)+(((-1.0)*x14929*x14930))+(((-2.0)*x14931*x14932))+x14930+((x14929*(r10*r10))));
j4eval[0]=x14933;
j4eval[1]=IKsign(x14933);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14931))+x14932))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14934=cj5*cj5;
IkReal x14935=r11*r11;
IkReal x14936=(cj5*r10);
IkReal x14937=(r11*sj5);
CheckValue<IkReal> x14938 = IKatan2WithCheck(IkReal(((((-1.0)*x14937))+x14936)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14938.valid){
continue;
}
CheckValue<IkReal> x14939=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x14936*x14937))+x14935+((x14934*(r10*r10)))+(((-1.0)*x14934*x14935)))),-1);
if(!x14939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14938.value)+(((1.5707963267949)*(x14939.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14940=IKcos(j4);
IkReal x14941=IKsin(j4);
IkReal x14942=(cj5*r10);
IkReal x14943=((1.0)*x14940);
IkReal x14944=(cj5*x14941);
IkReal x14945=(cj5*x14940);
IkReal x14946=((1.0)*sj5*x14941);
evalcond[0]=(((r12*x14941))+((x14940*x14942))+(((-1.0)*r11*sj5*x14943)));
evalcond[1]=((((-1.0)*r21*x14946))+(((-1.0)*r22*x14943))+((r20*x14944)));
evalcond[2]=(((r00*x14944))+(((-1.0)*r01*x14946))+(((-1.0)*r02*x14943)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14943))+(((-1.0)*r11*x14946))+((x14941*x14942)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x14945))+((r02*x14941))+(((-1.0)*r01*sj5*x14943)));
evalcond[5]=(((r22*x14941))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14943))+((r20*x14945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14947=((1.0)*sj5);
CheckValue<IkReal> x14948=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x14947))+(((-1.0)*cj5*r01)))),-1);
if(!x14948.valid){
continue;
}
CheckValue<IkReal> x14949 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x14947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14948.value)))+(x14949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14950=IKcos(j4);
IkReal x14951=IKsin(j4);
IkReal x14952=(cj5*r10);
IkReal x14953=((1.0)*x14950);
IkReal x14954=(cj5*x14951);
IkReal x14955=(cj5*x14950);
IkReal x14956=((1.0)*sj5*x14951);
evalcond[0]=((((-1.0)*r11*sj5*x14953))+((r12*x14951))+((x14950*x14952)));
evalcond[1]=((((-1.0)*r21*x14956))+(((-1.0)*r22*x14953))+((r20*x14954)));
evalcond[2]=((((-1.0)*r01*x14956))+((r00*x14954))+(((-1.0)*r02*x14953)));
evalcond[3]=((-1.0)+(((-1.0)*r11*x14956))+((x14951*x14952))+(((-1.0)*r12*x14953)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r00*x14955))+((r02*x14951))+(((-1.0)*r01*sj5*x14953)));
evalcond[5]=(((r22*x14951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14953))+((r20*x14955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14957=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14957.valid){
continue;
}
CheckValue<IkReal> x14958 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14957.value)))+(x14958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14959=IKcos(j4);
IkReal x14960=IKsin(j4);
IkReal x14961=(cj5*r10);
IkReal x14962=((1.0)*x14959);
IkReal x14963=(cj5*x14960);
IkReal x14964=(cj5*x14959);
IkReal x14965=((1.0)*sj5*x14960);
evalcond[0]=(((r12*x14960))+(((-1.0)*r11*sj5*x14962))+((x14959*x14961)));
evalcond[1]=((((-1.0)*r22*x14962))+(((-1.0)*r21*x14965))+((r20*x14963)));
evalcond[2]=((((-1.0)*r02*x14962))+(((-1.0)*r01*x14965))+((r00*x14963)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14962))+(((-1.0)*r11*x14965))+((x14960*x14961)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r01*sj5*x14962))+((r02*x14960))+((r00*x14964)));
evalcond[5]=(((r22*x14960))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14962))+((r20*x14964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14966=((-1.0)*r00);
IkReal x14968 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14968)==0){
continue;
}
IkReal x14967=pow(x14968,-0.5);
CheckValue<IkReal> x14969 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14966),IKFAST_ATAN2_MAGTHRESH);
if(!x14969.valid){
continue;
}
IkReal gconst30=((-1.0)*(x14969.value));
IkReal gconst31=(r01*x14967);
IkReal gconst32=(x14966*x14967);
CheckValue<IkReal> x14970 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14970.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14970.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14971=((-1.0)*r00);
IkReal x14972=x14967;
CheckValue<IkReal> x14974 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14971),IKFAST_ATAN2_MAGTHRESH);
if(!x14974.valid){
continue;
}
IkReal x14973=((-1.0)*(x14974.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x14973;
IkReal gconst30=x14973;
IkReal gconst31=(r01*x14972);
IkReal gconst32=(x14971*x14972);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14975=((-1.0)*r00);
IkReal x14976=x14967;
CheckValue<IkReal> x14978 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14975),IKFAST_ATAN2_MAGTHRESH);
if(!x14978.valid){
continue;
}
IkReal x14977=((-1.0)*(x14978.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x14977;
IkReal gconst30=x14977;
IkReal gconst31=(r01*x14976);
IkReal gconst32=(x14975*x14976);
CheckValue<IkReal> x14986=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14986.valid){
continue;
}
IkReal x14979=x14986.value;
IkReal x14980=(cj3*x14979);
IkReal x14981=(r21*x14980);
IkReal x14982=(r10*x14980);
IkReal x14983=(r11*x14980);
IkReal x14984=(r20*x14980);
IkReal x14985=(r00*r01*x14980);
j4eval[0]=IKsign((((cj3*r12*r22))+((r20*x14982*(r00*r00)))+((r00*r01*r20*x14983))+((r00*r01*r10*x14981))+((r11*x14981*(r01*r01)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14987=((-1.0)*r00);
IkReal x14988=x14967;
CheckValue<IkReal> x14990 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14987),IKFAST_ATAN2_MAGTHRESH);
if(!x14990.valid){
continue;
}
IkReal x14989=((-1.0)*(x14990.value));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst31;
cj5=gconst32;
j5=x14989;
IkReal gconst30=x14989;
IkReal gconst31=(r01*x14988);
IkReal gconst32=(x14987*x14988);
CheckValue<IkReal> x14998=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14998.valid){
continue;
}
IkReal x14991=x14998.value;
IkReal x14992=(sj3*x14991);
IkReal x14993=(r11*x14992);
IkReal x14994=(r21*x14992);
IkReal x14995=(r20*x14992);
IkReal x14996=(r10*x14992);
IkReal x14997=(r00*r01*x14992);
j4eval[0]=IKsign((((r21*x14993*(r01*r01)))+((r10*x14995*(r00*r00)))+((r00*r01*r10*x14994))+((r00*r01*r20*x14993))+((r12*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14999=gconst31*gconst31;
IkReal x15000=gconst32*gconst32;
IkReal x15001=(cj3*r22);
IkReal x15002=(r21*sj3);
IkReal x15003=(cj3*r21);
IkReal x15004=((1.0)*r11);
IkReal x15005=(gconst31*gconst32);
IkReal x15006=((1.0)*gconst31*r10);
IkReal x15007=(r20*x15000);
CheckValue<IkReal> x15008=IKPowWithIntegerCheck(IKsign((((r11*x14999*x15002))+(((-1.0)*r20*sj3*x15004*x15005))+((r12*r22*sj3))+(((-1.0)*r10*x15002*x15005))+((r10*sj3*x15007)))),-1);
if(!x15008.valid){
continue;
}
CheckValue<IkReal> x15009 = IKatan2WithCheck(IkReal(((((-1.0)*x15001*x15006))+(((-1.0)*gconst32*x15001*x15004)))),IkReal((((r10*x14999*x15003))+(((-1.0)*cj3*x15004*x15007))+(((-1.0)*cj3*r10*r20*x15005))+((r11*x15003*x15005)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15008.value)))+(x15009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15010=IKsin(j4);
IkReal x15011=IKcos(j4);
IkReal x15012=(sj1*sj2);
IkReal x15013=(cj3*gconst32);
IkReal x15014=((1.0)*cj1);
IkReal x15015=(gconst32*r20);
IkReal x15016=(r21*sj3);
IkReal x15017=(r00*sj3);
IkReal x15018=(gconst31*r10);
IkReal x15019=((1.0)*cj3);
IkReal x15020=(cj2*sj1);
IkReal x15021=(gconst31*r20);
IkReal x15022=(gconst32*sj3);
IkReal x15023=(cj2*x15014);
IkReal x15024=((1.0)*x15011);
IkReal x15025=((1.0)*x15010);
IkReal x15026=(gconst31*x15011);
IkReal x15027=(gconst32*x15010);
evalcond[0]=((((-1.0)*r22*x15024))+((x15010*x15015))+(((-1.0)*gconst31*r21*x15025)));
evalcond[1]=(((r00*x15027))+(((-1.0)*r02*x15024))+(((-1.0)*gconst31*r01*x15025)));
evalcond[2]=((-1.0)+((r10*x15027))+(((-1.0)*r12*x15024))+(((-1.0)*gconst31*r11*x15025)));
evalcond[3]=((((-1.0)*r10*x15013*x15024))+((sj3*x15018))+(((-1.0)*r12*x15010*x15019))+((cj3*r11*x15026))+((r11*x15022)));
evalcond[4]=((((-1.0)*r12*sj3*x15025))+(((-1.0)*r10*x15022*x15024))+(((-1.0)*x15018*x15019))+((r11*sj3*x15026))+(((-1.0)*r11*x15013)));
evalcond[5]=(((gconst31*x15017))+x15012+((cj3*r01*x15026))+(((-1.0)*r00*x15013*x15024))+(((-1.0)*x15023))+(((-1.0)*r02*x15010*x15019))+((r01*x15022)));
evalcond[6]=((((-1.0)*x15020))+((cj3*r21*x15026))+(((-1.0)*r22*x15010*x15019))+(((-1.0)*sj2*x15014))+((gconst32*x15016))+((sj3*x15021))+(((-1.0)*r20*x15013*x15024)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*gconst32*x15017*x15024))+x15020+(((-1.0)*r02*sj3*x15025))+(((-1.0)*gconst31*r00*x15019))+(((-1.0)*r01*x15013))+((r01*sj3*x15026)));
evalcond[8]=((((-1.0)*x15019*x15021))+((x15016*x15026))+(((-1.0)*sj3*x15015*x15024))+(((-1.0)*r21*x15013))+x15012+(((-1.0)*x15023))+(((-1.0)*r22*sj3*x15025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15028=gconst32*gconst32;
IkReal x15029=gconst31*gconst31;
IkReal x15030=((1.0)*r21);
IkReal x15031=(r20*sj3);
IkReal x15032=(gconst31*sj3);
IkReal x15033=(gconst32*r11);
IkReal x15034=(cj3*r20);
IkReal x15035=(gconst31*gconst32*r10);
CheckValue<IkReal> x15036=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj3*x15030*x15035))+((cj3*r12*r22))+(((-1.0)*gconst31*x15033*x15034))+((cj3*r11*r21*x15029))+((r10*x15028*x15034)))),-1);
if(!x15036.valid){
continue;
}
CheckValue<IkReal> x15037 = IKatan2WithCheck(IkReal((((r10*r22*x15032))+((r22*sj3*x15033)))),IkReal(((((-1.0)*x15030*x15032*x15033))+(((-1.0)*r10*sj3*x15029*x15030))+((r11*x15028*x15031))+((x15031*x15035)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15036.value)))+(x15037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15038=IKsin(j4);
IkReal x15039=IKcos(j4);
IkReal x15040=(sj1*sj2);
IkReal x15041=(cj3*gconst32);
IkReal x15042=((1.0)*cj1);
IkReal x15043=(gconst32*r20);
IkReal x15044=(r21*sj3);
IkReal x15045=(r00*sj3);
IkReal x15046=(gconst31*r10);
IkReal x15047=((1.0)*cj3);
IkReal x15048=(cj2*sj1);
IkReal x15049=(gconst31*r20);
IkReal x15050=(gconst32*sj3);
IkReal x15051=(cj2*x15042);
IkReal x15052=((1.0)*x15039);
IkReal x15053=((1.0)*x15038);
IkReal x15054=(gconst31*x15039);
IkReal x15055=(gconst32*x15038);
evalcond[0]=(((x15038*x15043))+(((-1.0)*r22*x15052))+(((-1.0)*gconst31*r21*x15053)));
evalcond[1]=((((-1.0)*r02*x15052))+(((-1.0)*gconst31*r01*x15053))+((r00*x15055)));
evalcond[2]=((-1.0)+((r10*x15055))+(((-1.0)*r12*x15052))+(((-1.0)*gconst31*r11*x15053)));
evalcond[3]=((((-1.0)*r12*x15038*x15047))+((sj3*x15046))+((cj3*r11*x15054))+((r11*x15050))+(((-1.0)*r10*x15041*x15052)));
evalcond[4]=((((-1.0)*r11*x15041))+(((-1.0)*x15046*x15047))+((r11*sj3*x15054))+(((-1.0)*r10*x15050*x15052))+(((-1.0)*r12*sj3*x15053)));
evalcond[5]=(((r01*x15050))+((cj3*r01*x15054))+x15040+(((-1.0)*r02*x15038*x15047))+(((-1.0)*r00*x15041*x15052))+((gconst31*x15045))+(((-1.0)*x15051)));
evalcond[6]=((((-1.0)*sj2*x15042))+((cj3*r21*x15054))+((sj3*x15049))+(((-1.0)*r22*x15038*x15047))+(((-1.0)*x15048))+((gconst32*x15044))+(((-1.0)*r20*x15041*x15052)));
evalcond[7]=(((cj1*sj2))+x15048+(((-1.0)*gconst32*x15045*x15052))+(((-1.0)*r02*sj3*x15053))+(((-1.0)*r01*x15041))+(((-1.0)*gconst31*r00*x15047))+((r01*sj3*x15054)));
evalcond[8]=((((-1.0)*sj3*x15043*x15052))+(((-1.0)*x15047*x15049))+x15040+(((-1.0)*x15051))+(((-1.0)*r21*x15041))+(((-1.0)*r22*sj3*x15053))+((x15044*x15054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15056=IKPowWithIntegerCheck(IKsign((((gconst31*r20))+((gconst32*r21)))),-1);
if(!x15056.valid){
continue;
}
CheckValue<IkReal> x15057 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst32*r00))+(((-1.0)*gconst31*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15056.value)))+(x15057.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15058=IKsin(j4);
IkReal x15059=IKcos(j4);
IkReal x15060=(sj1*sj2);
IkReal x15061=(cj3*gconst32);
IkReal x15062=((1.0)*cj1);
IkReal x15063=(gconst32*r20);
IkReal x15064=(r21*sj3);
IkReal x15065=(r00*sj3);
IkReal x15066=(gconst31*r10);
IkReal x15067=((1.0)*cj3);
IkReal x15068=(cj2*sj1);
IkReal x15069=(gconst31*r20);
IkReal x15070=(gconst32*sj3);
IkReal x15071=(cj2*x15062);
IkReal x15072=((1.0)*x15059);
IkReal x15073=((1.0)*x15058);
IkReal x15074=(gconst31*x15059);
IkReal x15075=(gconst32*x15058);
evalcond[0]=(((x15058*x15063))+(((-1.0)*r22*x15072))+(((-1.0)*gconst31*r21*x15073)));
evalcond[1]=(((r00*x15075))+(((-1.0)*r02*x15072))+(((-1.0)*gconst31*r01*x15073)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x15072))+(((-1.0)*gconst31*r11*x15073))+((r10*x15075)));
evalcond[3]=(((cj3*r11*x15074))+((sj3*x15066))+(((-1.0)*r12*x15058*x15067))+((r11*x15070))+(((-1.0)*r10*x15061*x15072)));
evalcond[4]=((((-1.0)*r12*sj3*x15073))+(((-1.0)*r11*x15061))+(((-1.0)*x15066*x15067))+((r11*sj3*x15074))+(((-1.0)*r10*x15070*x15072)));
evalcond[5]=((((-1.0)*x15071))+((r01*x15070))+x15060+(((-1.0)*r02*x15058*x15067))+((gconst31*x15065))+((cj3*r01*x15074))+(((-1.0)*r00*x15061*x15072)));
evalcond[6]=((((-1.0)*sj2*x15062))+((sj3*x15069))+(((-1.0)*r20*x15061*x15072))+((gconst32*x15064))+(((-1.0)*x15068))+((cj3*r21*x15074))+(((-1.0)*r22*x15058*x15067)));
evalcond[7]=((((-1.0)*gconst32*x15065*x15072))+((cj1*sj2))+x15068+((r01*sj3*x15074))+(((-1.0)*r01*x15061))+(((-1.0)*gconst31*r00*x15067))+(((-1.0)*r02*sj3*x15073)));
evalcond[8]=((((-1.0)*x15071))+(((-1.0)*sj3*x15063*x15072))+(((-1.0)*r22*sj3*x15073))+((x15064*x15074))+(((-1.0)*r21*x15061))+x15060+(((-1.0)*x15067*x15069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15076=((-1.0)*r01);
IkReal x15078 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15078)==0){
continue;
}
IkReal x15077=pow(x15078,-0.5);
CheckValue<IkReal> x15079 = IKatan2WithCheck(IkReal(x15076),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15079.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x15079.value))));
IkReal gconst34=(x15076*x15077);
IkReal gconst35=((1.0)*r00*x15077);
CheckValue<IkReal> x15080 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15080.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15080.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15081=((-1.0)*r01);
CheckValue<IkReal> x15084 = IKatan2WithCheck(IkReal(x15081),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15084.valid){
continue;
}
IkReal x15082=((1.0)*(x15084.value));
IkReal x15083=x15077;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x15082)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x15082)));
IkReal gconst34=(x15081*x15083);
IkReal gconst35=((1.0)*r00*x15083);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x15085=((-1.0)*r01);
CheckValue<IkReal> x15088 = IKatan2WithCheck(IkReal(x15085),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x15088.valid){
continue;
}
IkReal x15086=((1.0)*(x15088.value));
IkReal x15087=x15077;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x15086)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x15086)));
IkReal gconst34=(x15085*x15087);
IkReal gconst35=((1.0)*r00*x15087);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15089=gconst35*gconst35;
IkReal x15090=gconst34*gconst34;
IkReal x15091=(r10*sj3);
IkReal x15092=(r11*sj3);
IkReal x15093=(cj3*r11);
IkReal x15094=(cj3*r10);
IkReal x15095=(r20*x15089);
IkReal x15096=(r21*x15090);
IkReal x15097=(gconst34*gconst35*r20);
IkReal x15098=((1.0)*gconst34*gconst35*r21);
CheckValue<IkReal> x15099 = IKatan2WithCheck(IkReal((((gconst34*r22*x15091))+((gconst35*r22*x15092)))),IkReal(((((-1.0)*x15091*x15096))+((x15092*x15095))+(((-1.0)*x15092*x15098))+((x15091*x15097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15099.valid){
continue;
}
CheckValue<IkReal> x15100=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+(((-1.0)*x15094*x15098))+((x15093*x15096))+((x15094*x15095))+(((-1.0)*x15093*x15097)))),-1);
if(!x15100.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15099.value)+(((1.5707963267949)*(x15100.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15101=IKsin(j4);
IkReal x15102=IKcos(j4);
IkReal x15103=(sj1*sj2);
IkReal x15104=(gconst34*sj3);
IkReal x15105=(gconst35*sj3);
IkReal x15106=(gconst35*r00);
IkReal x15107=(gconst34*r11);
IkReal x15108=(gconst34*r01);
IkReal x15109=((1.0)*cj2);
IkReal x15110=(cj1*sj2);
IkReal x15111=(cj3*gconst35);
IkReal x15112=(cj3*gconst34);
IkReal x15113=(cj1*x15109);
IkReal x15114=((1.0)*x15102);
IkReal x15115=((1.0)*x15101);
IkReal x15116=(r21*x15102);
IkReal x15117=(cj3*x15102);
IkReal x15118=(gconst35*x15101);
evalcond[0]=(((r20*x15118))+(((-1.0)*gconst34*r21*x15115))+(((-1.0)*r22*x15114)));
evalcond[1]=((((-1.0)*r02*x15114))+(((-1.0)*x15108*x15115))+((x15101*x15106)));
evalcond[2]=((-1.0)+((r10*x15118))+(((-1.0)*r12*x15114))+(((-1.0)*x15107*x15115)));
evalcond[3]=((((-1.0)*r10*x15111*x15114))+((r10*x15104))+(((-1.0)*cj3*r12*x15115))+((x15107*x15117))+((r11*x15105)));
evalcond[4]=((((-1.0)*r11*x15111))+(((-1.0)*r10*x15105*x15114))+((r11*x15102*x15104))+(((-1.0)*r10*x15112))+(((-1.0)*r12*sj3*x15115)));
evalcond[5]=(((r01*x15105))+((r00*x15104))+((x15108*x15117))+(((-1.0)*x15113))+x15103+(((-1.0)*cj3*r02*x15115))+(((-1.0)*cj3*x15106*x15114)));
evalcond[6]=((((-1.0)*x15110))+((r21*x15105))+(((-1.0)*r20*x15111*x15114))+((x15112*x15116))+((r20*x15104))+(((-1.0)*sj1*x15109))+(((-1.0)*cj3*r22*x15115)));
evalcond[7]=((((-1.0)*r02*sj3*x15115))+((cj2*sj1))+(((-1.0)*r00*x15105*x15114))+((r01*x15102*x15104))+x15110+(((-1.0)*r01*x15111))+(((-1.0)*r00*x15112)));
evalcond[8]=((((-1.0)*x15113))+((x15104*x15116))+(((-1.0)*r20*x15105*x15114))+x15103+(((-1.0)*r20*x15112))+(((-1.0)*r22*sj3*x15115))+(((-1.0)*r21*x15111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15119=((1.0)*gconst34);
CheckValue<IkReal> x15120 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r21*x15119))+((gconst35*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15120.valid){
continue;
}
CheckValue<IkReal> x15121=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst35*r01))+(((-1.0)*r00*x15119)))),-1);
if(!x15121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15120.value)+(((1.5707963267949)*(x15121.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15122=IKsin(j4);
IkReal x15123=IKcos(j4);
IkReal x15124=(sj1*sj2);
IkReal x15125=(gconst34*sj3);
IkReal x15126=(gconst35*sj3);
IkReal x15127=(gconst35*r00);
IkReal x15128=(gconst34*r11);
IkReal x15129=(gconst34*r01);
IkReal x15130=((1.0)*cj2);
IkReal x15131=(cj1*sj2);
IkReal x15132=(cj3*gconst35);
IkReal x15133=(cj3*gconst34);
IkReal x15134=(cj1*x15130);
IkReal x15135=((1.0)*x15123);
IkReal x15136=((1.0)*x15122);
IkReal x15137=(r21*x15123);
IkReal x15138=(cj3*x15123);
IkReal x15139=(gconst35*x15122);
evalcond[0]=(((r20*x15139))+(((-1.0)*gconst34*r21*x15136))+(((-1.0)*r22*x15135)));
evalcond[1]=((((-1.0)*r02*x15135))+(((-1.0)*x15129*x15136))+((x15122*x15127)));
evalcond[2]=((-1.0)+(((-1.0)*x15128*x15136))+(((-1.0)*r12*x15135))+((r10*x15139)));
evalcond[3]=((((-1.0)*r10*x15132*x15135))+((x15128*x15138))+(((-1.0)*cj3*r12*x15136))+((r10*x15125))+((r11*x15126)));
evalcond[4]=((((-1.0)*r12*sj3*x15136))+(((-1.0)*r10*x15126*x15135))+(((-1.0)*r11*x15132))+((r11*x15123*x15125))+(((-1.0)*r10*x15133)));
evalcond[5]=((((-1.0)*x15134))+((x15129*x15138))+(((-1.0)*cj3*r02*x15136))+((r01*x15126))+((r00*x15125))+x15124+(((-1.0)*cj3*x15127*x15135)));
evalcond[6]=(((r20*x15125))+((x15133*x15137))+((r21*x15126))+(((-1.0)*r20*x15132*x15135))+(((-1.0)*x15131))+(((-1.0)*sj1*x15130))+(((-1.0)*cj3*r22*x15136)));
evalcond[7]=(((cj2*sj1))+((r01*x15123*x15125))+(((-1.0)*r02*sj3*x15136))+(((-1.0)*r00*x15133))+(((-1.0)*r01*x15132))+(((-1.0)*r00*x15126*x15135))+x15131);
evalcond[8]=((((-1.0)*x15134))+(((-1.0)*r22*sj3*x15136))+(((-1.0)*r20*x15126*x15135))+x15124+(((-1.0)*r21*x15132))+((x15125*x15137))+(((-1.0)*r20*x15133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15140=IKPowWithIntegerCheck(IKsign((((gconst34*r20))+((gconst35*r21)))),-1);
if(!x15140.valid){
continue;
}
CheckValue<IkReal> x15141 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst35*r00))+(((-1.0)*gconst34*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15140.value)))+(x15141.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15142=IKsin(j4);
IkReal x15143=IKcos(j4);
IkReal x15144=(sj1*sj2);
IkReal x15145=(gconst34*sj3);
IkReal x15146=(gconst35*sj3);
IkReal x15147=(gconst35*r00);
IkReal x15148=(gconst34*r11);
IkReal x15149=(gconst34*r01);
IkReal x15150=((1.0)*cj2);
IkReal x15151=(cj1*sj2);
IkReal x15152=(cj3*gconst35);
IkReal x15153=(cj3*gconst34);
IkReal x15154=(cj1*x15150);
IkReal x15155=((1.0)*x15143);
IkReal x15156=((1.0)*x15142);
IkReal x15157=(r21*x15143);
IkReal x15158=(cj3*x15143);
IkReal x15159=(gconst35*x15142);
evalcond[0]=((((-1.0)*gconst34*r21*x15156))+(((-1.0)*r22*x15155))+((r20*x15159)));
evalcond[1]=((((-1.0)*r02*x15155))+(((-1.0)*x15149*x15156))+((x15142*x15147)));
evalcond[2]=((-1.0)+(((-1.0)*x15148*x15156))+(((-1.0)*r12*x15155))+((r10*x15159)));
evalcond[3]=(((x15148*x15158))+((r10*x15145))+((r11*x15146))+(((-1.0)*cj3*r12*x15156))+(((-1.0)*r10*x15152*x15155)));
evalcond[4]=((((-1.0)*r12*sj3*x15156))+((r11*x15143*x15145))+(((-1.0)*r10*x15146*x15155))+(((-1.0)*r11*x15152))+(((-1.0)*r10*x15153)));
evalcond[5]=(((x15149*x15158))+(((-1.0)*x15154))+(((-1.0)*cj3*r02*x15156))+x15144+((r01*x15146))+((r00*x15145))+(((-1.0)*cj3*x15147*x15155)));
evalcond[6]=((((-1.0)*cj3*r22*x15156))+(((-1.0)*r20*x15152*x15155))+((x15153*x15157))+((r20*x15145))+((r21*x15146))+(((-1.0)*x15151))+(((-1.0)*sj1*x15150)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r02*sj3*x15156))+(((-1.0)*r00*x15153))+(((-1.0)*r00*x15146*x15155))+(((-1.0)*r01*x15152))+x15151+((r01*x15143*x15145)));
evalcond[8]=((((-1.0)*r20*x15153))+(((-1.0)*x15154))+(((-1.0)*r22*sj3*x15156))+(((-1.0)*r20*x15146*x15155))+x15144+((x15145*x15157))+(((-1.0)*r21*x15152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15160=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15161=(cj5*r10);
IkReal x15162=(r11*sj5);
j4eval[0]=((((-1.0)*x15162))+x15161);
j4eval[1]=((((-1.0)*sj3*x15161))+((sj3*x15162)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15163=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15163);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15163);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x15164=(r11*sj5);
IkReal x15165=(cj5*r10);
j4eval[0]=((((-1.0)*x15164))+x15165);
j4eval[1]=(((cj3*x15164))+(((-1.0)*cj3*x15165)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15166=((-1.0)*pz);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15166);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15166);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15167=((1.0)*sj3);
CheckValue<IkReal> x15168=IKPowWithIntegerCheck(r22,-1);
if(!x15168.valid){
continue;
}
CheckValue<IkReal> x15169=IKPowWithIntegerCheck(sj3,-1);
if(!x15169.valid){
continue;
}
CheckValue<IkReal> x15170=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10))),-1);
if(!x15170.valid){
continue;
}
if( IKabs(((x15168.value)*(x15169.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15170.value)*(((((-1.0)*r10*sj5*x15167))+(((-1.0)*cj5*r11*x15167)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15168.value)*(x15169.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15170.value)*(((((-1.0)*r10*sj5*x15167))+(((-1.0)*cj5*r11*x15167))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15168.value)*(x15169.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15170.value)*(((((-1.0)*r10*sj5*x15167))+(((-1.0)*cj5*r11*x15167))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15171=IKsin(j4);
IkReal x15172=IKcos(j4);
IkReal x15173=(sj1*sj2);
IkReal x15174=(r11*sj5);
IkReal x15175=(r00*sj5);
IkReal x15176=(cj5*r01);
IkReal x15177=((1.0)*cj3);
IkReal x15178=(r10*sj5);
IkReal x15179=((1.0)*cj1);
IkReal x15180=(cj5*r11);
IkReal x15181=((1.0)*cj5);
IkReal x15182=(cj2*sj1);
IkReal x15183=(r01*sj5);
IkReal x15184=(cj2*x15179);
IkReal x15185=(cj3*x15172);
IkReal x15186=((1.0)*x15171);
IkReal x15187=(sj3*x15172);
IkReal x15188=(cj5*x15171);
evalcond[0]=((-1.0)*r22*x15172);
evalcond[1]=(((r00*x15188))+(((-1.0)*x15183*x15186)));
evalcond[2]=((-1.0)+(((-1.0)*x15174*x15186))+((r10*x15188)));
evalcond[3]=((((-1.0)*x15184))+x15173+(((-1.0)*r22*sj3*x15186)));
evalcond[4]=((((-1.0)*x15182))+(((-1.0)*sj2*x15179))+(((-1.0)*r22*x15171*x15177)));
evalcond[5]=(((x15174*x15185))+(((-1.0)*cj5*r10*x15172*x15177))+((sj3*x15180))+((sj3*x15178)));
evalcond[6]=((((-1.0)*x15177*x15178))+((x15174*x15187))+(((-1.0)*r10*x15181*x15187))+(((-1.0)*x15177*x15180)));
evalcond[7]=((((-1.0)*cj5*r00*x15172*x15177))+(((-1.0)*x15184))+((x15183*x15185))+x15173+((sj3*x15175))+((sj3*x15176)));
evalcond[8]=((((-1.0)*x15176*x15177))+((cj1*sj2))+((x15183*x15187))+x15182+(((-1.0)*r00*x15181*x15187))+(((-1.0)*x15175*x15177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15189=(cj5*r10);
IkReal x15190=((1.0)*sj3);
IkReal x15191=(r11*sj5);
CheckValue<IkReal> x15192=IKPowWithIntegerCheck((x15189+(((-1.0)*x15191))),-1);
if(!x15192.valid){
continue;
}
CheckValue<IkReal> x15193=IKPowWithIntegerCheck((((cj3*x15191))+(((-1.0)*cj3*x15189))),-1);
if(!x15193.valid){
continue;
}
if( IKabs(x15192.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15193.value)*(((((-1.0)*cj5*r11*x15190))+(((-1.0)*r10*sj5*x15190)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15192.value)+IKsqr(((x15193.value)*(((((-1.0)*cj5*r11*x15190))+(((-1.0)*r10*sj5*x15190))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15192.value, ((x15193.value)*(((((-1.0)*cj5*r11*x15190))+(((-1.0)*r10*sj5*x15190))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15194=IKsin(j4);
IkReal x15195=IKcos(j4);
IkReal x15196=(sj1*sj2);
IkReal x15197=(r11*sj5);
IkReal x15198=(r00*sj5);
IkReal x15199=(cj5*r01);
IkReal x15200=((1.0)*cj3);
IkReal x15201=(r10*sj5);
IkReal x15202=((1.0)*cj1);
IkReal x15203=(cj5*r11);
IkReal x15204=((1.0)*cj5);
IkReal x15205=(cj2*sj1);
IkReal x15206=(r01*sj5);
IkReal x15207=(cj2*x15202);
IkReal x15208=(cj3*x15195);
IkReal x15209=((1.0)*x15194);
IkReal x15210=(sj3*x15195);
IkReal x15211=(cj5*x15194);
evalcond[0]=((-1.0)*r22*x15195);
evalcond[1]=(((r00*x15211))+(((-1.0)*x15206*x15209)));
evalcond[2]=((-1.0)+((r10*x15211))+(((-1.0)*x15197*x15209)));
evalcond[3]=(x15196+(((-1.0)*x15207))+(((-1.0)*r22*sj3*x15209)));
evalcond[4]=((((-1.0)*sj2*x15202))+(((-1.0)*x15205))+(((-1.0)*r22*x15194*x15200)));
evalcond[5]=(((sj3*x15203))+((sj3*x15201))+(((-1.0)*cj5*r10*x15195*x15200))+((x15197*x15208)));
evalcond[6]=((((-1.0)*r10*x15204*x15210))+((x15197*x15210))+(((-1.0)*x15200*x15203))+(((-1.0)*x15200*x15201)));
evalcond[7]=(((sj3*x15198))+((sj3*x15199))+((x15206*x15208))+x15196+(((-1.0)*x15207))+(((-1.0)*cj5*r00*x15195*x15200)));
evalcond[8]=((((-1.0)*r00*x15204*x15210))+(((-1.0)*x15199*x15200))+(((-1.0)*x15198*x15200))+((cj1*sj2))+((x15206*x15210))+x15205);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15212=(cj5*r10);
IkReal x15213=(r11*sj5);
CheckValue<IkReal> x15214=IKPowWithIntegerCheck(((((-1.0)*x15213))+x15212),-1);
if(!x15214.valid){
continue;
}
CheckValue<IkReal> x15215=IKPowWithIntegerCheck((((sj3*x15213))+(((-1.0)*sj3*x15212))),-1);
if(!x15215.valid){
continue;
}
if( IKabs(x15214.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15215.value)*((((cj3*cj5*r11))+((cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15214.value)+IKsqr(((x15215.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15214.value, ((x15215.value)*((((cj3*cj5*r11))+((cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15216=IKsin(j4);
IkReal x15217=IKcos(j4);
IkReal x15218=(sj1*sj2);
IkReal x15219=(r11*sj5);
IkReal x15220=(r00*sj5);
IkReal x15221=(cj5*r01);
IkReal x15222=((1.0)*cj3);
IkReal x15223=(r10*sj5);
IkReal x15224=((1.0)*cj1);
IkReal x15225=(cj5*r11);
IkReal x15226=((1.0)*cj5);
IkReal x15227=(cj2*sj1);
IkReal x15228=(r01*sj5);
IkReal x15229=(cj2*x15224);
IkReal x15230=(cj3*x15217);
IkReal x15231=((1.0)*x15216);
IkReal x15232=(sj3*x15217);
IkReal x15233=(cj5*x15216);
evalcond[0]=((-1.0)*r22*x15217);
evalcond[1]=(((r00*x15233))+(((-1.0)*x15228*x15231)));
evalcond[2]=((-1.0)+((r10*x15233))+(((-1.0)*x15219*x15231)));
evalcond[3]=(x15218+(((-1.0)*r22*sj3*x15231))+(((-1.0)*x15229)));
evalcond[4]=((((-1.0)*x15227))+(((-1.0)*r22*x15216*x15222))+(((-1.0)*sj2*x15224)));
evalcond[5]=((((-1.0)*cj5*r10*x15217*x15222))+((x15219*x15230))+((sj3*x15223))+((sj3*x15225)));
evalcond[6]=(((x15219*x15232))+(((-1.0)*x15222*x15223))+(((-1.0)*x15222*x15225))+(((-1.0)*r10*x15226*x15232)));
evalcond[7]=(((x15228*x15230))+x15218+(((-1.0)*x15229))+((sj3*x15220))+((sj3*x15221))+(((-1.0)*cj5*r00*x15217*x15222)));
evalcond[8]=((((-1.0)*x15220*x15222))+(((-1.0)*x15221*x15222))+(((-1.0)*r00*x15226*x15232))+((cj1*sj2))+((x15228*x15232))+x15227);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15234=cj5*cj5;
IkReal x15235=(r11*sj3);
IkReal x15236=(cj3*r10);
IkReal x15237=(cj3*r11);
IkReal x15238=(r10*sj3);
IkReal x15239=(cj5*r20*sj5);
IkReal x15240=(r21*x15234);
IkReal x15241=(r20*x15234);
IkReal x15242=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x15243=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((x15236*x15241))+((r21*x15237))+(((-1.0)*x15237*x15240))+(((-1.0)*x15237*x15239))+(((-1.0)*x15236*x15242)))),-1);
if(!x15243.valid){
continue;
}
CheckValue<IkReal> x15244 = IKatan2WithCheck(IkReal((((r22*sj5*x15238))+((cj5*r22*x15235)))),IkReal(((((-1.0)*x15235*x15242))+(((-1.0)*r21*x15238))+((x15235*x15241))+((x15238*x15239))+((x15238*x15240)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15243.value)))+(x15244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15245=IKsin(j4);
IkReal x15246=IKcos(j4);
IkReal x15247=(sj1*sj2);
IkReal x15248=((1.0)*r22);
IkReal x15249=(r11*sj5);
IkReal x15250=((1.0)*cj3);
IkReal x15251=(cj5*r21);
IkReal x15252=(r00*sj5);
IkReal x15253=(cj5*r01);
IkReal x15254=(r10*sj5);
IkReal x15255=((1.0)*cj1);
IkReal x15256=(cj5*r10);
IkReal x15257=(r21*sj5);
IkReal x15258=(r01*sj5);
IkReal x15259=(cj2*sj1);
IkReal x15260=(cj5*r00);
IkReal x15261=(cj5*r20);
IkReal x15262=(r20*sj5);
IkReal x15263=(cj5*r11);
IkReal x15264=(cj2*x15255);
IkReal x15265=((1.0)*x15245);
IkReal x15266=(cj3*x15246);
IkReal x15267=((1.0)*x15246);
IkReal x15268=(sj3*x15246);
evalcond[0]=((((-1.0)*x15257*x15265))+(((-1.0)*x15246*x15248))+((x15245*x15261)));
evalcond[1]=((((-1.0)*r02*x15267))+(((-1.0)*x15258*x15265))+((x15245*x15260)));
evalcond[2]=((-1.0)+((x15245*x15256))+(((-1.0)*x15249*x15265))+(((-1.0)*r12*x15267)));
evalcond[3]=(((x15249*x15266))+((sj3*x15254))+((sj3*x15263))+(((-1.0)*r12*x15245*x15250))+(((-1.0)*x15246*x15250*x15256)));
evalcond[4]=(((x15249*x15268))+(((-1.0)*r12*sj3*x15265))+(((-1.0)*x15250*x15254))+(((-1.0)*x15250*x15263))+(((-1.0)*sj3*x15256*x15267)));
evalcond[5]=((((-1.0)*x15246*x15250*x15260))+((sj3*x15253))+((sj3*x15252))+x15247+(((-1.0)*x15264))+((x15258*x15266))+(((-1.0)*r02*x15245*x15250)));
evalcond[6]=((((-1.0)*x15246*x15250*x15261))+((sj3*x15251))+(((-1.0)*x15259))+((x15257*x15266))+((sj3*x15262))+(((-1.0)*cj3*x15245*x15248))+(((-1.0)*sj2*x15255)));
evalcond[7]=((((-1.0)*sj3*x15260*x15267))+((cj1*sj2))+x15259+(((-1.0)*x15250*x15253))+(((-1.0)*x15250*x15252))+((x15258*x15268))+(((-1.0)*r02*sj3*x15265)));
evalcond[8]=((((-1.0)*sj3*x15245*x15248))+((x15257*x15268))+x15247+(((-1.0)*x15250*x15251))+(((-1.0)*x15264))+(((-1.0)*x15250*x15262))+(((-1.0)*sj3*x15261*x15267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15269=((1.0)*sj5);
CheckValue<IkReal> x15270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x15269))+(((-1.0)*cj5*r01)))),-1);
if(!x15270.valid){
continue;
}
CheckValue<IkReal> x15271 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x15269)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15270.value)))+(x15271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15272=IKsin(j4);
IkReal x15273=IKcos(j4);
IkReal x15274=(sj1*sj2);
IkReal x15275=((1.0)*r22);
IkReal x15276=(r11*sj5);
IkReal x15277=((1.0)*cj3);
IkReal x15278=(cj5*r21);
IkReal x15279=(r00*sj5);
IkReal x15280=(cj5*r01);
IkReal x15281=(r10*sj5);
IkReal x15282=((1.0)*cj1);
IkReal x15283=(cj5*r10);
IkReal x15284=(r21*sj5);
IkReal x15285=(r01*sj5);
IkReal x15286=(cj2*sj1);
IkReal x15287=(cj5*r00);
IkReal x15288=(cj5*r20);
IkReal x15289=(r20*sj5);
IkReal x15290=(cj5*r11);
IkReal x15291=(cj2*x15282);
IkReal x15292=((1.0)*x15272);
IkReal x15293=(cj3*x15273);
IkReal x15294=((1.0)*x15273);
IkReal x15295=(sj3*x15273);
evalcond[0]=(((x15272*x15288))+(((-1.0)*x15273*x15275))+(((-1.0)*x15284*x15292)));
evalcond[1]=((((-1.0)*x15285*x15292))+((x15272*x15287))+(((-1.0)*r02*x15294)));
evalcond[2]=((-1.0)+((x15272*x15283))+(((-1.0)*r12*x15294))+(((-1.0)*x15276*x15292)));
evalcond[3]=(((sj3*x15290))+(((-1.0)*x15273*x15277*x15283))+((x15276*x15293))+(((-1.0)*r12*x15272*x15277))+((sj3*x15281)));
evalcond[4]=((((-1.0)*x15277*x15281))+((x15276*x15295))+(((-1.0)*sj3*x15283*x15294))+(((-1.0)*x15277*x15290))+(((-1.0)*r12*sj3*x15292)));
evalcond[5]=(x15274+((x15285*x15293))+(((-1.0)*x15291))+(((-1.0)*x15273*x15277*x15287))+(((-1.0)*r02*x15272*x15277))+((sj3*x15279))+((sj3*x15280)));
evalcond[6]=((((-1.0)*sj2*x15282))+(((-1.0)*x15273*x15277*x15288))+(((-1.0)*cj3*x15272*x15275))+((sj3*x15278))+(((-1.0)*x15286))+((x15284*x15293))+((sj3*x15289)));
evalcond[7]=((((-1.0)*sj3*x15287*x15294))+(((-1.0)*r02*sj3*x15292))+((cj1*sj2))+(((-1.0)*x15277*x15279))+x15286+(((-1.0)*x15277*x15280))+((x15285*x15295)));
evalcond[8]=((((-1.0)*sj3*x15288*x15294))+(((-1.0)*x15277*x15278))+x15274+(((-1.0)*x15277*x15289))+(((-1.0)*sj3*x15272*x15275))+(((-1.0)*x15291))+((x15284*x15295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15296=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15296.valid){
continue;
}
CheckValue<IkReal> x15297 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15296.value)))+(x15297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15298=IKsin(j4);
IkReal x15299=IKcos(j4);
IkReal x15300=(sj1*sj2);
IkReal x15301=((1.0)*r22);
IkReal x15302=(r11*sj5);
IkReal x15303=((1.0)*cj3);
IkReal x15304=(cj5*r21);
IkReal x15305=(r00*sj5);
IkReal x15306=(cj5*r01);
IkReal x15307=(r10*sj5);
IkReal x15308=((1.0)*cj1);
IkReal x15309=(cj5*r10);
IkReal x15310=(r21*sj5);
IkReal x15311=(r01*sj5);
IkReal x15312=(cj2*sj1);
IkReal x15313=(cj5*r00);
IkReal x15314=(cj5*r20);
IkReal x15315=(r20*sj5);
IkReal x15316=(cj5*r11);
IkReal x15317=(cj2*x15308);
IkReal x15318=((1.0)*x15298);
IkReal x15319=(cj3*x15299);
IkReal x15320=((1.0)*x15299);
IkReal x15321=(sj3*x15299);
evalcond[0]=((((-1.0)*x15310*x15318))+((x15298*x15314))+(((-1.0)*x15299*x15301)));
evalcond[1]=((((-1.0)*x15311*x15318))+(((-1.0)*r02*x15320))+((x15298*x15313)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x15320))+((x15298*x15309))+(((-1.0)*x15302*x15318)));
evalcond[3]=(((sj3*x15316))+((sj3*x15307))+((x15302*x15319))+(((-1.0)*x15299*x15303*x15309))+(((-1.0)*r12*x15298*x15303)));
evalcond[4]=((((-1.0)*sj3*x15309*x15320))+(((-1.0)*x15303*x15307))+(((-1.0)*x15303*x15316))+(((-1.0)*r12*sj3*x15318))+((x15302*x15321)));
evalcond[5]=((((-1.0)*r02*x15298*x15303))+((sj3*x15306))+((sj3*x15305))+(((-1.0)*x15317))+x15300+(((-1.0)*x15299*x15303*x15313))+((x15311*x15319)));
evalcond[6]=(((sj3*x15315))+(((-1.0)*x15312))+((sj3*x15304))+(((-1.0)*x15299*x15303*x15314))+((x15310*x15319))+(((-1.0)*sj2*x15308))+(((-1.0)*cj3*x15298*x15301)));
evalcond[7]=((((-1.0)*x15303*x15306))+(((-1.0)*x15303*x15305))+((cj1*sj2))+x15312+(((-1.0)*r02*sj3*x15318))+(((-1.0)*sj3*x15313*x15320))+((x15311*x15321)));
evalcond[8]=((((-1.0)*x15303*x15304))+(((-1.0)*x15303*x15315))+(((-1.0)*x15317))+x15300+((x15310*x15321))+(((-1.0)*sj3*x15298*x15301))+(((-1.0)*sj3*x15314*x15320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15323 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15323)==0){
continue;
}
IkReal x15322=pow(x15323,-0.5);
CheckValue<IkReal> x15324 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15324.valid){
continue;
}
IkReal gconst12=((-1.0)*(x15324.value));
IkReal gconst13=((-1.0)*r01*x15322);
IkReal gconst14=(r00*x15322);
CheckValue<IkReal> x15325 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15325.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15325.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x15328 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15328.valid){
continue;
}
IkReal x15326=((-1.0)*(x15328.value));
IkReal x15327=x15322;
sj5=gconst13;
cj5=gconst14;
j5=x15326;
IkReal gconst12=x15326;
IkReal gconst13=((-1.0)*r01*x15327);
IkReal gconst14=(r00*x15327);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15329=((1.0)*sj0);
IkReal x15330=((1.0)*cj0);
CheckValue<IkReal> x15331 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15329))+(((-1.0)*r02*x15330)))),IkReal(((((-1.0)*gconst14*r00*x15330))+(((-1.0)*gconst14*r10*x15329))+((cj0*gconst13*r01))+((gconst13*r11*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15331.valid){
continue;
}
CheckValue<IkReal> x15332=IKPowWithIntegerCheck(IKsign((((gconst14*r21))+((gconst13*r20)))),-1);
if(!x15332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15331.value)+(((1.5707963267949)*(x15332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15333=IKsin(j4);
IkReal x15334=IKcos(j4);
IkReal x15335=((1.0)*r22);
IkReal x15336=((1.0)*cj3);
IkReal x15337=(gconst13*r20);
IkReal x15338=(cj1*cj2);
IkReal x15339=(gconst13*sj3);
IkReal x15340=(gconst13*r11);
IkReal x15341=(sj1*sj2);
IkReal x15342=(gconst14*r21);
IkReal x15343=(gconst14*r20);
IkReal x15344=(gconst14*sj3);
IkReal x15345=((1.0)*sj0);
IkReal x15346=(gconst14*r10);
IkReal x15347=(gconst14*r00);
IkReal x15348=((1.0)*x15333);
IkReal x15349=((1.0)*cj2*sj1);
IkReal x15350=((1.0)*cj1*sj2);
IkReal x15351=((1.0)*x15334);
IkReal x15352=(cj3*gconst13*x15334);
evalcond[0]=((((-1.0)*gconst13*r21*x15348))+(((-1.0)*x15334*x15335))+((x15333*x15343)));
evalcond[1]=(cj0+(((-1.0)*r12*x15351))+(((-1.0)*x15340*x15348))+((x15333*x15346)));
evalcond[2]=((((-1.0)*r02*x15351))+(((-1.0)*x15345))+(((-1.0)*gconst13*r01*x15348))+((x15333*x15347)));
evalcond[3]=(((sj3*x15337))+(((-1.0)*x15349))+(((-1.0)*x15334*x15336*x15343))+(((-1.0)*x15350))+(((-1.0)*cj3*x15333*x15335))+((sj3*x15342))+((r21*x15352)));
evalcond[4]=((((-1.0)*x15338))+((r21*x15334*x15339))+(((-1.0)*sj3*x15333*x15335))+(((-1.0)*x15336*x15342))+x15341+(((-1.0)*sj3*x15343*x15351))+(((-1.0)*x15336*x15337)));
evalcond[5]=(((r01*x15344))+((cj0*x15338))+((r00*x15339))+(((-1.0)*x15334*x15336*x15347))+(((-1.0)*r02*x15333*x15336))+(((-1.0)*cj0*x15341))+((r01*x15352)));
evalcond[6]=(((cj3*x15334*x15340))+(((-1.0)*x15334*x15336*x15346))+((r11*x15344))+((r10*x15339))+((sj0*x15338))+(((-1.0)*x15341*x15345))+(((-1.0)*r12*x15333*x15336)));
evalcond[7]=((((-1.0)*r00*x15344*x15351))+(((-1.0)*cj0*x15350))+(((-1.0)*cj0*x15349))+(((-1.0)*gconst13*r00*x15336))+(((-1.0)*gconst14*r01*x15336))+(((-1.0)*r02*sj3*x15348))+((r01*x15334*x15339)));
evalcond[8]=((((-1.0)*gconst14*r11*x15336))+(((-1.0)*r12*sj3*x15348))+(((-1.0)*r10*x15344*x15351))+(((-1.0)*gconst13*r10*x15336))+((r11*x15334*x15339))+(((-1.0)*cj2*sj1*x15345))+(((-1.0)*cj1*sj2*x15345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15353=IKPowWithIntegerCheck(IKsign((((gconst14*r11))+((gconst13*r10)))),-1);
if(!x15353.valid){
continue;
}
CheckValue<IkReal> x15354 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*gconst13*r21*sj0))+((gconst14*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15353.value)))+(x15354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15355=IKsin(j4);
IkReal x15356=IKcos(j4);
IkReal x15357=((1.0)*r22);
IkReal x15358=((1.0)*cj3);
IkReal x15359=(gconst13*r20);
IkReal x15360=(cj1*cj2);
IkReal x15361=(gconst13*sj3);
IkReal x15362=(gconst13*r11);
IkReal x15363=(sj1*sj2);
IkReal x15364=(gconst14*r21);
IkReal x15365=(gconst14*r20);
IkReal x15366=(gconst14*sj3);
IkReal x15367=((1.0)*sj0);
IkReal x15368=(gconst14*r10);
IkReal x15369=(gconst14*r00);
IkReal x15370=((1.0)*x15355);
IkReal x15371=((1.0)*cj2*sj1);
IkReal x15372=((1.0)*cj1*sj2);
IkReal x15373=((1.0)*x15356);
IkReal x15374=(cj3*gconst13*x15356);
evalcond[0]=((((-1.0)*gconst13*r21*x15370))+((x15355*x15365))+(((-1.0)*x15356*x15357)));
evalcond[1]=(cj0+((x15355*x15368))+(((-1.0)*r12*x15373))+(((-1.0)*x15362*x15370)));
evalcond[2]=((((-1.0)*gconst13*r01*x15370))+(((-1.0)*x15367))+((x15355*x15369))+(((-1.0)*r02*x15373)));
evalcond[3]=(((r21*x15374))+(((-1.0)*x15356*x15358*x15365))+(((-1.0)*cj3*x15355*x15357))+((sj3*x15364))+(((-1.0)*x15372))+(((-1.0)*x15371))+((sj3*x15359)));
evalcond[4]=(((r21*x15356*x15361))+x15363+(((-1.0)*sj3*x15365*x15373))+(((-1.0)*x15360))+(((-1.0)*x15358*x15359))+(((-1.0)*sj3*x15355*x15357))+(((-1.0)*x15358*x15364)));
evalcond[5]=(((r01*x15374))+(((-1.0)*cj0*x15363))+(((-1.0)*x15356*x15358*x15369))+(((-1.0)*r02*x15355*x15358))+((r00*x15361))+((cj0*x15360))+((r01*x15366)));
evalcond[6]=(((sj0*x15360))+((r10*x15361))+(((-1.0)*x15363*x15367))+((r11*x15366))+(((-1.0)*x15356*x15358*x15368))+((cj3*x15356*x15362))+(((-1.0)*r12*x15355*x15358)));
evalcond[7]=((((-1.0)*r00*x15366*x15373))+((r01*x15356*x15361))+(((-1.0)*r02*sj3*x15370))+(((-1.0)*gconst14*r01*x15358))+(((-1.0)*gconst13*r00*x15358))+(((-1.0)*cj0*x15372))+(((-1.0)*cj0*x15371)));
evalcond[8]=((((-1.0)*gconst13*r10*x15358))+(((-1.0)*r12*sj3*x15370))+(((-1.0)*cj2*sj1*x15367))+(((-1.0)*cj1*sj2*x15367))+((r11*x15356*x15361))+(((-1.0)*gconst14*r11*x15358))+(((-1.0)*r10*x15366*x15373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15376 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x15376)==0){
continue;
}
IkReal x15375=pow(x15376,-0.5);
CheckValue<IkReal> x15377 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15377.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x15377.value))));
IkReal gconst16=((1.0)*r01*x15375);
IkReal gconst17=((-1.0)*r00*x15375);
CheckValue<IkReal> x15378 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15378.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15378.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
CheckValue<IkReal> x15381 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15381.valid){
continue;
}
IkReal x15379=((1.0)*(x15381.value));
IkReal x15380=x15375;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15379)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15379)));
IkReal gconst16=((1.0)*r01*x15380);
IkReal gconst17=((-1.0)*r00*x15380);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x15384 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15384.valid){
continue;
}
IkReal x15382=((1.0)*(x15384.value));
IkReal x15383=x15375;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15382)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15382)));
IkReal gconst16=((1.0)*r01*x15383);
IkReal gconst17=((-1.0)*r00*x15383);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15387 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15387.valid){
continue;
}
IkReal x15385=((1.0)*(x15387.value));
IkReal x15386=x15375;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15385)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15385)));
IkReal gconst16=((1.0)*r01*x15386);
IkReal gconst17=((-1.0)*r00*x15386);
IkReal x15388=r02*r02;
IkReal x15389=(r12*sj0);
IkReal x15390=((1.0)*cj0);
IkReal x15391=x15375;
j4eval[0]=((IKabs((((r02*x15389*x15391))+(((-1.0)*x15390*x15391))+((cj0*x15388*x15391)))))+(IKabs(((((-1.0)*r02*x15390))+(((-1.0)*x15389))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15394 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15394.valid){
continue;
}
IkReal x15392=((1.0)*(x15394.value));
IkReal x15393=x15375;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15392)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15392)));
IkReal gconst16=((1.0)*r01*x15393);
IkReal gconst17=((-1.0)*r00*x15393);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x15397 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15397.valid){
continue;
}
IkReal x15395=((1.0)*(x15397.value));
IkReal x15396=x15375;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15395)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15395)));
IkReal gconst16=((1.0)*r01*x15396);
IkReal gconst17=((-1.0)*r00*x15396);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15398=gconst17*gconst17;
IkReal x15399=gconst16*gconst16;
IkReal x15400=(r11*r21);
IkReal x15401=(r20*sj3);
IkReal x15402=(gconst16*r10);
IkReal x15403=(cj3*r20);
IkReal x15404=(r22*sj3);
IkReal x15405=(gconst17*r11);
IkReal x15406=((1.0)*gconst16);
IkReal x15407=((1.0)*r21);
CheckValue<IkReal> x15408 = IKatan2WithCheck(IkReal((((x15404*x15405))+((x15402*x15404)))),IkReal(((((-1.0)*r10*sj3*x15399*x15407))+((r11*x15398*x15401))+((gconst17*x15401*x15402))+(((-1.0)*gconst17*sj3*x15400*x15406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15408.valid){
continue;
}
CheckValue<IkReal> x15409=IKPowWithIntegerCheck(IKsign((((cj3*r12*r22))+((cj3*x15399*x15400))+(((-1.0)*cj3*gconst17*x15402*x15407))+(((-1.0)*x15403*x15405*x15406))+((r10*x15398*x15403)))),-1);
if(!x15409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15408.value)+(((1.5707963267949)*(x15409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15410=IKsin(j4);
IkReal x15411=IKcos(j4);
IkReal x15412=(sj1*sj2);
IkReal x15413=((1.0)*cj1);
IkReal x15414=(cj3*gconst17);
IkReal x15415=(r11*sj3);
IkReal x15416=(r21*sj3);
IkReal x15417=(gconst17*sj3);
IkReal x15418=(cj2*sj1);
IkReal x15419=(gconst16*r00);
IkReal x15420=((1.0)*cj3);
IkReal x15421=(gconst16*sj3);
IkReal x15422=(cj2*x15413);
IkReal x15423=((1.0)*x15411);
IkReal x15424=((1.0)*x15410);
IkReal x15425=(gconst16*x15411);
IkReal x15426=(gconst17*x15410);
evalcond[0]=(((r20*x15426))+(((-1.0)*gconst16*r21*x15424))+(((-1.0)*r22*x15423)));
evalcond[1]=((((-1.0)*r02*x15423))+((r00*x15426))+(((-1.0)*gconst16*r01*x15424)));
evalcond[2]=((-1.0)+((r10*x15426))+(((-1.0)*r12*x15423))+(((-1.0)*gconst16*r11*x15424)));
evalcond[3]=(((r10*x15421))+(((-1.0)*r10*x15414*x15423))+((cj3*r11*x15425))+(((-1.0)*r12*x15410*x15420))+((gconst17*x15415)));
evalcond[4]=((((-1.0)*r12*sj3*x15424))+(((-1.0)*r11*x15414))+((x15415*x15425))+(((-1.0)*r10*x15417*x15423))+(((-1.0)*gconst16*r10*x15420)));
evalcond[5]=((((-1.0)*r00*x15414*x15423))+(((-1.0)*r02*x15410*x15420))+((r01*x15417))+((sj3*x15419))+((cj3*r01*x15425))+(((-1.0)*x15422))+x15412);
evalcond[6]=(((r20*x15421))+(((-1.0)*r20*x15414*x15423))+(((-1.0)*r22*x15410*x15420))+(((-1.0)*x15418))+((gconst17*x15416))+((cj3*r21*x15425))+(((-1.0)*sj2*x15413)));
evalcond[7]=((((-1.0)*x15419*x15420))+(((-1.0)*r01*x15414))+((cj1*sj2))+((r01*x15411*x15421))+(((-1.0)*r02*sj3*x15424))+x15418+(((-1.0)*r00*x15417*x15423)));
evalcond[8]=((((-1.0)*r20*x15417*x15423))+(((-1.0)*r22*sj3*x15424))+(((-1.0)*gconst16*r20*x15420))+((x15416*x15425))+(((-1.0)*r21*x15414))+(((-1.0)*x15422))+x15412);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15427=((1.0)*gconst16);
CheckValue<IkReal> x15428 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst17*r20))+(((-1.0)*r21*x15427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15428.valid){
continue;
}
CheckValue<IkReal> x15429=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r01))+(((-1.0)*r00*x15427)))),-1);
if(!x15429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15428.value)+(((1.5707963267949)*(x15429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15430=IKsin(j4);
IkReal x15431=IKcos(j4);
IkReal x15432=(sj1*sj2);
IkReal x15433=((1.0)*cj1);
IkReal x15434=(cj3*gconst17);
IkReal x15435=(r11*sj3);
IkReal x15436=(r21*sj3);
IkReal x15437=(gconst17*sj3);
IkReal x15438=(cj2*sj1);
IkReal x15439=(gconst16*r00);
IkReal x15440=((1.0)*cj3);
IkReal x15441=(gconst16*sj3);
IkReal x15442=(cj2*x15433);
IkReal x15443=((1.0)*x15431);
IkReal x15444=((1.0)*x15430);
IkReal x15445=(gconst16*x15431);
IkReal x15446=(gconst17*x15430);
evalcond[0]=(((r20*x15446))+(((-1.0)*r22*x15443))+(((-1.0)*gconst16*r21*x15444)));
evalcond[1]=(((r00*x15446))+(((-1.0)*gconst16*r01*x15444))+(((-1.0)*r02*x15443)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x15443))+((r10*x15446))+(((-1.0)*gconst16*r11*x15444)));
evalcond[3]=((((-1.0)*r10*x15434*x15443))+((r10*x15441))+(((-1.0)*r12*x15430*x15440))+((cj3*r11*x15445))+((gconst17*x15435)));
evalcond[4]=((((-1.0)*r10*x15437*x15443))+((x15435*x15445))+(((-1.0)*r11*x15434))+(((-1.0)*r12*sj3*x15444))+(((-1.0)*gconst16*r10*x15440)));
evalcond[5]=((((-1.0)*r00*x15434*x15443))+((sj3*x15439))+((cj3*r01*x15445))+x15432+(((-1.0)*x15442))+((r01*x15437))+(((-1.0)*r02*x15430*x15440)));
evalcond[6]=(((r20*x15441))+((cj3*r21*x15445))+(((-1.0)*r20*x15434*x15443))+(((-1.0)*sj2*x15433))+(((-1.0)*r22*x15430*x15440))+(((-1.0)*x15438))+((gconst17*x15436)));
evalcond[7]=((((-1.0)*x15439*x15440))+(((-1.0)*r00*x15437*x15443))+(((-1.0)*r02*sj3*x15444))+((cj1*sj2))+(((-1.0)*r01*x15434))+x15438+((r01*x15431*x15441)));
evalcond[8]=(((x15436*x15445))+(((-1.0)*r21*x15434))+(((-1.0)*r22*sj3*x15444))+(((-1.0)*gconst16*r20*x15440))+(((-1.0)*r20*x15437*x15443))+x15432+(((-1.0)*x15442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15447 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst16*r01))+((gconst17*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15447.valid){
continue;
}
CheckValue<IkReal> x15448=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15447.value)+(((1.5707963267949)*(x15448.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15449=IKsin(j4);
IkReal x15450=IKcos(j4);
IkReal x15451=(sj1*sj2);
IkReal x15452=((1.0)*cj1);
IkReal x15453=(cj3*gconst17);
IkReal x15454=(r11*sj3);
IkReal x15455=(r21*sj3);
IkReal x15456=(gconst17*sj3);
IkReal x15457=(cj2*sj1);
IkReal x15458=(gconst16*r00);
IkReal x15459=((1.0)*cj3);
IkReal x15460=(gconst16*sj3);
IkReal x15461=(cj2*x15452);
IkReal x15462=((1.0)*x15450);
IkReal x15463=((1.0)*x15449);
IkReal x15464=(gconst16*x15450);
IkReal x15465=(gconst17*x15449);
evalcond[0]=((((-1.0)*r22*x15462))+(((-1.0)*gconst16*r21*x15463))+((r20*x15465)));
evalcond[1]=((((-1.0)*gconst16*r01*x15463))+((r00*x15465))+(((-1.0)*r02*x15462)));
evalcond[2]=((-1.0)+(((-1.0)*gconst16*r11*x15463))+((r10*x15465))+(((-1.0)*r12*x15462)));
evalcond[3]=(((cj3*r11*x15464))+(((-1.0)*r10*x15453*x15462))+((gconst17*x15454))+(((-1.0)*r12*x15449*x15459))+((r10*x15460)));
evalcond[4]=((((-1.0)*gconst16*r10*x15459))+(((-1.0)*r10*x15456*x15462))+((x15454*x15464))+(((-1.0)*r11*x15453))+(((-1.0)*r12*sj3*x15463)));
evalcond[5]=((((-1.0)*r02*x15449*x15459))+((sj3*x15458))+(((-1.0)*r00*x15453*x15462))+((r01*x15456))+(((-1.0)*x15461))+x15451+((cj3*r01*x15464)));
evalcond[6]=((((-1.0)*sj2*x15452))+(((-1.0)*r22*x15449*x15459))+((gconst17*x15455))+((cj3*r21*x15464))+(((-1.0)*r20*x15453*x15462))+((r20*x15460))+(((-1.0)*x15457)));
evalcond[7]=((((-1.0)*x15458*x15459))+((cj1*sj2))+(((-1.0)*r01*x15453))+((r01*x15450*x15460))+x15457+(((-1.0)*r00*x15456*x15462))+(((-1.0)*r02*sj3*x15463)));
evalcond[8]=(((x15455*x15464))+(((-1.0)*r20*x15456*x15462))+(((-1.0)*gconst16*r20*x15459))+(((-1.0)*x15461))+x15451+(((-1.0)*r21*x15453))+(((-1.0)*r22*sj3*x15463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15468 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x15468.valid){
continue;
}
IkReal x15466=((1.0)*(x15468.value));
IkReal x15467=x15375;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x15466)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x15466)));
IkReal gconst16=((1.0)*r01*x15467);
IkReal gconst17=((-1.0)*r00*x15467);
IkReal x15469=r02*r02;
IkReal x15470=(r12*sj0);
IkReal x15471=((1.0)*cj0);
IkReal x15472=x15375;
j4eval[0]=((IKabs(((((-1.0)*x15470))+(((-1.0)*r02*x15471)))))+(IKabs((((r02*x15470*x15472))+((cj0*x15469*x15472))+(((-1.0)*x15471*x15472))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15473=(gconst16*r20);
IkReal x15474=(gconst17*sj3);
IkReal x15475=(cj1*cj2);
IkReal x15476=((1.0)*r20);
IkReal x15477=(cj3*gconst17*r21);
IkReal x15478=((1.0)*sj1*sj2);
IkReal x15479=(gconst16*r21*sj3);
CheckValue<IkReal> x15480=IKPowWithIntegerCheck(((((-1.0)*gconst17*r10*x15474*x15476))+((r11*x15473*x15474))+((gconst16*r10*r21*x15474))+(((-1.0)*gconst16*r11*x15479))),-1);
if(!x15480.valid){
continue;
}
CheckValue<IkReal> x15481=IKPowWithIntegerCheck((x15479+(((-1.0)*x15474*x15476))),-1);
if(!x15481.valid){
continue;
}
if( IKabs(((x15480.value)*((((cj3*r12*x15473))+((r12*x15477))+((r12*x15475))+((cj0*r20*x15474))+(((-1.0)*cj0*x15479))+(((-1.0)*r12*x15478)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15481.value)*(((((-1.0)*x15478))+x15475+x15477+((cj3*x15473)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15480.value)*((((cj3*r12*x15473))+((r12*x15477))+((r12*x15475))+((cj0*r20*x15474))+(((-1.0)*cj0*x15479))+(((-1.0)*r12*x15478))))))+IKsqr(((x15481.value)*(((((-1.0)*x15478))+x15475+x15477+((cj3*x15473))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15480.value)*((((cj3*r12*x15473))+((r12*x15477))+((r12*x15475))+((cj0*r20*x15474))+(((-1.0)*cj0*x15479))+(((-1.0)*r12*x15478))))), ((x15481.value)*(((((-1.0)*x15478))+x15475+x15477+((cj3*x15473))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15482=IKsin(j4);
IkReal x15483=IKcos(j4);
IkReal x15484=((1.0)*cj1);
IkReal x15485=(gconst17*sj3);
IkReal x15486=(sj1*sj2);
IkReal x15487=(cj1*cj2);
IkReal x15488=((1.0)*sj0);
IkReal x15489=(gconst16*sj3);
IkReal x15490=((1.0)*cj3*gconst17);
IkReal x15491=(r00*x15483);
IkReal x15492=((1.0)*x15483);
IkReal x15493=(gconst17*x15482);
IkReal x15494=((1.0)*cj2*sj1);
IkReal x15495=(r11*x15483);
IkReal x15496=((1.0)*cj3*gconst16);
IkReal x15497=(gconst16*r21*x15483);
IkReal x15498=((1.0)*gconst16*x15482);
IkReal x15499=(gconst16*r01*x15483);
IkReal x15500=((1.0)*cj3*x15482);
IkReal x15501=((1.0)*sj3*x15482);
evalcond[0]=(((r20*x15493))+(((-1.0)*r21*x15498)));
evalcond[1]=(cj0+((r10*x15493))+(((-1.0)*r11*x15498))+(((-1.0)*r12*x15492)));
evalcond[2]=(((r00*x15493))+(((-1.0)*r01*x15498))+(((-1.0)*r02*x15492))+(((-1.0)*x15488)));
evalcond[3]=((((-1.0)*sj2*x15484))+((r21*x15485))+((cj3*x15497))+(((-1.0)*x15494))+((r20*x15489))+(((-1.0)*r20*x15483*x15490)));
evalcond[4]=((((-1.0)*r20*x15496))+((r21*x15483*x15489))+(((-1.0)*r20*x15485*x15492))+x15486+(((-1.0)*cj2*x15484))+(((-1.0)*r21*x15490)));
evalcond[5]=((((-1.0)*cj0*x15486))+((cj0*x15487))+((cj3*x15499))+(((-1.0)*r02*x15500))+((r01*x15485))+(((-1.0)*x15490*x15491))+((r00*x15489)));
evalcond[6]=(((r10*x15489))+((cj3*gconst16*x15495))+((sj0*x15487))+((r11*x15485))+(((-1.0)*x15486*x15488))+(((-1.0)*r12*x15500))+(((-1.0)*r10*x15483*x15490)));
evalcond[7]=((((-1.0)*cj0*sj2*x15484))+(((-1.0)*r01*x15490))+(((-1.0)*r00*x15496))+(((-1.0)*x15485*x15491))+(((-1.0)*r02*x15501))+((r01*x15483*x15489))+(((-1.0)*cj0*x15494)));
evalcond[8]=(((x15489*x15495))+(((-1.0)*cj2*sj1*x15488))+(((-1.0)*r10*x15496))+(((-1.0)*r11*x15490))+(((-1.0)*r10*x15485*x15492))+(((-1.0)*r12*x15501))+(((-1.0)*sj0*sj2*x15484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15502=((1.0)*sj0);
IkReal x15503=((1.0)*cj0);
CheckValue<IkReal> x15504 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15502))+(((-1.0)*r02*x15503)))),IkReal(((((-1.0)*gconst17*r00*x15503))+((gconst16*r11*sj0))+(((-1.0)*gconst17*r10*x15502))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15504.valid){
continue;
}
CheckValue<IkReal> x15505=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15504.value)+(((1.5707963267949)*(x15505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15506=IKsin(j4);
IkReal x15507=IKcos(j4);
IkReal x15508=((1.0)*cj1);
IkReal x15509=(gconst17*sj3);
IkReal x15510=(sj1*sj2);
IkReal x15511=(cj1*cj2);
IkReal x15512=((1.0)*sj0);
IkReal x15513=(gconst16*sj3);
IkReal x15514=((1.0)*cj3*gconst17);
IkReal x15515=(r00*x15507);
IkReal x15516=((1.0)*x15507);
IkReal x15517=(gconst17*x15506);
IkReal x15518=((1.0)*cj2*sj1);
IkReal x15519=(r11*x15507);
IkReal x15520=((1.0)*cj3*gconst16);
IkReal x15521=(gconst16*r21*x15507);
IkReal x15522=((1.0)*gconst16*x15506);
IkReal x15523=(gconst16*r01*x15507);
IkReal x15524=((1.0)*cj3*x15506);
IkReal x15525=((1.0)*sj3*x15506);
evalcond[0]=((((-1.0)*r21*x15522))+((r20*x15517)));
evalcond[1]=((((-1.0)*r11*x15522))+cj0+(((-1.0)*r12*x15516))+((r10*x15517)));
evalcond[2]=((((-1.0)*r02*x15516))+(((-1.0)*r01*x15522))+(((-1.0)*x15512))+((r00*x15517)));
evalcond[3]=(((cj3*x15521))+(((-1.0)*r20*x15507*x15514))+((r20*x15513))+(((-1.0)*sj2*x15508))+((r21*x15509))+(((-1.0)*x15518)));
evalcond[4]=((((-1.0)*r20*x15520))+(((-1.0)*r20*x15509*x15516))+(((-1.0)*cj2*x15508))+((r21*x15507*x15513))+(((-1.0)*r21*x15514))+x15510);
evalcond[5]=(((r01*x15509))+((cj3*x15523))+((cj0*x15511))+(((-1.0)*x15514*x15515))+(((-1.0)*r02*x15524))+((r00*x15513))+(((-1.0)*cj0*x15510)));
evalcond[6]=((((-1.0)*r12*x15524))+((sj0*x15511))+((r10*x15513))+((r11*x15509))+(((-1.0)*x15510*x15512))+((cj3*gconst16*x15519))+(((-1.0)*r10*x15507*x15514)));
evalcond[7]=((((-1.0)*cj0*sj2*x15508))+(((-1.0)*x15509*x15515))+(((-1.0)*r01*x15514))+(((-1.0)*cj0*x15518))+(((-1.0)*r00*x15520))+(((-1.0)*r02*x15525))+((r01*x15507*x15513)));
evalcond[8]=((((-1.0)*r12*x15525))+(((-1.0)*r11*x15514))+(((-1.0)*sj0*sj2*x15508))+((x15513*x15519))+(((-1.0)*r10*x15520))+(((-1.0)*r10*x15509*x15516))+(((-1.0)*cj2*sj1*x15512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15526=((1.0)*sj0);
IkReal x15527=((1.0)*cj0);
CheckValue<IkReal> x15528 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x15526))+(((-1.0)*r02*x15527)))),IkReal((((gconst16*r11*sj0))+(((-1.0)*gconst17*r10*x15526))+(((-1.0)*gconst17*r00*x15527))+((cj0*gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15528.valid){
continue;
}
CheckValue<IkReal> x15529=IKPowWithIntegerCheck(IKsign((((gconst17*r21))+((gconst16*r20)))),-1);
if(!x15529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15528.value)+(((1.5707963267949)*(x15529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15530=IKsin(j4);
IkReal x15531=IKcos(j4);
IkReal x15532=(cj3*gconst17);
IkReal x15533=((1.0)*cj1);
IkReal x15534=((1.0)*r21);
IkReal x15535=(gconst17*sj3);
IkReal x15536=(sj1*sj2);
IkReal x15537=(cj2*sj0);
IkReal x15538=((1.0)*cj3);
IkReal x15539=(gconst16*r00);
IkReal x15540=((1.0)*sj0);
IkReal x15541=(gconst16*sj3);
IkReal x15542=((1.0)*sj3);
IkReal x15543=((1.0)*x15531);
IkReal x15544=(gconst17*x15530);
IkReal x15545=((1.0)*cj2*sj1);
IkReal x15546=(r22*x15530);
IkReal x15547=(r02*x15530);
IkReal x15548=(r11*x15531);
IkReal x15549=(r12*x15530);
IkReal x15550=(gconst16*r21*x15531);
IkReal x15551=((1.0)*gconst16*x15530);
IkReal x15552=(gconst16*r01*x15531);
evalcond[0]=((((-1.0)*gconst16*x15530*x15534))+((r20*x15544))+(((-1.0)*r22*x15543)));
evalcond[1]=(cj0+((r10*x15544))+(((-1.0)*r11*x15551))+(((-1.0)*r12*x15543)));
evalcond[2]=((((-1.0)*r01*x15551))+(((-1.0)*x15540))+((r00*x15544))+(((-1.0)*r02*x15543)));
evalcond[3]=((((-1.0)*r20*x15532*x15543))+((r20*x15541))+(((-1.0)*x15545))+((r21*x15535))+((cj3*x15550))+(((-1.0)*sj2*x15533))+(((-1.0)*x15538*x15546)));
evalcond[4]=((((-1.0)*x15542*x15546))+(((-1.0)*x15532*x15534))+(((-1.0)*r20*x15535*x15543))+((r21*x15531*x15541))+(((-1.0)*gconst16*r20*x15538))+(((-1.0)*cj2*x15533))+x15536);
evalcond[5]=(((sj3*x15539))+(((-1.0)*cj0*x15536))+(((-1.0)*r00*x15532*x15543))+((cj3*x15552))+((r01*x15535))+((cj0*cj1*cj2))+(((-1.0)*x15538*x15547)));
evalcond[6]=(((cj3*gconst16*x15548))+(((-1.0)*x15536*x15540))+((r10*x15541))+((cj1*x15537))+(((-1.0)*r10*x15532*x15543))+(((-1.0)*x15538*x15549))+((r11*x15535)));
evalcond[7]=((((-1.0)*x15542*x15547))+(((-1.0)*cj0*sj2*x15533))+((r01*x15531*x15541))+(((-1.0)*cj0*x15545))+(((-1.0)*r00*x15535*x15543))+(((-1.0)*r01*x15532))+(((-1.0)*x15538*x15539)));
evalcond[8]=(((x15541*x15548))+(((-1.0)*sj1*x15537))+(((-1.0)*x15542*x15549))+(((-1.0)*r11*x15532))+(((-1.0)*sj0*sj2*x15533))+(((-1.0)*gconst16*r10*x15538))+(((-1.0)*r10*x15535*x15543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15553 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst17*r20*sj0))+(((-1.0)*gconst16*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15553.valid){
continue;
}
CheckValue<IkReal> x15554=IKPowWithIntegerCheck(IKsign((((gconst17*r11))+((gconst16*r10)))),-1);
if(!x15554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15553.value)+(((1.5707963267949)*(x15554.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15555=IKsin(j4);
IkReal x15556=IKcos(j4);
IkReal x15557=(cj3*gconst17);
IkReal x15558=((1.0)*cj1);
IkReal x15559=((1.0)*r21);
IkReal x15560=(gconst17*sj3);
IkReal x15561=(sj1*sj2);
IkReal x15562=(cj2*sj0);
IkReal x15563=((1.0)*cj3);
IkReal x15564=(gconst16*r00);
IkReal x15565=((1.0)*sj0);
IkReal x15566=(gconst16*sj3);
IkReal x15567=((1.0)*sj3);
IkReal x15568=((1.0)*x15556);
IkReal x15569=(gconst17*x15555);
IkReal x15570=((1.0)*cj2*sj1);
IkReal x15571=(r22*x15555);
IkReal x15572=(r02*x15555);
IkReal x15573=(r11*x15556);
IkReal x15574=(r12*x15555);
IkReal x15575=(gconst16*r21*x15556);
IkReal x15576=((1.0)*gconst16*x15555);
IkReal x15577=(gconst16*r01*x15556);
evalcond[0]=((((-1.0)*r22*x15568))+(((-1.0)*gconst16*x15555*x15559))+((r20*x15569)));
evalcond[1]=(cj0+((r10*x15569))+(((-1.0)*r12*x15568))+(((-1.0)*r11*x15576)));
evalcond[2]=((((-1.0)*r02*x15568))+(((-1.0)*r01*x15576))+((r00*x15569))+(((-1.0)*x15565)));
evalcond[3]=(((r21*x15560))+(((-1.0)*r20*x15557*x15568))+((r20*x15566))+(((-1.0)*x15563*x15571))+(((-1.0)*x15570))+((cj3*x15575))+(((-1.0)*sj2*x15558)));
evalcond[4]=((((-1.0)*cj2*x15558))+(((-1.0)*x15567*x15571))+(((-1.0)*r20*x15560*x15568))+((r21*x15556*x15566))+x15561+(((-1.0)*x15557*x15559))+(((-1.0)*gconst16*r20*x15563)));
evalcond[5]=((((-1.0)*r00*x15557*x15568))+((sj3*x15564))+((cj0*cj1*cj2))+(((-1.0)*cj0*x15561))+((r01*x15560))+(((-1.0)*x15563*x15572))+((cj3*x15577)));
evalcond[6]=((((-1.0)*r10*x15557*x15568))+((r10*x15566))+((r11*x15560))+((cj1*x15562))+(((-1.0)*x15563*x15574))+((cj3*gconst16*x15573))+(((-1.0)*x15561*x15565)));
evalcond[7]=((((-1.0)*r00*x15560*x15568))+((r01*x15556*x15566))+(((-1.0)*cj0*x15570))+(((-1.0)*x15567*x15572))+(((-1.0)*r01*x15557))+(((-1.0)*cj0*sj2*x15558))+(((-1.0)*x15563*x15564)));
evalcond[8]=(((x15566*x15573))+(((-1.0)*gconst16*r10*x15563))+(((-1.0)*sj1*x15562))+(((-1.0)*sj0*sj2*x15558))+(((-1.0)*x15567*x15574))+(((-1.0)*r10*x15560*x15568))+(((-1.0)*r11*x15557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15578=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x15578.valid){
continue;
}
CheckValue<IkReal> x15579 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*gconst16*r21))+((cj0*gconst17*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15579.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15578.value)))+(x15579.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15580=IKsin(j4);
IkReal x15581=IKcos(j4);
IkReal x15582=(cj3*gconst17);
IkReal x15583=((1.0)*cj1);
IkReal x15584=((1.0)*r21);
IkReal x15585=(gconst17*sj3);
IkReal x15586=(sj1*sj2);
IkReal x15587=(cj2*sj0);
IkReal x15588=((1.0)*cj3);
IkReal x15589=(gconst16*r00);
IkReal x15590=((1.0)*sj0);
IkReal x15591=(gconst16*sj3);
IkReal x15592=((1.0)*sj3);
IkReal x15593=((1.0)*x15581);
IkReal x15594=(gconst17*x15580);
IkReal x15595=((1.0)*cj2*sj1);
IkReal x15596=(r22*x15580);
IkReal x15597=(r02*x15580);
IkReal x15598=(r11*x15581);
IkReal x15599=(r12*x15580);
IkReal x15600=(gconst16*r21*x15581);
IkReal x15601=((1.0)*gconst16*x15580);
IkReal x15602=(gconst16*r01*x15581);
evalcond[0]=((((-1.0)*gconst16*x15580*x15584))+(((-1.0)*r22*x15593))+((r20*x15594)));
evalcond[1]=((((-1.0)*r11*x15601))+cj0+(((-1.0)*r12*x15593))+((r10*x15594)));
evalcond[2]=((((-1.0)*r02*x15593))+(((-1.0)*r01*x15601))+(((-1.0)*x15590))+((r00*x15594)));
evalcond[3]=((((-1.0)*sj2*x15583))+(((-1.0)*r20*x15582*x15593))+((r20*x15591))+((cj3*x15600))+(((-1.0)*x15595))+(((-1.0)*x15588*x15596))+((r21*x15585)));
evalcond[4]=((((-1.0)*cj2*x15583))+((r21*x15581*x15591))+(((-1.0)*gconst16*r20*x15588))+(((-1.0)*x15592*x15596))+(((-1.0)*r20*x15585*x15593))+(((-1.0)*x15582*x15584))+x15586);
evalcond[5]=(((r01*x15585))+((cj0*cj1*cj2))+((cj3*x15602))+((sj3*x15589))+(((-1.0)*cj0*x15586))+(((-1.0)*x15588*x15597))+(((-1.0)*r00*x15582*x15593)));
evalcond[6]=((((-1.0)*r10*x15582*x15593))+((r11*x15585))+((r10*x15591))+((cj3*gconst16*x15598))+(((-1.0)*x15588*x15599))+(((-1.0)*x15586*x15590))+((cj1*x15587)));
evalcond[7]=((((-1.0)*r00*x15585*x15593))+(((-1.0)*x15588*x15589))+(((-1.0)*x15592*x15597))+(((-1.0)*cj0*x15595))+(((-1.0)*cj0*sj2*x15583))+(((-1.0)*r01*x15582))+((r01*x15581*x15591)));
evalcond[8]=((((-1.0)*gconst16*r10*x15588))+(((-1.0)*sj0*sj2*x15583))+(((-1.0)*r10*x15585*x15593))+(((-1.0)*x15592*x15599))+(((-1.0)*sj1*x15587))+((x15591*x15598))+(((-1.0)*r11*x15582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x15603=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15603;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x15603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x15604=((1.0)*sj5);
IkReal x15605=((((-1.0)*cj5*r21))+(((-1.0)*r20*x15604)));
j4eval[0]=x15605;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x15604)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x15606=cj5*cj5;
IkReal x15607=(cj3*r00);
IkReal x15608=(cj3*r01);
IkReal x15609=((1.0)*cj5*sj5);
IkReal x15610=((((-1.0)*r20*x15608*x15609))+(((-1.0)*r21*x15607*x15609))+(((-1.0)*r21*x15606*x15608))+((cj3*r02*r22))+((r20*x15606*x15607))+((r21*x15608)));
j4eval[0]=x15610;
j4eval[1]=IKsign(x15610);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15611=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15611;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x15611);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15612=((1.0)*sj5);
IkReal x15613=((((-1.0)*cj5*r21))+(((-1.0)*r20*x15612)));
j4eval[0]=x15613;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*x15612))))));
j4eval[2]=IKsign(x15613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15614=cj5*cj5;
IkReal x15615=r01*r01;
IkReal x15616=(r01*sj5);
IkReal x15617=(cj5*r00);
IkReal x15618=(((x15614*x15615))+(((-1.0)*(r02*r02)))+(((-1.0)*x15615))+(((-1.0)*x15614*(r00*r00)))+(((2.0)*x15616*x15617)));
j4eval[0]=x15618;
j4eval[1]=IKsign(x15618);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15617))+x15616))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15619=cj5*cj5;
IkReal x15620=r01*r01;
IkReal x15621=(r01*sj5);
IkReal x15622=(cj5*r00);
CheckValue<IkReal> x15623=IKPowWithIntegerCheck(IKsign(((((2.0)*x15621*x15622))+(((-1.0)*x15619*(r00*r00)))+(((-1.0)*(r02*r02)))+((x15619*x15620))+(((-1.0)*x15620)))),-1);
if(!x15623.valid){
continue;
}
CheckValue<IkReal> x15624 = IKatan2WithCheck(IkReal((x15621+(((-1.0)*x15622)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15623.value)))+(x15624.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15625=IKsin(j4);
IkReal x15626=IKcos(j4);
IkReal x15627=(cj5*r00);
IkReal x15628=((1.0)*cj1);
IkReal x15629=(cj5*r20);
IkReal x15630=(cj5*r10);
IkReal x15631=((1.0)*x15626);
IkReal x15632=(sj5*x15626);
IkReal x15633=((1.0)*x15625);
IkReal x15634=(sj5*x15633);
evalcond[0]=((((-1.0)*r21*x15634))+((x15625*x15629))+(((-1.0)*r22*x15631)));
evalcond[1]=(((x15625*x15630))+(((-1.0)*r12*x15631))+(((-1.0)*r11*x15634)));
evalcond[2]=(((r01*x15632))+(((-1.0)*x15627*x15631))+(((-1.0)*r02*x15633)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x15634))+((x15625*x15627))+(((-1.0)*r02*x15631)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x15629*x15631))+((r21*x15632))+(((-1.0)*r22*x15633))+(((-1.0)*cj2*x15628)));
evalcond[5]=((((-1.0)*x15630*x15631))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x15633))+((r11*x15632))+(((-1.0)*sj2*x15628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15635=((1.0)*sj5);
CheckValue<IkReal> x15636=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*x15635)))),-1);
if(!x15636.valid){
continue;
}
CheckValue<IkReal> x15637 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x15635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15636.value)))+(x15637.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15638=IKsin(j4);
IkReal x15639=IKcos(j4);
IkReal x15640=(cj5*r00);
IkReal x15641=((1.0)*cj1);
IkReal x15642=(cj5*r20);
IkReal x15643=(cj5*r10);
IkReal x15644=((1.0)*x15639);
IkReal x15645=(sj5*x15639);
IkReal x15646=((1.0)*x15638);
IkReal x15647=(sj5*x15646);
evalcond[0]=((((-1.0)*r22*x15644))+(((-1.0)*r21*x15647))+((x15638*x15642)));
evalcond[1]=((((-1.0)*r11*x15647))+(((-1.0)*r12*x15644))+((x15638*x15643)));
evalcond[2]=(((r01*x15645))+(((-1.0)*r02*x15646))+(((-1.0)*x15640*x15644)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x15647))+(((-1.0)*r02*x15644))+((x15638*x15640)));
evalcond[4]=(((sj1*sj2))+((r21*x15645))+(((-1.0)*r22*x15646))+(((-1.0)*cj2*x15641))+(((-1.0)*x15642*x15644)));
evalcond[5]=((((-1.0)*x15643*x15644))+(((-1.0)*sj2*x15641))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x15646))+((r11*x15645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15648=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15648.valid){
continue;
}
CheckValue<IkReal> x15649 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15648.value)))+(x15649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15650=IKsin(j4);
IkReal x15651=IKcos(j4);
IkReal x15652=(cj5*r00);
IkReal x15653=((1.0)*cj1);
IkReal x15654=(cj5*r20);
IkReal x15655=(cj5*r10);
IkReal x15656=((1.0)*x15651);
IkReal x15657=(sj5*x15651);
IkReal x15658=((1.0)*x15650);
IkReal x15659=(sj5*x15658);
evalcond[0]=((((-1.0)*r21*x15659))+((x15650*x15654))+(((-1.0)*r22*x15656)));
evalcond[1]=((((-1.0)*r12*x15656))+(((-1.0)*r11*x15659))+((x15650*x15655)));
evalcond[2]=(((r01*x15657))+(((-1.0)*x15652*x15656))+(((-1.0)*r02*x15658)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x15659))+((x15650*x15652))+(((-1.0)*r02*x15656)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x15658))+(((-1.0)*cj2*x15653))+((r21*x15657))+(((-1.0)*x15654*x15656)));
evalcond[5]=((((-1.0)*r12*x15658))+(((-1.0)*cj2*sj1))+((r11*x15657))+(((-1.0)*sj2*x15653))+(((-1.0)*x15655*x15656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15660=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15660;
j4eval[1]=((IKabs(r22))+(IKabs((((cj5*r20))+(((-1.0)*r21*sj5))))));
j4eval[2]=IKsign(x15660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15661=((1.0)*sj5);
IkReal x15662=((((-1.0)*r20*x15661))+(((-1.0)*cj5*r21)));
j4eval[0]=x15662;
j4eval[1]=((IKabs((((cj5*r10))+(((-1.0)*r11*x15661)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15663=cj5*cj5;
IkReal x15664=r01*r01;
IkReal x15665=(cj5*r00);
IkReal x15666=(r01*sj5);
IkReal x15667=(((x15663*(r00*r00)))+x15664+(r02*r02)+(((-2.0)*x15665*x15666))+(((-1.0)*x15663*x15664)));
j4eval[0]=x15667;
j4eval[1]=((IKabs(r02))+(IKabs((x15665+(((-1.0)*x15666))))));
j4eval[2]=IKsign(x15667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15668=cj5*cj5;
IkReal x15669=r01*r01;
IkReal x15670=(r01*sj5);
IkReal x15671=(cj5*r00);
CheckValue<IkReal> x15672=IKPowWithIntegerCheck(IKsign((((x15668*(r00*r00)))+(((-2.0)*x15670*x15671))+(((-1.0)*x15668*x15669))+x15669+(r02*r02))),-1);
if(!x15672.valid){
continue;
}
CheckValue<IkReal> x15673 = IKatan2WithCheck(IkReal((x15671+(((-1.0)*x15670)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15673.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15672.value)))+(x15673.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15674=IKcos(j4);
IkReal x15675=IKsin(j4);
IkReal x15676=((1.0)*cj1);
IkReal x15677=((1.0)*x15674);
IkReal x15678=(cj5*x15674);
IkReal x15679=(cj5*x15675);
IkReal x15680=((1.0)*sj5*x15675);
evalcond[0]=(((r02*x15675))+(((-1.0)*r01*sj5*x15677))+((r00*x15678)));
evalcond[1]=((((-1.0)*r21*x15680))+((r20*x15679))+(((-1.0)*r22*x15677)));
evalcond[2]=(((r10*x15679))+(((-1.0)*r12*x15677))+(((-1.0)*r11*x15680)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x15680))+((r00*x15679))+(((-1.0)*r02*x15677)));
evalcond[4]=(((r20*x15678))+((sj1*sj2))+(((-1.0)*cj2*x15676))+((r22*x15675))+(((-1.0)*r21*sj5*x15677)));
evalcond[5]=((((-1.0)*r11*sj5*x15677))+((r12*x15675))+(((-1.0)*sj2*x15676))+(((-1.0)*cj2*sj1))+((r10*x15678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15681=((1.0)*sj5);
CheckValue<IkReal> x15682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15681))+(((-1.0)*cj5*r21)))),-1);
if(!x15682.valid){
continue;
}
CheckValue<IkReal> x15683 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x15681)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15682.value)))+(x15683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15684=IKcos(j4);
IkReal x15685=IKsin(j4);
IkReal x15686=((1.0)*cj1);
IkReal x15687=((1.0)*x15684);
IkReal x15688=(cj5*x15684);
IkReal x15689=(cj5*x15685);
IkReal x15690=((1.0)*sj5*x15685);
evalcond[0]=((((-1.0)*r01*sj5*x15687))+((r00*x15688))+((r02*x15685)));
evalcond[1]=(((r20*x15689))+(((-1.0)*r21*x15690))+(((-1.0)*r22*x15687)));
evalcond[2]=(((r10*x15689))+(((-1.0)*r11*x15690))+(((-1.0)*r12*x15687)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x15690))+((r00*x15689))+(((-1.0)*r02*x15687)));
evalcond[4]=(((r20*x15688))+(((-1.0)*cj2*x15686))+((sj1*sj2))+((r22*x15685))+(((-1.0)*r21*sj5*x15687)));
evalcond[5]=(((r10*x15688))+(((-1.0)*r11*sj5*x15687))+(((-1.0)*cj2*sj1))+((r12*x15685))+(((-1.0)*sj2*x15686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15691=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15691.valid){
continue;
}
CheckValue<IkReal> x15692 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15691.value)))+(x15692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15693=IKcos(j4);
IkReal x15694=IKsin(j4);
IkReal x15695=((1.0)*cj1);
IkReal x15696=((1.0)*x15693);
IkReal x15697=(cj5*x15693);
IkReal x15698=(cj5*x15694);
IkReal x15699=((1.0)*sj5*x15694);
evalcond[0]=(((r02*x15694))+((r00*x15697))+(((-1.0)*r01*sj5*x15696)));
evalcond[1]=(((r20*x15698))+(((-1.0)*r21*x15699))+(((-1.0)*r22*x15696)));
evalcond[2]=(((r10*x15698))+(((-1.0)*r12*x15696))+(((-1.0)*r11*x15699)));
evalcond[3]=((-1.0)+(((-1.0)*r01*x15699))+((r00*x15698))+(((-1.0)*r02*x15696)));
evalcond[4]=((((-1.0)*r21*sj5*x15696))+((r20*x15697))+(((-1.0)*cj2*x15695))+((sj1*sj2))+((r22*x15694)));
evalcond[5]=((((-1.0)*sj2*x15695))+((r10*x15697))+(((-1.0)*cj2*sj1))+((r12*x15694))+(((-1.0)*r11*sj5*x15696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15700=((-1.0)*r20);
IkReal x15702 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15702)==0){
continue;
}
IkReal x15701=pow(x15702,-0.5);
CheckValue<IkReal> x15703 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15700),IKFAST_ATAN2_MAGTHRESH);
if(!x15703.valid){
continue;
}
IkReal gconst42=((-1.0)*(x15703.value));
IkReal gconst43=(r21*x15701);
IkReal gconst44=(x15700*x15701);
CheckValue<IkReal> x15704 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15704.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15704.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15705=((-1.0)*r20);
IkReal x15706=x15701;
CheckValue<IkReal> x15708 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15705),IKFAST_ATAN2_MAGTHRESH);
if(!x15708.valid){
continue;
}
IkReal x15707=((-1.0)*(x15708.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst43;
cj5=gconst44;
j5=x15707;
IkReal gconst42=x15707;
IkReal gconst43=(r21*x15706);
IkReal gconst44=(x15705*x15706);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15709=((-1.0)*r20);
IkReal x15710=x15701;
CheckValue<IkReal> x15712 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15709),IKFAST_ATAN2_MAGTHRESH);
if(!x15712.valid){
continue;
}
IkReal x15711=((-1.0)*(x15712.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst43;
cj5=gconst44;
j5=x15711;
IkReal gconst42=x15711;
IkReal gconst43=(r21*x15710);
IkReal gconst44=(x15709*x15710);
CheckValue<IkReal> x15720=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15720.valid){
continue;
}
IkReal x15713=x15720.value;
IkReal x15714=(cj3*x15713);
IkReal x15715=(r11*x15714);
IkReal x15716=(r01*x15714);
IkReal x15717=(r00*x15714);
IkReal x15718=(r10*x15714);
IkReal x15719=(r20*r21*x15714);
j4eval[0]=IKsign((((r01*x15715*(r21*r21)))+((cj3*r02*r12))+((r10*r20*r21*x15716))+((r10*x15717*(r20*r20)))+((r00*r20*r21*x15715))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15721=((-1.0)*r20);
IkReal x15722=x15701;
CheckValue<IkReal> x15724 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x15721),IKFAST_ATAN2_MAGTHRESH);
if(!x15724.valid){
continue;
}
IkReal x15723=((-1.0)*(x15724.value));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst43;
cj5=gconst44;
j5=x15723;
IkReal gconst42=x15723;
IkReal gconst43=(r21*x15722);
IkReal gconst44=(x15721*x15722);
CheckValue<IkReal> x15732=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x15732.valid){
continue;
}
IkReal x15725=x15732.value;
IkReal x15726=(sj3*x15725);
IkReal x15727=(r11*x15726);
IkReal x15728=(r00*x15726);
IkReal x15729=(r01*x15726);
IkReal x15730=(r10*x15726);
IkReal x15731=(r20*r21*x15726);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x15728*(r20*r20)))+((r10*r20*r21*x15729))+((r00*r20*r21*x15727))+((r01*x15727*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15733=gconst43*gconst43;
IkReal x15734=gconst44*gconst44;
IkReal x15735=(r11*sj3);
IkReal x15736=(cj3*r11);
IkReal x15737=(cj3*r12);
IkReal x15738=(r10*sj3);
IkReal x15739=(cj3*r10);
IkReal x15740=((1.0)*r01);
IkReal x15741=((1.0)*gconst43*r00);
IkReal x15742=(gconst43*gconst44*r01);
CheckValue<IkReal> x15743=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst44*x15735*x15741))+(((-1.0)*gconst43*gconst44*x15738*x15740))+((r00*x15734*x15738))+((r01*x15733*x15735)))),-1);
if(!x15743.valid){
continue;
}
CheckValue<IkReal> x15744 = IKatan2WithCheck(IkReal(((((-1.0)*gconst44*x15737*x15740))+(((-1.0)*x15737*x15741)))),IkReal((((r00*x15733*x15736))+(((-1.0)*x15734*x15739*x15740))+(((-1.0)*gconst44*x15739*x15741))+((x15736*x15742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15743.value)))+(x15744.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15745=IKsin(j4);
IkReal x15746=IKcos(j4);
IkReal x15747=(gconst44*sj3);
IkReal x15748=(cj3*r21);
IkReal x15749=(sj1*sj2);
IkReal x15750=(cj3*r01);
IkReal x15751=((1.0)*gconst44);
IkReal x15752=(cj3*r00);
IkReal x15753=((1.0)*gconst43);
IkReal x15754=(cj3*r11);
IkReal x15755=((1.0)*cj2);
IkReal x15756=(cj3*r10);
IkReal x15757=(cj3*r20);
IkReal x15758=(gconst43*sj3);
IkReal x15759=((1.0)*cj1*sj2);
IkReal x15760=(sj1*x15755);
IkReal x15761=((1.0)*x15746);
IkReal x15762=((1.0)*x15745);
IkReal x15763=(gconst43*x15746);
IkReal x15764=(gconst44*x15745);
IkReal x15765=(x15760+x15759);
evalcond[0]=((((-1.0)*r22*x15761))+((r20*x15764))+(((-1.0)*r21*x15745*x15753)));
evalcond[1]=(((r10*x15764))+(((-1.0)*r11*x15745*x15753))+(((-1.0)*r12*x15761)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15761))+((r00*x15764))+(((-1.0)*r01*x15745*x15753)));
evalcond[3]=((((-1.0)*cj3*r02*x15762))+(((-1.0)*x15746*x15751*x15752))+((r00*x15758))+((x15750*x15763))+((r01*x15747)));
evalcond[4]=((((-1.0)*r02*sj3*x15762))+(((-1.0)*x15750*x15751))+(((-1.0)*r00*x15747*x15761))+(((-1.0)*x15752*x15753))+((r01*x15746*x15758)));
evalcond[5]=(((x15754*x15763))+(((-1.0)*x15749))+((r10*x15758))+(((-1.0)*cj3*r12*x15762))+(((-1.0)*x15746*x15751*x15756))+((r11*x15747))+((cj1*cj2)));
evalcond[6]=((((-1.0)*cj3*r22*x15762))+(((-1.0)*x15765))+((r20*x15758))+((r21*x15747))+(((-1.0)*x15746*x15751*x15757))+((x15748*x15763)));
evalcond[7]=((((-1.0)*cj1*x15755))+(((-1.0)*r20*x15747*x15761))+(((-1.0)*x15753*x15757))+(((-1.0)*x15748*x15751))+x15749+(((-1.0)*r22*sj3*x15762))+((r21*x15746*x15758)));
evalcond[8]=((((-1.0)*r10*x15747*x15761))+((r11*x15746*x15758))+(((-1.0)*x15765))+(((-1.0)*x15753*x15756))+(((-1.0)*r12*sj3*x15762))+(((-1.0)*x15751*x15754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15766=gconst44*gconst44;
IkReal x15767=gconst43*gconst43;
IkReal x15768=(r10*sj3);
IkReal x15769=((1.0)*r11);
IkReal x15770=(r00*sj3);
IkReal x15771=(cj3*r10);
IkReal x15772=(gconst43*gconst44*r00);
IkReal x15773=(gconst44*r01*sj3);
CheckValue<IkReal> x15774=IKPowWithIntegerCheck(IKsign((((cj3*r02*r12))+(((-1.0)*cj3*x15769*x15772))+(((-1.0)*gconst43*gconst44*r01*x15771))+((cj3*r01*r11*x15767))+((r00*x15766*x15771)))),-1);
if(!x15774.valid){
continue;
}
CheckValue<IkReal> x15775 = IKatan2WithCheck(IkReal((((gconst43*r12*x15770))+((r12*x15773)))),IkReal(((((-1.0)*gconst43*x15769*x15773))+((r01*x15766*x15768))+(((-1.0)*x15767*x15769*x15770))+((x15768*x15772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15774.value)))+(x15775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15776=IKsin(j4);
IkReal x15777=IKcos(j4);
IkReal x15778=(gconst44*sj3);
IkReal x15779=(cj3*r21);
IkReal x15780=(sj1*sj2);
IkReal x15781=(cj3*r01);
IkReal x15782=((1.0)*gconst44);
IkReal x15783=(cj3*r00);
IkReal x15784=((1.0)*gconst43);
IkReal x15785=(cj3*r11);
IkReal x15786=((1.0)*cj2);
IkReal x15787=(cj3*r10);
IkReal x15788=(cj3*r20);
IkReal x15789=(gconst43*sj3);
IkReal x15790=((1.0)*cj1*sj2);
IkReal x15791=(sj1*x15786);
IkReal x15792=((1.0)*x15777);
IkReal x15793=((1.0)*x15776);
IkReal x15794=(gconst43*x15777);
IkReal x15795=(gconst44*x15776);
IkReal x15796=(x15791+x15790);
evalcond[0]=((((-1.0)*r22*x15792))+((r20*x15795))+(((-1.0)*r21*x15776*x15784)));
evalcond[1]=((((-1.0)*r11*x15776*x15784))+(((-1.0)*r12*x15792))+((r10*x15795)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15792))+(((-1.0)*r01*x15776*x15784))+((r00*x15795)));
evalcond[3]=(((r00*x15789))+((x15781*x15794))+(((-1.0)*x15777*x15782*x15783))+((r01*x15778))+(((-1.0)*cj3*r02*x15793)));
evalcond[4]=(((r01*x15777*x15789))+(((-1.0)*r02*sj3*x15793))+(((-1.0)*x15783*x15784))+(((-1.0)*x15781*x15782))+(((-1.0)*r00*x15778*x15792)));
evalcond[5]=(((r10*x15789))+(((-1.0)*cj3*r12*x15793))+(((-1.0)*x15780))+(((-1.0)*x15777*x15782*x15787))+((cj1*cj2))+((r11*x15778))+((x15785*x15794)));
evalcond[6]=(((x15779*x15794))+(((-1.0)*cj3*r22*x15793))+((r21*x15778))+(((-1.0)*x15796))+(((-1.0)*x15777*x15782*x15788))+((r20*x15789)));
evalcond[7]=(((r21*x15777*x15789))+(((-1.0)*r22*sj3*x15793))+(((-1.0)*r20*x15778*x15792))+(((-1.0)*cj1*x15786))+x15780+(((-1.0)*x15779*x15782))+(((-1.0)*x15784*x15788)));
evalcond[8]=((((-1.0)*r12*sj3*x15793))+((r11*x15777*x15789))+(((-1.0)*x15796))+(((-1.0)*x15782*x15785))+(((-1.0)*x15784*x15787))+(((-1.0)*r10*x15778*x15792)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15797=IKPowWithIntegerCheck(IKsign((((gconst43*r10))+((gconst44*r11)))),-1);
if(!x15797.valid){
continue;
}
CheckValue<IkReal> x15798 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst44*r20))+(((-1.0)*gconst43*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15797.value)))+(x15798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15799=IKsin(j4);
IkReal x15800=IKcos(j4);
IkReal x15801=(gconst44*sj3);
IkReal x15802=(cj3*r21);
IkReal x15803=(sj1*sj2);
IkReal x15804=(cj3*r01);
IkReal x15805=((1.0)*gconst44);
IkReal x15806=(cj3*r00);
IkReal x15807=((1.0)*gconst43);
IkReal x15808=(cj3*r11);
IkReal x15809=((1.0)*cj2);
IkReal x15810=(cj3*r10);
IkReal x15811=(cj3*r20);
IkReal x15812=(gconst43*sj3);
IkReal x15813=((1.0)*cj1*sj2);
IkReal x15814=(sj1*x15809);
IkReal x15815=((1.0)*x15800);
IkReal x15816=((1.0)*x15799);
IkReal x15817=(gconst43*x15800);
IkReal x15818=(gconst44*x15799);
IkReal x15819=(x15813+x15814);
evalcond[0]=((((-1.0)*r21*x15799*x15807))+(((-1.0)*r22*x15815))+((r20*x15818)));
evalcond[1]=(((r10*x15818))+(((-1.0)*r11*x15799*x15807))+(((-1.0)*r12*x15815)));
evalcond[2]=((-1.0)+(((-1.0)*r01*x15799*x15807))+(((-1.0)*r02*x15815))+((r00*x15818)));
evalcond[3]=(((x15804*x15817))+(((-1.0)*x15800*x15805*x15806))+((r01*x15801))+(((-1.0)*cj3*r02*x15816))+((r00*x15812)));
evalcond[4]=((((-1.0)*x15804*x15805))+(((-1.0)*r02*sj3*x15816))+(((-1.0)*r00*x15801*x15815))+((r01*x15800*x15812))+(((-1.0)*x15806*x15807)));
evalcond[5]=((((-1.0)*x15800*x15805*x15810))+((r10*x15812))+((r11*x15801))+((x15808*x15817))+((cj1*cj2))+(((-1.0)*x15803))+(((-1.0)*cj3*r12*x15816)));
evalcond[6]=((((-1.0)*cj3*r22*x15816))+((x15802*x15817))+(((-1.0)*x15800*x15805*x15811))+(((-1.0)*x15819))+((r21*x15801))+((r20*x15812)));
evalcond[7]=((((-1.0)*cj1*x15809))+((r21*x15800*x15812))+(((-1.0)*r20*x15801*x15815))+(((-1.0)*x15802*x15805))+x15803+(((-1.0)*x15807*x15811))+(((-1.0)*r22*sj3*x15816)));
evalcond[8]=((((-1.0)*r12*sj3*x15816))+(((-1.0)*x15819))+(((-1.0)*r10*x15801*x15815))+(((-1.0)*x15805*x15808))+((r11*x15800*x15812))+(((-1.0)*x15807*x15810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15820=((-1.0)*r21);
IkReal x15822 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x15822)==0){
continue;
}
IkReal x15821=pow(x15822,-0.5);
CheckValue<IkReal> x15823 = IKatan2WithCheck(IkReal(x15820),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15823.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x15823.value))));
IkReal gconst46=(x15820*x15821);
IkReal gconst47=((1.0)*r20*x15821);
CheckValue<IkReal> x15824 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15824.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15824.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15825=((-1.0)*r21);
CheckValue<IkReal> x15828 = IKatan2WithCheck(IkReal(x15825),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15828.valid){
continue;
}
IkReal x15826=((1.0)*(x15828.value));
IkReal x15827=x15821;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x15826)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x15826)));
IkReal gconst46=(x15825*x15827);
IkReal gconst47=((1.0)*r20*x15827);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x15829=((-1.0)*r21);
CheckValue<IkReal> x15832 = IKatan2WithCheck(IkReal(x15829),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15832.valid){
continue;
}
IkReal x15830=((1.0)*(x15832.value));
IkReal x15831=x15821;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x15830)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x15830)));
IkReal gconst46=(x15829*x15831);
IkReal gconst47=((1.0)*r20*x15831);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15833=((-1.0)*r21);
CheckValue<IkReal> x15836 = IKatan2WithCheck(IkReal(x15833),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x15836.valid){
continue;
}
IkReal x15834=((1.0)*(x15836.value));
IkReal x15835=x15821;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x15834)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x15834)));
IkReal gconst46=(x15833*x15835);
IkReal gconst47=((1.0)*r20*x15835);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15837=gconst47*gconst47;
IkReal x15838=gconst46*gconst46;
IkReal x15839=(r01*sj3);
IkReal x15840=(r00*sj3);
IkReal x15841=(cj3*r01);
IkReal x15842=(cj3*r00);
IkReal x15843=(r20*x15837);
IkReal x15844=(r21*x15838);
IkReal x15845=((1.0)*gconst46*gconst47);
CheckValue<IkReal> x15846 = IKatan2WithCheck(IkReal((((gconst46*r22*x15840))+((gconst47*r22*x15839)))),IkReal((((x15839*x15843))+((gconst46*gconst47*r20*x15840))+(((-1.0)*r21*x15839*x15845))+(((-1.0)*x15840*x15844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15846.valid){
continue;
}
CheckValue<IkReal> x15847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15842*x15845))+((x15841*x15844))+(((-1.0)*r20*x15841*x15845))+((cj3*r02*r22))+((x15842*x15843)))),-1);
if(!x15847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15846.value)+(((1.5707963267949)*(x15847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15848=IKsin(j4);
IkReal x15849=IKcos(j4);
IkReal x15850=(cj3*gconst46);
IkReal x15851=(gconst46*r11);
IkReal x15852=(gconst47*r20);
IkReal x15853=(sj1*sj2);
IkReal x15854=(gconst47*r10);
IkReal x15855=((1.0)*cj1);
IkReal x15856=(gconst47*sj3);
IkReal x15857=((1.0)*cj3);
IkReal x15858=(gconst46*r01);
IkReal x15859=(gconst46*r21);
IkReal x15860=(gconst47*r00);
IkReal x15861=(gconst46*sj3);
IkReal x15862=(sj2*x15855);
IkReal x15863=((1.0)*cj2*sj1);
IkReal x15864=((1.0)*x15849);
IkReal x15865=(sj3*x15849);
IkReal x15866=((1.0)*x15848);
IkReal x15867=(sj3*x15866);
IkReal x15868=(x15863+x15862);
evalcond[0]=((((-1.0)*x15859*x15866))+(((-1.0)*r22*x15864))+((x15848*x15852)));
evalcond[1]=((((-1.0)*x15851*x15866))+(((-1.0)*r12*x15864))+((x15848*x15854)));
evalcond[2]=((-1.0)+((x15848*x15860))+(((-1.0)*x15858*x15866))+(((-1.0)*r02*x15864)));
evalcond[3]=(((r01*x15856))+((r01*x15849*x15850))+((r00*x15861))+(((-1.0)*r02*x15848*x15857))+(((-1.0)*x15849*x15857*x15860)));
evalcond[4]=(((x15858*x15865))+(((-1.0)*r00*x15850))+(((-1.0)*r02*x15867))+(((-1.0)*r00*x15856*x15864))+(((-1.0)*gconst47*r01*x15857)));
evalcond[5]=((((-1.0)*r12*x15848*x15857))+(((-1.0)*x15849*x15854*x15857))+((cj1*cj2))+((r11*x15849*x15850))+((r11*x15856))+((r10*x15861))+(((-1.0)*x15853)));
evalcond[6]=((((-1.0)*r22*x15848*x15857))+(((-1.0)*x15868))+(((-1.0)*x15849*x15852*x15857))+((r21*x15856))+((r21*x15849*x15850))+((r20*x15861)));
evalcond[7]=((((-1.0)*gconst47*r21*x15857))+(((-1.0)*cj2*x15855))+(((-1.0)*r22*x15867))+(((-1.0)*sj3*x15852*x15864))+((x15859*x15865))+(((-1.0)*r20*x15850))+x15853);
evalcond[8]=((((-1.0)*r10*x15850))+(((-1.0)*x15868))+(((-1.0)*gconst47*r11*x15857))+((x15851*x15865))+(((-1.0)*sj3*x15854*x15864))+(((-1.0)*r12*x15867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15869=((1.0)*gconst46);
CheckValue<IkReal> x15870 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst47*r10))+(((-1.0)*r11*x15869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15870.valid){
continue;
}
CheckValue<IkReal> x15871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x15869))+(((-1.0)*gconst47*r21)))),-1);
if(!x15871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15870.value)+(((1.5707963267949)*(x15871.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15872=IKsin(j4);
IkReal x15873=IKcos(j4);
IkReal x15874=(cj3*gconst46);
IkReal x15875=(gconst46*r11);
IkReal x15876=(gconst47*r20);
IkReal x15877=(sj1*sj2);
IkReal x15878=(gconst47*r10);
IkReal x15879=((1.0)*cj1);
IkReal x15880=(gconst47*sj3);
IkReal x15881=((1.0)*cj3);
IkReal x15882=(gconst46*r01);
IkReal x15883=(gconst46*r21);
IkReal x15884=(gconst47*r00);
IkReal x15885=(gconst46*sj3);
IkReal x15886=(sj2*x15879);
IkReal x15887=((1.0)*cj2*sj1);
IkReal x15888=((1.0)*x15873);
IkReal x15889=(sj3*x15873);
IkReal x15890=((1.0)*x15872);
IkReal x15891=(sj3*x15890);
IkReal x15892=(x15887+x15886);
evalcond[0]=(((x15872*x15876))+(((-1.0)*r22*x15888))+(((-1.0)*x15883*x15890)));
evalcond[1]=((((-1.0)*x15875*x15890))+((x15872*x15878))+(((-1.0)*r12*x15888)));
evalcond[2]=((-1.0)+((x15872*x15884))+(((-1.0)*x15882*x15890))+(((-1.0)*r02*x15888)));
evalcond[3]=(((r01*x15873*x15874))+(((-1.0)*x15873*x15881*x15884))+((r00*x15885))+((r01*x15880))+(((-1.0)*r02*x15872*x15881)));
evalcond[4]=((((-1.0)*r00*x15874))+(((-1.0)*r02*x15891))+((x15882*x15889))+(((-1.0)*gconst47*r01*x15881))+(((-1.0)*r00*x15880*x15888)));
evalcond[5]=(((r10*x15885))+(((-1.0)*r12*x15872*x15881))+(((-1.0)*x15873*x15878*x15881))+((r11*x15880))+((cj1*cj2))+(((-1.0)*x15877))+((r11*x15873*x15874)));
evalcond[6]=(((r21*x15873*x15874))+(((-1.0)*r22*x15872*x15881))+((r20*x15885))+(((-1.0)*x15892))+(((-1.0)*x15873*x15876*x15881))+((r21*x15880)));
evalcond[7]=((((-1.0)*r20*x15874))+((x15883*x15889))+(((-1.0)*sj3*x15876*x15888))+(((-1.0)*cj2*x15879))+(((-1.0)*gconst47*r21*x15881))+(((-1.0)*r22*x15891))+x15877);
evalcond[8]=((((-1.0)*sj3*x15878*x15888))+(((-1.0)*x15892))+((x15875*x15889))+(((-1.0)*r12*x15891))+(((-1.0)*gconst47*r11*x15881))+(((-1.0)*r10*x15874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15893 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst46*r21))+((gconst47*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15893.valid){
continue;
}
CheckValue<IkReal> x15894=IKPowWithIntegerCheck(IKsign((((gconst47*r11))+((gconst46*r10)))),-1);
if(!x15894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15893.value)+(((1.5707963267949)*(x15894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15895=IKsin(j4);
IkReal x15896=IKcos(j4);
IkReal x15897=(cj3*gconst46);
IkReal x15898=(gconst46*r11);
IkReal x15899=(gconst47*r20);
IkReal x15900=(sj1*sj2);
IkReal x15901=(gconst47*r10);
IkReal x15902=((1.0)*cj1);
IkReal x15903=(gconst47*sj3);
IkReal x15904=((1.0)*cj3);
IkReal x15905=(gconst46*r01);
IkReal x15906=(gconst46*r21);
IkReal x15907=(gconst47*r00);
IkReal x15908=(gconst46*sj3);
IkReal x15909=(sj2*x15902);
IkReal x15910=((1.0)*cj2*sj1);
IkReal x15911=((1.0)*x15896);
IkReal x15912=(sj3*x15896);
IkReal x15913=((1.0)*x15895);
IkReal x15914=(sj3*x15913);
IkReal x15915=(x15910+x15909);
evalcond[0]=((((-1.0)*x15906*x15913))+(((-1.0)*r22*x15911))+((x15895*x15899)));
evalcond[1]=(((x15895*x15901))+(((-1.0)*r12*x15911))+(((-1.0)*x15898*x15913)));
evalcond[2]=((-1.0)+(((-1.0)*x15905*x15913))+((x15895*x15907))+(((-1.0)*r02*x15911)));
evalcond[3]=((((-1.0)*x15896*x15904*x15907))+(((-1.0)*r02*x15895*x15904))+((r01*x15903))+((r00*x15908))+((r01*x15896*x15897)));
evalcond[4]=(((x15905*x15912))+(((-1.0)*gconst47*r01*x15904))+(((-1.0)*r02*x15914))+(((-1.0)*r00*x15897))+(((-1.0)*r00*x15903*x15911)));
evalcond[5]=((((-1.0)*x15900))+(((-1.0)*r12*x15895*x15904))+((r11*x15903))+(((-1.0)*x15896*x15901*x15904))+((cj1*cj2))+((r10*x15908))+((r11*x15896*x15897)));
evalcond[6]=(((r21*x15896*x15897))+(((-1.0)*r22*x15895*x15904))+((r21*x15903))+(((-1.0)*x15896*x15899*x15904))+((r20*x15908))+(((-1.0)*x15915)));
evalcond[7]=(((x15906*x15912))+(((-1.0)*gconst47*r21*x15904))+(((-1.0)*cj2*x15902))+(((-1.0)*r20*x15897))+(((-1.0)*r22*x15914))+(((-1.0)*sj3*x15899*x15911))+x15900);
evalcond[8]=((((-1.0)*r12*x15914))+(((-1.0)*sj3*x15901*x15911))+(((-1.0)*r10*x15897))+((x15898*x15912))+(((-1.0)*x15915))+(((-1.0)*gconst47*r11*x15904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15916=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15916);
rxp0_2=(py*r00);
rxp1_0=(r21*x15916);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15917=(cj5*r00);
IkReal x15918=(r01*sj5);
j4eval[0]=((((-1.0)*x15918))+x15917);
j4eval[1]=(((sj3*x15918))+(((-1.0)*sj3*x15917)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15919=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15919);
rxp0_2=(py*r00);
rxp1_0=(r21*x15919);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15920=(cj5*r00);
IkReal x15921=(r01*sj5);
j4eval[0]=((((-1.0)*x15921))+x15920);
j4eval[1]=(((cj3*x15921))+(((-1.0)*cj3*x15920)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15922=((-1.0)*py);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15922);
rxp0_2=(py*r00);
rxp1_0=(r21*x15922);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15923=((1.0)*r00);
CheckValue<IkReal> x15924=IKPowWithIntegerCheck(cj3,-1);
if(!x15924.valid){
continue;
}
CheckValue<IkReal> x15925=IKPowWithIntegerCheck(r12,-1);
if(!x15925.valid){
continue;
}
CheckValue<IkReal> x15926=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15923))),-1);
if(!x15926.valid){
continue;
}
if( IKabs(((x15924.value)*(x15925.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15926.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15923)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15924.value)*(x15925.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x15926.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15923))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15924.value)*(x15925.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x15926.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15923))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15927=IKsin(j4);
IkReal x15928=IKcos(j4);
IkReal x15929=((1.0)*cj3);
IkReal x15930=(cj5*r21);
IkReal x15931=(sj1*sj2);
IkReal x15932=(cj5*r01);
IkReal x15933=(r20*sj5);
IkReal x15934=((1.0)*cj1);
IkReal x15935=(r01*sj5);
IkReal x15936=(r00*sj5);
IkReal x15937=((1.0)*sj3);
IkReal x15938=(sj2*x15934);
IkReal x15939=((1.0)*cj2*sj1);
IkReal x15940=((1.0)*x15927);
IkReal x15941=(cj5*x15928);
IkReal x15942=(cj5*x15927);
IkReal x15943=(r21*sj5*x15928);
IkReal x15944=(x15939+x15938);
evalcond[0]=((-1.0)*r12*x15928);
evalcond[1]=((((-1.0)*r21*sj5*x15940))+((r20*x15942)));
evalcond[2]=((-1.0)+((r00*x15942))+(((-1.0)*x15935*x15940)));
evalcond[3]=((((-1.0)*r12*x15927*x15929))+(((-1.0)*x15931))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x15944))+(((-1.0)*r12*x15927*x15937)));
evalcond[5]=(((cj3*x15928*x15935))+((sj3*x15936))+((sj3*x15932))+(((-1.0)*r00*x15929*x15941)));
evalcond[6]=(((sj3*x15928*x15935))+(((-1.0)*x15929*x15936))+(((-1.0)*x15929*x15932))+(((-1.0)*r00*x15937*x15941)));
evalcond[7]=(((cj3*x15943))+(((-1.0)*r20*x15929*x15941))+(((-1.0)*x15944))+((sj3*x15930))+((sj3*x15933)));
evalcond[8]=((((-1.0)*cj2*x15934))+(((-1.0)*r20*x15937*x15941))+(((-1.0)*x15929*x15933))+(((-1.0)*x15929*x15930))+((sj3*x15943))+x15931);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15945=((1.0)*sj5);
IkReal x15946=(cj5*r00);
CheckValue<IkReal> x15947=IKPowWithIntegerCheck(((((-1.0)*r01*x15945))+x15946),-1);
if(!x15947.valid){
continue;
}
CheckValue<IkReal> x15948=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x15946))),-1);
if(!x15948.valid){
continue;
}
if( IKabs(x15947.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15948.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x15945)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15947.value)+IKsqr(((x15948.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x15945))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15947.value, ((x15948.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x15945))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15949=IKsin(j4);
IkReal x15950=IKcos(j4);
IkReal x15951=((1.0)*cj3);
IkReal x15952=(cj5*r21);
IkReal x15953=(sj1*sj2);
IkReal x15954=(cj5*r01);
IkReal x15955=(r20*sj5);
IkReal x15956=((1.0)*cj1);
IkReal x15957=(r01*sj5);
IkReal x15958=(r00*sj5);
IkReal x15959=((1.0)*sj3);
IkReal x15960=(sj2*x15956);
IkReal x15961=((1.0)*cj2*sj1);
IkReal x15962=((1.0)*x15949);
IkReal x15963=(cj5*x15950);
IkReal x15964=(cj5*x15949);
IkReal x15965=(r21*sj5*x15950);
IkReal x15966=(x15960+x15961);
evalcond[0]=((-1.0)*r12*x15950);
evalcond[1]=((((-1.0)*r21*sj5*x15962))+((r20*x15964)));
evalcond[2]=((-1.0)+((r00*x15964))+(((-1.0)*x15957*x15962)));
evalcond[3]=((((-1.0)*x15953))+(((-1.0)*r12*x15949*x15951))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x15966))+(((-1.0)*r12*x15949*x15959)));
evalcond[5]=(((cj3*x15950*x15957))+((sj3*x15954))+((sj3*x15958))+(((-1.0)*r00*x15951*x15963)));
evalcond[6]=((((-1.0)*r00*x15959*x15963))+(((-1.0)*x15951*x15954))+(((-1.0)*x15951*x15958))+((sj3*x15950*x15957)));
evalcond[7]=((((-1.0)*x15966))+((sj3*x15952))+((sj3*x15955))+(((-1.0)*r20*x15951*x15963))+((cj3*x15965)));
evalcond[8]=((((-1.0)*r20*x15959*x15963))+(((-1.0)*x15951*x15955))+(((-1.0)*x15951*x15952))+(((-1.0)*cj2*x15956))+((sj3*x15965))+x15953);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15967=(r01*sj5);
IkReal x15968=(cj5*r00);
CheckValue<IkReal> x15969=IKPowWithIntegerCheck(((((-1.0)*x15967))+x15968),-1);
if(!x15969.valid){
continue;
}
CheckValue<IkReal> x15970=IKPowWithIntegerCheck((((sj3*x15967))+(((-1.0)*sj3*x15968))),-1);
if(!x15970.valid){
continue;
}
if( IKabs(x15969.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15970.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15969.value)+IKsqr(((x15970.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15969.value, ((x15970.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15971=IKsin(j4);
IkReal x15972=IKcos(j4);
IkReal x15973=((1.0)*cj3);
IkReal x15974=(cj5*r21);
IkReal x15975=(sj1*sj2);
IkReal x15976=(cj5*r01);
IkReal x15977=(r20*sj5);
IkReal x15978=((1.0)*cj1);
IkReal x15979=(r01*sj5);
IkReal x15980=(r00*sj5);
IkReal x15981=((1.0)*sj3);
IkReal x15982=(sj2*x15978);
IkReal x15983=((1.0)*cj2*sj1);
IkReal x15984=((1.0)*x15971);
IkReal x15985=(cj5*x15972);
IkReal x15986=(cj5*x15971);
IkReal x15987=(r21*sj5*x15972);
IkReal x15988=(x15982+x15983);
evalcond[0]=((-1.0)*r12*x15972);
evalcond[1]=(((r20*x15986))+(((-1.0)*r21*sj5*x15984)));
evalcond[2]=((-1.0)+((r00*x15986))+(((-1.0)*x15979*x15984)));
evalcond[3]=((((-1.0)*r12*x15971*x15973))+(((-1.0)*x15975))+((cj1*cj2)));
evalcond[4]=((((-1.0)*x15988))+(((-1.0)*r12*x15971*x15981)));
evalcond[5]=(((cj3*x15972*x15979))+((sj3*x15980))+((sj3*x15976))+(((-1.0)*r00*x15973*x15985)));
evalcond[6]=((((-1.0)*x15973*x15976))+(((-1.0)*x15973*x15980))+(((-1.0)*r00*x15981*x15985))+((sj3*x15972*x15979)));
evalcond[7]=((((-1.0)*x15988))+((cj3*x15987))+((sj3*x15974))+((sj3*x15977))+(((-1.0)*r20*x15973*x15985)));
evalcond[8]=((((-1.0)*x15973*x15977))+(((-1.0)*x15973*x15974))+(((-1.0)*cj2*x15978))+(((-1.0)*r20*x15981*x15985))+((sj3*x15987))+x15975);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15989=cj5*cj5;
IkReal x15990=(cj3*r00);
IkReal x15991=(r01*sj3);
IkReal x15992=(r00*sj3);
IkReal x15993=(cj3*r01);
IkReal x15994=(cj5*r20*sj5);
IkReal x15995=(r21*x15989);
IkReal x15996=(r20*x15989);
IkReal x15997=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x15998=IKPowWithIntegerCheck(IKsign((((r21*x15993))+(((-1.0)*x15993*x15995))+(((-1.0)*x15993*x15994))+((x15990*x15996))+(((-1.0)*x15990*x15997))+((cj3*r02*r22)))),-1);
if(!x15998.valid){
continue;
}
CheckValue<IkReal> x15999 = IKatan2WithCheck(IkReal((((cj5*r22*x15991))+((r22*sj5*x15992)))),IkReal(((((-1.0)*r21*x15992))+(((-1.0)*x15991*x15997))+((x15991*x15996))+((x15992*x15994))+((x15992*x15995)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15998.value)))+(x15999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16000=IKsin(j4);
IkReal x16001=IKcos(j4);
IkReal x16002=(r11*sj5);
IkReal x16003=(cj5*sj3);
IkReal x16004=(sj1*sj2);
IkReal x16005=(r21*sj5);
IkReal x16006=((1.0)*cj1);
IkReal x16007=(sj3*sj5);
IkReal x16008=(cj3*cj5);
IkReal x16009=(r01*sj5);
IkReal x16010=(sj2*x16006);
IkReal x16011=((1.0)*cj2*sj1);
IkReal x16012=((1.0)*x16001);
IkReal x16013=((1.0)*x16000);
IkReal x16014=(cj3*x16001);
IkReal x16015=((1.0)*x16008);
IkReal x16016=((1.0)*cj3*sj5);
IkReal x16017=(cj5*x16000);
IkReal x16018=(sj3*x16001);
IkReal x16019=(x16011+x16010);
evalcond[0]=(((r20*x16017))+(((-1.0)*x16005*x16013))+(((-1.0)*r22*x16012)));
evalcond[1]=((((-1.0)*x16002*x16013))+(((-1.0)*r12*x16012))+((r10*x16017)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x16012))+((r00*x16017))+(((-1.0)*x16009*x16013)));
evalcond[3]=((((-1.0)*cj3*r02*x16013))+((x16009*x16014))+((r01*x16003))+((r00*x16007))+(((-1.0)*r00*x16008*x16012)));
evalcond[4]=((((-1.0)*r00*x16003*x16012))+(((-1.0)*r00*x16016))+(((-1.0)*r01*x16015))+((r01*x16001*x16007))+(((-1.0)*r02*sj3*x16013)));
evalcond[5]=(((r10*x16007))+((r11*x16003))+(((-1.0)*r10*x16008*x16012))+((x16002*x16014))+((cj1*cj2))+(((-1.0)*x16004))+(((-1.0)*cj3*r12*x16013)));
evalcond[6]=((((-1.0)*x16019))+(((-1.0)*r20*x16008*x16012))+((r20*x16007))+((r21*x16003))+((x16005*x16014))+(((-1.0)*cj3*r22*x16013)));
evalcond[7]=((((-1.0)*r20*x16016))+(((-1.0)*cj2*x16006))+(((-1.0)*r21*x16015))+x16004+(((-1.0)*r20*x16003*x16012))+(((-1.0)*r22*sj3*x16013))+((x16005*x16018)));
evalcond[8]=((((-1.0)*r12*sj3*x16013))+(((-1.0)*x16019))+(((-1.0)*r10*x16003*x16012))+(((-1.0)*r10*x16016))+((x16002*x16018))+(((-1.0)*r11*x16015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16020=((1.0)*sj5);
CheckValue<IkReal> x16021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x16020))+(((-1.0)*cj5*r21)))),-1);
if(!x16021.valid){
continue;
}
CheckValue<IkReal> x16022 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*x16020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16021.value)))+(x16022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16023=IKsin(j4);
IkReal x16024=IKcos(j4);
IkReal x16025=(r11*sj5);
IkReal x16026=(cj5*sj3);
IkReal x16027=(sj1*sj2);
IkReal x16028=(r21*sj5);
IkReal x16029=((1.0)*cj1);
IkReal x16030=(sj3*sj5);
IkReal x16031=(cj3*cj5);
IkReal x16032=(r01*sj5);
IkReal x16033=(sj2*x16029);
IkReal x16034=((1.0)*cj2*sj1);
IkReal x16035=((1.0)*x16024);
IkReal x16036=((1.0)*x16023);
IkReal x16037=(cj3*x16024);
IkReal x16038=((1.0)*x16031);
IkReal x16039=((1.0)*cj3*sj5);
IkReal x16040=(cj5*x16023);
IkReal x16041=(sj3*x16024);
IkReal x16042=(x16034+x16033);
evalcond[0]=((((-1.0)*r22*x16035))+((r20*x16040))+(((-1.0)*x16028*x16036)));
evalcond[1]=((((-1.0)*x16025*x16036))+((r10*x16040))+(((-1.0)*r12*x16035)));
evalcond[2]=((-1.0)+(((-1.0)*x16032*x16036))+(((-1.0)*r02*x16035))+((r00*x16040)));
evalcond[3]=((((-1.0)*cj3*r02*x16036))+((x16032*x16037))+((r01*x16026))+(((-1.0)*r00*x16031*x16035))+((r00*x16030)));
evalcond[4]=((((-1.0)*r00*x16026*x16035))+(((-1.0)*r00*x16039))+(((-1.0)*r01*x16038))+((r01*x16024*x16030))+(((-1.0)*r02*sj3*x16036)));
evalcond[5]=(((r11*x16026))+((r10*x16030))+(((-1.0)*cj3*r12*x16036))+(((-1.0)*x16027))+(((-1.0)*r10*x16031*x16035))+((x16025*x16037))+((cj1*cj2)));
evalcond[6]=(((x16028*x16037))+((r20*x16030))+(((-1.0)*x16042))+(((-1.0)*r20*x16031*x16035))+(((-1.0)*cj3*r22*x16036))+((r21*x16026)));
evalcond[7]=((((-1.0)*r20*x16026*x16035))+((x16028*x16041))+(((-1.0)*cj2*x16029))+(((-1.0)*r20*x16039))+(((-1.0)*r21*x16038))+x16027+(((-1.0)*r22*sj3*x16036)));
evalcond[8]=(((x16025*x16041))+(((-1.0)*r12*sj3*x16036))+(((-1.0)*r10*x16026*x16035))+(((-1.0)*x16042))+(((-1.0)*r11*x16038))+(((-1.0)*r10*x16039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16043=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x16043.valid){
continue;
}
CheckValue<IkReal> x16044 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16044.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16043.value)))+(x16044.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16045=IKsin(j4);
IkReal x16046=IKcos(j4);
IkReal x16047=(r11*sj5);
IkReal x16048=(cj5*sj3);
IkReal x16049=(sj1*sj2);
IkReal x16050=(r21*sj5);
IkReal x16051=((1.0)*cj1);
IkReal x16052=(sj3*sj5);
IkReal x16053=(cj3*cj5);
IkReal x16054=(r01*sj5);
IkReal x16055=(sj2*x16051);
IkReal x16056=((1.0)*cj2*sj1);
IkReal x16057=((1.0)*x16046);
IkReal x16058=((1.0)*x16045);
IkReal x16059=(cj3*x16046);
IkReal x16060=((1.0)*x16053);
IkReal x16061=((1.0)*cj3*sj5);
IkReal x16062=(cj5*x16045);
IkReal x16063=(sj3*x16046);
IkReal x16064=(x16056+x16055);
evalcond[0]=((((-1.0)*x16050*x16058))+(((-1.0)*r22*x16057))+((r20*x16062)));
evalcond[1]=(((r10*x16062))+(((-1.0)*x16047*x16058))+(((-1.0)*r12*x16057)));
evalcond[2]=((-1.0)+((r00*x16062))+(((-1.0)*r02*x16057))+(((-1.0)*x16054*x16058)));
evalcond[3]=(((x16054*x16059))+(((-1.0)*cj3*r02*x16058))+(((-1.0)*r00*x16053*x16057))+((r01*x16048))+((r00*x16052)));
evalcond[4]=((((-1.0)*r00*x16061))+(((-1.0)*r01*x16060))+(((-1.0)*r02*sj3*x16058))+((r01*x16046*x16052))+(((-1.0)*r00*x16048*x16057)));
evalcond[5]=(((r11*x16048))+(((-1.0)*x16049))+((r10*x16052))+((x16047*x16059))+(((-1.0)*cj3*r12*x16058))+((cj1*cj2))+(((-1.0)*r10*x16053*x16057)));
evalcond[6]=(((r21*x16048))+(((-1.0)*cj3*r22*x16058))+(((-1.0)*x16064))+((r20*x16052))+(((-1.0)*r20*x16053*x16057))+((x16050*x16059)));
evalcond[7]=((((-1.0)*r22*sj3*x16058))+(((-1.0)*r20*x16061))+(((-1.0)*r21*x16060))+x16049+(((-1.0)*r20*x16048*x16057))+((x16050*x16063))+(((-1.0)*cj2*x16051)));
evalcond[8]=((((-1.0)*r10*x16061))+(((-1.0)*r10*x16048*x16057))+(((-1.0)*r12*sj3*x16058))+(((-1.0)*x16064))+((x16047*x16063))+(((-1.0)*r11*x16060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x16065=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x16065;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x16065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x16066=((1.0)*sj5);
IkReal x16067=((((-1.0)*cj5*r11))+(((-1.0)*r10*x16066)));
j4eval[0]=x16067;
j4eval[1]=IKsign(x16067);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x16066)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x16068=cj5*cj5;
IkReal x16069=(cj3*r00);
IkReal x16070=(cj3*r01);
IkReal x16071=((1.0)*cj5*sj5);
IkReal x16072=((((-1.0)*r21*x16068*x16070))+((r21*x16070))+(((-1.0)*r21*x16069*x16071))+((r20*x16068*x16069))+(((-1.0)*r20*x16070*x16071))+((cj3*r02*r22)));
j4eval[0]=x16072;
j4eval[1]=IKsign(x16072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x16073=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x16073;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x16073);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x16074=((1.0)*sj5);
IkReal x16075=((((-1.0)*cj5*r11))+(((-1.0)*r10*x16074)));
j4eval[0]=x16075;
j4eval[1]=IKsign(x16075);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x16074)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x16076=cj5*cj5;
IkReal x16077=r01*r01;
IkReal x16078=(cj5*r00);
IkReal x16079=(r01*sj5);
IkReal x16080=((((-2.0)*x16078*x16079))+((x16076*(r00*r00)))+x16077+(r02*r02)+(((-1.0)*x16076*x16077)));
j4eval[0]=x16080;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x16078))+x16079))));
j4eval[2]=IKsign(x16080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16081=cj5*cj5;
IkReal x16082=r01*r01;
IkReal x16083=(r01*sj5);
IkReal x16084=(cj5*r00);
CheckValue<IkReal> x16085=IKPowWithIntegerCheck(IKsign(((((-2.0)*x16083*x16084))+((x16081*(r00*r00)))+(((-1.0)*x16081*x16082))+x16082+(r02*r02))),-1);
if(!x16085.valid){
continue;
}
CheckValue<IkReal> x16086 = IKatan2WithCheck(IkReal(((((-1.0)*x16084))+x16083)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x16086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16085.value)))+(x16086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16087=IKsin(j4);
IkReal x16088=IKcos(j4);
IkReal x16089=(cj5*r00);
IkReal x16090=(cj5*r20);
IkReal x16091=(cj5*r10);
IkReal x16092=((1.0)*x16088);
IkReal x16093=(sj5*x16088);
IkReal x16094=((1.0)*x16087);
IkReal x16095=(sj5*x16094);
evalcond[0]=((((-1.0)*r22*x16092))+((x16087*x16090))+(((-1.0)*r21*x16095)));
evalcond[1]=((((-1.0)*r12*x16092))+(((-1.0)*r11*x16095))+((x16087*x16091)));
evalcond[2]=((((-1.0)*r02*x16094))+((r01*x16093))+(((-1.0)*x16089*x16092)));
evalcond[3]=((1.0)+(((-1.0)*r02*x16092))+(((-1.0)*r01*x16095))+((x16087*x16089)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x16094))+((cj1*sj2))+((r11*x16093))+(((-1.0)*x16091*x16092)));
evalcond[5]=(((r21*x16093))+(((-1.0)*r22*x16094))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16090*x16092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16096=((1.0)*sj5);
CheckValue<IkReal> x16097 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x16096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16097.valid){
continue;
}
CheckValue<IkReal> x16098=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x16096)))),-1);
if(!x16098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16097.value)+(((1.5707963267949)*(x16098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16099=IKsin(j4);
IkReal x16100=IKcos(j4);
IkReal x16101=(cj5*r00);
IkReal x16102=(cj5*r20);
IkReal x16103=(cj5*r10);
IkReal x16104=((1.0)*x16100);
IkReal x16105=(sj5*x16100);
IkReal x16106=((1.0)*x16099);
IkReal x16107=(sj5*x16106);
evalcond[0]=((((-1.0)*r22*x16104))+(((-1.0)*r21*x16107))+((x16099*x16102)));
evalcond[1]=((((-1.0)*r12*x16104))+(((-1.0)*r11*x16107))+((x16099*x16103)));
evalcond[2]=(((r01*x16105))+(((-1.0)*r02*x16106))+(((-1.0)*x16101*x16104)));
evalcond[3]=((1.0)+(((-1.0)*r02*x16104))+((x16099*x16101))+(((-1.0)*r01*x16107)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x16106))+((r11*x16105))+(((-1.0)*x16103*x16104)));
evalcond[5]=((((-1.0)*r22*x16106))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16102*x16104))+((r21*x16105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16108 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16108.valid){
continue;
}
CheckValue<IkReal> x16109=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16108.value)+(((1.5707963267949)*(x16109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16110=IKsin(j4);
IkReal x16111=IKcos(j4);
IkReal x16112=(cj5*r00);
IkReal x16113=(cj5*r20);
IkReal x16114=(cj5*r10);
IkReal x16115=((1.0)*x16111);
IkReal x16116=(sj5*x16111);
IkReal x16117=((1.0)*x16110);
IkReal x16118=(sj5*x16117);
evalcond[0]=((((-1.0)*r21*x16118))+((x16110*x16113))+(((-1.0)*r22*x16115)));
evalcond[1]=((((-1.0)*r11*x16118))+(((-1.0)*r12*x16115))+((x16110*x16114)));
evalcond[2]=((((-1.0)*r02*x16117))+(((-1.0)*x16112*x16115))+((r01*x16116)));
evalcond[3]=((1.0)+(((-1.0)*r02*x16115))+(((-1.0)*r01*x16118))+((x16110*x16112)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x16114*x16115))+((cj1*sj2))+(((-1.0)*r12*x16117))+((r11*x16116)));
evalcond[5]=(((r21*x16116))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x16113*x16115))+(((-1.0)*r22*x16117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x16119=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x16119;
j4eval[1]=((IKabs(r12))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j4eval[2]=IKsign(x16119);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x16120=((1.0)*sj5);
IkReal x16121=((((-1.0)*cj5*r11))+(((-1.0)*r10*x16120)));
j4eval[0]=x16121;
j4eval[1]=IKsign(x16121);
j4eval[2]=((IKabs((((cj5*r20))+(((-1.0)*r21*x16120)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x16122=(cj1*sj2);
IkReal x16123=(cj5*r00);
IkReal x16124=((1.0)*r02);
IkReal x16125=(cj2*sj1);
IkReal x16126=((1.0)*r01*sj5);
IkReal x16127=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x16127;
j4eval[1]=((IKabs(((((-1.0)*x16122*x16126))+((x16122*x16123))+(((-1.0)*x16125*x16126))+((x16123*x16125)))))+(IKabs(((((-1.0)*x16122*x16124))+(((-1.0)*x16124*x16125))))));
j4eval[2]=IKsign(x16127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16128=(cj1*sj2);
IkReal x16129=(cj5*r00);
IkReal x16130=((1.0)*r02);
IkReal x16131=(cj2*sj1);
IkReal x16132=((1.0)*r01*sj5);
CheckValue<IkReal> x16133=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16133.valid){
continue;
}
CheckValue<IkReal> x16134 = IKatan2WithCheck(IkReal((((x16128*x16129))+((x16129*x16131))+(((-1.0)*x16128*x16132))+(((-1.0)*x16131*x16132)))),IkReal(((((-1.0)*x16128*x16130))+(((-1.0)*x16130*x16131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16133.value)))+(x16134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16135=IKcos(j4);
IkReal x16136=IKsin(j4);
IkReal x16137=((1.0)*x16135);
IkReal x16138=(cj5*x16135);
IkReal x16139=(cj5*x16136);
IkReal x16140=((1.0)*sj5*x16136);
evalcond[0]=(((r02*x16136))+(((-1.0)*r01*sj5*x16137))+((r00*x16138)));
evalcond[1]=((((-1.0)*r21*x16140))+(((-1.0)*r22*x16137))+((r20*x16139)));
evalcond[2]=((((-1.0)*r12*x16137))+(((-1.0)*r11*x16140))+((r10*x16139)));
evalcond[3]=((1.0)+(((-1.0)*r02*x16137))+(((-1.0)*r01*x16140))+((r00*x16139)));
evalcond[4]=((((-1.0)*r11*sj5*x16137))+((cj2*sj1))+((cj1*sj2))+((r10*x16138))+((r12*x16136)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x16138))+(((-1.0)*r21*sj5*x16137))+((r22*x16136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16141=((1.0)*sj5);
CheckValue<IkReal> x16142 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x16141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16142.valid){
continue;
}
CheckValue<IkReal> x16143=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x16141)))),-1);
if(!x16143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16142.value)+(((1.5707963267949)*(x16143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16144=IKcos(j4);
IkReal x16145=IKsin(j4);
IkReal x16146=((1.0)*x16144);
IkReal x16147=(cj5*x16144);
IkReal x16148=(cj5*x16145);
IkReal x16149=((1.0)*sj5*x16145);
evalcond[0]=((((-1.0)*r01*sj5*x16146))+((r00*x16147))+((r02*x16145)));
evalcond[1]=((((-1.0)*r21*x16149))+((r20*x16148))+(((-1.0)*r22*x16146)));
evalcond[2]=(((r10*x16148))+(((-1.0)*r12*x16146))+(((-1.0)*r11*x16149)));
evalcond[3]=((1.0)+(((-1.0)*r01*x16149))+((r00*x16148))+(((-1.0)*r02*x16146)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x16145))+((r10*x16147))+(((-1.0)*r11*sj5*x16146)));
evalcond[5]=(((r20*x16147))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x16145))+(((-1.0)*r21*sj5*x16146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16150 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16150.valid){
continue;
}
CheckValue<IkReal> x16151=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16150.value)+(((1.5707963267949)*(x16151.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16152=IKcos(j4);
IkReal x16153=IKsin(j4);
IkReal x16154=((1.0)*x16152);
IkReal x16155=(cj5*x16152);
IkReal x16156=(cj5*x16153);
IkReal x16157=((1.0)*sj5*x16153);
evalcond[0]=((((-1.0)*r01*sj5*x16154))+((r00*x16155))+((r02*x16153)));
evalcond[1]=((((-1.0)*r21*x16157))+((r20*x16156))+(((-1.0)*r22*x16154)));
evalcond[2]=(((r10*x16156))+(((-1.0)*r11*x16157))+(((-1.0)*r12*x16154)));
evalcond[3]=((1.0)+(((-1.0)*r01*x16157))+(((-1.0)*r02*x16154))+((r00*x16156)));
evalcond[4]=(((cj2*sj1))+((r12*x16153))+((cj1*sj2))+((r10*x16155))+(((-1.0)*r11*sj5*x16154)));
evalcond[5]=(((r20*x16155))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x16153))+(((-1.0)*r21*sj5*x16154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16158=((-1.0)*r10);
IkReal x16160 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x16160)==0){
continue;
}
IkReal x16159=pow(x16160,-0.5);
CheckValue<IkReal> x16161 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x16158),IKFAST_ATAN2_MAGTHRESH);
if(!x16161.valid){
continue;
}
IkReal gconst54=((-1.0)*(x16161.value));
IkReal gconst55=(r11*x16159);
IkReal gconst56=(x16158*x16159);
CheckValue<IkReal> x16162 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x16162.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x16162.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16163=((-1.0)*r10);
IkReal x16164=x16159;
CheckValue<IkReal> x16166 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x16163),IKFAST_ATAN2_MAGTHRESH);
if(!x16166.valid){
continue;
}
IkReal x16165=((-1.0)*(x16166.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x16165;
IkReal gconst54=x16165;
IkReal gconst55=(r11*x16164);
IkReal gconst56=(x16163*x16164);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16167=((-1.0)*r10);
IkReal x16168=x16159;
CheckValue<IkReal> x16170 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x16167),IKFAST_ATAN2_MAGTHRESH);
if(!x16170.valid){
continue;
}
IkReal x16169=((-1.0)*(x16170.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x16169;
IkReal gconst54=x16169;
IkReal gconst55=(r11*x16168);
IkReal gconst56=(x16167*x16168);
CheckValue<IkReal> x16178=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x16178.valid){
continue;
}
IkReal x16171=x16178.value;
IkReal x16172=(cj3*x16171);
IkReal x16173=(r00*x16172);
IkReal x16174=(r21*x16172);
IkReal x16175=(r20*x16172);
IkReal x16176=(r01*x16172);
IkReal x16177=(r10*r11*x16172);
j4eval[0]=IKsign((((r01*r10*r11*x16175))+((r20*x16173*(r10*r10)))+((r01*x16174*(r11*r11)))+((cj3*r02*r22))+((r10*r11*r21*x16173))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16179=((-1.0)*r10);
IkReal x16180=x16159;
CheckValue<IkReal> x16182 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x16179),IKFAST_ATAN2_MAGTHRESH);
if(!x16182.valid){
continue;
}
IkReal x16181=((-1.0)*(x16182.value));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst55;
cj5=gconst56;
j5=x16181;
IkReal gconst54=x16181;
IkReal gconst55=(r11*x16180);
IkReal gconst56=(x16179*x16180);
CheckValue<IkReal> x16190=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x16190.valid){
continue;
}
IkReal x16183=x16190.value;
IkReal x16184=(sj3*x16183);
IkReal x16185=(r20*x16184);
IkReal x16186=(r00*x16184);
IkReal x16187=(r01*x16184);
IkReal x16188=(r21*x16184);
IkReal x16189=(r10*r11*x16184);
j4eval[0]=IKsign((((r21*x16187*(r11*r11)))+((r00*x16185*(r10*r10)))+((r10*r11*r21*x16186))+((r01*r10*r11*x16185))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16191=gconst56*gconst56;
IkReal x16192=gconst55*gconst55;
IkReal x16193=(cj3*r00);
IkReal x16194=(r01*sj3);
IkReal x16195=(r00*sj3);
IkReal x16196=(cj3*r01);
IkReal x16197=((1.0)*r22);
IkReal x16198=(gconst55*gconst56*r21);
IkReal x16199=(r20*x16191);
IkReal x16200=(r21*x16192);
IkReal x16201=((1.0)*gconst55*gconst56*r20);
CheckValue<IkReal> x16202 = IKatan2WithCheck(IkReal(((((-1.0)*gconst55*x16193*x16197))+(((-1.0)*gconst56*x16196*x16197)))),IkReal((((x16193*x16200))+((x16196*x16198))+(((-1.0)*x16193*x16201))+(((-1.0)*x16196*x16199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16202.valid){
continue;
}
CheckValue<IkReal> x16203=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16195*x16198))+((x16195*x16199))+(((-1.0)*x16194*x16201))+((r02*r22*sj3))+((x16194*x16200)))),-1);
if(!x16203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16202.value)+(((1.5707963267949)*(x16203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16204=IKsin(j4);
IkReal x16205=IKcos(j4);
IkReal x16206=(sj1*sj2);
IkReal x16207=(gconst56*r00);
IkReal x16208=(gconst56*sj3);
IkReal x16209=((1.0)*cj3);
IkReal x16210=(gconst55*r00);
IkReal x16211=((1.0)*cj1);
IkReal x16212=(gconst55*sj3);
IkReal x16213=(cj2*sj1);
IkReal x16214=(gconst56*r20);
IkReal x16215=(gconst56*r10);
IkReal x16216=(cj2*x16211);
IkReal x16217=((1.0)*x16205);
IkReal x16218=((1.0)*x16204);
IkReal x16219=(gconst55*x16205);
evalcond[0]=((((-1.0)*gconst55*r21*x16218))+(((-1.0)*r22*x16217))+((x16204*x16214)));
evalcond[1]=(((x16204*x16215))+(((-1.0)*r12*x16217))+(((-1.0)*gconst55*r11*x16218)));
evalcond[2]=((1.0)+((x16204*x16207))+(((-1.0)*gconst55*r01*x16218))+(((-1.0)*r02*x16217)));
evalcond[3]=(((sj3*x16210))+((cj3*r01*x16219))+(((-1.0)*x16205*x16207*x16209))+((r01*x16208))+(((-1.0)*r02*x16204*x16209)));
evalcond[4]=((((-1.0)*x16209*x16210))+(((-1.0)*sj3*x16207*x16217))+(((-1.0)*r02*sj3*x16218))+((r01*x16205*x16212))+(((-1.0)*gconst56*r01*x16209)));
evalcond[5]=(((cj3*r11*x16219))+(((-1.0)*r12*x16204*x16209))+(((-1.0)*x16205*x16209*x16215))+x16206+((r11*x16208))+(((-1.0)*x16216))+((r10*x16212)));
evalcond[6]=(((cj3*r21*x16219))+(((-1.0)*x16213))+(((-1.0)*sj2*x16211))+(((-1.0)*x16205*x16209*x16214))+((r20*x16212))+((r21*x16208))+(((-1.0)*r22*x16204*x16209)));
evalcond[7]=(((cj1*sj2))+(((-1.0)*gconst56*r11*x16209))+x16213+((r11*x16205*x16212))+(((-1.0)*r12*sj3*x16218))+(((-1.0)*gconst55*r10*x16209))+(((-1.0)*r10*x16208*x16217)));
evalcond[8]=((((-1.0)*r20*x16208*x16217))+(((-1.0)*r22*sj3*x16218))+((r21*x16205*x16212))+x16206+(((-1.0)*gconst56*r21*x16209))+(((-1.0)*x16216))+(((-1.0)*gconst55*r20*x16209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16220=gconst55*gconst55;
IkReal x16221=gconst56*gconst56;
IkReal x16222=(r00*r20);
IkReal x16223=((1.0)*r21);
IkReal x16224=(r00*sj3);
IkReal x16225=(cj3*r01);
IkReal x16226=(r01*sj3);
IkReal x16227=(gconst55*gconst56);
IkReal x16228=(sj3*x16227);
CheckValue<IkReal> x16229 = IKatan2WithCheck(IkReal((((gconst55*r22*x16224))+((gconst56*r22*x16226)))),IkReal(((((-1.0)*x16220*x16223*x16224))+((x16222*x16228))+(((-1.0)*x16223*x16226*x16227))+((r20*x16221*x16226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16229.valid){
continue;
}
CheckValue<IkReal> x16230=IKPowWithIntegerCheck(IKsign((((cj3*x16221*x16222))+(((-1.0)*r20*x16225*x16227))+(((-1.0)*cj3*r00*x16223*x16227))+((r21*x16220*x16225))+((cj3*r02*r22)))),-1);
if(!x16230.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16229.value)+(((1.5707963267949)*(x16230.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16231=IKsin(j4);
IkReal x16232=IKcos(j4);
IkReal x16233=(sj1*sj2);
IkReal x16234=(gconst56*r00);
IkReal x16235=(gconst56*sj3);
IkReal x16236=((1.0)*cj3);
IkReal x16237=(gconst55*r00);
IkReal x16238=((1.0)*cj1);
IkReal x16239=(gconst55*sj3);
IkReal x16240=(cj2*sj1);
IkReal x16241=(gconst56*r20);
IkReal x16242=(gconst56*r10);
IkReal x16243=(cj2*x16238);
IkReal x16244=((1.0)*x16232);
IkReal x16245=((1.0)*x16231);
IkReal x16246=(gconst55*x16232);
evalcond[0]=((((-1.0)*gconst55*r21*x16245))+((x16231*x16241))+(((-1.0)*r22*x16244)));
evalcond[1]=(((x16231*x16242))+(((-1.0)*r12*x16244))+(((-1.0)*gconst55*r11*x16245)));
evalcond[2]=((1.0)+((x16231*x16234))+(((-1.0)*r02*x16244))+(((-1.0)*gconst55*r01*x16245)));
evalcond[3]=(((r01*x16235))+(((-1.0)*r02*x16231*x16236))+((sj3*x16237))+((cj3*r01*x16246))+(((-1.0)*x16232*x16234*x16236)));
evalcond[4]=(((r01*x16232*x16239))+(((-1.0)*gconst56*r01*x16236))+(((-1.0)*sj3*x16234*x16244))+(((-1.0)*x16236*x16237))+(((-1.0)*r02*sj3*x16245)));
evalcond[5]=(((r11*x16235))+x16233+(((-1.0)*x16243))+((r10*x16239))+(((-1.0)*r12*x16231*x16236))+((cj3*r11*x16246))+(((-1.0)*x16232*x16236*x16242)));
evalcond[6]=((((-1.0)*sj2*x16238))+((r20*x16239))+((r21*x16235))+(((-1.0)*r22*x16231*x16236))+((cj3*r21*x16246))+(((-1.0)*x16232*x16236*x16241))+(((-1.0)*x16240)));
evalcond[7]=((((-1.0)*gconst55*r10*x16236))+((cj1*sj2))+((r11*x16232*x16239))+x16240+(((-1.0)*r12*sj3*x16245))+(((-1.0)*gconst56*r11*x16236))+(((-1.0)*r10*x16235*x16244)));
evalcond[8]=((((-1.0)*gconst56*r21*x16236))+((r21*x16232*x16239))+x16233+(((-1.0)*x16243))+(((-1.0)*r20*x16235*x16244))+(((-1.0)*gconst55*r20*x16236))+(((-1.0)*r22*sj3*x16245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16247 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst55*r11))+((gconst56*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16247.valid){
continue;
}
CheckValue<IkReal> x16248=IKPowWithIntegerCheck(IKsign((((gconst56*r21))+((gconst55*r20)))),-1);
if(!x16248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16247.value)+(((1.5707963267949)*(x16248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16249=IKsin(j4);
IkReal x16250=IKcos(j4);
IkReal x16251=(sj1*sj2);
IkReal x16252=(gconst56*r00);
IkReal x16253=(gconst56*sj3);
IkReal x16254=((1.0)*cj3);
IkReal x16255=(gconst55*r00);
IkReal x16256=((1.0)*cj1);
IkReal x16257=(gconst55*sj3);
IkReal x16258=(cj2*sj1);
IkReal x16259=(gconst56*r20);
IkReal x16260=(gconst56*r10);
IkReal x16261=(cj2*x16256);
IkReal x16262=((1.0)*x16250);
IkReal x16263=((1.0)*x16249);
IkReal x16264=(gconst55*x16250);
evalcond[0]=(((x16249*x16259))+(((-1.0)*r22*x16262))+(((-1.0)*gconst55*r21*x16263)));
evalcond[1]=(((x16249*x16260))+(((-1.0)*gconst55*r11*x16263))+(((-1.0)*r12*x16262)));
evalcond[2]=((1.0)+(((-1.0)*r02*x16262))+((x16249*x16252))+(((-1.0)*gconst55*r01*x16263)));
evalcond[3]=(((cj3*r01*x16264))+(((-1.0)*x16250*x16252*x16254))+((r01*x16253))+((sj3*x16255))+(((-1.0)*r02*x16249*x16254)));
evalcond[4]=((((-1.0)*r02*sj3*x16263))+(((-1.0)*sj3*x16252*x16262))+((r01*x16250*x16257))+(((-1.0)*gconst56*r01*x16254))+(((-1.0)*x16254*x16255)));
evalcond[5]=(((r10*x16257))+((cj3*r11*x16264))+x16251+((r11*x16253))+(((-1.0)*x16250*x16254*x16260))+(((-1.0)*r12*x16249*x16254))+(((-1.0)*x16261)));
evalcond[6]=(((cj3*r21*x16264))+(((-1.0)*x16258))+((r21*x16253))+(((-1.0)*sj2*x16256))+((r20*x16257))+(((-1.0)*x16250*x16254*x16259))+(((-1.0)*r22*x16249*x16254)));
evalcond[7]=((((-1.0)*r12*sj3*x16263))+((cj1*sj2))+(((-1.0)*r10*x16253*x16262))+x16258+(((-1.0)*gconst56*r11*x16254))+(((-1.0)*gconst55*r10*x16254))+((r11*x16250*x16257)));
evalcond[8]=(((r21*x16250*x16257))+x16251+(((-1.0)*r22*sj3*x16263))+(((-1.0)*gconst55*r20*x16254))+(((-1.0)*r20*x16253*x16262))+(((-1.0)*gconst56*r21*x16254))+(((-1.0)*x16261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16265=((-1.0)*r11);
IkReal x16267 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x16267)==0){
continue;
}
IkReal x16266=pow(x16267,-0.5);
CheckValue<IkReal> x16268 = IKatan2WithCheck(IkReal(x16265),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x16268.valid){
continue;
}
IkReal gconst57=((3.14159265358979)+(((-1.0)*(x16268.value))));
IkReal gconst58=(x16265*x16266);
IkReal gconst59=((1.0)*r10*x16266);
CheckValue<IkReal> x16269 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x16269.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x16269.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16270=((-1.0)*r11);
CheckValue<IkReal> x16273 = IKatan2WithCheck(IkReal(x16270),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x16273.valid){
continue;
}
IkReal x16271=((1.0)*(x16273.value));
IkReal x16272=x16266;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst58;
cj5=gconst59;
j5=((3.14159265)+(((-1.0)*x16271)));
IkReal gconst57=((3.14159265358979)+(((-1.0)*x16271)));
IkReal gconst58=(x16270*x16272);
IkReal gconst59=((1.0)*r10*x16272);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16274=gconst58*gconst58;
IkReal x16275=gconst59*gconst59;
IkReal x16276=(gconst58*sj3);
IkReal x16277=(gconst59*r00);
IkReal x16278=(cj3*gconst58);
IkReal x16279=(r01*sj3);
IkReal x16280=((1.0)*gconst59*r01);
IkReal x16281=(r21*x16274);
IkReal x16282=(r20*x16275);
CheckValue<IkReal> x16283 = IKatan2WithCheck(IkReal((((r00*r22*x16276))+((gconst59*r22*x16279)))),IkReal(((((-1.0)*r21*x16276*x16280))+((r20*x16276*x16277))+(((-1.0)*r00*sj3*x16281))+((x16279*x16282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16283.valid){
continue;
}
CheckValue<IkReal> x16284=IKPowWithIntegerCheck(IKsign((((cj3*r01*x16281))+((cj3*r00*x16282))+(((-1.0)*r20*x16278*x16280))+(((-1.0)*r21*x16277*x16278))+((cj3*r02*r22)))),-1);
if(!x16284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16283.value)+(((1.5707963267949)*(x16284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16285=IKsin(j4);
IkReal x16286=IKcos(j4);
IkReal x16287=(sj1*sj2);
IkReal x16288=(cj3*gconst59);
IkReal x16289=(cj3*gconst58);
IkReal x16290=(gconst58*r01);
IkReal x16291=(gconst58*r11);
IkReal x16292=((1.0)*cj2);
IkReal x16293=(cj1*sj2);
IkReal x16294=(gconst59*sj3);
IkReal x16295=(gconst58*sj3);
IkReal x16296=(gconst58*r21);
IkReal x16297=(cj1*x16292);
IkReal x16298=((1.0)*x16286);
IkReal x16299=((1.0)*x16285);
IkReal x16300=(sj3*x16286);
IkReal x16301=(gconst59*x16285);
evalcond[0]=(((r20*x16301))+(((-1.0)*x16296*x16299))+(((-1.0)*r22*x16298)));
evalcond[1]=((((-1.0)*r12*x16298))+(((-1.0)*x16291*x16299))+((r10*x16301)));
evalcond[2]=((1.0)+((r00*x16301))+(((-1.0)*r02*x16298))+(((-1.0)*x16290*x16299)));
evalcond[3]=(((r01*x16294))+((r00*x16295))+((r01*x16286*x16289))+(((-1.0)*r00*x16288*x16298))+(((-1.0)*cj3*r02*x16299)));
evalcond[4]=((((-1.0)*r00*x16289))+(((-1.0)*r02*sj3*x16299))+(((-1.0)*r01*x16288))+((x16290*x16300))+(((-1.0)*r00*x16294*x16298)));
evalcond[5]=(x16287+((r11*x16286*x16289))+(((-1.0)*r10*x16288*x16298))+(((-1.0)*cj3*r12*x16299))+(((-1.0)*x16297))+((r11*x16294))+((r10*x16295)));
evalcond[6]=((((-1.0)*sj1*x16292))+((r21*x16286*x16289))+(((-1.0)*x16293))+((r20*x16295))+(((-1.0)*cj3*r22*x16299))+(((-1.0)*r20*x16288*x16298))+((r21*x16294)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r11*x16288))+(((-1.0)*r10*x16294*x16298))+x16293+((x16291*x16300))+(((-1.0)*r10*x16289))+(((-1.0)*r12*sj3*x16299)));
evalcond[8]=((((-1.0)*r22*sj3*x16299))+x16287+(((-1.0)*r20*x16289))+((r21*x16286*x16295))+(((-1.0)*x16297))+(((-1.0)*r20*x16294*x16298))+(((-1.0)*r21*x16288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16302=IKPowWithIntegerCheck(IKsign((((gconst59*r21))+((gconst58*r20)))),-1);
if(!x16302.valid){
continue;
}
CheckValue<IkReal> x16303 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst58*r11))+((gconst59*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16303.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16302.value)))+(x16303.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16304=IKsin(j4);
IkReal x16305=IKcos(j4);
IkReal x16306=(sj1*sj2);
IkReal x16307=(cj3*gconst59);
IkReal x16308=(cj3*gconst58);
IkReal x16309=(gconst58*r01);
IkReal x16310=(gconst58*r11);
IkReal x16311=((1.0)*cj2);
IkReal x16312=(cj1*sj2);
IkReal x16313=(gconst59*sj3);
IkReal x16314=(gconst58*sj3);
IkReal x16315=(gconst58*r21);
IkReal x16316=(cj1*x16311);
IkReal x16317=((1.0)*x16305);
IkReal x16318=((1.0)*x16304);
IkReal x16319=(sj3*x16305);
IkReal x16320=(gconst59*x16304);
evalcond[0]=(((r20*x16320))+(((-1.0)*r22*x16317))+(((-1.0)*x16315*x16318)));
evalcond[1]=(((r10*x16320))+(((-1.0)*r12*x16317))+(((-1.0)*x16310*x16318)));
evalcond[2]=((1.0)+(((-1.0)*r02*x16317))+(((-1.0)*x16309*x16318))+((r00*x16320)));
evalcond[3]=((((-1.0)*r00*x16307*x16317))+((r01*x16313))+((r00*x16314))+((r01*x16305*x16308))+(((-1.0)*cj3*r02*x16318)));
evalcond[4]=((((-1.0)*r02*sj3*x16318))+(((-1.0)*r00*x16313*x16317))+(((-1.0)*r00*x16308))+(((-1.0)*r01*x16307))+((x16309*x16319)));
evalcond[5]=((((-1.0)*r10*x16307*x16317))+((r11*x16313))+x16306+((r11*x16305*x16308))+(((-1.0)*x16316))+(((-1.0)*cj3*r12*x16318))+((r10*x16314)));
evalcond[6]=(((r20*x16314))+(((-1.0)*cj3*r22*x16318))+(((-1.0)*r20*x16307*x16317))+((r21*x16313))+((r21*x16305*x16308))+(((-1.0)*sj1*x16311))+(((-1.0)*x16312)));
evalcond[7]=(((cj2*sj1))+(((-1.0)*r12*sj3*x16318))+(((-1.0)*r10*x16308))+x16312+((x16310*x16319))+(((-1.0)*r10*x16313*x16317))+(((-1.0)*r11*x16307)));
evalcond[8]=((((-1.0)*r20*x16308))+(((-1.0)*r20*x16313*x16317))+x16306+(((-1.0)*r21*x16307))+(((-1.0)*x16316))+((r21*x16305*x16314))+(((-1.0)*r22*sj3*x16318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16321=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x16321);
rxp1_0=(pz*r11);
rxp1_1=(r01*x16321);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x16322=(cj5*r00);
IkReal x16323=(r01*sj5);
j4eval[0]=((((-1.0)*x16323))+x16322);
j4eval[1]=((((-1.0)*sj3*x16322))+((sj3*x16323)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16324=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x16324);
rxp1_0=(pz*r11);
rxp1_1=(r01*x16324);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x16325=(cj5*r00);
IkReal x16326=(r01*sj5);
j4eval[0]=((((-1.0)*x16326))+x16325);
j4eval[1]=(((cj3*x16326))+(((-1.0)*cj3*x16325)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16327=((-1.0)*pz);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x16327);
rxp1_0=(pz*r11);
rxp1_1=(r01*x16327);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16328=((1.0)*r00);
CheckValue<IkReal> x16329=IKPowWithIntegerCheck(r22,-1);
if(!x16329.valid){
continue;
}
CheckValue<IkReal> x16330=IKPowWithIntegerCheck(sj3,-1);
if(!x16330.valid){
continue;
}
CheckValue<IkReal> x16331=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x16328))),-1);
if(!x16331.valid){
continue;
}
if( IKabs(((x16329.value)*(x16330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16331.value)*(((((-1.0)*sj3*sj5*x16328))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16329.value)*(x16330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x16331.value)*(((((-1.0)*sj3*sj5*x16328))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16329.value)*(x16330.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x16331.value)*(((((-1.0)*sj3*sj5*x16328))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16332=IKsin(j4);
IkReal x16333=IKcos(j4);
IkReal x16334=(sj1*sj2);
IkReal x16335=(cj5*sj3);
IkReal x16336=((1.0)*r11);
IkReal x16337=(cj3*cj5);
IkReal x16338=((1.0)*r10);
IkReal x16339=(cj3*sj5);
IkReal x16340=((1.0)*cj1);
IkReal x16341=((1.0)*r01);
IkReal x16342=(sj3*sj5);
IkReal x16343=(cj2*sj1);
IkReal x16344=((1.0)*r00);
IkReal x16345=(cj2*x16340);
IkReal x16346=(sj5*x16332);
IkReal x16347=(r11*x16333);
IkReal x16348=(cj5*x16332);
IkReal x16349=(r01*x16333);
IkReal x16350=((1.0)*r22*x16332);
evalcond[0]=((-1.0)*r22*x16333);
evalcond[1]=((((-1.0)*x16336*x16346))+((r10*x16348)));
evalcond[2]=((1.0)+(((-1.0)*x16341*x16346))+((r00*x16348)));
evalcond[3]=((((-1.0)*sj3*x16350))+(((-1.0)*x16345))+x16334);
evalcond[4]=((((-1.0)*sj2*x16340))+(((-1.0)*x16343))+(((-1.0)*cj3*x16350)));
evalcond[5]=(((x16339*x16349))+(((-1.0)*x16333*x16337*x16344))+((r01*x16335))+((r00*x16342)));
evalcond[6]=((((-1.0)*x16339*x16344))+(((-1.0)*x16337*x16341))+(((-1.0)*x16333*x16335*x16344))+((x16342*x16349)));
evalcond[7]=(((x16339*x16347))+(((-1.0)*x16345))+((r10*x16342))+x16334+(((-1.0)*x16333*x16337*x16338))+((r11*x16335)));
evalcond[8]=(((cj1*sj2))+x16343+(((-1.0)*x16333*x16335*x16338))+(((-1.0)*x16338*x16339))+((x16342*x16347))+(((-1.0)*x16336*x16337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16351=((1.0)*sj5);
IkReal x16352=(cj5*r00);
CheckValue<IkReal> x16353=IKPowWithIntegerCheck(((((-1.0)*r01*x16351))+x16352),-1);
if(!x16353.valid){
continue;
}
CheckValue<IkReal> x16354=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*x16352))),-1);
if(!x16354.valid){
continue;
}
if( IKabs(((-1.0)*(x16353.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16354.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x16351)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16353.value)))+IKsqr(((x16354.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x16351))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16353.value)), ((x16354.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*r00*sj3*x16351))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16355=IKsin(j4);
IkReal x16356=IKcos(j4);
IkReal x16357=(sj1*sj2);
IkReal x16358=(cj5*sj3);
IkReal x16359=((1.0)*r11);
IkReal x16360=(cj3*cj5);
IkReal x16361=((1.0)*r10);
IkReal x16362=(cj3*sj5);
IkReal x16363=((1.0)*cj1);
IkReal x16364=((1.0)*r01);
IkReal x16365=(sj3*sj5);
IkReal x16366=(cj2*sj1);
IkReal x16367=((1.0)*r00);
IkReal x16368=(cj2*x16363);
IkReal x16369=(sj5*x16355);
IkReal x16370=(r11*x16356);
IkReal x16371=(cj5*x16355);
IkReal x16372=(r01*x16356);
IkReal x16373=((1.0)*r22*x16355);
evalcond[0]=((-1.0)*r22*x16356);
evalcond[1]=(((r10*x16371))+(((-1.0)*x16359*x16369)));
evalcond[2]=((1.0)+(((-1.0)*x16364*x16369))+((r00*x16371)));
evalcond[3]=((((-1.0)*sj3*x16373))+x16357+(((-1.0)*x16368)));
evalcond[4]=((((-1.0)*x16366))+(((-1.0)*cj3*x16373))+(((-1.0)*sj2*x16363)));
evalcond[5]=(((r00*x16365))+(((-1.0)*x16356*x16360*x16367))+((x16362*x16372))+((r01*x16358)));
evalcond[6]=((((-1.0)*x16360*x16364))+(((-1.0)*x16362*x16367))+((x16365*x16372))+(((-1.0)*x16356*x16358*x16367)));
evalcond[7]=(x16357+(((-1.0)*x16356*x16360*x16361))+((x16362*x16370))+((r10*x16365))+((r11*x16358))+(((-1.0)*x16368)));
evalcond[8]=((((-1.0)*x16361*x16362))+((cj1*sj2))+x16366+(((-1.0)*x16359*x16360))+((x16365*x16370))+(((-1.0)*x16356*x16358*x16361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16374=(r01*sj5);
IkReal x16375=(cj5*r00);
CheckValue<IkReal> x16376=IKPowWithIntegerCheck(((((-1.0)*x16374))+x16375),-1);
if(!x16376.valid){
continue;
}
CheckValue<IkReal> x16377=IKPowWithIntegerCheck((((sj3*x16374))+(((-1.0)*sj3*x16375))),-1);
if(!x16377.valid){
continue;
}
if( IKabs(((-1.0)*(x16376.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16377.value)*((((cj3*cj5*r01))+((cj3*r00*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x16376.value)))+IKsqr(((x16377.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x16376.value)), ((x16377.value)*((((cj3*cj5*r01))+((cj3*r00*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16378=IKsin(j4);
IkReal x16379=IKcos(j4);
IkReal x16380=(sj1*sj2);
IkReal x16381=(cj5*sj3);
IkReal x16382=((1.0)*r11);
IkReal x16383=(cj3*cj5);
IkReal x16384=((1.0)*r10);
IkReal x16385=(cj3*sj5);
IkReal x16386=((1.0)*cj1);
IkReal x16387=((1.0)*r01);
IkReal x16388=(sj3*sj5);
IkReal x16389=(cj2*sj1);
IkReal x16390=((1.0)*r00);
IkReal x16391=(cj2*x16386);
IkReal x16392=(sj5*x16378);
IkReal x16393=(r11*x16379);
IkReal x16394=(cj5*x16378);
IkReal x16395=(r01*x16379);
IkReal x16396=((1.0)*r22*x16378);
evalcond[0]=((-1.0)*r22*x16379);
evalcond[1]=((((-1.0)*x16382*x16392))+((r10*x16394)));
evalcond[2]=((1.0)+((r00*x16394))+(((-1.0)*x16387*x16392)));
evalcond[3]=((((-1.0)*sj3*x16396))+(((-1.0)*x16391))+x16380);
evalcond[4]=((((-1.0)*x16389))+(((-1.0)*sj2*x16386))+(((-1.0)*cj3*x16396)));
evalcond[5]=(((r01*x16381))+(((-1.0)*x16379*x16383*x16390))+((r00*x16388))+((x16385*x16395)));
evalcond[6]=((((-1.0)*x16383*x16387))+(((-1.0)*x16385*x16390))+(((-1.0)*x16379*x16381*x16390))+((x16388*x16395)));
evalcond[7]=((((-1.0)*x16391))+x16380+((r11*x16381))+((r10*x16388))+((x16385*x16393))+(((-1.0)*x16379*x16383*x16384)));
evalcond[8]=((((-1.0)*x16382*x16383))+(((-1.0)*x16384*x16385))+((cj1*sj2))+x16389+(((-1.0)*x16379*x16381*x16384))+((x16388*x16393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16397=cj5*cj5;
IkReal x16398=(cj3*r00);
IkReal x16399=(r01*sj3);
IkReal x16400=(r00*sj3);
IkReal x16401=(cj3*r01);
IkReal x16402=(cj5*r20*sj5);
IkReal x16403=(r21*x16397);
IkReal x16404=(r20*x16397);
IkReal x16405=((1.0)*cj5*r21*sj5);
CheckValue<IkReal> x16406=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16398*x16405))+(((-1.0)*x16401*x16402))+(((-1.0)*x16401*x16403))+((r21*x16401))+((cj3*r02*r22))+((x16398*x16404)))),-1);
if(!x16406.valid){
continue;
}
CheckValue<IkReal> x16407 = IKatan2WithCheck(IkReal((((cj5*r22*x16399))+((r22*sj5*x16400)))),IkReal(((((-1.0)*r21*x16400))+((x16399*x16404))+(((-1.0)*x16399*x16405))+((x16400*x16403))+((x16400*x16402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16406.value)))+(x16407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16408=IKsin(j4);
IkReal x16409=IKcos(j4);
IkReal x16410=(sj1*sj2);
IkReal x16411=(r11*sj5);
IkReal x16412=(cj5*sj3);
IkReal x16413=((1.0)*cj1);
IkReal x16414=(r21*sj5);
IkReal x16415=(r01*sj5);
IkReal x16416=(sj3*sj5);
IkReal x16417=(cj2*sj1);
IkReal x16418=(cj3*cj5);
IkReal x16419=(cj2*x16413);
IkReal x16420=((1.0)*x16409);
IkReal x16421=((1.0)*x16408);
IkReal x16422=(cj3*x16409);
IkReal x16423=((1.0)*x16418);
IkReal x16424=((1.0)*cj3*sj5);
IkReal x16425=(cj5*x16408);
IkReal x16426=(sj3*x16409);
evalcond[0]=((((-1.0)*x16414*x16421))+(((-1.0)*r22*x16420))+((r20*x16425)));
evalcond[1]=((((-1.0)*r12*x16420))+(((-1.0)*x16411*x16421))+((r10*x16425)));
evalcond[2]=((1.0)+((r00*x16425))+(((-1.0)*x16415*x16421))+(((-1.0)*r02*x16420)));
evalcond[3]=((((-1.0)*cj3*r02*x16421))+((r00*x16416))+((r01*x16412))+(((-1.0)*r00*x16418*x16420))+((x16415*x16422)));
evalcond[4]=((((-1.0)*r00*x16412*x16420))+(((-1.0)*r00*x16424))+(((-1.0)*r01*x16423))+(((-1.0)*r02*sj3*x16421))+((x16415*x16426)));
evalcond[5]=(((r11*x16412))+x16410+((x16411*x16422))+((r10*x16416))+(((-1.0)*x16419))+(((-1.0)*cj3*r12*x16421))+(((-1.0)*r10*x16418*x16420)));
evalcond[6]=((((-1.0)*r20*x16418*x16420))+((x16414*x16422))+(((-1.0)*sj2*x16413))+(((-1.0)*cj3*r22*x16421))+((r21*x16412))+(((-1.0)*x16417))+((r20*x16416)));
evalcond[7]=((((-1.0)*r11*x16423))+x16417+((cj1*sj2))+((x16411*x16426))+(((-1.0)*r10*x16424))+(((-1.0)*r12*sj3*x16421))+(((-1.0)*r10*x16412*x16420)));
evalcond[8]=((((-1.0)*r20*x16424))+(((-1.0)*r21*x16423))+((x16414*x16426))+x16410+(((-1.0)*r22*sj3*x16421))+(((-1.0)*r20*x16412*x16420))+(((-1.0)*x16419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16427=((1.0)*sj5);
CheckValue<IkReal> x16428 = IKatan2WithCheck(IkReal(r22),IkReal((((cj5*r20))+(((-1.0)*r21*x16427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16428.valid){
continue;
}
CheckValue<IkReal> x16429=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x16427)))),-1);
if(!x16429.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16428.value)+(((1.5707963267949)*(x16429.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16430=IKsin(j4);
IkReal x16431=IKcos(j4);
IkReal x16432=(sj1*sj2);
IkReal x16433=(r11*sj5);
IkReal x16434=(cj5*sj3);
IkReal x16435=((1.0)*cj1);
IkReal x16436=(r21*sj5);
IkReal x16437=(r01*sj5);
IkReal x16438=(sj3*sj5);
IkReal x16439=(cj2*sj1);
IkReal x16440=(cj3*cj5);
IkReal x16441=(cj2*x16435);
IkReal x16442=((1.0)*x16431);
IkReal x16443=((1.0)*x16430);
IkReal x16444=(cj3*x16431);
IkReal x16445=((1.0)*x16440);
IkReal x16446=((1.0)*cj3*sj5);
IkReal x16447=(cj5*x16430);
IkReal x16448=(sj3*x16431);
evalcond[0]=((((-1.0)*r22*x16442))+(((-1.0)*x16436*x16443))+((r20*x16447)));
evalcond[1]=((((-1.0)*x16433*x16443))+((r10*x16447))+(((-1.0)*r12*x16442)));
evalcond[2]=((1.0)+(((-1.0)*r02*x16442))+(((-1.0)*x16437*x16443))+((r00*x16447)));
evalcond[3]=(((r00*x16438))+(((-1.0)*r00*x16440*x16442))+((x16437*x16444))+(((-1.0)*cj3*r02*x16443))+((r01*x16434)));
evalcond[4]=((((-1.0)*r00*x16434*x16442))+(((-1.0)*r01*x16445))+(((-1.0)*r00*x16446))+(((-1.0)*r02*sj3*x16443))+((x16437*x16448)));
evalcond[5]=((((-1.0)*r10*x16440*x16442))+x16432+((x16433*x16444))+((r11*x16434))+(((-1.0)*cj3*r12*x16443))+((r10*x16438))+(((-1.0)*x16441)));
evalcond[6]=(((r20*x16438))+(((-1.0)*r20*x16440*x16442))+((r21*x16434))+((x16436*x16444))+(((-1.0)*sj2*x16435))+(((-1.0)*x16439))+(((-1.0)*cj3*r22*x16443)));
evalcond[7]=((((-1.0)*r10*x16446))+(((-1.0)*r10*x16434*x16442))+x16439+((cj1*sj2))+((x16433*x16448))+(((-1.0)*r12*sj3*x16443))+(((-1.0)*r11*x16445)));
evalcond[8]=((((-1.0)*r20*x16434*x16442))+x16432+(((-1.0)*r21*x16445))+(((-1.0)*r20*x16446))+(((-1.0)*x16441))+(((-1.0)*r22*sj3*x16443))+((x16436*x16448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16449 = IKatan2WithCheck(IkReal(r12),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16449.valid){
continue;
}
CheckValue<IkReal> x16450=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16449.value)+(((1.5707963267949)*(x16450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16451=IKsin(j4);
IkReal x16452=IKcos(j4);
IkReal x16453=(sj1*sj2);
IkReal x16454=(r11*sj5);
IkReal x16455=(cj5*sj3);
IkReal x16456=((1.0)*cj1);
IkReal x16457=(r21*sj5);
IkReal x16458=(r01*sj5);
IkReal x16459=(sj3*sj5);
IkReal x16460=(cj2*sj1);
IkReal x16461=(cj3*cj5);
IkReal x16462=(cj2*x16456);
IkReal x16463=((1.0)*x16452);
IkReal x16464=((1.0)*x16451);
IkReal x16465=(cj3*x16452);
IkReal x16466=((1.0)*x16461);
IkReal x16467=((1.0)*cj3*sj5);
IkReal x16468=(cj5*x16451);
IkReal x16469=(sj3*x16452);
evalcond[0]=((((-1.0)*r22*x16463))+((r20*x16468))+(((-1.0)*x16457*x16464)));
evalcond[1]=((((-1.0)*r12*x16463))+((r10*x16468))+(((-1.0)*x16454*x16464)));
evalcond[2]=((1.0)+(((-1.0)*x16458*x16464))+(((-1.0)*r02*x16463))+((r00*x16468)));
evalcond[3]=(((x16458*x16465))+((r01*x16455))+((r00*x16459))+(((-1.0)*cj3*r02*x16464))+(((-1.0)*r00*x16461*x16463)));
evalcond[4]=(((x16458*x16469))+(((-1.0)*r00*x16467))+(((-1.0)*r00*x16455*x16463))+(((-1.0)*r02*sj3*x16464))+(((-1.0)*r01*x16466)));
evalcond[5]=((((-1.0)*cj3*r12*x16464))+((x16454*x16465))+(((-1.0)*r10*x16461*x16463))+x16453+((r11*x16455))+((r10*x16459))+(((-1.0)*x16462)));
evalcond[6]=((((-1.0)*r20*x16461*x16463))+(((-1.0)*cj3*r22*x16464))+((x16457*x16465))+(((-1.0)*x16460))+(((-1.0)*sj2*x16456))+((r21*x16455))+((r20*x16459)));
evalcond[7]=(((x16454*x16469))+(((-1.0)*r11*x16466))+(((-1.0)*r12*sj3*x16464))+(((-1.0)*r10*x16455*x16463))+x16460+((cj1*sj2))+(((-1.0)*r10*x16467)));
evalcond[8]=((((-1.0)*r20*x16455*x16463))+x16453+((x16457*x16469))+(((-1.0)*r21*x16466))+(((-1.0)*r20*x16467))+(((-1.0)*r22*sj3*x16464))+(((-1.0)*x16462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16470=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16470);
rxp1_1=(px*r21);
rxp1_2=(r11*x16470);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16471=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16471);
rxp1_1=(px*r21);
rxp1_2=(r11*x16471);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16472=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16472);
rxp1_1=(px*r21);
rxp1_2=(r11*x16472);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16473=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16473);
rxp1_1=(px*r21);
rxp1_2=(r11*x16473);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16474=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16474);
rxp1_1=(px*r21);
rxp1_2=(r11*x16474);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16475=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16475);
rxp1_1=(px*r21);
rxp1_2=(r11*x16475);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16478=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x16478.valid){
continue;
}
IkReal x16476=x16478.value;
IkReal x16477=(sj0*x16476);
cj4array[0]=(((cj1*sj2*x16477))+((cj2*sj1*x16477)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16479=IKsin(j4);
IkReal x16480=IKcos(j4);
IkReal x16481=(cj5*x16479);
IkReal x16482=((1.0)*x16480);
IkReal x16483=((1.0)*sj5*x16479);
evalcond[0]=((-1.0)*r02*x16479);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x16482)));
evalcond[2]=((((-1.0)*r21*x16483))+((r20*x16481)));
evalcond[3]=((((-1.0)*r11*x16483))+((r10*x16481)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*sj5*x16480))+(((-1.0)*cj5*r20*x16482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16485=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x16485.valid){
continue;
}
IkReal x16484=x16485.value;
cj4array[0]=(((cj1*cj2*x16484))+(((-1.0)*sj1*sj2*x16484)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16486=IKsin(j4);
IkReal x16487=IKcos(j4);
IkReal x16488=((1.0)*sj0);
IkReal x16489=(cj5*r10);
IkReal x16490=((1.0)*x16487);
IkReal x16491=((1.0)*sj5*x16486);
evalcond[0]=((-1.0)*r02*x16486);
evalcond[1]=((((-1.0)*x16488))+(((-1.0)*r02*x16490)));
evalcond[2]=((((-1.0)*r21*x16491))+((cj5*r20*x16486)));
evalcond[3]=(((x16486*x16489))+(((-1.0)*r11*x16491)));
evalcond[4]=((((-1.0)*cj2*sj1*x16488))+(((-1.0)*cj1*sj2*x16488))+((r11*sj5*x16487))+(((-1.0)*x16489*x16490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16492=IKPowWithIntegerCheck(r02,-1);
if(!x16492.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x16492.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16493=IKsin(j4);
IkReal x16494=IKcos(j4);
IkReal x16495=((1.0)*sj0);
IkReal x16496=(sj5*x16494);
IkReal x16497=(cj5*x16493);
IkReal x16498=((1.0)*sj5*x16493);
IkReal x16499=((1.0)*cj5*x16494);
evalcond[0]=((-1.0)*r02*x16493);
evalcond[1]=((((-1.0)*r21*x16498))+((r20*x16497)));
evalcond[2]=(((r10*x16497))+(((-1.0)*r11*x16498)));
evalcond[3]=((((-1.0)*r20*x16499))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x16496)));
evalcond[4]=(((r11*x16496))+(((-1.0)*cj1*sj2*x16495))+(((-1.0)*r10*x16499))+(((-1.0)*cj2*sj1*x16495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x16500=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16500);
rxp1_1=(px*r21);
rxp1_2=(r11*x16500);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16501=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16501);
rxp1_1=(px*r21);
rxp1_2=(r11*x16501);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x16502=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16502);
rxp1_1=(px*r21);
rxp1_2=(r11*x16502);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16505=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x16505.valid){
continue;
}
IkReal x16503=x16505.value;
IkReal x16504=(sj0*x16503);
cj4array[0]=(((cj1*sj2*x16504))+((cj2*sj1*x16504)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16506=IKsin(j4);
IkReal x16507=IKcos(j4);
IkReal x16508=(cj5*r20);
IkReal x16509=((1.0)*sj5);
evalcond[0]=(r02*x16506);
evalcond[1]=((((-1.0)*r02*x16507))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*r21*x16506*x16509))+((x16506*x16508)));
evalcond[3]=((((-1.0)*r11*x16506*x16509))+((cj5*r10*x16506)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x16507*x16509))+((x16507*x16508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16511=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x16511.valid){
continue;
}
IkReal x16510=x16511.value;
cj4array[0]=(((cj1*cj2*x16510))+(((-1.0)*sj1*sj2*x16510)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16512=IKsin(j4);
IkReal x16513=IKcos(j4);
IkReal x16514=((1.0)*sj0);
IkReal x16515=(cj5*r10);
IkReal x16516=((1.0)*r11*sj5);
evalcond[0]=(r02*x16512);
evalcond[1]=((((-1.0)*x16514))+(((-1.0)*r02*x16513)));
evalcond[2]=((((-1.0)*r21*sj5*x16512))+((cj5*r20*x16512)));
evalcond[3]=((((-1.0)*x16512*x16516))+((x16512*x16515)));
evalcond[4]=(((x16513*x16515))+(((-1.0)*cj2*sj1*x16514))+(((-1.0)*x16513*x16516))+(((-1.0)*cj1*sj2*x16514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x16517=IKPowWithIntegerCheck(r02,-1);
if(!x16517.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x16517.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x16518=IKsin(j4);
IkReal x16519=IKcos(j4);
IkReal x16520=((1.0)*cj1);
IkReal x16521=(cj5*x16519);
IkReal x16522=(cj5*x16518);
IkReal x16523=((1.0)*sj5*x16519);
IkReal x16524=((1.0)*sj5*x16518);
evalcond[0]=(r02*x16518);
evalcond[1]=((((-1.0)*r21*x16524))+((r20*x16522)));
evalcond[2]=(((r10*x16522))+(((-1.0)*r11*x16524)));
evalcond[3]=((((-1.0)*r21*x16523))+((sj1*sj2))+((r20*x16521))+(((-1.0)*cj2*x16520)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((r10*x16521))+(((-1.0)*sj0*sj2*x16520))+(((-1.0)*r11*x16523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16525=((-1.0)*r11);
CheckValue<IkReal> x16526 = IKatan2WithCheck(IkReal(r10),IkReal(x16525),IKFAST_ATAN2_MAGTHRESH);
if(!x16526.valid){
continue;
}
IkReal gconst66=((-1.0)*(x16526.value));
IkReal gconst67=((-1.0)*r10);
IkReal gconst68=x16525;
CheckValue<IkReal> x16527 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x16527.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(x16527.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16528=((-1.0)*r11);
IkReal x16529=((-1.0)*r10);
CheckValue<IkReal> x16531 = IKatan2WithCheck(IkReal(r10),IkReal(x16528),IKFAST_ATAN2_MAGTHRESH);
if(!x16531.valid){
continue;
}
IkReal x16530=((-1.0)*(x16531.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16529);
rxp1_1=(px*r21);
rxp1_2=(px*x16528);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16530;
IkReal gconst66=x16530;
IkReal gconst67=x16529;
IkReal gconst68=x16528;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16532=((-1.0)*r11);
IkReal x16533=((-1.0)*r10);
CheckValue<IkReal> x16535 = IKatan2WithCheck(IkReal(r10),IkReal(x16532),IKFAST_ATAN2_MAGTHRESH);
if(!x16535.valid){
continue;
}
IkReal x16534=((-1.0)*(x16535.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16533);
rxp1_1=(px*r21);
rxp1_2=(px*x16532);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16534;
IkReal gconst66=x16534;
IkReal gconst67=x16533;
IkReal gconst68=x16532;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16536=((-1.0)*r11);
IkReal x16537=((-1.0)*r10);
CheckValue<IkReal> x16539 = IKatan2WithCheck(IkReal(r10),IkReal(x16536),IKFAST_ATAN2_MAGTHRESH);
if(!x16539.valid){
continue;
}
IkReal x16538=((-1.0)*(x16539.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x16537);
rxp1_1=(px*r21);
rxp1_2=(px*x16536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x16538;
IkReal gconst66=x16538;
IkReal gconst67=x16537;
IkReal gconst68=x16536;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16540=(cj1*cj2);
IkReal x16541=((1.0)*sj1*sj2);
CheckValue<IkReal> x16542=IKPowWithIntegerCheck(cj3,-1);
if(!x16542.valid){
continue;
}
CheckValue<IkReal> x16543=IKPowWithIntegerCheck(r02,-1);
if(!x16543.valid){
continue;
}
CheckValue<IkReal> x16544=IKPowWithIntegerCheck((((gconst67*r21*sj3))+(((-1.0)*gconst68*r20*sj3))),-1);
if(!x16544.valid){
continue;
}
if( IKabs(((x16542.value)*(x16543.value)*(((((-1.0)*cj0*x16541))+((cj0*x16540)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16544.value)*(((((-1.0)*x16541))+((cj3*gconst67*r20))+x16540+((cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16542.value)*(x16543.value)*(((((-1.0)*cj0*x16541))+((cj0*x16540))))))+IKsqr(((x16544.value)*(((((-1.0)*x16541))+((cj3*gconst67*r20))+x16540+((cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16542.value)*(x16543.value)*(((((-1.0)*cj0*x16541))+((cj0*x16540))))), ((x16544.value)*(((((-1.0)*x16541))+((cj3*gconst67*r20))+x16540+((cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16545=IKsin(j4);
IkReal x16546=IKcos(j4);
IkReal x16547=(gconst67*r21);
IkReal x16548=(cj1*cj2);
IkReal x16549=(gconst68*sj3);
IkReal x16550=(sj1*sj2);
IkReal x16551=(gconst67*r11);
IkReal x16552=(gconst67*r10);
IkReal x16553=((1.0)*r20);
IkReal x16554=((1.0)*cj3);
IkReal x16555=((1.0)*sj0);
IkReal x16556=(gconst68*r10);
IkReal x16557=((1.0)*x16545);
IkReal x16558=(sj3*x16546);
IkReal x16559=(cj3*x16546);
IkReal x16560=((1.0)*cj2*sj1);
IkReal x16561=((1.0)*cj1*sj2);
IkReal x16562=((1.0)*x16546);
evalcond[0]=((((-1.0)*r02*x16562))+(((-1.0)*x16555)));
evalcond[1]=((((-1.0)*x16547*x16557))+((gconst68*r20*x16545)));
evalcond[2]=(cj0+((x16545*x16556))+(((-1.0)*x16551*x16557)));
evalcond[3]=((((-1.0)*cj0*x16550))+(((-1.0)*r02*x16545*x16554))+((cj0*x16548)));
evalcond[4]=((((-1.0)*cj0*x16560))+(((-1.0)*cj0*x16561))+(((-1.0)*r02*sj3*x16557)));
evalcond[5]=(((r21*x16549))+((x16547*x16559))+(((-1.0)*gconst68*x16553*x16559))+((gconst67*r20*sj3))+(((-1.0)*x16560))+(((-1.0)*x16561)));
evalcond[6]=((((-1.0)*cj3*gconst67*x16553))+(((-1.0)*gconst68*r21*x16554))+x16550+(((-1.0)*x16548))+((x16547*x16558))+(((-1.0)*x16546*x16549*x16553)));
evalcond[7]=(((sj0*x16548))+(((-1.0)*x16550*x16555))+((r11*x16549))+(((-1.0)*x16546*x16554*x16556))+((sj3*x16552))+((x16551*x16559)));
evalcond[8]=((((-1.0)*x16552*x16554))+(((-1.0)*gconst68*r11*x16554))+(((-1.0)*r10*x16549*x16562))+(((-1.0)*cj2*sj1*x16555))+(((-1.0)*cj1*sj2*x16555))+((x16551*x16558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16565=IKPowWithIntegerCheck(r02,-1);
if(!x16565.valid){
continue;
}
IkReal x16563=x16565.value;
IkReal x16564=((1.0)*cj0);
CheckValue<IkReal> x16566=IKPowWithIntegerCheck(sj3,-1);
if(!x16566.valid){
continue;
}
if( IKabs((x16563*(x16566.value)*(((((-1.0)*cj2*sj1*x16564))+(((-1.0)*cj1*sj2*x16564)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16563)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16563*(x16566.value)*(((((-1.0)*cj2*sj1*x16564))+(((-1.0)*cj1*sj2*x16564))))))+IKsqr(((-1.0)*sj0*x16563))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16563*(x16566.value)*(((((-1.0)*cj2*sj1*x16564))+(((-1.0)*cj1*sj2*x16564))))), ((-1.0)*sj0*x16563));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16567=IKsin(j4);
IkReal x16568=IKcos(j4);
IkReal x16569=(gconst67*r21);
IkReal x16570=(cj1*cj2);
IkReal x16571=(gconst68*sj3);
IkReal x16572=(sj1*sj2);
IkReal x16573=(gconst67*r11);
IkReal x16574=(gconst67*r10);
IkReal x16575=((1.0)*r20);
IkReal x16576=((1.0)*cj3);
IkReal x16577=((1.0)*sj0);
IkReal x16578=(gconst68*r10);
IkReal x16579=((1.0)*x16567);
IkReal x16580=(sj3*x16568);
IkReal x16581=(cj3*x16568);
IkReal x16582=((1.0)*cj2*sj1);
IkReal x16583=((1.0)*cj1*sj2);
IkReal x16584=((1.0)*x16568);
evalcond[0]=((((-1.0)*r02*x16584))+(((-1.0)*x16577)));
evalcond[1]=(((gconst68*r20*x16567))+(((-1.0)*x16569*x16579)));
evalcond[2]=(cj0+(((-1.0)*x16573*x16579))+((x16567*x16578)));
evalcond[3]=(((cj0*x16570))+(((-1.0)*cj0*x16572))+(((-1.0)*r02*x16567*x16576)));
evalcond[4]=((((-1.0)*r02*sj3*x16579))+(((-1.0)*cj0*x16583))+(((-1.0)*cj0*x16582)));
evalcond[5]=(((x16569*x16581))+(((-1.0)*x16582))+(((-1.0)*x16583))+((gconst67*r20*sj3))+((r21*x16571))+(((-1.0)*gconst68*x16575*x16581)));
evalcond[6]=(((x16569*x16580))+x16572+(((-1.0)*gconst68*r21*x16576))+(((-1.0)*cj3*gconst67*x16575))+(((-1.0)*x16570))+(((-1.0)*x16568*x16571*x16575)));
evalcond[7]=(((r11*x16571))+(((-1.0)*x16568*x16576*x16578))+((sj0*x16570))+(((-1.0)*x16572*x16577))+((x16573*x16581))+((sj3*x16574)));
evalcond[8]=((((-1.0)*r10*x16571*x16584))+(((-1.0)*cj2*sj1*x16577))+(((-1.0)*cj1*sj2*x16577))+(((-1.0)*x16574*x16576))+((x16573*x16580))+(((-1.0)*gconst68*r11*x16576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16586=IKPowWithIntegerCheck(r02,-1);
if(!x16586.valid){
continue;
}
IkReal x16585=x16586.value;
CheckValue<IkReal> x16587=IKPowWithIntegerCheck(cj3,-1);
if(!x16587.valid){
continue;
}
if( IKabs((x16585*(x16587.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16585)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16585*(x16587.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x16585))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16585*(x16587.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x16585));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16588=IKsin(j4);
IkReal x16589=IKcos(j4);
IkReal x16590=(gconst67*r21);
IkReal x16591=(cj1*cj2);
IkReal x16592=(gconst68*sj3);
IkReal x16593=(sj1*sj2);
IkReal x16594=(gconst67*r11);
IkReal x16595=(gconst67*r10);
IkReal x16596=((1.0)*r20);
IkReal x16597=((1.0)*cj3);
IkReal x16598=((1.0)*sj0);
IkReal x16599=(gconst68*r10);
IkReal x16600=((1.0)*x16588);
IkReal x16601=(sj3*x16589);
IkReal x16602=(cj3*x16589);
IkReal x16603=((1.0)*cj2*sj1);
IkReal x16604=((1.0)*cj1*sj2);
IkReal x16605=((1.0)*x16589);
evalcond[0]=((((-1.0)*r02*x16605))+(((-1.0)*x16598)));
evalcond[1]=(((gconst68*r20*x16588))+(((-1.0)*x16590*x16600)));
evalcond[2]=(((x16588*x16599))+(((-1.0)*x16594*x16600))+cj0);
evalcond[3]=((((-1.0)*cj0*x16593))+((cj0*x16591))+(((-1.0)*r02*x16588*x16597)));
evalcond[4]=((((-1.0)*r02*sj3*x16600))+(((-1.0)*cj0*x16603))+(((-1.0)*cj0*x16604)));
evalcond[5]=(((r21*x16592))+((gconst67*r20*sj3))+((x16590*x16602))+(((-1.0)*gconst68*x16596*x16602))+(((-1.0)*x16604))+(((-1.0)*x16603)));
evalcond[6]=(x16593+(((-1.0)*gconst68*r21*x16597))+(((-1.0)*x16589*x16592*x16596))+(((-1.0)*x16591))+((x16590*x16601))+(((-1.0)*cj3*gconst67*x16596)));
evalcond[7]=((((-1.0)*x16593*x16598))+(((-1.0)*x16589*x16597*x16599))+((sj0*x16591))+((x16594*x16602))+((sj3*x16595))+((r11*x16592)));
evalcond[8]=((((-1.0)*cj1*sj2*x16598))+(((-1.0)*r10*x16592*x16605))+((x16594*x16601))+(((-1.0)*cj2*sj1*x16598))+(((-1.0)*x16595*x16597))+(((-1.0)*gconst68*r11*x16597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x16606 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x16606.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x16606.value))));
IkReal gconst70=((1.0)*r10);
IkReal gconst71=((1.0)*r11);
CheckValue<IkReal> x16607 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x16607.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5+(x16607.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x16608=((-1.0)*px);
CheckValue<IkReal> x16610 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x16610.valid){
continue;
}
IkReal x16609=((1.0)*(x16610.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16608);
rxp1_1=(px*r21);
rxp1_2=(r11*x16608);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16609)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16609)));
IkReal gconst70=((1.0)*r10);
IkReal gconst71=((1.0)*r11);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16611=((-1.0)*px);
CheckValue<IkReal> x16613 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x16613.valid){
continue;
}
IkReal x16612=((1.0)*(x16613.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16611);
rxp1_1=(px*r21);
rxp1_2=(r11*x16611);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16612)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16612)));
IkReal gconst70=((1.0)*r10);
IkReal gconst71=((1.0)*r11);
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x16614=((-1.0)*px);
CheckValue<IkReal> x16616 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x16616.valid){
continue;
}
IkReal x16615=((1.0)*(x16616.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x16614);
rxp1_1=(px*r21);
rxp1_2=(r11*x16614);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x16615)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x16615)));
IkReal gconst70=((1.0)*r10);
IkReal gconst71=((1.0)*r11);
IkReal x16617=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x16617))+(((-1.0)*r11*r20*x16617)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16618=(cj1*cj2);
IkReal x16619=((1.0)*sj1*sj2);
CheckValue<IkReal> x16620=IKPowWithIntegerCheck(cj3,-1);
if(!x16620.valid){
continue;
}
CheckValue<IkReal> x16621=IKPowWithIntegerCheck(r02,-1);
if(!x16621.valid){
continue;
}
CheckValue<IkReal> x16622=IKPowWithIntegerCheck(((((-1.0)*gconst71*r20*sj3))+((gconst70*r21*sj3))),-1);
if(!x16622.valid){
continue;
}
if( IKabs(((x16620.value)*(x16621.value)*((((cj0*x16618))+(((-1.0)*cj0*x16619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16622.value)*((x16618+((cj3*gconst70*r20))+(((-1.0)*x16619))+((cj3*gconst71*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16620.value)*(x16621.value)*((((cj0*x16618))+(((-1.0)*cj0*x16619))))))+IKsqr(((x16622.value)*((x16618+((cj3*gconst70*r20))+(((-1.0)*x16619))+((cj3*gconst71*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x16620.value)*(x16621.value)*((((cj0*x16618))+(((-1.0)*cj0*x16619))))), ((x16622.value)*((x16618+((cj3*gconst70*r20))+(((-1.0)*x16619))+((cj3*gconst71*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16623=IKsin(j4);
IkReal x16624=IKcos(j4);
IkReal x16625=((1.0)*cj1);
IkReal x16626=(cj3*r21);
IkReal x16627=((1.0)*gconst71);
IkReal x16628=(cj2*sj0);
IkReal x16629=(sj1*sj2);
IkReal x16630=(gconst71*sj3);
IkReal x16631=((1.0)*sj1);
IkReal x16632=(gconst70*sj3);
IkReal x16633=(cj0*cj2);
IkReal x16634=((1.0)*sj0);
IkReal x16635=((1.0)*r02);
IkReal x16636=(cj3*r11);
IkReal x16637=(cj3*r20);
IkReal x16638=((1.0)*gconst70);
IkReal x16639=(gconst70*x16624);
IkReal x16640=(r10*x16624);
IkReal x16641=(gconst71*x16623);
IkReal x16642=(x16623*x16638);
evalcond[0]=((((-1.0)*x16634))+(((-1.0)*x16624*x16635)));
evalcond[1]=((((-1.0)*r21*x16642))+((r20*x16641)));
evalcond[2]=(cj0+(((-1.0)*r11*x16642))+((r10*x16641)));
evalcond[3]=((((-1.0)*cj0*x16629))+(((-1.0)*cj3*x16623*x16635))+((cj1*x16633)));
evalcond[4]=((((-1.0)*cj0*sj2*x16625))+(((-1.0)*sj3*x16623*x16635))+(((-1.0)*x16631*x16633)));
evalcond[5]=(((r20*x16632))+(((-1.0)*cj2*x16631))+(((-1.0)*x16624*x16627*x16637))+((r21*x16630))+((x16626*x16639))+(((-1.0)*sj2*x16625)));
evalcond[6]=(x16629+(((-1.0)*cj2*x16625))+(((-1.0)*r20*sj3*x16624*x16627))+(((-1.0)*x16626*x16627))+((r21*x16624*x16632))+(((-1.0)*x16637*x16638)));
evalcond[7]=((((-1.0)*x16629*x16634))+((r11*x16630))+((x16636*x16639))+(((-1.0)*cj3*x16627*x16640))+((r10*x16632))+((cj1*x16628)));
evalcond[8]=((((-1.0)*cj3*r10*x16638))+(((-1.0)*x16628*x16631))+(((-1.0)*sj3*x16627*x16640))+((r11*x16624*x16632))+(((-1.0)*sj0*sj2*x16625))+(((-1.0)*x16627*x16636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16645=IKPowWithIntegerCheck(r02,-1);
if(!x16645.valid){
continue;
}
IkReal x16643=x16645.value;
IkReal x16644=((1.0)*cj0);
CheckValue<IkReal> x16646=IKPowWithIntegerCheck(sj3,-1);
if(!x16646.valid){
continue;
}
if( IKabs((x16643*(x16646.value)*(((((-1.0)*cj2*sj1*x16644))+(((-1.0)*cj1*sj2*x16644)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16643)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16643*(x16646.value)*(((((-1.0)*cj2*sj1*x16644))+(((-1.0)*cj1*sj2*x16644))))))+IKsqr(((-1.0)*sj0*x16643))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16643*(x16646.value)*(((((-1.0)*cj2*sj1*x16644))+(((-1.0)*cj1*sj2*x16644))))), ((-1.0)*sj0*x16643));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16647=IKsin(j4);
IkReal x16648=IKcos(j4);
IkReal x16649=((1.0)*cj1);
IkReal x16650=(cj3*r21);
IkReal x16651=((1.0)*gconst71);
IkReal x16652=(cj2*sj0);
IkReal x16653=(sj1*sj2);
IkReal x16654=(gconst71*sj3);
IkReal x16655=((1.0)*sj1);
IkReal x16656=(gconst70*sj3);
IkReal x16657=(cj0*cj2);
IkReal x16658=((1.0)*sj0);
IkReal x16659=((1.0)*r02);
IkReal x16660=(cj3*r11);
IkReal x16661=(cj3*r20);
IkReal x16662=((1.0)*gconst70);
IkReal x16663=(gconst70*x16648);
IkReal x16664=(r10*x16648);
IkReal x16665=(gconst71*x16647);
IkReal x16666=(x16647*x16662);
evalcond[0]=((((-1.0)*x16648*x16659))+(((-1.0)*x16658)));
evalcond[1]=(((r20*x16665))+(((-1.0)*r21*x16666)));
evalcond[2]=(cj0+(((-1.0)*r11*x16666))+((r10*x16665)));
evalcond[3]=((((-1.0)*cj0*x16653))+((cj1*x16657))+(((-1.0)*cj3*x16647*x16659)));
evalcond[4]=((((-1.0)*sj3*x16647*x16659))+(((-1.0)*cj0*sj2*x16649))+(((-1.0)*x16655*x16657)));
evalcond[5]=((((-1.0)*x16648*x16651*x16661))+(((-1.0)*sj2*x16649))+((r20*x16656))+(((-1.0)*cj2*x16655))+((r21*x16654))+((x16650*x16663)));
evalcond[6]=(((r21*x16648*x16656))+x16653+(((-1.0)*r20*sj3*x16648*x16651))+(((-1.0)*x16650*x16651))+(((-1.0)*x16661*x16662))+(((-1.0)*cj2*x16649)));
evalcond[7]=((((-1.0)*cj3*x16651*x16664))+((r11*x16654))+(((-1.0)*x16653*x16658))+((cj1*x16652))+((r10*x16656))+((x16660*x16663)));
evalcond[8]=((((-1.0)*cj3*r10*x16662))+(((-1.0)*x16652*x16655))+(((-1.0)*sj3*x16651*x16664))+(((-1.0)*x16651*x16660))+((r11*x16648*x16656))+(((-1.0)*sj0*sj2*x16649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16668=IKPowWithIntegerCheck(r02,-1);
if(!x16668.valid){
continue;
}
IkReal x16667=x16668.value;
CheckValue<IkReal> x16669=IKPowWithIntegerCheck(cj3,-1);
if(!x16669.valid){
continue;
}
if( IKabs((x16667*(x16669.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16667)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16667*(x16669.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x16667))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16667*(x16669.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x16667));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16670=IKsin(j4);
IkReal x16671=IKcos(j4);
IkReal x16672=((1.0)*cj1);
IkReal x16673=(cj3*r21);
IkReal x16674=((1.0)*gconst71);
IkReal x16675=(cj2*sj0);
IkReal x16676=(sj1*sj2);
IkReal x16677=(gconst71*sj3);
IkReal x16678=((1.0)*sj1);
IkReal x16679=(gconst70*sj3);
IkReal x16680=(cj0*cj2);
IkReal x16681=((1.0)*sj0);
IkReal x16682=((1.0)*r02);
IkReal x16683=(cj3*r11);
IkReal x16684=(cj3*r20);
IkReal x16685=((1.0)*gconst70);
IkReal x16686=(gconst70*x16671);
IkReal x16687=(r10*x16671);
IkReal x16688=(gconst71*x16670);
IkReal x16689=(x16670*x16685);
evalcond[0]=((((-1.0)*x16671*x16682))+(((-1.0)*x16681)));
evalcond[1]=((((-1.0)*r21*x16689))+((r20*x16688)));
evalcond[2]=((((-1.0)*r11*x16689))+cj0+((r10*x16688)));
evalcond[3]=((((-1.0)*cj3*x16670*x16682))+(((-1.0)*cj0*x16676))+((cj1*x16680)));
evalcond[4]=((((-1.0)*sj3*x16670*x16682))+(((-1.0)*cj0*sj2*x16672))+(((-1.0)*x16678*x16680)));
evalcond[5]=((((-1.0)*cj2*x16678))+(((-1.0)*sj2*x16672))+((x16673*x16686))+((r21*x16677))+(((-1.0)*x16671*x16674*x16684))+((r20*x16679)));
evalcond[6]=(x16676+(((-1.0)*r20*sj3*x16671*x16674))+(((-1.0)*cj2*x16672))+(((-1.0)*x16673*x16674))+((r21*x16671*x16679))+(((-1.0)*x16684*x16685)));
evalcond[7]=((((-1.0)*x16676*x16681))+((r11*x16677))+(((-1.0)*cj3*x16674*x16687))+((cj1*x16675))+((r10*x16679))+((x16683*x16686)));
evalcond[8]=((((-1.0)*sj3*x16674*x16687))+(((-1.0)*x16674*x16683))+(((-1.0)*sj0*sj2*x16672))+(((-1.0)*x16675*x16678))+(((-1.0)*cj3*r10*x16685))+((r11*x16671*x16679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16691=IKPowWithIntegerCheck(r02,-1);
if(!x16691.valid){
continue;
}
IkReal x16690=x16691.value;
CheckValue<IkReal> x16692=IKPowWithIntegerCheck(cj3,-1);
if(!x16692.valid){
continue;
}
if( IKabs((x16690*(x16692.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x16690)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16690*(x16692.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x16690))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x16690*(x16692.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x16690));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16693=IKsin(j4);
IkReal x16694=IKcos(j4);
IkReal x16695=((1.0)*r11);
IkReal x16696=(cj1*cj2);
IkReal x16697=(cj3*cj5);
IkReal x16698=(sj1*sj2);
IkReal x16699=(cj3*sj5);
IkReal x16700=((1.0)*r10);
IkReal x16701=((1.0)*r20);
IkReal x16702=((1.0)*r21);
IkReal x16703=(sj3*sj5);
IkReal x16704=((1.0)*sj0);
IkReal x16705=((1.0)*r02);
IkReal x16706=(cj5*sj3);
IkReal x16707=(sj5*x16693);
IkReal x16708=(r11*x16694);
IkReal x16709=(r21*x16694);
IkReal x16710=((1.0)*cj2*sj1);
IkReal x16711=((1.0)*cj1*sj2);
IkReal x16712=(cj5*x16693);
IkReal x16713=(x16694*x16706);
evalcond[0]=((((-1.0)*x16694*x16705))+(((-1.0)*x16704)));
evalcond[1]=((((-1.0)*x16702*x16707))+((r20*x16712)));
evalcond[2]=(cj0+((r10*x16712))+(((-1.0)*x16695*x16707)));
evalcond[3]=(((cj0*x16696))+(((-1.0)*cj3*x16693*x16705))+(((-1.0)*cj0*x16698)));
evalcond[4]=((((-1.0)*sj3*x16693*x16705))+(((-1.0)*cj0*x16710))+(((-1.0)*cj0*x16711)));
evalcond[5]=((((-1.0)*x16694*x16697*x16701))+((r20*x16703))+((x16699*x16709))+(((-1.0)*x16711))+(((-1.0)*x16710))+((r21*x16706)));
evalcond[6]=((((-1.0)*x16701*x16713))+(((-1.0)*x16697*x16702))+x16698+(((-1.0)*x16699*x16701))+((x16703*x16709))+(((-1.0)*x16696)));
evalcond[7]=((((-1.0)*x16694*x16697*x16700))+(((-1.0)*x16698*x16704))+((x16699*x16708))+((r11*x16706))+((r10*x16703))+((sj0*x16696)));
evalcond[8]=((((-1.0)*x16695*x16697))+(((-1.0)*x16699*x16700))+(((-1.0)*cj2*sj1*x16704))+((x16703*x16708))+(((-1.0)*x16700*x16713))+(((-1.0)*cj1*sj2*x16704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16714=((1.0)*sj3);
CheckValue<IkReal> x16715=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x16715.valid){
continue;
}
CheckValue<IkReal> x16716=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*cj5*r20))),-1);
if(!x16716.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x16715.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16716.value)*(((((-1.0)*r20*sj5*x16714))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r21*x16714)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x16715.value)))+IKsqr(((x16716.value)*(((((-1.0)*r20*sj5*x16714))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r21*x16714))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x16715.value)), ((x16716.value)*(((((-1.0)*r20*sj5*x16714))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*cj5*r21*x16714))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16717=IKsin(j4);
IkReal x16718=IKcos(j4);
IkReal x16719=((1.0)*r11);
IkReal x16720=(cj1*cj2);
IkReal x16721=(cj3*cj5);
IkReal x16722=(sj1*sj2);
IkReal x16723=(cj3*sj5);
IkReal x16724=((1.0)*r10);
IkReal x16725=((1.0)*r20);
IkReal x16726=((1.0)*r21);
IkReal x16727=(sj3*sj5);
IkReal x16728=((1.0)*sj0);
IkReal x16729=((1.0)*r02);
IkReal x16730=(cj5*sj3);
IkReal x16731=(sj5*x16717);
IkReal x16732=(r11*x16718);
IkReal x16733=(r21*x16718);
IkReal x16734=((1.0)*cj2*sj1);
IkReal x16735=((1.0)*cj1*sj2);
IkReal x16736=(cj5*x16717);
IkReal x16737=(x16718*x16730);
evalcond[0]=((((-1.0)*x16728))+(((-1.0)*x16718*x16729)));
evalcond[1]=(((r20*x16736))+(((-1.0)*x16726*x16731)));
evalcond[2]=(cj0+((r10*x16736))+(((-1.0)*x16719*x16731)));
evalcond[3]=(((cj0*x16720))+(((-1.0)*cj3*x16717*x16729))+(((-1.0)*cj0*x16722)));
evalcond[4]=((((-1.0)*sj3*x16717*x16729))+(((-1.0)*cj0*x16734))+(((-1.0)*cj0*x16735)));
evalcond[5]=((((-1.0)*x16718*x16721*x16725))+(((-1.0)*x16735))+(((-1.0)*x16734))+((x16723*x16733))+((r20*x16727))+((r21*x16730)));
evalcond[6]=(x16722+(((-1.0)*x16723*x16725))+(((-1.0)*x16725*x16737))+(((-1.0)*x16720))+(((-1.0)*x16721*x16726))+((x16727*x16733)));
evalcond[7]=((((-1.0)*x16718*x16721*x16724))+(((-1.0)*x16722*x16728))+((sj0*x16720))+((x16723*x16732))+((r11*x16730))+((r10*x16727)));
evalcond[8]=((((-1.0)*cj2*sj1*x16728))+(((-1.0)*cj1*sj2*x16728))+(((-1.0)*x16723*x16724))+(((-1.0)*x16724*x16737))+(((-1.0)*x16719*x16721))+((x16727*x16732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16738=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x16738.valid){
continue;
}
CheckValue<IkReal> x16739=IKPowWithIntegerCheck(r02,-1);
if(!x16739.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x16738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x16739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x16738.value)))+IKsqr(((-1.0)*sj0*(x16739.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x16738.value)), ((-1.0)*sj0*(x16739.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16740=IKsin(j4);
IkReal x16741=IKcos(j4);
IkReal x16742=((1.0)*r11);
IkReal x16743=(cj1*cj2);
IkReal x16744=(cj3*cj5);
IkReal x16745=(sj1*sj2);
IkReal x16746=(cj3*sj5);
IkReal x16747=((1.0)*r10);
IkReal x16748=((1.0)*r20);
IkReal x16749=((1.0)*r21);
IkReal x16750=(sj3*sj5);
IkReal x16751=((1.0)*sj0);
IkReal x16752=((1.0)*r02);
IkReal x16753=(cj5*sj3);
IkReal x16754=(sj5*x16740);
IkReal x16755=(r11*x16741);
IkReal x16756=(r21*x16741);
IkReal x16757=((1.0)*cj2*sj1);
IkReal x16758=((1.0)*cj1*sj2);
IkReal x16759=(cj5*x16740);
IkReal x16760=(x16741*x16753);
evalcond[0]=((((-1.0)*x16741*x16752))+(((-1.0)*x16751)));
evalcond[1]=((((-1.0)*x16749*x16754))+((r20*x16759)));
evalcond[2]=(cj0+((r10*x16759))+(((-1.0)*x16742*x16754)));
evalcond[3]=((((-1.0)*cj3*x16740*x16752))+(((-1.0)*cj0*x16745))+((cj0*x16743)));
evalcond[4]=((((-1.0)*cj0*x16758))+(((-1.0)*cj0*x16757))+(((-1.0)*sj3*x16740*x16752)));
evalcond[5]=((((-1.0)*x16741*x16744*x16748))+((r21*x16753))+(((-1.0)*x16758))+(((-1.0)*x16757))+((x16746*x16756))+((r20*x16750)));
evalcond[6]=(x16745+(((-1.0)*x16748*x16760))+(((-1.0)*x16743))+(((-1.0)*x16744*x16749))+(((-1.0)*x16746*x16748))+((x16750*x16756)));
evalcond[7]=((((-1.0)*x16741*x16744*x16747))+((r10*x16750))+((x16746*x16755))+(((-1.0)*x16745*x16751))+((sj0*x16743))+((r11*x16753)));
evalcond[8]=((((-1.0)*x16747*x16760))+(((-1.0)*cj1*sj2*x16751))+(((-1.0)*cj2*sj1*x16751))+(((-1.0)*x16742*x16744))+(((-1.0)*x16746*x16747))+((x16750*x16755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16761=((1.0)*sj0);
IkReal x16762=((1.0)*cj0);
CheckValue<IkReal> x16763=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x16763.valid){
continue;
}
CheckValue<IkReal> x16764 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x16762))+(((-1.0)*r12*x16761)))),IkReal((((r11*sj0*sj5))+((cj0*r01*sj5))+(((-1.0)*cj5*r00*x16762))+(((-1.0)*cj5*r10*x16761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16763.value)))+(x16764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16765=IKsin(j4);
IkReal x16766=IKcos(j4);
IkReal x16767=(r11*sj5);
IkReal x16768=(cj1*cj2);
IkReal x16769=(cj5*sj3);
IkReal x16770=(sj1*sj2);
IkReal x16771=(r21*sj5);
IkReal x16772=((1.0)*sj0);
IkReal x16773=(cj2*sj1);
IkReal x16774=(r01*sj5);
IkReal x16775=(sj3*sj5);
IkReal x16776=(cj3*cj5);
IkReal x16777=((1.0)*cj0);
IkReal x16778=((1.0)*x16766);
IkReal x16779=((1.0)*x16765);
IkReal x16780=(cj3*x16766);
IkReal x16781=((1.0)*x16776);
IkReal x16782=((1.0)*cj3*sj5);
IkReal x16783=((1.0)*cj1*sj2);
IkReal x16784=(cj5*x16765);
IkReal x16785=(sj3*x16766);
evalcond[0]=((((-1.0)*x16771*x16779))+((r20*x16784))+(((-1.0)*r22*x16778)));
evalcond[1]=(((r10*x16784))+cj0+(((-1.0)*r12*x16778))+(((-1.0)*x16767*x16779)));
evalcond[2]=((((-1.0)*x16772))+(((-1.0)*r02*x16778))+((r00*x16784))+(((-1.0)*x16774*x16779)));
evalcond[3]=(((r21*x16769))+(((-1.0)*cj3*r22*x16779))+((r20*x16775))+(((-1.0)*r20*x16776*x16778))+(((-1.0)*x16773))+(((-1.0)*x16783))+((x16771*x16780)));
evalcond[4]=(x16770+(((-1.0)*r20*x16769*x16778))+(((-1.0)*r22*sj3*x16779))+(((-1.0)*x16768))+(((-1.0)*r20*x16782))+(((-1.0)*r21*x16781))+((x16771*x16785)));
evalcond[5]=(((r01*x16769))+(((-1.0)*x16770*x16777))+((x16774*x16780))+((r00*x16775))+(((-1.0)*r00*x16776*x16778))+((cj0*x16768))+(((-1.0)*cj3*r02*x16779)));
evalcond[6]=((((-1.0)*r10*x16776*x16778))+(((-1.0)*x16770*x16772))+((x16767*x16780))+((r10*x16775))+(((-1.0)*cj3*r12*x16779))+((r11*x16769))+((sj0*x16768)));
evalcond[7]=(((x16774*x16785))+(((-1.0)*r00*x16769*x16778))+(((-1.0)*x16773*x16777))+(((-1.0)*cj1*sj2*x16777))+(((-1.0)*r00*x16782))+(((-1.0)*r01*x16781))+(((-1.0)*r02*sj3*x16779)));
evalcond[8]=((((-1.0)*r11*x16781))+(((-1.0)*r10*x16782))+(((-1.0)*r12*sj3*x16779))+((x16767*x16785))+(((-1.0)*x16772*x16773))+(((-1.0)*r10*x16769*x16778))+(((-1.0)*cj1*sj2*x16772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16786 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((cj5*r20*sj0))+(((-1.0)*r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16786.valid){
continue;
}
CheckValue<IkReal> x16787=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x16787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16786.value)+(((1.5707963267949)*(x16787.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16788=IKsin(j4);
IkReal x16789=IKcos(j4);
IkReal x16790=(r11*sj5);
IkReal x16791=(cj1*cj2);
IkReal x16792=(cj5*sj3);
IkReal x16793=(sj1*sj2);
IkReal x16794=(r21*sj5);
IkReal x16795=((1.0)*sj0);
IkReal x16796=(cj2*sj1);
IkReal x16797=(r01*sj5);
IkReal x16798=(sj3*sj5);
IkReal x16799=(cj3*cj5);
IkReal x16800=((1.0)*cj0);
IkReal x16801=((1.0)*x16789);
IkReal x16802=((1.0)*x16788);
IkReal x16803=(cj3*x16789);
IkReal x16804=((1.0)*x16799);
IkReal x16805=((1.0)*cj3*sj5);
IkReal x16806=((1.0)*cj1*sj2);
IkReal x16807=(cj5*x16788);
IkReal x16808=(sj3*x16789);
evalcond[0]=((((-1.0)*x16794*x16802))+(((-1.0)*r22*x16801))+((r20*x16807)));
evalcond[1]=(cj0+(((-1.0)*x16790*x16802))+(((-1.0)*r12*x16801))+((r10*x16807)));
evalcond[2]=((((-1.0)*r02*x16801))+((r00*x16807))+(((-1.0)*x16795))+(((-1.0)*x16797*x16802)));
evalcond[3]=((((-1.0)*x16796))+((x16794*x16803))+(((-1.0)*x16806))+((r21*x16792))+(((-1.0)*cj3*r22*x16802))+((r20*x16798))+(((-1.0)*r20*x16799*x16801)));
evalcond[4]=((((-1.0)*x16791))+((x16794*x16808))+x16793+(((-1.0)*r21*x16804))+(((-1.0)*r20*x16805))+(((-1.0)*r20*x16792*x16801))+(((-1.0)*r22*sj3*x16802)));
evalcond[5]=(((r01*x16792))+(((-1.0)*r00*x16799*x16801))+((x16797*x16803))+((cj0*x16791))+(((-1.0)*x16793*x16800))+((r00*x16798))+(((-1.0)*cj3*r02*x16802)));
evalcond[6]=((((-1.0)*x16793*x16795))+(((-1.0)*cj3*r12*x16802))+((sj0*x16791))+((r11*x16792))+((r10*x16798))+((x16790*x16803))+(((-1.0)*r10*x16799*x16801)));
evalcond[7]=((((-1.0)*x16796*x16800))+(((-1.0)*r00*x16792*x16801))+((x16797*x16808))+(((-1.0)*r02*sj3*x16802))+(((-1.0)*cj1*sj2*x16800))+(((-1.0)*r01*x16804))+(((-1.0)*r00*x16805)));
evalcond[8]=((((-1.0)*r10*x16792*x16801))+(((-1.0)*r10*x16805))+(((-1.0)*r12*sj3*x16802))+(((-1.0)*cj1*sj2*x16795))+(((-1.0)*r11*x16804))+(((-1.0)*x16795*x16796))+((x16790*x16808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x16809 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r21*sj5))+((cj0*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16809.valid){
continue;
}
CheckValue<IkReal> x16810=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x16810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16809.value)+(((1.5707963267949)*(x16810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16811=IKsin(j4);
IkReal x16812=IKcos(j4);
IkReal x16813=(r11*sj5);
IkReal x16814=(cj1*cj2);
IkReal x16815=(cj5*sj3);
IkReal x16816=(sj1*sj2);
IkReal x16817=(r21*sj5);
IkReal x16818=((1.0)*sj0);
IkReal x16819=(cj2*sj1);
IkReal x16820=(r01*sj5);
IkReal x16821=(sj3*sj5);
IkReal x16822=(cj3*cj5);
IkReal x16823=((1.0)*cj0);
IkReal x16824=((1.0)*x16812);
IkReal x16825=((1.0)*x16811);
IkReal x16826=(cj3*x16812);
IkReal x16827=((1.0)*x16822);
IkReal x16828=((1.0)*cj3*sj5);
IkReal x16829=((1.0)*cj1*sj2);
IkReal x16830=(cj5*x16811);
IkReal x16831=(sj3*x16812);
evalcond[0]=((((-1.0)*x16817*x16825))+(((-1.0)*r22*x16824))+((r20*x16830)));
evalcond[1]=(((r10*x16830))+cj0+(((-1.0)*r12*x16824))+(((-1.0)*x16813*x16825)));
evalcond[2]=((((-1.0)*x16820*x16825))+(((-1.0)*r02*x16824))+((r00*x16830))+(((-1.0)*x16818)));
evalcond[3]=((((-1.0)*x16829))+((r21*x16815))+(((-1.0)*cj3*r22*x16825))+(((-1.0)*x16819))+((r20*x16821))+((x16817*x16826))+(((-1.0)*r20*x16822*x16824)));
evalcond[4]=(x16816+(((-1.0)*r20*x16815*x16824))+(((-1.0)*r21*x16827))+(((-1.0)*r20*x16828))+(((-1.0)*x16814))+(((-1.0)*r22*sj3*x16825))+((x16817*x16831)));
evalcond[5]=((((-1.0)*r00*x16822*x16824))+(((-1.0)*x16816*x16823))+((cj0*x16814))+((r00*x16821))+((x16820*x16826))+((r01*x16815))+(((-1.0)*cj3*r02*x16825)));
evalcond[6]=(((x16813*x16826))+((r10*x16821))+(((-1.0)*cj3*r12*x16825))+(((-1.0)*x16816*x16818))+((sj0*x16814))+((r11*x16815))+(((-1.0)*r10*x16822*x16824)));
evalcond[7]=((((-1.0)*x16819*x16823))+(((-1.0)*r01*x16827))+(((-1.0)*r00*x16828))+((x16820*x16831))+(((-1.0)*r02*sj3*x16825))+(((-1.0)*r00*x16815*x16824))+(((-1.0)*cj1*sj2*x16823)));
evalcond[8]=((((-1.0)*r10*x16815*x16824))+((x16813*x16831))+(((-1.0)*r11*x16827))+(((-1.0)*r12*sj3*x16825))+(((-1.0)*r10*x16828))+(((-1.0)*cj1*sj2*x16818))+(((-1.0)*x16818*x16819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16832=r21*r21;
IkReal x16833=cj5*cj5;
IkReal x16834=r20*r20;
IkReal x16835=(cj5*r21);
IkReal x16836=(r20*sj5);
IkReal x16837=((1.0)*sj5);
IkReal x16838=(sj1*sj2);
IkReal x16839=(cj3*cj5);
IkReal x16840=(cj1*cj2);
IkReal x16841=(cj5*r20);
IkReal x16842=((1.0)*cj3*r22);
IkReal x16843=(cj3*r20*r21);
IkReal x16844=(sj3*x16832);
CheckValue<IkReal> x16845=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+x16844+((sj3*x16833*x16834))+(((-1.0)*x16833*x16844))+(((-2.0)*sj3*x16835*x16836)))),-1);
if(!x16845.valid){
continue;
}
CheckValue<IkReal> x16846 = IKatan2WithCheck(IkReal((((r22*x16838))+(((-1.0)*x16836*x16842))+(((-1.0)*r22*x16840))+(((-1.0)*x16835*x16842)))),IkReal(((((-1.0)*r21*x16837*x16838))+x16843+((sj5*x16832*x16839))+(((-1.0)*x16834*x16837*x16839))+((r21*sj5*x16840))+((x16838*x16841))+(((-1.0)*x16840*x16841))+(((-2.0)*x16833*x16843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16846.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16845.value)))+(x16846.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16847=IKsin(j4);
IkReal x16848=IKcos(j4);
IkReal x16849=((1.0)*r22);
IkReal x16850=((1.0)*cj2);
IkReal x16851=(cj5*sj3);
IkReal x16852=((1.0)*r21);
IkReal x16853=(r20*sj5);
IkReal x16854=(cj3*cj5);
IkReal x16855=(r21*sj5*x16848);
IkReal x16856=((1.0)*r20*x16848);
evalcond[0]=((((-1.0)*sj5*x16847*x16852))+((cj5*r20*x16847))+(((-1.0)*x16848*x16849)));
evalcond[1]=(((r21*x16851))+(((-1.0)*cj1*sj2))+((cj3*x16855))+(((-1.0)*x16854*x16856))+(((-1.0)*sj1*x16850))+(((-1.0)*cj3*x16847*x16849))+((sj3*x16853)));
evalcond[2]=((((-1.0)*cj3*x16853))+(((-1.0)*cj1*x16850))+(((-1.0)*x16851*x16856))+((sj1*sj2))+(((-1.0)*x16852*x16854))+(((-1.0)*sj3*x16847*x16849))+((sj3*x16855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16857=(cj5*sj4);
IkReal x16858=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r00*x16857))+(((-1.0)*r01*x16858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x16858))+(((-1.0)*r10*x16857))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r00*x16857))+(((-1.0)*r01*x16858))))+IKsqr((((r11*x16858))+(((-1.0)*r10*x16857))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r00*x16857))+(((-1.0)*r01*x16858))), (((r11*x16858))+(((-1.0)*r10*x16857))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16859=IKcos(j0);
IkReal x16860=IKsin(j0);
IkReal x16861=((1.0)*cj3);
IkReal x16862=(r02*sj4);
IkReal x16863=(cj4*cj5);
IkReal x16864=((1.0)*sj3);
IkReal x16865=((1.0)*sj2);
IkReal x16866=(r12*sj4);
IkReal x16867=(r01*sj5);
IkReal x16868=((1.0)*sj4);
IkReal x16869=(cj5*r01);
IkReal x16870=(cj4*sj3);
IkReal x16871=(cj5*sj4);
IkReal x16872=(cj5*r11);
IkReal x16873=(r00*sj5);
IkReal x16874=((1.0)*cj2);
IkReal x16875=((0.3922)*cj2);
IkReal x16876=(r11*sj5);
IkReal x16877=(r10*sj5);
IkReal x16878=((0.3922)*sj2);
IkReal x16879=((1.0)*cj4);
IkReal x16880=(cj3*cj4*sj5);
IkReal x16881=(cj1*x16859);
IkReal x16882=(cj1*x16860);
IkReal x16883=(sj1*x16859);
IkReal x16884=(sj1*x16860);
evalcond[0]=(x16859+(((-1.0)*x16868*x16876))+((r10*x16871))+(((-1.0)*r12*x16879)));
evalcond[1]=((((-1.0)*x16860))+(((-1.0)*x16867*x16868))+(((-1.0)*r02*x16879))+((r00*x16871)));
evalcond[2]=((((-0.1091)*x16860))+((x16875*x16881))+(((-1.0)*px))+(((0.0946)*x16873))+(((0.0946)*x16869))+(((0.425)*x16881))+(((-1.0)*x16878*x16883)));
evalcond[3]=(((x16875*x16882))+(((-1.0)*py))+(((0.0946)*x16877))+(((0.0946)*x16872))+(((0.425)*x16882))+(((0.1091)*x16859))+(((-1.0)*x16878*x16884)));
evalcond[4]=((((-1.0)*r00*x16861*x16863))+(((-1.0)*x16861*x16862))+(((-1.0)*x16865*x16883))+((sj3*x16873))+((cj3*cj4*x16867))+((sj3*x16869))+((cj2*x16881)));
evalcond[5]=((((-1.0)*x16861*x16866))+(((-1.0)*x16865*x16884))+(((-1.0)*r10*x16861*x16863))+((sj3*x16872))+((sj3*x16877))+((cj2*x16882))+((cj3*cj4*x16876)));
evalcond[6]=((((-1.0)*x16861*x16869))+(((-1.0)*x16874*x16883))+(((-1.0)*x16865*x16881))+(((-1.0)*r00*x16863*x16864))+(((-1.0)*x16862*x16864))+((x16867*x16870))+(((-1.0)*x16861*x16873)));
evalcond[7]=(((x16870*x16876))+(((-1.0)*x16874*x16884))+(((-1.0)*x16865*x16882))+(((-1.0)*x16864*x16866))+(((-1.0)*r10*x16863*x16864))+(((-1.0)*x16861*x16877))+(((-1.0)*x16861*x16872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16885=r21*r21;
IkReal x16886=cj5*cj5;
IkReal x16887=r20*r20;
IkReal x16888=(cj2*sj1);
IkReal x16889=(cj1*sj2);
IkReal x16890=((1.0)*r22);
IkReal x16891=(r20*r21);
IkReal x16892=((1.0)*sj3);
IkReal x16893=(cj5*sj5);
IkReal x16894=(r22*sj3);
IkReal x16895=(r21*sj5);
IkReal x16896=((1.0)*cj5*r20);
IkReal x16897=(cj3*x16886);
CheckValue<IkReal> x16898=IKPowWithIntegerCheck(IKsign((((x16887*x16897))+((cj3*(r22*r22)))+((cj3*x16885))+(((-1.0)*x16885*x16897))+(((-2.0)*cj3*x16891*x16893)))),-1);
if(!x16898.valid){
continue;
}
CheckValue<IkReal> x16899 = IKatan2WithCheck(IkReal((((r20*sj5*x16894))+(((-1.0)*x16888*x16890))+(((-1.0)*x16889*x16890))+((cj5*r21*x16894)))),IkReal(((((-1.0)*x16891*x16892))+(((-1.0)*x16888*x16896))+(((2.0)*sj3*x16886*x16891))+((x16889*x16895))+(((-1.0)*x16889*x16896))+((sj3*x16887*x16893))+(((-1.0)*x16885*x16892*x16893))+((x16888*x16895)))),IKFAST_ATAN2_MAGTHRESH);
if(!x16899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16898.value)))+(x16899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x16900=IKsin(j4);
IkReal x16901=IKcos(j4);
IkReal x16902=((1.0)*r22);
IkReal x16903=((1.0)*cj2);
IkReal x16904=(cj5*sj3);
IkReal x16905=((1.0)*r21);
IkReal x16906=(r20*sj5);
IkReal x16907=(cj3*cj5);
IkReal x16908=(r21*sj5*x16901);
IkReal x16909=((1.0)*r20*x16901);
evalcond[0]=((((-1.0)*sj5*x16900*x16905))+((cj5*r20*x16900))+(((-1.0)*x16901*x16902)));
evalcond[1]=(((sj3*x16906))+((r21*x16904))+(((-1.0)*x16907*x16909))+(((-1.0)*cj3*x16900*x16902))+(((-1.0)*cj1*sj2))+((cj3*x16908))+(((-1.0)*sj1*x16903)));
evalcond[2]=((((-1.0)*sj3*x16900*x16902))+((sj3*x16908))+(((-1.0)*x16905*x16907))+(((-1.0)*cj3*x16906))+((sj1*sj2))+(((-1.0)*x16904*x16909))+(((-1.0)*cj1*x16903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16910=(cj5*sj4);
IkReal x16911=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x16911))+(((-1.0)*cj4*r02))+((r00*x16910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x16910))+((r11*x16911))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x16911))+(((-1.0)*cj4*r02))+((r00*x16910))))+IKsqr(((((-1.0)*r10*x16910))+((r11*x16911))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x16911))+(((-1.0)*cj4*r02))+((r00*x16910))), ((((-1.0)*r10*x16910))+((r11*x16911))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16912=IKcos(j0);
IkReal x16913=IKsin(j0);
IkReal x16914=((1.0)*cj3);
IkReal x16915=(r02*sj4);
IkReal x16916=(cj4*cj5);
IkReal x16917=((1.0)*sj3);
IkReal x16918=((1.0)*sj2);
IkReal x16919=(r12*sj4);
IkReal x16920=(r01*sj5);
IkReal x16921=((1.0)*sj4);
IkReal x16922=(cj5*r01);
IkReal x16923=(cj4*sj3);
IkReal x16924=(cj5*sj4);
IkReal x16925=(cj5*r11);
IkReal x16926=(r00*sj5);
IkReal x16927=((1.0)*cj2);
IkReal x16928=((0.3922)*cj2);
IkReal x16929=(r11*sj5);
IkReal x16930=(r10*sj5);
IkReal x16931=((0.3922)*sj2);
IkReal x16932=((1.0)*cj4);
IkReal x16933=(cj3*cj4*sj5);
IkReal x16934=(cj1*x16912);
IkReal x16935=(cj1*x16913);
IkReal x16936=(sj1*x16912);
IkReal x16937=(sj1*x16913);
evalcond[0]=((((-1.0)*x16921*x16929))+((r10*x16924))+(((-1.0)*r12*x16932))+x16912);
evalcond[1]=((((-1.0)*x16920*x16921))+((r00*x16924))+(((-1.0)*x16913))+(((-1.0)*r02*x16932)));
evalcond[2]=((((0.0946)*x16922))+(((0.0946)*x16926))+(((0.425)*x16934))+(((-1.0)*px))+(((-0.1091)*x16913))+(((-1.0)*x16931*x16936))+((x16928*x16934)));
evalcond[3]=((((0.0946)*x16925))+(((0.0946)*x16930))+(((0.425)*x16935))+(((0.1091)*x16912))+(((-1.0)*py))+(((-1.0)*x16931*x16937))+((x16928*x16935)));
evalcond[4]=((((-1.0)*r00*x16914*x16916))+((cj2*x16934))+((cj3*cj4*x16920))+(((-1.0)*x16918*x16936))+((sj3*x16926))+((sj3*x16922))+(((-1.0)*x16914*x16915)));
evalcond[5]=(((sj3*x16930))+((cj2*x16935))+((cj3*cj4*x16929))+(((-1.0)*x16918*x16937))+((sj3*x16925))+(((-1.0)*x16914*x16919))+(((-1.0)*r10*x16914*x16916)));
evalcond[6]=((((-1.0)*x16914*x16926))+(((-1.0)*x16914*x16922))+((x16920*x16923))+(((-1.0)*r00*x16916*x16917))+(((-1.0)*x16918*x16934))+(((-1.0)*x16915*x16917))+(((-1.0)*x16927*x16936)));
evalcond[7]=((((-1.0)*x16914*x16930))+(((-1.0)*x16914*x16925))+(((-1.0)*x16918*x16935))+(((-1.0)*r10*x16916*x16917))+(((-1.0)*x16917*x16919))+(((-1.0)*x16927*x16937))+((x16923*x16929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (a81e82293a8c24e81295a4fa8d3f163e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
